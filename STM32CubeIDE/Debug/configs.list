
configs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cf08  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000044c  0800d018  0800d018  0001d018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d464  0800d464  0002034c  2**0
                  CONTENTS
  4 .ARM          00000000  0800d464  0800d464  0002034c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d464  0800d464  0002034c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d464  0800d464  0001d464  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d468  0800d468  0001d468  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000034c  20000000  0800d46c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001280  2000034c  0800d7b8  0002034c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200015cc  0800d7b8  000215cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002034c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012674  00000000  00000000  00020375  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003152  00000000  00000000  000329e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010c8  00000000  00000000  00035b40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f40  00000000  00000000  00036c08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b13b  00000000  00000000  00037b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013fe8  00000000  00000000  00052c83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e6a5  00000000  00000000  00066c6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f5310  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005660  00000000  00000000  000f5360  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000034c 	.word	0x2000034c
 800012c:	00000000 	.word	0x00000000
 8000130:	0800d000 	.word	0x0800d000

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000350 	.word	0x20000350
 800014c:	0800d000 	.word	0x0800d000

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <main>:

/* Measure Frequency */
float frequency = 0;
uint8_t displayData = 0;

int main(void) {
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b090      	sub	sp, #64	; 0x40
 8000f48:	af00      	add	r7, sp, #0
	HAL_Init();
 8000f4a:	f001 fa23 	bl	8002394 <HAL_Init>
	SystemClock_Config();
 8000f4e:	f000 f89d 	bl	800108c <SystemClock_Config>

	MX_GPIO_Init();
 8000f52:	f000 fa69 	bl	8001428 <MX_GPIO_Init>
	MX_TIM2_Init();
 8000f56:	f000 f9c3 	bl	80012e0 <MX_TIM2_Init>
	MX_TIM1_Init();
 8000f5a:	f000 f8f1 	bl	8001140 <MX_TIM1_Init>
	MX_USB_DEVICE_Init();
 8000f5e:	f000 fd6f 	bl	8001a40 <MX_USB_DEVICE_Init>

	TIM1->CCR1 = 50;
 8000f62:	4b10      	ldr	r3, [pc, #64]	; (8000fa4 <main+0x60>)
 8000f64:	2232      	movs	r2, #50	; 0x32
 8000f66:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000f68:	2100      	movs	r1, #0
 8000f6a:	480f      	ldr	r0, [pc, #60]	; (8000fa8 <main+0x64>)
 8000f6c:	f003 ff68 	bl	8004e40 <HAL_TIM_IC_Start_IT>

	while (1) {
		if (displayData == 1) {
 8000f70:	4b0e      	ldr	r3, [pc, #56]	; (8000fac <main+0x68>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d1fb      	bne.n	8000f70 <main+0x2c>
			char buffer[64];
			sprintf(buffer, "%f\r\n", frequency);
 8000f78:	4b0d      	ldr	r3, [pc, #52]	; (8000fb0 <main+0x6c>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f7ff fa53 	bl	8000428 <__aeabi_f2d>
 8000f82:	4602      	mov	r2, r0
 8000f84:	460b      	mov	r3, r1
 8000f86:	4638      	mov	r0, r7
 8000f88:	490a      	ldr	r1, [pc, #40]	; (8000fb4 <main+0x70>)
 8000f8a:	f009 fdc1 	bl	800ab10 <siprintf>
			CDC_Transmit_FS((uint8_t*) buffer, strlen(buffer));
 8000f8e:	463b      	mov	r3, r7
 8000f90:	4618      	mov	r0, r3
 8000f92:	f7ff f8dd 	bl	8000150 <strlen>
 8000f96:	4602      	mov	r2, r0
 8000f98:	463b      	mov	r3, r7
 8000f9a:	4611      	mov	r1, r2
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f000 fe0d 	bl	8001bbc <CDC_Transmit_FS>
		if (displayData == 1) {
 8000fa2:	e7e5      	b.n	8000f70 <main+0x2c>
 8000fa4:	40012c00 	.word	0x40012c00
 8000fa8:	200003b0 	.word	0x200003b0
 8000fac:	2000040c 	.word	0x2000040c
 8000fb0:	20000408 	.word	0x20000408
 8000fb4:	0800d018 	.word	0x0800d018

08000fb8 <HAL_TIM_IC_CaptureCallback>:

		}
	}
}

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]

	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	7f1b      	ldrb	r3, [r3, #28]
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d14e      	bne.n	8001066 <HAL_TIM_IC_CaptureCallback+0xae>

		if (Is_First_Captured == 0) // if the first rising edge is not captured
 8000fc8:	4b29      	ldr	r3, [pc, #164]	; (8001070 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d10d      	bne.n	8000fec <HAL_TIM_IC_CaptureCallback+0x34>
		{
			displayData = 0;
 8000fd0:	4b28      	ldr	r3, [pc, #160]	; (8001074 <HAL_TIM_IC_CaptureCallback+0xbc>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	701a      	strb	r2, [r3, #0]
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	6878      	ldr	r0, [r7, #4]
 8000fda:	f004 faef 	bl	80055bc <HAL_TIM_ReadCapturedValue>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	4a25      	ldr	r2, [pc, #148]	; (8001078 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8000fe2:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 8000fe4:	4b22      	ldr	r3, [pc, #136]	; (8001070 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	601a      	str	r2, [r3, #0]
			Is_First_Captured = 0; // set it back to false

			displayData = 1;
		}
	}
}
 8000fea:	e03c      	b.n	8001066 <HAL_TIM_IC_CaptureCallback+0xae>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read second value
 8000fec:	2100      	movs	r1, #0
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f004 fae4 	bl	80055bc <HAL_TIM_ReadCapturedValue>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	4a21      	ldr	r2, [pc, #132]	; (800107c <HAL_TIM_IC_CaptureCallback+0xc4>)
 8000ff8:	6013      	str	r3, [r2, #0]
			if (IC_Val2 > IC_Val1) {
 8000ffa:	4b20      	ldr	r3, [pc, #128]	; (800107c <HAL_TIM_IC_CaptureCallback+0xc4>)
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	4b1e      	ldr	r3, [pc, #120]	; (8001078 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	429a      	cmp	r2, r3
 8001004:	d907      	bls.n	8001016 <HAL_TIM_IC_CaptureCallback+0x5e>
				Difference = IC_Val2 - IC_Val1;
 8001006:	4b1d      	ldr	r3, [pc, #116]	; (800107c <HAL_TIM_IC_CaptureCallback+0xc4>)
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	4b1b      	ldr	r3, [pc, #108]	; (8001078 <HAL_TIM_IC_CaptureCallback+0xc0>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	1ad3      	subs	r3, r2, r3
 8001010:	4a1b      	ldr	r2, [pc, #108]	; (8001080 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8001012:	6013      	str	r3, [r2, #0]
 8001014:	e00d      	b.n	8001032 <HAL_TIM_IC_CaptureCallback+0x7a>
			else if (IC_Val1 > IC_Val2) {
 8001016:	4b18      	ldr	r3, [pc, #96]	; (8001078 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	4b18      	ldr	r3, [pc, #96]	; (800107c <HAL_TIM_IC_CaptureCallback+0xc4>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	429a      	cmp	r2, r3
 8001020:	d907      	bls.n	8001032 <HAL_TIM_IC_CaptureCallback+0x7a>
				Difference = (0xffffffff - IC_Val1) + IC_Val2;
 8001022:	4b16      	ldr	r3, [pc, #88]	; (800107c <HAL_TIM_IC_CaptureCallback+0xc4>)
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	4b14      	ldr	r3, [pc, #80]	; (8001078 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	1ad3      	subs	r3, r2, r3
 800102c:	3b01      	subs	r3, #1
 800102e:	4a14      	ldr	r2, [pc, #80]	; (8001080 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8001030:	6013      	str	r3, [r2, #0]
			float refClock = TIMCLOCK / (PRESCALAR);
 8001032:	4b14      	ldr	r3, [pc, #80]	; (8001084 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8001034:	60fb      	str	r3, [r7, #12]
			frequency = refClock / Difference;
 8001036:	4b12      	ldr	r3, [pc, #72]	; (8001080 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4618      	mov	r0, r3
 800103c:	f7ff fdda 	bl	8000bf4 <__aeabi_ui2f>
 8001040:	4603      	mov	r3, r0
 8001042:	4619      	mov	r1, r3
 8001044:	68f8      	ldr	r0, [r7, #12]
 8001046:	f7ff fee1 	bl	8000e0c <__aeabi_fdiv>
 800104a:	4603      	mov	r3, r0
 800104c:	461a      	mov	r2, r3
 800104e:	4b0e      	ldr	r3, [pc, #56]	; (8001088 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8001050:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	2200      	movs	r2, #0
 8001058:	625a      	str	r2, [r3, #36]	; 0x24
			Is_First_Captured = 0; // set it back to false
 800105a:	4b05      	ldr	r3, [pc, #20]	; (8001070 <HAL_TIM_IC_CaptureCallback+0xb8>)
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
			displayData = 1;
 8001060:	4b04      	ldr	r3, [pc, #16]	; (8001074 <HAL_TIM_IC_CaptureCallback+0xbc>)
 8001062:	2201      	movs	r2, #1
 8001064:	701a      	strb	r2, [r3, #0]
}
 8001066:	bf00      	nop
 8001068:	3710      	adds	r7, #16
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	20000404 	.word	0x20000404
 8001074:	2000040c 	.word	0x2000040c
 8001078:	200003f8 	.word	0x200003f8
 800107c:	200003fc 	.word	0x200003fc
 8001080:	20000400 	.word	0x20000400
 8001084:	4c895440 	.word	0x4c895440
 8001088:	20000408 	.word	0x20000408

0800108c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800108c:	b580      	push	{r7, lr}
 800108e:	b094      	sub	sp, #80	; 0x50
 8001090:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001092:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001096:	2228      	movs	r2, #40	; 0x28
 8001098:	2100      	movs	r1, #0
 800109a:	4618      	mov	r0, r3
 800109c:	f009 f8d0 	bl	800a240 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80010a0:	f107 0314 	add.w	r3, r7, #20
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	605a      	str	r2, [r3, #4]
 80010aa:	609a      	str	r2, [r3, #8]
 80010ac:	60da      	str	r2, [r3, #12]
 80010ae:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80010b0:	1d3b      	adds	r3, r7, #4
 80010b2:	2200      	movs	r2, #0
 80010b4:	601a      	str	r2, [r3, #0]
 80010b6:	605a      	str	r2, [r3, #4]
 80010b8:	609a      	str	r2, [r3, #8]
 80010ba:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010bc:	2301      	movs	r3, #1
 80010be:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010c4:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80010c6:	2300      	movs	r3, #0
 80010c8:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010ca:	2301      	movs	r3, #1
 80010cc:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010ce:	2302      	movs	r3, #2
 80010d0:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010d6:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80010d8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80010dc:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80010de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010e2:	4618      	mov	r0, r3
 80010e4:	f003 f90e 	bl	8004304 <HAL_RCC_OscConfig>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <SystemClock_Config+0x66>
		Error_Handler();
 80010ee:	f000 f9df 	bl	80014b0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80010f2:	230f      	movs	r3, #15
 80010f4:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010f6:	2302      	movs	r3, #2
 80010f8:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010fa:	2300      	movs	r3, #0
 80010fc:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001102:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001104:	2300      	movs	r3, #0
 8001106:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001108:	f107 0314 	add.w	r3, r7, #20
 800110c:	2102      	movs	r1, #2
 800110e:	4618      	mov	r0, r3
 8001110:	f003 fb7a 	bl	8004808 <HAL_RCC_ClockConfig>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <SystemClock_Config+0x92>
		Error_Handler();
 800111a:	f000 f9c9 	bl	80014b0 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800111e:	2310      	movs	r3, #16
 8001120:	607b      	str	r3, [r7, #4]
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8001122:	2300      	movs	r3, #0
 8001124:	613b      	str	r3, [r7, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8001126:	1d3b      	adds	r3, r7, #4
 8001128:	4618      	mov	r0, r3
 800112a:	f003 fcd3 	bl	8004ad4 <HAL_RCCEx_PeriphCLKConfig>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <SystemClock_Config+0xac>
		Error_Handler();
 8001134:	f000 f9bc 	bl	80014b0 <Error_Handler>
	}
}
 8001138:	bf00      	nop
 800113a:	3750      	adds	r7, #80	; 0x50
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}

08001140 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8001140:	b580      	push	{r7, lr}
 8001142:	b09a      	sub	sp, #104	; 0x68
 8001144:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001146:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	605a      	str	r2, [r3, #4]
 8001150:	609a      	str	r2, [r3, #8]
 8001152:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001154:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 800115e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001162:	2200      	movs	r2, #0
 8001164:	601a      	str	r2, [r3, #0]
 8001166:	605a      	str	r2, [r3, #4]
 8001168:	609a      	str	r2, [r3, #8]
 800116a:	60da      	str	r2, [r3, #12]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800116c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	605a      	str	r2, [r3, #4]
 8001176:	609a      	str	r2, [r3, #8]
 8001178:	60da      	str	r2, [r3, #12]
 800117a:	611a      	str	r2, [r3, #16]
 800117c:	615a      	str	r2, [r3, #20]
 800117e:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8001180:	1d3b      	adds	r3, r7, #4
 8001182:	2220      	movs	r2, #32
 8001184:	2100      	movs	r1, #0
 8001186:	4618      	mov	r0, r3
 8001188:	f009 f85a 	bl	800a240 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 800118c:	4b52      	ldr	r3, [pc, #328]	; (80012d8 <MX_TIM1_Init+0x198>)
 800118e:	4a53      	ldr	r2, [pc, #332]	; (80012dc <MX_TIM1_Init+0x19c>)
 8001190:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8001192:	4b51      	ldr	r3, [pc, #324]	; (80012d8 <MX_TIM1_Init+0x198>)
 8001194:	2200      	movs	r2, #0
 8001196:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001198:	4b4f      	ldr	r3, [pc, #316]	; (80012d8 <MX_TIM1_Init+0x198>)
 800119a:	2200      	movs	r2, #0
 800119c:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 800119e:	4b4e      	ldr	r3, [pc, #312]	; (80012d8 <MX_TIM1_Init+0x198>)
 80011a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011a4:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011a6:	4b4c      	ldr	r3, [pc, #304]	; (80012d8 <MX_TIM1_Init+0x198>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80011ac:	4b4a      	ldr	r3, [pc, #296]	; (80012d8 <MX_TIM1_Init+0x198>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011b2:	4b49      	ldr	r3, [pc, #292]	; (80012d8 <MX_TIM1_Init+0x198>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 80011b8:	4847      	ldr	r0, [pc, #284]	; (80012d8 <MX_TIM1_Init+0x198>)
 80011ba:	f003 fd41 	bl	8004c40 <HAL_TIM_Base_Init>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <MX_TIM1_Init+0x88>
		Error_Handler();
 80011c4:	f000 f974 	bl	80014b0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011cc:	65bb      	str	r3, [r7, #88]	; 0x58
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 80011ce:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80011d2:	4619      	mov	r1, r3
 80011d4:	4840      	ldr	r0, [pc, #256]	; (80012d8 <MX_TIM1_Init+0x198>)
 80011d6:	f004 f92d 	bl	8005434 <HAL_TIM_ConfigClockSource>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_TIM1_Init+0xa4>
		Error_Handler();
 80011e0:	f000 f966 	bl	80014b0 <Error_Handler>
	}
	if (HAL_TIM_IC_Init(&htim1) != HAL_OK) {
 80011e4:	483c      	ldr	r0, [pc, #240]	; (80012d8 <MX_TIM1_Init+0x198>)
 80011e6:	f003 fdd2 	bl	8004d8e <HAL_TIM_IC_Init>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <MX_TIM1_Init+0xb4>
		Error_Handler();
 80011f0:	f000 f95e 	bl	80014b0 <Error_Handler>
	}
	if (HAL_TIM_OC_Init(&htim1) != HAL_OK) {
 80011f4:	4838      	ldr	r0, [pc, #224]	; (80012d8 <MX_TIM1_Init+0x198>)
 80011f6:	f003 fd72 	bl	8004cde <HAL_TIM_OC_Init>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_TIM1_Init+0xc4>
		Error_Handler();
 8001200:	f000 f956 	bl	80014b0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001204:	2300      	movs	r3, #0
 8001206:	653b      	str	r3, [r7, #80]	; 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001208:	2300      	movs	r3, #0
 800120a:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 800120c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001210:	4619      	mov	r1, r3
 8001212:	4831      	ldr	r0, [pc, #196]	; (80012d8 <MX_TIM1_Init+0x198>)
 8001214:	f004 fdec 	bl	8005df0 <HAL_TIMEx_MasterConfigSynchronization>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <MX_TIM1_Init+0xe2>
			!= HAL_OK) {
		Error_Handler();
 800121e:	f000 f947 	bl	80014b0 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001222:	2300      	movs	r3, #0
 8001224:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001226:	2301      	movs	r3, #1
 8001228:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800122a:	2300      	movs	r3, #0
 800122c:	64bb      	str	r3, [r7, #72]	; 0x48
	sConfigIC.ICFilter = 0;
 800122e:	2300      	movs	r3, #0
 8001230:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 8001232:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001236:	2200      	movs	r2, #0
 8001238:	4619      	mov	r1, r3
 800123a:	4827      	ldr	r0, [pc, #156]	; (80012d8 <MX_TIM1_Init+0x198>)
 800123c:	f004 f866 	bl	800530c <HAL_TIM_IC_ConfigChannel>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_TIM1_Init+0x10a>
		Error_Handler();
 8001246:	f000 f933 	bl	80014b0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800124a:	2300      	movs	r3, #0
 800124c:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 800124e:	2300      	movs	r3, #0
 8001250:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001252:	2300      	movs	r3, #0
 8001254:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001256:	2300      	movs	r3, #0
 8001258:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800125a:	2300      	movs	r3, #0
 800125c:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800125e:	2300      	movs	r3, #0
 8001260:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001262:	2300      	movs	r3, #0
 8001264:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) {
 8001266:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800126a:	2208      	movs	r2, #8
 800126c:	4619      	mov	r1, r3
 800126e:	481a      	ldr	r0, [pc, #104]	; (80012d8 <MX_TIM1_Init+0x198>)
 8001270:	f003 fff4 	bl	800525c <HAL_TIM_OC_ConfigChannel>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <MX_TIM1_Init+0x13e>
		Error_Handler();
 800127a:	f000 f919 	bl	80014b0 <Error_Handler>
	}
	if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK) {
 800127e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001282:	220c      	movs	r2, #12
 8001284:	4619      	mov	r1, r3
 8001286:	4814      	ldr	r0, [pc, #80]	; (80012d8 <MX_TIM1_Init+0x198>)
 8001288:	f003 ffe8 	bl	800525c <HAL_TIM_OC_ConfigChannel>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_TIM1_Init+0x156>
		Error_Handler();
 8001292:	f000 f90d 	bl	80014b0 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001296:	2300      	movs	r3, #0
 8001298:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800129a:	2300      	movs	r3, #0
 800129c:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800129e:	2300      	movs	r3, #0
 80012a0:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 80012a2:	2300      	movs	r3, #0
 80012a4:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80012a6:	2300      	movs	r3, #0
 80012a8:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80012aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012ae:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80012b0:	2300      	movs	r3, #0
 80012b2:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 80012b4:	1d3b      	adds	r3, r7, #4
 80012b6:	4619      	mov	r1, r3
 80012b8:	4807      	ldr	r0, [pc, #28]	; (80012d8 <MX_TIM1_Init+0x198>)
 80012ba:	f004 fdf7 	bl	8005eac <HAL_TIMEx_ConfigBreakDeadTime>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_TIM1_Init+0x188>
			!= HAL_OK) {
		Error_Handler();
 80012c4:	f000 f8f4 	bl	80014b0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 80012c8:	4803      	ldr	r0, [pc, #12]	; (80012d8 <MX_TIM1_Init+0x198>)
 80012ca:	f000 f9df 	bl	800168c <HAL_TIM_MspPostInit>

}
 80012ce:	bf00      	nop
 80012d0:	3768      	adds	r7, #104	; 0x68
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	20000368 	.word	0x20000368
 80012dc:	40012c00 	.word	0x40012c00

080012e0 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b092      	sub	sp, #72	; 0x48
 80012e4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80012e6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	605a      	str	r2, [r3, #4]
 80012f0:	609a      	str	r2, [r3, #8]
 80012f2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80012f4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 80012fe:	f107 0320 	add.w	r3, r7, #32
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	605a      	str	r2, [r3, #4]
 8001308:	609a      	str	r2, [r3, #8]
 800130a:	60da      	str	r2, [r3, #12]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800130c:	1d3b      	adds	r3, r7, #4
 800130e:	2200      	movs	r2, #0
 8001310:	601a      	str	r2, [r3, #0]
 8001312:	605a      	str	r2, [r3, #4]
 8001314:	609a      	str	r2, [r3, #8]
 8001316:	60da      	str	r2, [r3, #12]
 8001318:	611a      	str	r2, [r3, #16]
 800131a:	615a      	str	r2, [r3, #20]
 800131c:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 800131e:	4b41      	ldr	r3, [pc, #260]	; (8001424 <MX_TIM2_Init+0x144>)
 8001320:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001324:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8001326:	4b3f      	ldr	r3, [pc, #252]	; (8001424 <MX_TIM2_Init+0x144>)
 8001328:	2200      	movs	r2, #0
 800132a:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800132c:	4b3d      	ldr	r3, [pc, #244]	; (8001424 <MX_TIM2_Init+0x144>)
 800132e:	2200      	movs	r2, #0
 8001330:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65535;
 8001332:	4b3c      	ldr	r3, [pc, #240]	; (8001424 <MX_TIM2_Init+0x144>)
 8001334:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001338:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800133a:	4b3a      	ldr	r3, [pc, #232]	; (8001424 <MX_TIM2_Init+0x144>)
 800133c:	2200      	movs	r2, #0
 800133e:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001340:	4b38      	ldr	r3, [pc, #224]	; (8001424 <MX_TIM2_Init+0x144>)
 8001342:	2200      	movs	r2, #0
 8001344:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8001346:	4837      	ldr	r0, [pc, #220]	; (8001424 <MX_TIM2_Init+0x144>)
 8001348:	f003 fc7a 	bl	8004c40 <HAL_TIM_Base_Init>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <MX_TIM2_Init+0x76>
		Error_Handler();
 8001352:	f000 f8ad 	bl	80014b0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001356:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800135a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 800135c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001360:	4619      	mov	r1, r3
 8001362:	4830      	ldr	r0, [pc, #192]	; (8001424 <MX_TIM2_Init+0x144>)
 8001364:	f004 f866 	bl	8005434 <HAL_TIM_ConfigClockSource>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <MX_TIM2_Init+0x92>
		Error_Handler();
 800136e:	f000 f89f 	bl	80014b0 <Error_Handler>
	}
	if (HAL_TIM_IC_Init(&htim2) != HAL_OK) {
 8001372:	482c      	ldr	r0, [pc, #176]	; (8001424 <MX_TIM2_Init+0x144>)
 8001374:	f003 fd0b 	bl	8004d8e <HAL_TIM_IC_Init>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <MX_TIM2_Init+0xa2>
		Error_Handler();
 800137e:	f000 f897 	bl	80014b0 <Error_Handler>
	}
	if (HAL_TIM_OC_Init(&htim2) != HAL_OK) {
 8001382:	4828      	ldr	r0, [pc, #160]	; (8001424 <MX_TIM2_Init+0x144>)
 8001384:	f003 fcab 	bl	8004cde <HAL_TIM_OC_Init>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <MX_TIM2_Init+0xb2>
		Error_Handler();
 800138e:	f000 f88f 	bl	80014b0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001392:	2300      	movs	r3, #0
 8001394:	633b      	str	r3, [r7, #48]	; 0x30
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001396:	2300      	movs	r3, #0
 8001398:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 800139a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800139e:	4619      	mov	r1, r3
 80013a0:	4820      	ldr	r0, [pc, #128]	; (8001424 <MX_TIM2_Init+0x144>)
 80013a2:	f004 fd25 	bl	8005df0 <HAL_TIMEx_MasterConfigSynchronization>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_TIM2_Init+0xd0>
			!= HAL_OK) {
		Error_Handler();
 80013ac:	f000 f880 	bl	80014b0 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80013b0:	2300      	movs	r3, #0
 80013b2:	623b      	str	r3, [r7, #32]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80013b4:	2301      	movs	r3, #1
 80013b6:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80013b8:	2300      	movs	r3, #0
 80013ba:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigIC.ICFilter = 0;
 80013bc:	2300      	movs	r3, #0
 80013be:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 80013c0:	f107 0320 	add.w	r3, r7, #32
 80013c4:	2200      	movs	r2, #0
 80013c6:	4619      	mov	r1, r3
 80013c8:	4816      	ldr	r0, [pc, #88]	; (8001424 <MX_TIM2_Init+0x144>)
 80013ca:	f003 ff9f 	bl	800530c <HAL_TIM_IC_ConfigChannel>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <MX_TIM2_Init+0xf8>
		Error_Handler();
 80013d4:	f000 f86c 	bl	80014b0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80013d8:	2300      	movs	r3, #0
 80013da:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 80013dc:	2300      	movs	r3, #0
 80013de:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013e0:	2300      	movs	r3, #0
 80013e2:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013e4:	2300      	movs	r3, #0
 80013e6:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) {
 80013e8:	1d3b      	adds	r3, r7, #4
 80013ea:	2208      	movs	r2, #8
 80013ec:	4619      	mov	r1, r3
 80013ee:	480d      	ldr	r0, [pc, #52]	; (8001424 <MX_TIM2_Init+0x144>)
 80013f0:	f003 ff34 	bl	800525c <HAL_TIM_OC_ConfigChannel>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <MX_TIM2_Init+0x11e>
		Error_Handler();
 80013fa:	f000 f859 	bl	80014b0 <Error_Handler>
	}
	if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK) {
 80013fe:	1d3b      	adds	r3, r7, #4
 8001400:	220c      	movs	r2, #12
 8001402:	4619      	mov	r1, r3
 8001404:	4807      	ldr	r0, [pc, #28]	; (8001424 <MX_TIM2_Init+0x144>)
 8001406:	f003 ff29 	bl	800525c <HAL_TIM_OC_ConfigChannel>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_TIM2_Init+0x134>
		Error_Handler();
 8001410:	f000 f84e 	bl	80014b0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8001414:	4803      	ldr	r0, [pc, #12]	; (8001424 <MX_TIM2_Init+0x144>)
 8001416:	f000 f939 	bl	800168c <HAL_TIM_MspPostInit>

}
 800141a:	bf00      	nop
 800141c:	3748      	adds	r7, #72	; 0x48
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	200003b0 	.word	0x200003b0

08001428 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001428:	b580      	push	{r7, lr}
 800142a:	b088      	sub	sp, #32
 800142c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800142e:	f107 0310 	add.w	r3, r7, #16
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	605a      	str	r2, [r3, #4]
 8001438:	609a      	str	r2, [r3, #8]
 800143a:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800143c:	4b1a      	ldr	r3, [pc, #104]	; (80014a8 <MX_GPIO_Init+0x80>)
 800143e:	699b      	ldr	r3, [r3, #24]
 8001440:	4a19      	ldr	r2, [pc, #100]	; (80014a8 <MX_GPIO_Init+0x80>)
 8001442:	f043 0320 	orr.w	r3, r3, #32
 8001446:	6193      	str	r3, [r2, #24]
 8001448:	4b17      	ldr	r3, [pc, #92]	; (80014a8 <MX_GPIO_Init+0x80>)
 800144a:	699b      	ldr	r3, [r3, #24]
 800144c:	f003 0320 	and.w	r3, r3, #32
 8001450:	60fb      	str	r3, [r7, #12]
 8001452:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001454:	4b14      	ldr	r3, [pc, #80]	; (80014a8 <MX_GPIO_Init+0x80>)
 8001456:	699b      	ldr	r3, [r3, #24]
 8001458:	4a13      	ldr	r2, [pc, #76]	; (80014a8 <MX_GPIO_Init+0x80>)
 800145a:	f043 0304 	orr.w	r3, r3, #4
 800145e:	6193      	str	r3, [r2, #24]
 8001460:	4b11      	ldr	r3, [pc, #68]	; (80014a8 <MX_GPIO_Init+0x80>)
 8001462:	699b      	ldr	r3, [r3, #24]
 8001464:	f003 0304 	and.w	r3, r3, #4
 8001468:	60bb      	str	r3, [r7, #8]
 800146a:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800146c:	4b0e      	ldr	r3, [pc, #56]	; (80014a8 <MX_GPIO_Init+0x80>)
 800146e:	699b      	ldr	r3, [r3, #24]
 8001470:	4a0d      	ldr	r2, [pc, #52]	; (80014a8 <MX_GPIO_Init+0x80>)
 8001472:	f043 0308 	orr.w	r3, r3, #8
 8001476:	6193      	str	r3, [r2, #24]
 8001478:	4b0b      	ldr	r3, [pc, #44]	; (80014a8 <MX_GPIO_Init+0x80>)
 800147a:	699b      	ldr	r3, [r3, #24]
 800147c:	f003 0308 	and.w	r3, r3, #8
 8001480:	607b      	str	r3, [r7, #4]
 8001482:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin : A9_INPUT_Pin */
	GPIO_InitStruct.Pin = A9_INPUT_Pin;
 8001484:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001488:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800148a:	2300      	movs	r3, #0
 800148c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148e:	2300      	movs	r3, #0
 8001490:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(A9_INPUT_GPIO_Port, &GPIO_InitStruct);
 8001492:	f107 0310 	add.w	r3, r7, #16
 8001496:	4619      	mov	r1, r3
 8001498:	4804      	ldr	r0, [pc, #16]	; (80014ac <MX_GPIO_Init+0x84>)
 800149a:	f001 f8eb 	bl	8002674 <HAL_GPIO_Init>

}
 800149e:	bf00      	nop
 80014a0:	3720      	adds	r7, #32
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	40021000 	.word	0x40021000
 80014ac:	40010800 	.word	0x40010800

080014b0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014b4:	b672      	cpsid	i
}
 80014b6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80014b8:	e7fe      	b.n	80014b8 <Error_Handler+0x8>
	...

080014bc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80014c2:	4b1d      	ldr	r3, [pc, #116]	; (8001538 <HAL_MspInit+0x7c>)
 80014c4:	699b      	ldr	r3, [r3, #24]
 80014c6:	4a1c      	ldr	r2, [pc, #112]	; (8001538 <HAL_MspInit+0x7c>)
 80014c8:	f043 0301 	orr.w	r3, r3, #1
 80014cc:	6193      	str	r3, [r2, #24]
 80014ce:	4b1a      	ldr	r3, [pc, #104]	; (8001538 <HAL_MspInit+0x7c>)
 80014d0:	699b      	ldr	r3, [r3, #24]
 80014d2:	f003 0301 	and.w	r3, r3, #1
 80014d6:	60bb      	str	r3, [r7, #8]
 80014d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014da:	4b17      	ldr	r3, [pc, #92]	; (8001538 <HAL_MspInit+0x7c>)
 80014dc:	69db      	ldr	r3, [r3, #28]
 80014de:	4a16      	ldr	r2, [pc, #88]	; (8001538 <HAL_MspInit+0x7c>)
 80014e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014e4:	61d3      	str	r3, [r2, #28]
 80014e6:	4b14      	ldr	r3, [pc, #80]	; (8001538 <HAL_MspInit+0x7c>)
 80014e8:	69db      	ldr	r3, [r3, #28]
 80014ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ee:	607b      	str	r3, [r7, #4]
 80014f0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80014f2:	2200      	movs	r2, #0
 80014f4:	2100      	movs	r1, #0
 80014f6:	2005      	movs	r0, #5
 80014f8:	f001 f885 	bl	8002606 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80014fc:	2005      	movs	r0, #5
 80014fe:	f001 f89e 	bl	800263e <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001502:	2200      	movs	r2, #0
 8001504:	2100      	movs	r1, #0
 8001506:	2005      	movs	r0, #5
 8001508:	f001 f87d 	bl	8002606 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800150c:	2005      	movs	r0, #5
 800150e:	f001 f896 	bl	800263e <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001512:	4b0a      	ldr	r3, [pc, #40]	; (800153c <HAL_MspInit+0x80>)
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	60fb      	str	r3, [r7, #12]
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800151e:	60fb      	str	r3, [r7, #12]
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001526:	60fb      	str	r3, [r7, #12]
 8001528:	4a04      	ldr	r2, [pc, #16]	; (800153c <HAL_MspInit+0x80>)
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800152e:	bf00      	nop
 8001530:	3710      	adds	r7, #16
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	40021000 	.word	0x40021000
 800153c:	40010000 	.word	0x40010000

08001540 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b08c      	sub	sp, #48	; 0x30
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001548:	f107 031c 	add.w	r3, r7, #28
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	605a      	str	r2, [r3, #4]
 8001552:	609a      	str	r2, [r3, #8]
 8001554:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a48      	ldr	r2, [pc, #288]	; (800167c <HAL_TIM_Base_MspInit+0x13c>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d157      	bne.n	8001610 <HAL_TIM_Base_MspInit+0xd0>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001560:	4b47      	ldr	r3, [pc, #284]	; (8001680 <HAL_TIM_Base_MspInit+0x140>)
 8001562:	699b      	ldr	r3, [r3, #24]
 8001564:	4a46      	ldr	r2, [pc, #280]	; (8001680 <HAL_TIM_Base_MspInit+0x140>)
 8001566:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800156a:	6193      	str	r3, [r2, #24]
 800156c:	4b44      	ldr	r3, [pc, #272]	; (8001680 <HAL_TIM_Base_MspInit+0x140>)
 800156e:	699b      	ldr	r3, [r3, #24]
 8001570:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001574:	61bb      	str	r3, [r7, #24]
 8001576:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001578:	4b41      	ldr	r3, [pc, #260]	; (8001680 <HAL_TIM_Base_MspInit+0x140>)
 800157a:	699b      	ldr	r3, [r3, #24]
 800157c:	4a40      	ldr	r2, [pc, #256]	; (8001680 <HAL_TIM_Base_MspInit+0x140>)
 800157e:	f043 0304 	orr.w	r3, r3, #4
 8001582:	6193      	str	r3, [r2, #24]
 8001584:	4b3e      	ldr	r3, [pc, #248]	; (8001680 <HAL_TIM_Base_MspInit+0x140>)
 8001586:	699b      	ldr	r3, [r3, #24]
 8001588:	f003 0304 	and.w	r3, r3, #4
 800158c:	617b      	str	r3, [r7, #20]
 800158e:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = A8_TRIG_IN_Pin;
 8001590:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001594:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001596:	2300      	movs	r3, #0
 8001598:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159a:	2300      	movs	r3, #0
 800159c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(A8_TRIG_IN_GPIO_Port, &GPIO_InitStruct);
 800159e:	f107 031c 	add.w	r3, r7, #28
 80015a2:	4619      	mov	r1, r3
 80015a4:	4837      	ldr	r0, [pc, #220]	; (8001684 <HAL_TIM_Base_MspInit+0x144>)
 80015a6:	f001 f865 	bl	8002674 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM1_PARTIAL();
 80015aa:	4b37      	ldr	r3, [pc, #220]	; (8001688 <HAL_TIM_Base_MspInit+0x148>)
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015b2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80015b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015ba:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80015be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015c8:	4a2f      	ldr	r2, [pc, #188]	; (8001688 <HAL_TIM_Base_MspInit+0x148>)
 80015ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015cc:	6053      	str	r3, [r2, #4]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 80015ce:	2200      	movs	r2, #0
 80015d0:	2100      	movs	r1, #0
 80015d2:	2018      	movs	r0, #24
 80015d4:	f001 f817 	bl	8002606 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 80015d8:	2018      	movs	r0, #24
 80015da:	f001 f830 	bl	800263e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80015de:	2200      	movs	r2, #0
 80015e0:	2100      	movs	r1, #0
 80015e2:	2019      	movs	r0, #25
 80015e4:	f001 f80f 	bl	8002606 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80015e8:	2019      	movs	r0, #25
 80015ea:	f001 f828 	bl	800263e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 80015ee:	2200      	movs	r2, #0
 80015f0:	2100      	movs	r1, #0
 80015f2:	201a      	movs	r0, #26
 80015f4:	f001 f807 	bl	8002606 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 80015f8:	201a      	movs	r0, #26
 80015fa:	f001 f820 	bl	800263e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80015fe:	2200      	movs	r2, #0
 8001600:	2100      	movs	r1, #0
 8001602:	201b      	movs	r0, #27
 8001604:	f000 ffff 	bl	8002606 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001608:	201b      	movs	r0, #27
 800160a:	f001 f818 	bl	800263e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800160e:	e030      	b.n	8001672 <HAL_TIM_Base_MspInit+0x132>
  else if(htim_base->Instance==TIM2)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001618:	d12b      	bne.n	8001672 <HAL_TIM_Base_MspInit+0x132>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800161a:	4b19      	ldr	r3, [pc, #100]	; (8001680 <HAL_TIM_Base_MspInit+0x140>)
 800161c:	69db      	ldr	r3, [r3, #28]
 800161e:	4a18      	ldr	r2, [pc, #96]	; (8001680 <HAL_TIM_Base_MspInit+0x140>)
 8001620:	f043 0301 	orr.w	r3, r3, #1
 8001624:	61d3      	str	r3, [r2, #28]
 8001626:	4b16      	ldr	r3, [pc, #88]	; (8001680 <HAL_TIM_Base_MspInit+0x140>)
 8001628:	69db      	ldr	r3, [r3, #28]
 800162a:	f003 0301 	and.w	r3, r3, #1
 800162e:	613b      	str	r3, [r7, #16]
 8001630:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001632:	4b13      	ldr	r3, [pc, #76]	; (8001680 <HAL_TIM_Base_MspInit+0x140>)
 8001634:	699b      	ldr	r3, [r3, #24]
 8001636:	4a12      	ldr	r2, [pc, #72]	; (8001680 <HAL_TIM_Base_MspInit+0x140>)
 8001638:	f043 0304 	orr.w	r3, r3, #4
 800163c:	6193      	str	r3, [r2, #24]
 800163e:	4b10      	ldr	r3, [pc, #64]	; (8001680 <HAL_TIM_Base_MspInit+0x140>)
 8001640:	699b      	ldr	r3, [r3, #24]
 8001642:	f003 0304 	and.w	r3, r3, #4
 8001646:	60fb      	str	r3, [r7, #12]
 8001648:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = A0_TRIG_IN_TIM2_Pin;
 800164a:	2301      	movs	r3, #1
 800164c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800164e:	2300      	movs	r3, #0
 8001650:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001652:	2300      	movs	r3, #0
 8001654:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(A0_TRIG_IN_TIM2_GPIO_Port, &GPIO_InitStruct);
 8001656:	f107 031c 	add.w	r3, r7, #28
 800165a:	4619      	mov	r1, r3
 800165c:	4809      	ldr	r0, [pc, #36]	; (8001684 <HAL_TIM_Base_MspInit+0x144>)
 800165e:	f001 f809 	bl	8002674 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001662:	2200      	movs	r2, #0
 8001664:	2100      	movs	r1, #0
 8001666:	201c      	movs	r0, #28
 8001668:	f000 ffcd 	bl	8002606 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800166c:	201c      	movs	r0, #28
 800166e:	f000 ffe6 	bl	800263e <HAL_NVIC_EnableIRQ>
}
 8001672:	bf00      	nop
 8001674:	3730      	adds	r7, #48	; 0x30
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	40012c00 	.word	0x40012c00
 8001680:	40021000 	.word	0x40021000
 8001684:	40010800 	.word	0x40010800
 8001688:	40010000 	.word	0x40010000

0800168c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b08a      	sub	sp, #40	; 0x28
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001694:	f107 0314 	add.w	r3, r7, #20
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	605a      	str	r2, [r3, #4]
 800169e:	609a      	str	r2, [r3, #8]
 80016a0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a34      	ldr	r2, [pc, #208]	; (8001778 <HAL_TIM_MspPostInit+0xec>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d143      	bne.n	8001734 <HAL_TIM_MspPostInit+0xa8>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ac:	4b33      	ldr	r3, [pc, #204]	; (800177c <HAL_TIM_MspPostInit+0xf0>)
 80016ae:	699b      	ldr	r3, [r3, #24]
 80016b0:	4a32      	ldr	r2, [pc, #200]	; (800177c <HAL_TIM_MspPostInit+0xf0>)
 80016b2:	f043 0308 	orr.w	r3, r3, #8
 80016b6:	6193      	str	r3, [r2, #24]
 80016b8:	4b30      	ldr	r3, [pc, #192]	; (800177c <HAL_TIM_MspPostInit+0xf0>)
 80016ba:	699b      	ldr	r3, [r3, #24]
 80016bc:	f003 0308 	and.w	r3, r3, #8
 80016c0:	613b      	str	r3, [r7, #16]
 80016c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c4:	4b2d      	ldr	r3, [pc, #180]	; (800177c <HAL_TIM_MspPostInit+0xf0>)
 80016c6:	699b      	ldr	r3, [r3, #24]
 80016c8:	4a2c      	ldr	r2, [pc, #176]	; (800177c <HAL_TIM_MspPostInit+0xf0>)
 80016ca:	f043 0304 	orr.w	r3, r3, #4
 80016ce:	6193      	str	r3, [r2, #24]
 80016d0:	4b2a      	ldr	r3, [pc, #168]	; (800177c <HAL_TIM_MspPostInit+0xf0>)
 80016d2:	699b      	ldr	r3, [r3, #24]
 80016d4:	f003 0304 	and.w	r3, r3, #4
 80016d8:	60fb      	str	r3, [r7, #12]
 80016da:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PB1     ------> TIM1_CH3N
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80016dc:	2302      	movs	r3, #2
 80016de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e0:	2302      	movs	r3, #2
 80016e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e4:	2302      	movs	r3, #2
 80016e6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016e8:	f107 0314 	add.w	r3, r7, #20
 80016ec:	4619      	mov	r1, r3
 80016ee:	4824      	ldr	r0, [pc, #144]	; (8001780 <HAL_TIM_MspPostInit+0xf4>)
 80016f0:	f000 ffc0 	bl	8002674 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80016f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fa:	2302      	movs	r3, #2
 80016fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016fe:	2302      	movs	r3, #2
 8001700:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001702:	f107 0314 	add.w	r3, r7, #20
 8001706:	4619      	mov	r1, r3
 8001708:	481e      	ldr	r0, [pc, #120]	; (8001784 <HAL_TIM_MspPostInit+0xf8>)
 800170a:	f000 ffb3 	bl	8002674 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM1_PARTIAL();
 800170e:	4b1e      	ldr	r3, [pc, #120]	; (8001788 <HAL_TIM_MspPostInit+0xfc>)
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	627b      	str	r3, [r7, #36]	; 0x24
 8001714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001716:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800171a:	627b      	str	r3, [r7, #36]	; 0x24
 800171c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800171e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001722:	627b      	str	r3, [r7, #36]	; 0x24
 8001724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001726:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800172a:	627b      	str	r3, [r7, #36]	; 0x24
 800172c:	4a16      	ldr	r2, [pc, #88]	; (8001788 <HAL_TIM_MspPostInit+0xfc>)
 800172e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001730:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001732:	e01c      	b.n	800176e <HAL_TIM_MspPostInit+0xe2>
  else if(htim->Instance==TIM2)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800173c:	d117      	bne.n	800176e <HAL_TIM_MspPostInit+0xe2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800173e:	4b0f      	ldr	r3, [pc, #60]	; (800177c <HAL_TIM_MspPostInit+0xf0>)
 8001740:	699b      	ldr	r3, [r3, #24]
 8001742:	4a0e      	ldr	r2, [pc, #56]	; (800177c <HAL_TIM_MspPostInit+0xf0>)
 8001744:	f043 0304 	orr.w	r3, r3, #4
 8001748:	6193      	str	r3, [r2, #24]
 800174a:	4b0c      	ldr	r3, [pc, #48]	; (800177c <HAL_TIM_MspPostInit+0xf0>)
 800174c:	699b      	ldr	r3, [r3, #24]
 800174e:	f003 0304 	and.w	r3, r3, #4
 8001752:	60bb      	str	r3, [r7, #8]
 8001754:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001756:	2304      	movs	r3, #4
 8001758:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800175a:	2302      	movs	r3, #2
 800175c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175e:	2302      	movs	r3, #2
 8001760:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001762:	f107 0314 	add.w	r3, r7, #20
 8001766:	4619      	mov	r1, r3
 8001768:	4806      	ldr	r0, [pc, #24]	; (8001784 <HAL_TIM_MspPostInit+0xf8>)
 800176a:	f000 ff83 	bl	8002674 <HAL_GPIO_Init>
}
 800176e:	bf00      	nop
 8001770:	3728      	adds	r7, #40	; 0x28
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	40012c00 	.word	0x40012c00
 800177c:	40021000 	.word	0x40021000
 8001780:	40010c00 	.word	0x40010c00
 8001784:	40010800 	.word	0x40010800
 8001788:	40010000 	.word	0x40010000

0800178c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001790:	e7fe      	b.n	8001790 <NMI_Handler+0x4>

08001792 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001792:	b480      	push	{r7}
 8001794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001796:	e7fe      	b.n	8001796 <HardFault_Handler+0x4>

08001798 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800179c:	e7fe      	b.n	800179c <MemManage_Handler+0x4>

0800179e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800179e:	b480      	push	{r7}
 80017a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017a2:	e7fe      	b.n	80017a2 <BusFault_Handler+0x4>

080017a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017a8:	e7fe      	b.n	80017a8 <UsageFault_Handler+0x4>

080017aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017aa:	b480      	push	{r7}
 80017ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017ae:	bf00      	nop
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bc80      	pop	{r7}
 80017b4:	4770      	bx	lr

080017b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017b6:	b480      	push	{r7}
 80017b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017ba:	bf00      	nop
 80017bc:	46bd      	mov	sp, r7
 80017be:	bc80      	pop	{r7}
 80017c0:	4770      	bx	lr

080017c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017c2:	b480      	push	{r7}
 80017c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017c6:	bf00      	nop
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bc80      	pop	{r7}
 80017cc:	4770      	bx	lr

080017ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017ce:	b580      	push	{r7, lr}
 80017d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017d2:	f000 fe25 	bl	8002420 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017d6:	bf00      	nop
 80017d8:	bd80      	pop	{r7, pc}

080017da <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80017da:	b480      	push	{r7}
 80017dc:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80017de:	bf00      	nop
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bc80      	pop	{r7}
 80017e4:	4770      	bx	lr
	...

080017e8 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80017ec:	4802      	ldr	r0, [pc, #8]	; (80017f8 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 80017ee:	f001 f9f6 	bl	8002bde <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	200010a8 	.word	0x200010a8

080017fc <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001800:	4802      	ldr	r0, [pc, #8]	; (800180c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001802:	f001 f9ec 	bl	8002bde <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	200010a8 	.word	0x200010a8

08001810 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001814:	4802      	ldr	r0, [pc, #8]	; (8001820 <TIM1_BRK_IRQHandler+0x10>)
 8001816:	f003 fc19 	bl	800504c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 800181a:	bf00      	nop
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	20000368 	.word	0x20000368

08001824 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001828:	4802      	ldr	r0, [pc, #8]	; (8001834 <TIM1_UP_IRQHandler+0x10>)
 800182a:	f003 fc0f 	bl	800504c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800182e:	bf00      	nop
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	20000368 	.word	0x20000368

08001838 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800183c:	4802      	ldr	r0, [pc, #8]	; (8001848 <TIM1_TRG_COM_IRQHandler+0x10>)
 800183e:	f003 fc05 	bl	800504c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8001842:	bf00      	nop
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	20000368 	.word	0x20000368

0800184c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001850:	4802      	ldr	r0, [pc, #8]	; (800185c <TIM1_CC_IRQHandler+0x10>)
 8001852:	f003 fbfb 	bl	800504c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001856:	bf00      	nop
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	20000368 	.word	0x20000368

08001860 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001864:	4802      	ldr	r0, [pc, #8]	; (8001870 <TIM2_IRQHandler+0x10>)
 8001866:	f003 fbf1 	bl	800504c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800186a:	bf00      	nop
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	200003b0 	.word	0x200003b0

08001874 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
	return 1;
 8001878:	2301      	movs	r3, #1
}
 800187a:	4618      	mov	r0, r3
 800187c:	46bd      	mov	sp, r7
 800187e:	bc80      	pop	{r7}
 8001880:	4770      	bx	lr

08001882 <_kill>:

int _kill(int pid, int sig)
{
 8001882:	b580      	push	{r7, lr}
 8001884:	b082      	sub	sp, #8
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]
 800188a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800188c:	f008 fcae 	bl	800a1ec <__errno>
 8001890:	4603      	mov	r3, r0
 8001892:	2216      	movs	r2, #22
 8001894:	601a      	str	r2, [r3, #0]
	return -1;
 8001896:	f04f 33ff 	mov.w	r3, #4294967295
}
 800189a:	4618      	mov	r0, r3
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <_exit>:

void _exit (int status)
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b082      	sub	sp, #8
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80018aa:	f04f 31ff 	mov.w	r1, #4294967295
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f7ff ffe7 	bl	8001882 <_kill>
	while (1) {}		/* Make sure we hang here */
 80018b4:	e7fe      	b.n	80018b4 <_exit+0x12>

080018b6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018b6:	b580      	push	{r7, lr}
 80018b8:	b086      	sub	sp, #24
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	60f8      	str	r0, [r7, #12]
 80018be:	60b9      	str	r1, [r7, #8]
 80018c0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018c2:	2300      	movs	r3, #0
 80018c4:	617b      	str	r3, [r7, #20]
 80018c6:	e00a      	b.n	80018de <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80018c8:	f3af 8000 	nop.w
 80018cc:	4601      	mov	r1, r0
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	1c5a      	adds	r2, r3, #1
 80018d2:	60ba      	str	r2, [r7, #8]
 80018d4:	b2ca      	uxtb	r2, r1
 80018d6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	3301      	adds	r3, #1
 80018dc:	617b      	str	r3, [r7, #20]
 80018de:	697a      	ldr	r2, [r7, #20]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	429a      	cmp	r2, r3
 80018e4:	dbf0      	blt.n	80018c8 <_read+0x12>
	}

return len;
 80018e6:	687b      	ldr	r3, [r7, #4]
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3718      	adds	r7, #24
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b086      	sub	sp, #24
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	60f8      	str	r0, [r7, #12]
 80018f8:	60b9      	str	r1, [r7, #8]
 80018fa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018fc:	2300      	movs	r3, #0
 80018fe:	617b      	str	r3, [r7, #20]
 8001900:	e009      	b.n	8001916 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	1c5a      	adds	r2, r3, #1
 8001906:	60ba      	str	r2, [r7, #8]
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	4618      	mov	r0, r3
 800190c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	3301      	adds	r3, #1
 8001914:	617b      	str	r3, [r7, #20]
 8001916:	697a      	ldr	r2, [r7, #20]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	429a      	cmp	r2, r3
 800191c:	dbf1      	blt.n	8001902 <_write+0x12>
	}
	return len;
 800191e:	687b      	ldr	r3, [r7, #4]
}
 8001920:	4618      	mov	r0, r3
 8001922:	3718      	adds	r7, #24
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}

08001928 <_close>:

int _close(int file)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
	return -1;
 8001930:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001934:	4618      	mov	r0, r3
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	bc80      	pop	{r7}
 800193c:	4770      	bx	lr

0800193e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800193e:	b480      	push	{r7}
 8001940:	b083      	sub	sp, #12
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
 8001946:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800194e:	605a      	str	r2, [r3, #4]
	return 0;
 8001950:	2300      	movs	r3, #0
}
 8001952:	4618      	mov	r0, r3
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	bc80      	pop	{r7}
 800195a:	4770      	bx	lr

0800195c <_isatty>:

int _isatty(int file)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
	return 1;
 8001964:	2301      	movs	r3, #1
}
 8001966:	4618      	mov	r0, r3
 8001968:	370c      	adds	r7, #12
 800196a:	46bd      	mov	sp, r7
 800196c:	bc80      	pop	{r7}
 800196e:	4770      	bx	lr

08001970 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001970:	b480      	push	{r7}
 8001972:	b085      	sub	sp, #20
 8001974:	af00      	add	r7, sp, #0
 8001976:	60f8      	str	r0, [r7, #12]
 8001978:	60b9      	str	r1, [r7, #8]
 800197a:	607a      	str	r2, [r7, #4]
	return 0;
 800197c:	2300      	movs	r3, #0
}
 800197e:	4618      	mov	r0, r3
 8001980:	3714      	adds	r7, #20
 8001982:	46bd      	mov	sp, r7
 8001984:	bc80      	pop	{r7}
 8001986:	4770      	bx	lr

08001988 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b086      	sub	sp, #24
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001990:	4a14      	ldr	r2, [pc, #80]	; (80019e4 <_sbrk+0x5c>)
 8001992:	4b15      	ldr	r3, [pc, #84]	; (80019e8 <_sbrk+0x60>)
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800199c:	4b13      	ldr	r3, [pc, #76]	; (80019ec <_sbrk+0x64>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d102      	bne.n	80019aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019a4:	4b11      	ldr	r3, [pc, #68]	; (80019ec <_sbrk+0x64>)
 80019a6:	4a12      	ldr	r2, [pc, #72]	; (80019f0 <_sbrk+0x68>)
 80019a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019aa:	4b10      	ldr	r3, [pc, #64]	; (80019ec <_sbrk+0x64>)
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4413      	add	r3, r2
 80019b2:	693a      	ldr	r2, [r7, #16]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d207      	bcs.n	80019c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019b8:	f008 fc18 	bl	800a1ec <__errno>
 80019bc:	4603      	mov	r3, r0
 80019be:	220c      	movs	r2, #12
 80019c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019c2:	f04f 33ff 	mov.w	r3, #4294967295
 80019c6:	e009      	b.n	80019dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019c8:	4b08      	ldr	r3, [pc, #32]	; (80019ec <_sbrk+0x64>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019ce:	4b07      	ldr	r3, [pc, #28]	; (80019ec <_sbrk+0x64>)
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4413      	add	r3, r2
 80019d6:	4a05      	ldr	r2, [pc, #20]	; (80019ec <_sbrk+0x64>)
 80019d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019da:	68fb      	ldr	r3, [r7, #12]
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3718      	adds	r7, #24
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	20005000 	.word	0x20005000
 80019e8:	00000400 	.word	0x00000400
 80019ec:	20000410 	.word	0x20000410
 80019f0:	200015d0 	.word	0x200015d0

080019f4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019f4:	480c      	ldr	r0, [pc, #48]	; (8001a28 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80019f6:	490d      	ldr	r1, [pc, #52]	; (8001a2c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80019f8:	4a0d      	ldr	r2, [pc, #52]	; (8001a30 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80019fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019fc:	e002      	b.n	8001a04 <LoopCopyDataInit>

080019fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a02:	3304      	adds	r3, #4

08001a04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a08:	d3f9      	bcc.n	80019fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a0a:	4a0a      	ldr	r2, [pc, #40]	; (8001a34 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a0c:	4c0a      	ldr	r4, [pc, #40]	; (8001a38 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a10:	e001      	b.n	8001a16 <LoopFillZerobss>

08001a12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a14:	3204      	adds	r2, #4

08001a16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a18:	d3fb      	bcc.n	8001a12 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001a1a:	f000 fcb5 	bl	8002388 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a1e:	f008 fbeb 	bl	800a1f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a22:	f7ff fa8f 	bl	8000f44 <main>
  bx lr
 8001a26:	4770      	bx	lr
  ldr r0, =_sdata
 8001a28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a2c:	2000034c 	.word	0x2000034c
  ldr r2, =_sidata
 8001a30:	0800d46c 	.word	0x0800d46c
  ldr r2, =_sbss
 8001a34:	2000034c 	.word	0x2000034c
  ldr r4, =_ebss
 8001a38:	200015cc 	.word	0x200015cc

08001a3c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a3c:	e7fe      	b.n	8001a3c <ADC1_2_IRQHandler>
	...

08001a40 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8001a44:	2200      	movs	r2, #0
 8001a46:	4912      	ldr	r1, [pc, #72]	; (8001a90 <MX_USB_DEVICE_Init+0x50>)
 8001a48:	4812      	ldr	r0, [pc, #72]	; (8001a94 <MX_USB_DEVICE_Init+0x54>)
 8001a4a:	f007 fb34 	bl	80090b6 <USBD_Init>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d001      	beq.n	8001a58 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8001a54:	f7ff fd2c 	bl	80014b0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8001a58:	490f      	ldr	r1, [pc, #60]	; (8001a98 <MX_USB_DEVICE_Init+0x58>)
 8001a5a:	480e      	ldr	r0, [pc, #56]	; (8001a94 <MX_USB_DEVICE_Init+0x54>)
 8001a5c:	f007 fb56 	bl	800910c <USBD_RegisterClass>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8001a66:	f7ff fd23 	bl	80014b0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8001a6a:	490c      	ldr	r1, [pc, #48]	; (8001a9c <MX_USB_DEVICE_Init+0x5c>)
 8001a6c:	4809      	ldr	r0, [pc, #36]	; (8001a94 <MX_USB_DEVICE_Init+0x54>)
 8001a6e:	f007 fa87 	bl	8008f80 <USBD_CDC_RegisterInterface>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8001a78:	f7ff fd1a 	bl	80014b0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8001a7c:	4805      	ldr	r0, [pc, #20]	; (8001a94 <MX_USB_DEVICE_Init+0x54>)
 8001a7e:	f007 fb5e 	bl	800913e <USBD_Start>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8001a88:	f7ff fd12 	bl	80014b0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8001a8c:	bf00      	nop
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	20000010 	.word	0x20000010
 8001a94:	20000414 	.word	0x20000414
 8001a98:	20000078 	.word	0x20000078
 8001a9c:	20000000 	.word	0x20000000

08001aa0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	4905      	ldr	r1, [pc, #20]	; (8001abc <CDC_Init_FS+0x1c>)
 8001aa8:	4805      	ldr	r0, [pc, #20]	; (8001ac0 <CDC_Init_FS+0x20>)
 8001aaa:	f007 fa7f 	bl	8008fac <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8001aae:	4905      	ldr	r1, [pc, #20]	; (8001ac4 <CDC_Init_FS+0x24>)
 8001ab0:	4803      	ldr	r0, [pc, #12]	; (8001ac0 <CDC_Init_FS+0x20>)
 8001ab2:	f007 fa94 	bl	8008fde <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8001ab6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	20000ac0 	.word	0x20000ac0
 8001ac0:	20000414 	.word	0x20000414
 8001ac4:	200006d8 	.word	0x200006d8

08001ac8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8001acc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bc80      	pop	{r7}
 8001ad4:	4770      	bx	lr
	...

08001ad8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	4603      	mov	r3, r0
 8001ae0:	6039      	str	r1, [r7, #0]
 8001ae2:	71fb      	strb	r3, [r7, #7]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8001ae8:	79fb      	ldrb	r3, [r7, #7]
 8001aea:	2b23      	cmp	r3, #35	; 0x23
 8001aec:	d84a      	bhi.n	8001b84 <CDC_Control_FS+0xac>
 8001aee:	a201      	add	r2, pc, #4	; (adr r2, 8001af4 <CDC_Control_FS+0x1c>)
 8001af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001af4:	08001b85 	.word	0x08001b85
 8001af8:	08001b85 	.word	0x08001b85
 8001afc:	08001b85 	.word	0x08001b85
 8001b00:	08001b85 	.word	0x08001b85
 8001b04:	08001b85 	.word	0x08001b85
 8001b08:	08001b85 	.word	0x08001b85
 8001b0c:	08001b85 	.word	0x08001b85
 8001b10:	08001b85 	.word	0x08001b85
 8001b14:	08001b85 	.word	0x08001b85
 8001b18:	08001b85 	.word	0x08001b85
 8001b1c:	08001b85 	.word	0x08001b85
 8001b20:	08001b85 	.word	0x08001b85
 8001b24:	08001b85 	.word	0x08001b85
 8001b28:	08001b85 	.word	0x08001b85
 8001b2c:	08001b85 	.word	0x08001b85
 8001b30:	08001b85 	.word	0x08001b85
 8001b34:	08001b85 	.word	0x08001b85
 8001b38:	08001b85 	.word	0x08001b85
 8001b3c:	08001b85 	.word	0x08001b85
 8001b40:	08001b85 	.word	0x08001b85
 8001b44:	08001b85 	.word	0x08001b85
 8001b48:	08001b85 	.word	0x08001b85
 8001b4c:	08001b85 	.word	0x08001b85
 8001b50:	08001b85 	.word	0x08001b85
 8001b54:	08001b85 	.word	0x08001b85
 8001b58:	08001b85 	.word	0x08001b85
 8001b5c:	08001b85 	.word	0x08001b85
 8001b60:	08001b85 	.word	0x08001b85
 8001b64:	08001b85 	.word	0x08001b85
 8001b68:	08001b85 	.word	0x08001b85
 8001b6c:	08001b85 	.word	0x08001b85
 8001b70:	08001b85 	.word	0x08001b85
 8001b74:	08001b85 	.word	0x08001b85
 8001b78:	08001b85 	.word	0x08001b85
 8001b7c:	08001b85 	.word	0x08001b85
 8001b80:	08001b85 	.word	0x08001b85
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8001b84:	bf00      	nop
  }

  return (USBD_OK);
 8001b86:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bc80      	pop	{r7}
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop

08001b94 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8001b9e:	6879      	ldr	r1, [r7, #4]
 8001ba0:	4805      	ldr	r0, [pc, #20]	; (8001bb8 <CDC_Receive_FS+0x24>)
 8001ba2:	f007 fa1c 	bl	8008fde <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8001ba6:	4804      	ldr	r0, [pc, #16]	; (8001bb8 <CDC_Receive_FS+0x24>)
 8001ba8:	f007 fa5b 	bl	8009062 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8001bac:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	20000414 	.word	0x20000414

08001bbc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8001bcc:	4b0d      	ldr	r3, [pc, #52]	; (8001c04 <CDC_Transmit_FS+0x48>)
 8001bce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8001bd2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e00b      	b.n	8001bfa <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8001be2:	887b      	ldrh	r3, [r7, #2]
 8001be4:	461a      	mov	r2, r3
 8001be6:	6879      	ldr	r1, [r7, #4]
 8001be8:	4806      	ldr	r0, [pc, #24]	; (8001c04 <CDC_Transmit_FS+0x48>)
 8001bea:	f007 f9df 	bl	8008fac <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8001bee:	4805      	ldr	r0, [pc, #20]	; (8001c04 <CDC_Transmit_FS+0x48>)
 8001bf0:	f007 fa08 	bl	8009004 <USBD_CDC_TransmitPacket>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8001bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3710      	adds	r7, #16
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	20000414 	.word	0x20000414

08001c08 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	4603      	mov	r3, r0
 8001c10:	6039      	str	r1, [r7, #0]
 8001c12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	2212      	movs	r2, #18
 8001c18:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8001c1a:	4b03      	ldr	r3, [pc, #12]	; (8001c28 <USBD_FS_DeviceDescriptor+0x20>)
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bc80      	pop	{r7}
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	2000002c 	.word	0x2000002c

08001c2c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	4603      	mov	r3, r0
 8001c34:	6039      	str	r1, [r7, #0]
 8001c36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	2204      	movs	r2, #4
 8001c3c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8001c3e:	4b03      	ldr	r3, [pc, #12]	; (8001c4c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	370c      	adds	r7, #12
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bc80      	pop	{r7}
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	20000040 	.word	0x20000040

08001c50 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	4603      	mov	r3, r0
 8001c58:	6039      	str	r1, [r7, #0]
 8001c5a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8001c5c:	79fb      	ldrb	r3, [r7, #7]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d105      	bne.n	8001c6e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8001c62:	683a      	ldr	r2, [r7, #0]
 8001c64:	4907      	ldr	r1, [pc, #28]	; (8001c84 <USBD_FS_ProductStrDescriptor+0x34>)
 8001c66:	4808      	ldr	r0, [pc, #32]	; (8001c88 <USBD_FS_ProductStrDescriptor+0x38>)
 8001c68:	f008 f9e2 	bl	800a030 <USBD_GetString>
 8001c6c:	e004      	b.n	8001c78 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8001c6e:	683a      	ldr	r2, [r7, #0]
 8001c70:	4904      	ldr	r1, [pc, #16]	; (8001c84 <USBD_FS_ProductStrDescriptor+0x34>)
 8001c72:	4805      	ldr	r0, [pc, #20]	; (8001c88 <USBD_FS_ProductStrDescriptor+0x38>)
 8001c74:	f008 f9dc 	bl	800a030 <USBD_GetString>
  }
  return USBD_StrDesc;
 8001c78:	4b02      	ldr	r3, [pc, #8]	; (8001c84 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	20000ea8 	.word	0x20000ea8
 8001c88:	0800d020 	.word	0x0800d020

08001c8c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	4603      	mov	r3, r0
 8001c94:	6039      	str	r1, [r7, #0]
 8001c96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8001c98:	683a      	ldr	r2, [r7, #0]
 8001c9a:	4904      	ldr	r1, [pc, #16]	; (8001cac <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8001c9c:	4804      	ldr	r0, [pc, #16]	; (8001cb0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8001c9e:	f008 f9c7 	bl	800a030 <USBD_GetString>
  return USBD_StrDesc;
 8001ca2:	4b02      	ldr	r3, [pc, #8]	; (8001cac <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3708      	adds	r7, #8
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	20000ea8 	.word	0x20000ea8
 8001cb0:	0800d038 	.word	0x0800d038

08001cb4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	4603      	mov	r3, r0
 8001cbc:	6039      	str	r1, [r7, #0]
 8001cbe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	221a      	movs	r2, #26
 8001cc4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8001cc6:	f000 f843 	bl	8001d50 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8001cca:	4b02      	ldr	r3, [pc, #8]	; (8001cd4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3708      	adds	r7, #8
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	20000044 	.word	0x20000044

08001cd8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	4603      	mov	r3, r0
 8001ce0:	6039      	str	r1, [r7, #0]
 8001ce2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8001ce4:	79fb      	ldrb	r3, [r7, #7]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d105      	bne.n	8001cf6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8001cea:	683a      	ldr	r2, [r7, #0]
 8001cec:	4907      	ldr	r1, [pc, #28]	; (8001d0c <USBD_FS_ConfigStrDescriptor+0x34>)
 8001cee:	4808      	ldr	r0, [pc, #32]	; (8001d10 <USBD_FS_ConfigStrDescriptor+0x38>)
 8001cf0:	f008 f99e 	bl	800a030 <USBD_GetString>
 8001cf4:	e004      	b.n	8001d00 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8001cf6:	683a      	ldr	r2, [r7, #0]
 8001cf8:	4904      	ldr	r1, [pc, #16]	; (8001d0c <USBD_FS_ConfigStrDescriptor+0x34>)
 8001cfa:	4805      	ldr	r0, [pc, #20]	; (8001d10 <USBD_FS_ConfigStrDescriptor+0x38>)
 8001cfc:	f008 f998 	bl	800a030 <USBD_GetString>
  }
  return USBD_StrDesc;
 8001d00:	4b02      	ldr	r3, [pc, #8]	; (8001d0c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3708      	adds	r7, #8
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	20000ea8 	.word	0x20000ea8
 8001d10:	0800d04c 	.word	0x0800d04c

08001d14 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	6039      	str	r1, [r7, #0]
 8001d1e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8001d20:	79fb      	ldrb	r3, [r7, #7]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d105      	bne.n	8001d32 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8001d26:	683a      	ldr	r2, [r7, #0]
 8001d28:	4907      	ldr	r1, [pc, #28]	; (8001d48 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8001d2a:	4808      	ldr	r0, [pc, #32]	; (8001d4c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8001d2c:	f008 f980 	bl	800a030 <USBD_GetString>
 8001d30:	e004      	b.n	8001d3c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8001d32:	683a      	ldr	r2, [r7, #0]
 8001d34:	4904      	ldr	r1, [pc, #16]	; (8001d48 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8001d36:	4805      	ldr	r0, [pc, #20]	; (8001d4c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8001d38:	f008 f97a 	bl	800a030 <USBD_GetString>
  }
  return USBD_StrDesc;
 8001d3c:	4b02      	ldr	r3, [pc, #8]	; (8001d48 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	20000ea8 	.word	0x20000ea8
 8001d4c:	0800d058 	.word	0x0800d058

08001d50 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8001d56:	4b0f      	ldr	r3, [pc, #60]	; (8001d94 <Get_SerialNum+0x44>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8001d5c:	4b0e      	ldr	r3, [pc, #56]	; (8001d98 <Get_SerialNum+0x48>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8001d62:	4b0e      	ldr	r3, [pc, #56]	; (8001d9c <Get_SerialNum+0x4c>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8001d68:	68fa      	ldr	r2, [r7, #12]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4413      	add	r3, r2
 8001d6e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d009      	beq.n	8001d8a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8001d76:	2208      	movs	r2, #8
 8001d78:	4909      	ldr	r1, [pc, #36]	; (8001da0 <Get_SerialNum+0x50>)
 8001d7a:	68f8      	ldr	r0, [r7, #12]
 8001d7c:	f000 f814 	bl	8001da8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8001d80:	2204      	movs	r2, #4
 8001d82:	4908      	ldr	r1, [pc, #32]	; (8001da4 <Get_SerialNum+0x54>)
 8001d84:	68b8      	ldr	r0, [r7, #8]
 8001d86:	f000 f80f 	bl	8001da8 <IntToUnicode>
  }
}
 8001d8a:	bf00      	nop
 8001d8c:	3710      	adds	r7, #16
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	1ffff7e8 	.word	0x1ffff7e8
 8001d98:	1ffff7ec 	.word	0x1ffff7ec
 8001d9c:	1ffff7f0 	.word	0x1ffff7f0
 8001da0:	20000046 	.word	0x20000046
 8001da4:	20000056 	.word	0x20000056

08001da8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b087      	sub	sp, #28
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	60f8      	str	r0, [r7, #12]
 8001db0:	60b9      	str	r1, [r7, #8]
 8001db2:	4613      	mov	r3, r2
 8001db4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8001db6:	2300      	movs	r3, #0
 8001db8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8001dba:	2300      	movs	r3, #0
 8001dbc:	75fb      	strb	r3, [r7, #23]
 8001dbe:	e027      	b.n	8001e10 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	0f1b      	lsrs	r3, r3, #28
 8001dc4:	2b09      	cmp	r3, #9
 8001dc6:	d80b      	bhi.n	8001de0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	0f1b      	lsrs	r3, r3, #28
 8001dcc:	b2da      	uxtb	r2, r3
 8001dce:	7dfb      	ldrb	r3, [r7, #23]
 8001dd0:	005b      	lsls	r3, r3, #1
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	440b      	add	r3, r1
 8001dd8:	3230      	adds	r2, #48	; 0x30
 8001dda:	b2d2      	uxtb	r2, r2
 8001ddc:	701a      	strb	r2, [r3, #0]
 8001dde:	e00a      	b.n	8001df6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	0f1b      	lsrs	r3, r3, #28
 8001de4:	b2da      	uxtb	r2, r3
 8001de6:	7dfb      	ldrb	r3, [r7, #23]
 8001de8:	005b      	lsls	r3, r3, #1
 8001dea:	4619      	mov	r1, r3
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	440b      	add	r3, r1
 8001df0:	3237      	adds	r2, #55	; 0x37
 8001df2:	b2d2      	uxtb	r2, r2
 8001df4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	011b      	lsls	r3, r3, #4
 8001dfa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8001dfc:	7dfb      	ldrb	r3, [r7, #23]
 8001dfe:	005b      	lsls	r3, r3, #1
 8001e00:	3301      	adds	r3, #1
 8001e02:	68ba      	ldr	r2, [r7, #8]
 8001e04:	4413      	add	r3, r2
 8001e06:	2200      	movs	r2, #0
 8001e08:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8001e0a:	7dfb      	ldrb	r3, [r7, #23]
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	75fb      	strb	r3, [r7, #23]
 8001e10:	7dfa      	ldrb	r2, [r7, #23]
 8001e12:	79fb      	ldrb	r3, [r7, #7]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d3d3      	bcc.n	8001dc0 <IntToUnicode+0x18>
  }
}
 8001e18:	bf00      	nop
 8001e1a:	bf00      	nop
 8001e1c:	371c      	adds	r7, #28
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bc80      	pop	{r7}
 8001e22:	4770      	bx	lr

08001e24 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a11      	ldr	r2, [pc, #68]	; (8001e78 <HAL_PCD_MspInit+0x54>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d11b      	bne.n	8001e6e <HAL_PCD_MspInit+0x4a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001e36:	4b11      	ldr	r3, [pc, #68]	; (8001e7c <HAL_PCD_MspInit+0x58>)
 8001e38:	69db      	ldr	r3, [r3, #28]
 8001e3a:	4a10      	ldr	r2, [pc, #64]	; (8001e7c <HAL_PCD_MspInit+0x58>)
 8001e3c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e40:	61d3      	str	r3, [r2, #28]
 8001e42:	4b0e      	ldr	r3, [pc, #56]	; (8001e7c <HAL_PCD_MspInit+0x58>)
 8001e44:	69db      	ldr	r3, [r3, #28]
 8001e46:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e4a:	60fb      	str	r3, [r7, #12]
 8001e4c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 8001e4e:	2200      	movs	r2, #0
 8001e50:	2100      	movs	r1, #0
 8001e52:	2013      	movs	r0, #19
 8001e54:	f000 fbd7 	bl	8002606 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8001e58:	2013      	movs	r0, #19
 8001e5a:	f000 fbf0 	bl	800263e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8001e5e:	2200      	movs	r2, #0
 8001e60:	2100      	movs	r1, #0
 8001e62:	2014      	movs	r0, #20
 8001e64:	f000 fbcf 	bl	8002606 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8001e68:	2014      	movs	r0, #20
 8001e6a:	f000 fbe8 	bl	800263e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8001e6e:	bf00      	nop
 8001e70:	3710      	adds	r7, #16
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	40005c00 	.word	0x40005c00
 8001e7c:	40021000 	.word	0x40021000

08001e80 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001e94:	4619      	mov	r1, r3
 8001e96:	4610      	mov	r0, r2
 8001e98:	f007 f999 	bl	80091ce <USBD_LL_SetupStage>
}
 8001e9c:	bf00      	nop
 8001e9e:	3708      	adds	r7, #8
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	460b      	mov	r3, r1
 8001eae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8001eb6:	78fa      	ldrb	r2, [r7, #3]
 8001eb8:	6879      	ldr	r1, [r7, #4]
 8001eba:	4613      	mov	r3, r2
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	4413      	add	r3, r2
 8001ec0:	00db      	lsls	r3, r3, #3
 8001ec2:	440b      	add	r3, r1
 8001ec4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	78fb      	ldrb	r3, [r7, #3]
 8001ecc:	4619      	mov	r1, r3
 8001ece:	f007 f9cb 	bl	8009268 <USBD_LL_DataOutStage>
}
 8001ed2:	bf00      	nop
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b082      	sub	sp, #8
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
 8001ee2:	460b      	mov	r3, r1
 8001ee4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8001eec:	78fa      	ldrb	r2, [r7, #3]
 8001eee:	6879      	ldr	r1, [r7, #4]
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	4413      	add	r3, r2
 8001ef6:	00db      	lsls	r3, r3, #3
 8001ef8:	440b      	add	r3, r1
 8001efa:	333c      	adds	r3, #60	; 0x3c
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	78fb      	ldrb	r3, [r7, #3]
 8001f00:	4619      	mov	r1, r3
 8001f02:	f007 fa22 	bl	800934a <USBD_LL_DataInStage>
}
 8001f06:	bf00      	nop
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}

08001f0e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8001f0e:	b580      	push	{r7, lr}
 8001f10:	b082      	sub	sp, #8
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f007 fb32 	bl	8009586 <USBD_LL_SOF>
}
 8001f22:	bf00      	nop
 8001f24:	3708      	adds	r7, #8
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}

08001f2a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8001f2a:	b580      	push	{r7, lr}
 8001f2c:	b084      	sub	sp, #16
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8001f32:	2301      	movs	r3, #1
 8001f34:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d001      	beq.n	8001f42 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8001f3e:	f7ff fab7 	bl	80014b0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8001f48:	7bfa      	ldrb	r2, [r7, #15]
 8001f4a:	4611      	mov	r1, r2
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f007 fae2 	bl	8009516 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f007 fa9b 	bl	8009494 <USBD_LL_Reset>
}
 8001f5e:	bf00      	nop
 8001f60:	3710      	adds	r7, #16
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
	...

08001f68 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8001f76:	4618      	mov	r0, r3
 8001f78:	f007 fadc 	bl	8009534 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	699b      	ldr	r3, [r3, #24]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d005      	beq.n	8001f90 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8001f84:	4b04      	ldr	r3, [pc, #16]	; (8001f98 <HAL_PCD_SuspendCallback+0x30>)
 8001f86:	691b      	ldr	r3, [r3, #16]
 8001f88:	4a03      	ldr	r2, [pc, #12]	; (8001f98 <HAL_PCD_SuspendCallback+0x30>)
 8001f8a:	f043 0306 	orr.w	r3, r3, #6
 8001f8e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8001f90:	bf00      	nop
 8001f92:	3708      	adds	r7, #8
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	e000ed00 	.word	0xe000ed00

08001f9c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8001faa:	4618      	mov	r0, r3
 8001fac:	f007 fad6 	bl	800955c <USBD_LL_Resume>
}
 8001fb0:	bf00      	nop
 8001fb2:	3708      	adds	r7, #8
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8001fc0:	4a28      	ldr	r2, [pc, #160]	; (8002064 <USBD_LL_Init+0xac>)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	4a26      	ldr	r2, [pc, #152]	; (8002064 <USBD_LL_Init+0xac>)
 8001fcc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8001fd0:	4b24      	ldr	r3, [pc, #144]	; (8002064 <USBD_LL_Init+0xac>)
 8001fd2:	4a25      	ldr	r2, [pc, #148]	; (8002068 <USBD_LL_Init+0xb0>)
 8001fd4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8001fd6:	4b23      	ldr	r3, [pc, #140]	; (8002064 <USBD_LL_Init+0xac>)
 8001fd8:	2208      	movs	r2, #8
 8001fda:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001fdc:	4b21      	ldr	r3, [pc, #132]	; (8002064 <USBD_LL_Init+0xac>)
 8001fde:	2202      	movs	r2, #2
 8001fe0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8001fe2:	4b20      	ldr	r3, [pc, #128]	; (8002064 <USBD_LL_Init+0xac>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8001fe8:	4b1e      	ldr	r3, [pc, #120]	; (8002064 <USBD_LL_Init+0xac>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8001fee:	4b1d      	ldr	r3, [pc, #116]	; (8002064 <USBD_LL_Init+0xac>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001ff4:	481b      	ldr	r0, [pc, #108]	; (8002064 <USBD_LL_Init+0xac>)
 8001ff6:	f000 fcc1 	bl	800297c <HAL_PCD_Init>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8002000:	f7ff fa56 	bl	80014b0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800200a:	2318      	movs	r3, #24
 800200c:	2200      	movs	r2, #0
 800200e:	2100      	movs	r1, #0
 8002010:	f002 f935 	bl	800427e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800201a:	2358      	movs	r3, #88	; 0x58
 800201c:	2200      	movs	r2, #0
 800201e:	2180      	movs	r1, #128	; 0x80
 8002020:	f002 f92d 	bl	800427e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800202a:	23c0      	movs	r3, #192	; 0xc0
 800202c:	2200      	movs	r2, #0
 800202e:	2181      	movs	r1, #129	; 0x81
 8002030:	f002 f925 	bl	800427e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800203a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800203e:	2200      	movs	r2, #0
 8002040:	2101      	movs	r1, #1
 8002042:	f002 f91c 	bl	800427e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800204c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002050:	2200      	movs	r2, #0
 8002052:	2182      	movs	r1, #130	; 0x82
 8002054:	f002 f913 	bl	800427e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8002058:	2300      	movs	r3, #0
}
 800205a:	4618      	mov	r0, r3
 800205c:	3708      	adds	r7, #8
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	200010a8 	.word	0x200010a8
 8002068:	40005c00 	.word	0x40005c00

0800206c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8002074:	2300      	movs	r3, #0
 8002076:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8002078:	2300      	movs	r3, #0
 800207a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8002082:	4618      	mov	r0, r3
 8002084:	f000 fd85 	bl	8002b92 <HAL_PCD_Start>
 8002088:	4603      	mov	r3, r0
 800208a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800208c:	7bfb      	ldrb	r3, [r7, #15]
 800208e:	4618      	mov	r0, r3
 8002090:	f000 f94e 	bl	8002330 <USBD_Get_USB_Status>
 8002094:	4603      	mov	r3, r0
 8002096:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8002098:	7bbb      	ldrb	r3, [r7, #14]
}
 800209a:	4618      	mov	r0, r3
 800209c:	3710      	adds	r7, #16
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80020a2:	b580      	push	{r7, lr}
 80020a4:	b084      	sub	sp, #16
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
 80020aa:	4608      	mov	r0, r1
 80020ac:	4611      	mov	r1, r2
 80020ae:	461a      	mov	r2, r3
 80020b0:	4603      	mov	r3, r0
 80020b2:	70fb      	strb	r3, [r7, #3]
 80020b4:	460b      	mov	r3, r1
 80020b6:	70bb      	strb	r3, [r7, #2]
 80020b8:	4613      	mov	r3, r2
 80020ba:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80020bc:	2300      	movs	r3, #0
 80020be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80020c0:	2300      	movs	r3, #0
 80020c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80020ca:	78bb      	ldrb	r3, [r7, #2]
 80020cc:	883a      	ldrh	r2, [r7, #0]
 80020ce:	78f9      	ldrb	r1, [r7, #3]
 80020d0:	f000 fefd 	bl	8002ece <HAL_PCD_EP_Open>
 80020d4:	4603      	mov	r3, r0
 80020d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80020d8:	7bfb      	ldrb	r3, [r7, #15]
 80020da:	4618      	mov	r0, r3
 80020dc:	f000 f928 	bl	8002330 <USBD_Get_USB_Status>
 80020e0:	4603      	mov	r3, r0
 80020e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80020e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3710      	adds	r7, #16
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}

080020ee <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80020ee:	b580      	push	{r7, lr}
 80020f0:	b084      	sub	sp, #16
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]
 80020f6:	460b      	mov	r3, r1
 80020f8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80020fa:	2300      	movs	r3, #0
 80020fc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80020fe:	2300      	movs	r3, #0
 8002100:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8002108:	78fa      	ldrb	r2, [r7, #3]
 800210a:	4611      	mov	r1, r2
 800210c:	4618      	mov	r0, r3
 800210e:	f000 ff44 	bl	8002f9a <HAL_PCD_EP_Close>
 8002112:	4603      	mov	r3, r0
 8002114:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8002116:	7bfb      	ldrb	r3, [r7, #15]
 8002118:	4618      	mov	r0, r3
 800211a:	f000 f909 	bl	8002330 <USBD_Get_USB_Status>
 800211e:	4603      	mov	r3, r0
 8002120:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8002122:	7bbb      	ldrb	r3, [r7, #14]
}
 8002124:	4618      	mov	r0, r3
 8002126:	3710      	adds	r7, #16
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}

0800212c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b084      	sub	sp, #16
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	460b      	mov	r3, r1
 8002136:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8002138:	2300      	movs	r3, #0
 800213a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800213c:	2300      	movs	r3, #0
 800213e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8002146:	78fa      	ldrb	r2, [r7, #3]
 8002148:	4611      	mov	r1, r2
 800214a:	4618      	mov	r0, r3
 800214c:	f001 f804 	bl	8003158 <HAL_PCD_EP_SetStall>
 8002150:	4603      	mov	r3, r0
 8002152:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8002154:	7bfb      	ldrb	r3, [r7, #15]
 8002156:	4618      	mov	r0, r3
 8002158:	f000 f8ea 	bl	8002330 <USBD_Get_USB_Status>
 800215c:	4603      	mov	r3, r0
 800215e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8002160:	7bbb      	ldrb	r3, [r7, #14]
}
 8002162:	4618      	mov	r0, r3
 8002164:	3710      	adds	r7, #16
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}

0800216a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800216a:	b580      	push	{r7, lr}
 800216c:	b084      	sub	sp, #16
 800216e:	af00      	add	r7, sp, #0
 8002170:	6078      	str	r0, [r7, #4]
 8002172:	460b      	mov	r3, r1
 8002174:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8002176:	2300      	movs	r3, #0
 8002178:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800217a:	2300      	movs	r3, #0
 800217c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8002184:	78fa      	ldrb	r2, [r7, #3]
 8002186:	4611      	mov	r1, r2
 8002188:	4618      	mov	r0, r3
 800218a:	f001 f845 	bl	8003218 <HAL_PCD_EP_ClrStall>
 800218e:	4603      	mov	r3, r0
 8002190:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8002192:	7bfb      	ldrb	r3, [r7, #15]
 8002194:	4618      	mov	r0, r3
 8002196:	f000 f8cb 	bl	8002330 <USBD_Get_USB_Status>
 800219a:	4603      	mov	r3, r0
 800219c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800219e:	7bbb      	ldrb	r3, [r7, #14]
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3710      	adds	r7, #16
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b085      	sub	sp, #20
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	460b      	mov	r3, r1
 80021b2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80021ba:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80021bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	da0c      	bge.n	80021de <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80021c4:	78fb      	ldrb	r3, [r7, #3]
 80021c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021ca:	68f9      	ldr	r1, [r7, #12]
 80021cc:	1c5a      	adds	r2, r3, #1
 80021ce:	4613      	mov	r3, r2
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	4413      	add	r3, r2
 80021d4:	00db      	lsls	r3, r3, #3
 80021d6:	440b      	add	r3, r1
 80021d8:	3302      	adds	r3, #2
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	e00b      	b.n	80021f6 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80021de:	78fb      	ldrb	r3, [r7, #3]
 80021e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80021e4:	68f9      	ldr	r1, [r7, #12]
 80021e6:	4613      	mov	r3, r2
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	4413      	add	r3, r2
 80021ec:	00db      	lsls	r3, r3, #3
 80021ee:	440b      	add	r3, r1
 80021f0:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80021f4:	781b      	ldrb	r3, [r3, #0]
  }
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3714      	adds	r7, #20
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bc80      	pop	{r7}
 80021fe:	4770      	bx	lr

08002200 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b084      	sub	sp, #16
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	460b      	mov	r3, r1
 800220a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800220c:	2300      	movs	r3, #0
 800220e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8002210:	2300      	movs	r3, #0
 8002212:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800221a:	78fa      	ldrb	r2, [r7, #3]
 800221c:	4611      	mov	r1, r2
 800221e:	4618      	mov	r0, r3
 8002220:	f000 fe30 	bl	8002e84 <HAL_PCD_SetAddress>
 8002224:	4603      	mov	r3, r0
 8002226:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8002228:	7bfb      	ldrb	r3, [r7, #15]
 800222a:	4618      	mov	r0, r3
 800222c:	f000 f880 	bl	8002330 <USBD_Get_USB_Status>
 8002230:	4603      	mov	r3, r0
 8002232:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8002234:	7bbb      	ldrb	r3, [r7, #14]
}
 8002236:	4618      	mov	r0, r3
 8002238:	3710      	adds	r7, #16
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}

0800223e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800223e:	b580      	push	{r7, lr}
 8002240:	b086      	sub	sp, #24
 8002242:	af00      	add	r7, sp, #0
 8002244:	60f8      	str	r0, [r7, #12]
 8002246:	607a      	str	r2, [r7, #4]
 8002248:	461a      	mov	r2, r3
 800224a:	460b      	mov	r3, r1
 800224c:	72fb      	strb	r3, [r7, #11]
 800224e:	4613      	mov	r3, r2
 8002250:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8002252:	2300      	movs	r3, #0
 8002254:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8002256:	2300      	movs	r3, #0
 8002258:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8002260:	893b      	ldrh	r3, [r7, #8]
 8002262:	7af9      	ldrb	r1, [r7, #11]
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	f000 ff34 	bl	80030d2 <HAL_PCD_EP_Transmit>
 800226a:	4603      	mov	r3, r0
 800226c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800226e:	7dfb      	ldrb	r3, [r7, #23]
 8002270:	4618      	mov	r0, r3
 8002272:	f000 f85d 	bl	8002330 <USBD_Get_USB_Status>
 8002276:	4603      	mov	r3, r0
 8002278:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800227a:	7dbb      	ldrb	r3, [r7, #22]
}
 800227c:	4618      	mov	r0, r3
 800227e:	3718      	adds	r7, #24
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}

08002284 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b086      	sub	sp, #24
 8002288:	af00      	add	r7, sp, #0
 800228a:	60f8      	str	r0, [r7, #12]
 800228c:	607a      	str	r2, [r7, #4]
 800228e:	461a      	mov	r2, r3
 8002290:	460b      	mov	r3, r1
 8002292:	72fb      	strb	r3, [r7, #11]
 8002294:	4613      	mov	r3, r2
 8002296:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8002298:	2300      	movs	r3, #0
 800229a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800229c:	2300      	movs	r3, #0
 800229e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80022a6:	893b      	ldrh	r3, [r7, #8]
 80022a8:	7af9      	ldrb	r1, [r7, #11]
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	f000 febd 	bl	800302a <HAL_PCD_EP_Receive>
 80022b0:	4603      	mov	r3, r0
 80022b2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80022b4:	7dfb      	ldrb	r3, [r7, #23]
 80022b6:	4618      	mov	r0, r3
 80022b8:	f000 f83a 	bl	8002330 <USBD_Get_USB_Status>
 80022bc:	4603      	mov	r3, r0
 80022be:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80022c0:	7dbb      	ldrb	r3, [r7, #22]
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3718      	adds	r7, #24
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}

080022ca <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80022ca:	b580      	push	{r7, lr}
 80022cc:	b082      	sub	sp, #8
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6078      	str	r0, [r7, #4]
 80022d2:	460b      	mov	r3, r1
 80022d4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80022dc:	78fa      	ldrb	r2, [r7, #3]
 80022de:	4611      	mov	r1, r2
 80022e0:	4618      	mov	r0, r3
 80022e2:	f000 fedf 	bl	80030a4 <HAL_PCD_EP_GetRxCount>
 80022e6:	4603      	mov	r3, r0
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3708      	adds	r7, #8
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80022f8:	4b02      	ldr	r3, [pc, #8]	; (8002304 <USBD_static_malloc+0x14>)
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	370c      	adds	r7, #12
 80022fe:	46bd      	mov	sp, r7
 8002300:	bc80      	pop	{r7}
 8002302:	4770      	bx	lr
 8002304:	20001394 	.word	0x20001394

08002308 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]

}
 8002310:	bf00      	nop
 8002312:	370c      	adds	r7, #12
 8002314:	46bd      	mov	sp, r7
 8002316:	bc80      	pop	{r7}
 8002318:	4770      	bx	lr

0800231a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800231a:	b480      	push	{r7}
 800231c:	b083      	sub	sp, #12
 800231e:	af00      	add	r7, sp, #0
 8002320:	6078      	str	r0, [r7, #4]
 8002322:	460b      	mov	r3, r1
 8002324:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8002326:	bf00      	nop
 8002328:	370c      	adds	r7, #12
 800232a:	46bd      	mov	sp, r7
 800232c:	bc80      	pop	{r7}
 800232e:	4770      	bx	lr

08002330 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8002330:	b480      	push	{r7}
 8002332:	b085      	sub	sp, #20
 8002334:	af00      	add	r7, sp, #0
 8002336:	4603      	mov	r3, r0
 8002338:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800233a:	2300      	movs	r3, #0
 800233c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800233e:	79fb      	ldrb	r3, [r7, #7]
 8002340:	2b03      	cmp	r3, #3
 8002342:	d817      	bhi.n	8002374 <USBD_Get_USB_Status+0x44>
 8002344:	a201      	add	r2, pc, #4	; (adr r2, 800234c <USBD_Get_USB_Status+0x1c>)
 8002346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800234a:	bf00      	nop
 800234c:	0800235d 	.word	0x0800235d
 8002350:	08002363 	.word	0x08002363
 8002354:	08002369 	.word	0x08002369
 8002358:	0800236f 	.word	0x0800236f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800235c:	2300      	movs	r3, #0
 800235e:	73fb      	strb	r3, [r7, #15]
    break;
 8002360:	e00b      	b.n	800237a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8002362:	2302      	movs	r3, #2
 8002364:	73fb      	strb	r3, [r7, #15]
    break;
 8002366:	e008      	b.n	800237a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8002368:	2301      	movs	r3, #1
 800236a:	73fb      	strb	r3, [r7, #15]
    break;
 800236c:	e005      	b.n	800237a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800236e:	2302      	movs	r3, #2
 8002370:	73fb      	strb	r3, [r7, #15]
    break;
 8002372:	e002      	b.n	800237a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8002374:	2302      	movs	r3, #2
 8002376:	73fb      	strb	r3, [r7, #15]
    break;
 8002378:	bf00      	nop
  }
  return usb_status;
 800237a:	7bfb      	ldrb	r3, [r7, #15]
}
 800237c:	4618      	mov	r0, r3
 800237e:	3714      	adds	r7, #20
 8002380:	46bd      	mov	sp, r7
 8002382:	bc80      	pop	{r7}
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop

08002388 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800238c:	bf00      	nop
 800238e:	46bd      	mov	sp, r7
 8002390:	bc80      	pop	{r7}
 8002392:	4770      	bx	lr

08002394 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002398:	4b08      	ldr	r3, [pc, #32]	; (80023bc <HAL_Init+0x28>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a07      	ldr	r2, [pc, #28]	; (80023bc <HAL_Init+0x28>)
 800239e:	f043 0310 	orr.w	r3, r3, #16
 80023a2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023a4:	2003      	movs	r0, #3
 80023a6:	f000 f923 	bl	80025f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023aa:	200f      	movs	r0, #15
 80023ac:	f000 f808 	bl	80023c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023b0:	f7ff f884 	bl	80014bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023b4:	2300      	movs	r3, #0
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	40022000 	.word	0x40022000

080023c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023c8:	4b12      	ldr	r3, [pc, #72]	; (8002414 <HAL_InitTick+0x54>)
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	4b12      	ldr	r3, [pc, #72]	; (8002418 <HAL_InitTick+0x58>)
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	4619      	mov	r1, r3
 80023d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80023da:	fbb2 f3f3 	udiv	r3, r2, r3
 80023de:	4618      	mov	r0, r3
 80023e0:	f000 f93b 	bl	800265a <HAL_SYSTICK_Config>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d001      	beq.n	80023ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e00e      	b.n	800240c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2b0f      	cmp	r3, #15
 80023f2:	d80a      	bhi.n	800240a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023f4:	2200      	movs	r2, #0
 80023f6:	6879      	ldr	r1, [r7, #4]
 80023f8:	f04f 30ff 	mov.w	r0, #4294967295
 80023fc:	f000 f903 	bl	8002606 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002400:	4a06      	ldr	r2, [pc, #24]	; (800241c <HAL_InitTick+0x5c>)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002406:	2300      	movs	r3, #0
 8002408:	e000      	b.n	800240c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
}
 800240c:	4618      	mov	r0, r3
 800240e:	3708      	adds	r7, #8
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}
 8002414:	20000060 	.word	0x20000060
 8002418:	20000068 	.word	0x20000068
 800241c:	20000064 	.word	0x20000064

08002420 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002424:	4b05      	ldr	r3, [pc, #20]	; (800243c <HAL_IncTick+0x1c>)
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	461a      	mov	r2, r3
 800242a:	4b05      	ldr	r3, [pc, #20]	; (8002440 <HAL_IncTick+0x20>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4413      	add	r3, r2
 8002430:	4a03      	ldr	r2, [pc, #12]	; (8002440 <HAL_IncTick+0x20>)
 8002432:	6013      	str	r3, [r2, #0]
}
 8002434:	bf00      	nop
 8002436:	46bd      	mov	sp, r7
 8002438:	bc80      	pop	{r7}
 800243a:	4770      	bx	lr
 800243c:	20000068 	.word	0x20000068
 8002440:	200015b4 	.word	0x200015b4

08002444 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
  return uwTick;
 8002448:	4b02      	ldr	r3, [pc, #8]	; (8002454 <HAL_GetTick+0x10>)
 800244a:	681b      	ldr	r3, [r3, #0]
}
 800244c:	4618      	mov	r0, r3
 800244e:	46bd      	mov	sp, r7
 8002450:	bc80      	pop	{r7}
 8002452:	4770      	bx	lr
 8002454:	200015b4 	.word	0x200015b4

08002458 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002458:	b480      	push	{r7}
 800245a:	b085      	sub	sp, #20
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	f003 0307 	and.w	r3, r3, #7
 8002466:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002468:	4b0c      	ldr	r3, [pc, #48]	; (800249c <__NVIC_SetPriorityGrouping+0x44>)
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800246e:	68ba      	ldr	r2, [r7, #8]
 8002470:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002474:	4013      	ands	r3, r2
 8002476:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002480:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002484:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002488:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800248a:	4a04      	ldr	r2, [pc, #16]	; (800249c <__NVIC_SetPriorityGrouping+0x44>)
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	60d3      	str	r3, [r2, #12]
}
 8002490:	bf00      	nop
 8002492:	3714      	adds	r7, #20
 8002494:	46bd      	mov	sp, r7
 8002496:	bc80      	pop	{r7}
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop
 800249c:	e000ed00 	.word	0xe000ed00

080024a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024a4:	4b04      	ldr	r3, [pc, #16]	; (80024b8 <__NVIC_GetPriorityGrouping+0x18>)
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	0a1b      	lsrs	r3, r3, #8
 80024aa:	f003 0307 	and.w	r3, r3, #7
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bc80      	pop	{r7}
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop
 80024b8:	e000ed00 	.word	0xe000ed00

080024bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	4603      	mov	r3, r0
 80024c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	db0b      	blt.n	80024e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024ce:	79fb      	ldrb	r3, [r7, #7]
 80024d0:	f003 021f 	and.w	r2, r3, #31
 80024d4:	4906      	ldr	r1, [pc, #24]	; (80024f0 <__NVIC_EnableIRQ+0x34>)
 80024d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024da:	095b      	lsrs	r3, r3, #5
 80024dc:	2001      	movs	r0, #1
 80024de:	fa00 f202 	lsl.w	r2, r0, r2
 80024e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024e6:	bf00      	nop
 80024e8:	370c      	adds	r7, #12
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bc80      	pop	{r7}
 80024ee:	4770      	bx	lr
 80024f0:	e000e100 	.word	0xe000e100

080024f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	4603      	mov	r3, r0
 80024fc:	6039      	str	r1, [r7, #0]
 80024fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002500:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002504:	2b00      	cmp	r3, #0
 8002506:	db0a      	blt.n	800251e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	b2da      	uxtb	r2, r3
 800250c:	490c      	ldr	r1, [pc, #48]	; (8002540 <__NVIC_SetPriority+0x4c>)
 800250e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002512:	0112      	lsls	r2, r2, #4
 8002514:	b2d2      	uxtb	r2, r2
 8002516:	440b      	add	r3, r1
 8002518:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800251c:	e00a      	b.n	8002534 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	b2da      	uxtb	r2, r3
 8002522:	4908      	ldr	r1, [pc, #32]	; (8002544 <__NVIC_SetPriority+0x50>)
 8002524:	79fb      	ldrb	r3, [r7, #7]
 8002526:	f003 030f 	and.w	r3, r3, #15
 800252a:	3b04      	subs	r3, #4
 800252c:	0112      	lsls	r2, r2, #4
 800252e:	b2d2      	uxtb	r2, r2
 8002530:	440b      	add	r3, r1
 8002532:	761a      	strb	r2, [r3, #24]
}
 8002534:	bf00      	nop
 8002536:	370c      	adds	r7, #12
 8002538:	46bd      	mov	sp, r7
 800253a:	bc80      	pop	{r7}
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	e000e100 	.word	0xe000e100
 8002544:	e000ed00 	.word	0xe000ed00

08002548 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002548:	b480      	push	{r7}
 800254a:	b089      	sub	sp, #36	; 0x24
 800254c:	af00      	add	r7, sp, #0
 800254e:	60f8      	str	r0, [r7, #12]
 8002550:	60b9      	str	r1, [r7, #8]
 8002552:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	f003 0307 	and.w	r3, r3, #7
 800255a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	f1c3 0307 	rsb	r3, r3, #7
 8002562:	2b04      	cmp	r3, #4
 8002564:	bf28      	it	cs
 8002566:	2304      	movcs	r3, #4
 8002568:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	3304      	adds	r3, #4
 800256e:	2b06      	cmp	r3, #6
 8002570:	d902      	bls.n	8002578 <NVIC_EncodePriority+0x30>
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	3b03      	subs	r3, #3
 8002576:	e000      	b.n	800257a <NVIC_EncodePriority+0x32>
 8002578:	2300      	movs	r3, #0
 800257a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800257c:	f04f 32ff 	mov.w	r2, #4294967295
 8002580:	69bb      	ldr	r3, [r7, #24]
 8002582:	fa02 f303 	lsl.w	r3, r2, r3
 8002586:	43da      	mvns	r2, r3
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	401a      	ands	r2, r3
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002590:	f04f 31ff 	mov.w	r1, #4294967295
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	fa01 f303 	lsl.w	r3, r1, r3
 800259a:	43d9      	mvns	r1, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025a0:	4313      	orrs	r3, r2
         );
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3724      	adds	r7, #36	; 0x24
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bc80      	pop	{r7}
 80025aa:	4770      	bx	lr

080025ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	3b01      	subs	r3, #1
 80025b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025bc:	d301      	bcc.n	80025c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025be:	2301      	movs	r3, #1
 80025c0:	e00f      	b.n	80025e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025c2:	4a0a      	ldr	r2, [pc, #40]	; (80025ec <SysTick_Config+0x40>)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	3b01      	subs	r3, #1
 80025c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025ca:	210f      	movs	r1, #15
 80025cc:	f04f 30ff 	mov.w	r0, #4294967295
 80025d0:	f7ff ff90 	bl	80024f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025d4:	4b05      	ldr	r3, [pc, #20]	; (80025ec <SysTick_Config+0x40>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025da:	4b04      	ldr	r3, [pc, #16]	; (80025ec <SysTick_Config+0x40>)
 80025dc:	2207      	movs	r2, #7
 80025de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025e0:	2300      	movs	r3, #0
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3708      	adds	r7, #8
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	e000e010 	.word	0xe000e010

080025f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f7ff ff2d 	bl	8002458 <__NVIC_SetPriorityGrouping>
}
 80025fe:	bf00      	nop
 8002600:	3708      	adds	r7, #8
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}

08002606 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002606:	b580      	push	{r7, lr}
 8002608:	b086      	sub	sp, #24
 800260a:	af00      	add	r7, sp, #0
 800260c:	4603      	mov	r3, r0
 800260e:	60b9      	str	r1, [r7, #8]
 8002610:	607a      	str	r2, [r7, #4]
 8002612:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002614:	2300      	movs	r3, #0
 8002616:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002618:	f7ff ff42 	bl	80024a0 <__NVIC_GetPriorityGrouping>
 800261c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	68b9      	ldr	r1, [r7, #8]
 8002622:	6978      	ldr	r0, [r7, #20]
 8002624:	f7ff ff90 	bl	8002548 <NVIC_EncodePriority>
 8002628:	4602      	mov	r2, r0
 800262a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800262e:	4611      	mov	r1, r2
 8002630:	4618      	mov	r0, r3
 8002632:	f7ff ff5f 	bl	80024f4 <__NVIC_SetPriority>
}
 8002636:	bf00      	nop
 8002638:	3718      	adds	r7, #24
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}

0800263e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800263e:	b580      	push	{r7, lr}
 8002640:	b082      	sub	sp, #8
 8002642:	af00      	add	r7, sp, #0
 8002644:	4603      	mov	r3, r0
 8002646:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002648:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800264c:	4618      	mov	r0, r3
 800264e:	f7ff ff35 	bl	80024bc <__NVIC_EnableIRQ>
}
 8002652:	bf00      	nop
 8002654:	3708      	adds	r7, #8
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}

0800265a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800265a:	b580      	push	{r7, lr}
 800265c:	b082      	sub	sp, #8
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f7ff ffa2 	bl	80025ac <SysTick_Config>
 8002668:	4603      	mov	r3, r0
}
 800266a:	4618      	mov	r0, r3
 800266c:	3708      	adds	r7, #8
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
	...

08002674 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002674:	b480      	push	{r7}
 8002676:	b08b      	sub	sp, #44	; 0x2c
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800267e:	2300      	movs	r3, #0
 8002680:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002682:	2300      	movs	r3, #0
 8002684:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002686:	e169      	b.n	800295c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002688:	2201      	movs	r2, #1
 800268a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268c:	fa02 f303 	lsl.w	r3, r2, r3
 8002690:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	69fa      	ldr	r2, [r7, #28]
 8002698:	4013      	ands	r3, r2
 800269a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800269c:	69ba      	ldr	r2, [r7, #24]
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	f040 8158 	bne.w	8002956 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	4a9a      	ldr	r2, [pc, #616]	; (8002914 <HAL_GPIO_Init+0x2a0>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d05e      	beq.n	800276e <HAL_GPIO_Init+0xfa>
 80026b0:	4a98      	ldr	r2, [pc, #608]	; (8002914 <HAL_GPIO_Init+0x2a0>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d875      	bhi.n	80027a2 <HAL_GPIO_Init+0x12e>
 80026b6:	4a98      	ldr	r2, [pc, #608]	; (8002918 <HAL_GPIO_Init+0x2a4>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d058      	beq.n	800276e <HAL_GPIO_Init+0xfa>
 80026bc:	4a96      	ldr	r2, [pc, #600]	; (8002918 <HAL_GPIO_Init+0x2a4>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d86f      	bhi.n	80027a2 <HAL_GPIO_Init+0x12e>
 80026c2:	4a96      	ldr	r2, [pc, #600]	; (800291c <HAL_GPIO_Init+0x2a8>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d052      	beq.n	800276e <HAL_GPIO_Init+0xfa>
 80026c8:	4a94      	ldr	r2, [pc, #592]	; (800291c <HAL_GPIO_Init+0x2a8>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d869      	bhi.n	80027a2 <HAL_GPIO_Init+0x12e>
 80026ce:	4a94      	ldr	r2, [pc, #592]	; (8002920 <HAL_GPIO_Init+0x2ac>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d04c      	beq.n	800276e <HAL_GPIO_Init+0xfa>
 80026d4:	4a92      	ldr	r2, [pc, #584]	; (8002920 <HAL_GPIO_Init+0x2ac>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d863      	bhi.n	80027a2 <HAL_GPIO_Init+0x12e>
 80026da:	4a92      	ldr	r2, [pc, #584]	; (8002924 <HAL_GPIO_Init+0x2b0>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d046      	beq.n	800276e <HAL_GPIO_Init+0xfa>
 80026e0:	4a90      	ldr	r2, [pc, #576]	; (8002924 <HAL_GPIO_Init+0x2b0>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d85d      	bhi.n	80027a2 <HAL_GPIO_Init+0x12e>
 80026e6:	2b12      	cmp	r3, #18
 80026e8:	d82a      	bhi.n	8002740 <HAL_GPIO_Init+0xcc>
 80026ea:	2b12      	cmp	r3, #18
 80026ec:	d859      	bhi.n	80027a2 <HAL_GPIO_Init+0x12e>
 80026ee:	a201      	add	r2, pc, #4	; (adr r2, 80026f4 <HAL_GPIO_Init+0x80>)
 80026f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026f4:	0800276f 	.word	0x0800276f
 80026f8:	08002749 	.word	0x08002749
 80026fc:	0800275b 	.word	0x0800275b
 8002700:	0800279d 	.word	0x0800279d
 8002704:	080027a3 	.word	0x080027a3
 8002708:	080027a3 	.word	0x080027a3
 800270c:	080027a3 	.word	0x080027a3
 8002710:	080027a3 	.word	0x080027a3
 8002714:	080027a3 	.word	0x080027a3
 8002718:	080027a3 	.word	0x080027a3
 800271c:	080027a3 	.word	0x080027a3
 8002720:	080027a3 	.word	0x080027a3
 8002724:	080027a3 	.word	0x080027a3
 8002728:	080027a3 	.word	0x080027a3
 800272c:	080027a3 	.word	0x080027a3
 8002730:	080027a3 	.word	0x080027a3
 8002734:	080027a3 	.word	0x080027a3
 8002738:	08002751 	.word	0x08002751
 800273c:	08002765 	.word	0x08002765
 8002740:	4a79      	ldr	r2, [pc, #484]	; (8002928 <HAL_GPIO_Init+0x2b4>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d013      	beq.n	800276e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002746:	e02c      	b.n	80027a2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	623b      	str	r3, [r7, #32]
          break;
 800274e:	e029      	b.n	80027a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	3304      	adds	r3, #4
 8002756:	623b      	str	r3, [r7, #32]
          break;
 8002758:	e024      	b.n	80027a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	3308      	adds	r3, #8
 8002760:	623b      	str	r3, [r7, #32]
          break;
 8002762:	e01f      	b.n	80027a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	330c      	adds	r3, #12
 800276a:	623b      	str	r3, [r7, #32]
          break;
 800276c:	e01a      	b.n	80027a4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d102      	bne.n	800277c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002776:	2304      	movs	r3, #4
 8002778:	623b      	str	r3, [r7, #32]
          break;
 800277a:	e013      	b.n	80027a4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	2b01      	cmp	r3, #1
 8002782:	d105      	bne.n	8002790 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002784:	2308      	movs	r3, #8
 8002786:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	69fa      	ldr	r2, [r7, #28]
 800278c:	611a      	str	r2, [r3, #16]
          break;
 800278e:	e009      	b.n	80027a4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002790:	2308      	movs	r3, #8
 8002792:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	69fa      	ldr	r2, [r7, #28]
 8002798:	615a      	str	r2, [r3, #20]
          break;
 800279a:	e003      	b.n	80027a4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800279c:	2300      	movs	r3, #0
 800279e:	623b      	str	r3, [r7, #32]
          break;
 80027a0:	e000      	b.n	80027a4 <HAL_GPIO_Init+0x130>
          break;
 80027a2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80027a4:	69bb      	ldr	r3, [r7, #24]
 80027a6:	2bff      	cmp	r3, #255	; 0xff
 80027a8:	d801      	bhi.n	80027ae <HAL_GPIO_Init+0x13a>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	e001      	b.n	80027b2 <HAL_GPIO_Init+0x13e>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	3304      	adds	r3, #4
 80027b2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80027b4:	69bb      	ldr	r3, [r7, #24]
 80027b6:	2bff      	cmp	r3, #255	; 0xff
 80027b8:	d802      	bhi.n	80027c0 <HAL_GPIO_Init+0x14c>
 80027ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	e002      	b.n	80027c6 <HAL_GPIO_Init+0x152>
 80027c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c2:	3b08      	subs	r3, #8
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	210f      	movs	r1, #15
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	fa01 f303 	lsl.w	r3, r1, r3
 80027d4:	43db      	mvns	r3, r3
 80027d6:	401a      	ands	r2, r3
 80027d8:	6a39      	ldr	r1, [r7, #32]
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	fa01 f303 	lsl.w	r3, r1, r3
 80027e0:	431a      	orrs	r2, r3
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	f000 80b1 	beq.w	8002956 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80027f4:	4b4d      	ldr	r3, [pc, #308]	; (800292c <HAL_GPIO_Init+0x2b8>)
 80027f6:	699b      	ldr	r3, [r3, #24]
 80027f8:	4a4c      	ldr	r2, [pc, #304]	; (800292c <HAL_GPIO_Init+0x2b8>)
 80027fa:	f043 0301 	orr.w	r3, r3, #1
 80027fe:	6193      	str	r3, [r2, #24]
 8002800:	4b4a      	ldr	r3, [pc, #296]	; (800292c <HAL_GPIO_Init+0x2b8>)
 8002802:	699b      	ldr	r3, [r3, #24]
 8002804:	f003 0301 	and.w	r3, r3, #1
 8002808:	60bb      	str	r3, [r7, #8]
 800280a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800280c:	4a48      	ldr	r2, [pc, #288]	; (8002930 <HAL_GPIO_Init+0x2bc>)
 800280e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002810:	089b      	lsrs	r3, r3, #2
 8002812:	3302      	adds	r3, #2
 8002814:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002818:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800281a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281c:	f003 0303 	and.w	r3, r3, #3
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	220f      	movs	r2, #15
 8002824:	fa02 f303 	lsl.w	r3, r2, r3
 8002828:	43db      	mvns	r3, r3
 800282a:	68fa      	ldr	r2, [r7, #12]
 800282c:	4013      	ands	r3, r2
 800282e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	4a40      	ldr	r2, [pc, #256]	; (8002934 <HAL_GPIO_Init+0x2c0>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d013      	beq.n	8002860 <HAL_GPIO_Init+0x1ec>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	4a3f      	ldr	r2, [pc, #252]	; (8002938 <HAL_GPIO_Init+0x2c4>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d00d      	beq.n	800285c <HAL_GPIO_Init+0x1e8>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	4a3e      	ldr	r2, [pc, #248]	; (800293c <HAL_GPIO_Init+0x2c8>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d007      	beq.n	8002858 <HAL_GPIO_Init+0x1e4>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	4a3d      	ldr	r2, [pc, #244]	; (8002940 <HAL_GPIO_Init+0x2cc>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d101      	bne.n	8002854 <HAL_GPIO_Init+0x1e0>
 8002850:	2303      	movs	r3, #3
 8002852:	e006      	b.n	8002862 <HAL_GPIO_Init+0x1ee>
 8002854:	2304      	movs	r3, #4
 8002856:	e004      	b.n	8002862 <HAL_GPIO_Init+0x1ee>
 8002858:	2302      	movs	r3, #2
 800285a:	e002      	b.n	8002862 <HAL_GPIO_Init+0x1ee>
 800285c:	2301      	movs	r3, #1
 800285e:	e000      	b.n	8002862 <HAL_GPIO_Init+0x1ee>
 8002860:	2300      	movs	r3, #0
 8002862:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002864:	f002 0203 	and.w	r2, r2, #3
 8002868:	0092      	lsls	r2, r2, #2
 800286a:	4093      	lsls	r3, r2
 800286c:	68fa      	ldr	r2, [r7, #12]
 800286e:	4313      	orrs	r3, r2
 8002870:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002872:	492f      	ldr	r1, [pc, #188]	; (8002930 <HAL_GPIO_Init+0x2bc>)
 8002874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002876:	089b      	lsrs	r3, r3, #2
 8002878:	3302      	adds	r3, #2
 800287a:	68fa      	ldr	r2, [r7, #12]
 800287c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d006      	beq.n	800289a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800288c:	4b2d      	ldr	r3, [pc, #180]	; (8002944 <HAL_GPIO_Init+0x2d0>)
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	492c      	ldr	r1, [pc, #176]	; (8002944 <HAL_GPIO_Init+0x2d0>)
 8002892:	69bb      	ldr	r3, [r7, #24]
 8002894:	4313      	orrs	r3, r2
 8002896:	600b      	str	r3, [r1, #0]
 8002898:	e006      	b.n	80028a8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800289a:	4b2a      	ldr	r3, [pc, #168]	; (8002944 <HAL_GPIO_Init+0x2d0>)
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	69bb      	ldr	r3, [r7, #24]
 80028a0:	43db      	mvns	r3, r3
 80028a2:	4928      	ldr	r1, [pc, #160]	; (8002944 <HAL_GPIO_Init+0x2d0>)
 80028a4:	4013      	ands	r3, r2
 80028a6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d006      	beq.n	80028c2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80028b4:	4b23      	ldr	r3, [pc, #140]	; (8002944 <HAL_GPIO_Init+0x2d0>)
 80028b6:	685a      	ldr	r2, [r3, #4]
 80028b8:	4922      	ldr	r1, [pc, #136]	; (8002944 <HAL_GPIO_Init+0x2d0>)
 80028ba:	69bb      	ldr	r3, [r7, #24]
 80028bc:	4313      	orrs	r3, r2
 80028be:	604b      	str	r3, [r1, #4]
 80028c0:	e006      	b.n	80028d0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80028c2:	4b20      	ldr	r3, [pc, #128]	; (8002944 <HAL_GPIO_Init+0x2d0>)
 80028c4:	685a      	ldr	r2, [r3, #4]
 80028c6:	69bb      	ldr	r3, [r7, #24]
 80028c8:	43db      	mvns	r3, r3
 80028ca:	491e      	ldr	r1, [pc, #120]	; (8002944 <HAL_GPIO_Init+0x2d0>)
 80028cc:	4013      	ands	r3, r2
 80028ce:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d006      	beq.n	80028ea <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80028dc:	4b19      	ldr	r3, [pc, #100]	; (8002944 <HAL_GPIO_Init+0x2d0>)
 80028de:	689a      	ldr	r2, [r3, #8]
 80028e0:	4918      	ldr	r1, [pc, #96]	; (8002944 <HAL_GPIO_Init+0x2d0>)
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	4313      	orrs	r3, r2
 80028e6:	608b      	str	r3, [r1, #8]
 80028e8:	e006      	b.n	80028f8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80028ea:	4b16      	ldr	r3, [pc, #88]	; (8002944 <HAL_GPIO_Init+0x2d0>)
 80028ec:	689a      	ldr	r2, [r3, #8]
 80028ee:	69bb      	ldr	r3, [r7, #24]
 80028f0:	43db      	mvns	r3, r3
 80028f2:	4914      	ldr	r1, [pc, #80]	; (8002944 <HAL_GPIO_Init+0x2d0>)
 80028f4:	4013      	ands	r3, r2
 80028f6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d021      	beq.n	8002948 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002904:	4b0f      	ldr	r3, [pc, #60]	; (8002944 <HAL_GPIO_Init+0x2d0>)
 8002906:	68da      	ldr	r2, [r3, #12]
 8002908:	490e      	ldr	r1, [pc, #56]	; (8002944 <HAL_GPIO_Init+0x2d0>)
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	4313      	orrs	r3, r2
 800290e:	60cb      	str	r3, [r1, #12]
 8002910:	e021      	b.n	8002956 <HAL_GPIO_Init+0x2e2>
 8002912:	bf00      	nop
 8002914:	10320000 	.word	0x10320000
 8002918:	10310000 	.word	0x10310000
 800291c:	10220000 	.word	0x10220000
 8002920:	10210000 	.word	0x10210000
 8002924:	10120000 	.word	0x10120000
 8002928:	10110000 	.word	0x10110000
 800292c:	40021000 	.word	0x40021000
 8002930:	40010000 	.word	0x40010000
 8002934:	40010800 	.word	0x40010800
 8002938:	40010c00 	.word	0x40010c00
 800293c:	40011000 	.word	0x40011000
 8002940:	40011400 	.word	0x40011400
 8002944:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002948:	4b0b      	ldr	r3, [pc, #44]	; (8002978 <HAL_GPIO_Init+0x304>)
 800294a:	68da      	ldr	r2, [r3, #12]
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	43db      	mvns	r3, r3
 8002950:	4909      	ldr	r1, [pc, #36]	; (8002978 <HAL_GPIO_Init+0x304>)
 8002952:	4013      	ands	r3, r2
 8002954:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002958:	3301      	adds	r3, #1
 800295a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002962:	fa22 f303 	lsr.w	r3, r2, r3
 8002966:	2b00      	cmp	r3, #0
 8002968:	f47f ae8e 	bne.w	8002688 <HAL_GPIO_Init+0x14>
  }
}
 800296c:	bf00      	nop
 800296e:	bf00      	nop
 8002970:	372c      	adds	r7, #44	; 0x2c
 8002972:	46bd      	mov	sp, r7
 8002974:	bc80      	pop	{r7}
 8002976:	4770      	bx	lr
 8002978:	40010400 	.word	0x40010400

0800297c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800297c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800297e:	b08b      	sub	sp, #44	; 0x2c
 8002980:	af06      	add	r7, sp, #24
 8002982:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d101      	bne.n	800298e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e0fd      	b.n	8002b8a <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002994:	b2db      	uxtb	r3, r3
 8002996:	2b00      	cmp	r3, #0
 8002998:	d106      	bne.n	80029a8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f7ff fa3e 	bl	8001e24 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2203      	movs	r2, #3
 80029ac:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4618      	mov	r0, r3
 80029b6:	f003 fb02 	bl	8005fbe <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	603b      	str	r3, [r7, #0]
 80029c0:	687e      	ldr	r6, [r7, #4]
 80029c2:	466d      	mov	r5, sp
 80029c4:	f106 0410 	add.w	r4, r6, #16
 80029c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029cc:	6823      	ldr	r3, [r4, #0]
 80029ce:	602b      	str	r3, [r5, #0]
 80029d0:	1d33      	adds	r3, r6, #4
 80029d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029d4:	6838      	ldr	r0, [r7, #0]
 80029d6:	f003 facc 	bl	8005f72 <USB_CoreInit>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d005      	beq.n	80029ec <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2202      	movs	r2, #2
 80029e4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e0ce      	b.n	8002b8a <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2100      	movs	r1, #0
 80029f2:	4618      	mov	r0, r3
 80029f4:	f003 fafd 	bl	8005ff2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029f8:	2300      	movs	r3, #0
 80029fa:	73fb      	strb	r3, [r7, #15]
 80029fc:	e04c      	b.n	8002a98 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80029fe:	7bfb      	ldrb	r3, [r7, #15]
 8002a00:	6879      	ldr	r1, [r7, #4]
 8002a02:	1c5a      	adds	r2, r3, #1
 8002a04:	4613      	mov	r3, r2
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	4413      	add	r3, r2
 8002a0a:	00db      	lsls	r3, r3, #3
 8002a0c:	440b      	add	r3, r1
 8002a0e:	3301      	adds	r3, #1
 8002a10:	2201      	movs	r2, #1
 8002a12:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002a14:	7bfb      	ldrb	r3, [r7, #15]
 8002a16:	6879      	ldr	r1, [r7, #4]
 8002a18:	1c5a      	adds	r2, r3, #1
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	4413      	add	r3, r2
 8002a20:	00db      	lsls	r3, r3, #3
 8002a22:	440b      	add	r3, r1
 8002a24:	7bfa      	ldrb	r2, [r7, #15]
 8002a26:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002a28:	7bfa      	ldrb	r2, [r7, #15]
 8002a2a:	7bfb      	ldrb	r3, [r7, #15]
 8002a2c:	b298      	uxth	r0, r3
 8002a2e:	6879      	ldr	r1, [r7, #4]
 8002a30:	4613      	mov	r3, r2
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	4413      	add	r3, r2
 8002a36:	00db      	lsls	r3, r3, #3
 8002a38:	440b      	add	r3, r1
 8002a3a:	3336      	adds	r3, #54	; 0x36
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002a40:	7bfb      	ldrb	r3, [r7, #15]
 8002a42:	6879      	ldr	r1, [r7, #4]
 8002a44:	1c5a      	adds	r2, r3, #1
 8002a46:	4613      	mov	r3, r2
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	4413      	add	r3, r2
 8002a4c:	00db      	lsls	r3, r3, #3
 8002a4e:	440b      	add	r3, r1
 8002a50:	3303      	adds	r3, #3
 8002a52:	2200      	movs	r2, #0
 8002a54:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002a56:	7bfa      	ldrb	r2, [r7, #15]
 8002a58:	6879      	ldr	r1, [r7, #4]
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	4413      	add	r3, r2
 8002a60:	00db      	lsls	r3, r3, #3
 8002a62:	440b      	add	r3, r1
 8002a64:	3338      	adds	r3, #56	; 0x38
 8002a66:	2200      	movs	r2, #0
 8002a68:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002a6a:	7bfa      	ldrb	r2, [r7, #15]
 8002a6c:	6879      	ldr	r1, [r7, #4]
 8002a6e:	4613      	mov	r3, r2
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	4413      	add	r3, r2
 8002a74:	00db      	lsls	r3, r3, #3
 8002a76:	440b      	add	r3, r1
 8002a78:	333c      	adds	r3, #60	; 0x3c
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002a7e:	7bfa      	ldrb	r2, [r7, #15]
 8002a80:	6879      	ldr	r1, [r7, #4]
 8002a82:	4613      	mov	r3, r2
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	4413      	add	r3, r2
 8002a88:	00db      	lsls	r3, r3, #3
 8002a8a:	440b      	add	r3, r1
 8002a8c:	3340      	adds	r3, #64	; 0x40
 8002a8e:	2200      	movs	r2, #0
 8002a90:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a92:	7bfb      	ldrb	r3, [r7, #15]
 8002a94:	3301      	adds	r3, #1
 8002a96:	73fb      	strb	r3, [r7, #15]
 8002a98:	7bfa      	ldrb	r2, [r7, #15]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d3ad      	bcc.n	80029fe <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	73fb      	strb	r3, [r7, #15]
 8002aa6:	e044      	b.n	8002b32 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002aa8:	7bfa      	ldrb	r2, [r7, #15]
 8002aaa:	6879      	ldr	r1, [r7, #4]
 8002aac:	4613      	mov	r3, r2
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	4413      	add	r3, r2
 8002ab2:	00db      	lsls	r3, r3, #3
 8002ab4:	440b      	add	r3, r1
 8002ab6:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002aba:	2200      	movs	r2, #0
 8002abc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002abe:	7bfa      	ldrb	r2, [r7, #15]
 8002ac0:	6879      	ldr	r1, [r7, #4]
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	4413      	add	r3, r2
 8002ac8:	00db      	lsls	r3, r3, #3
 8002aca:	440b      	add	r3, r1
 8002acc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002ad0:	7bfa      	ldrb	r2, [r7, #15]
 8002ad2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002ad4:	7bfa      	ldrb	r2, [r7, #15]
 8002ad6:	6879      	ldr	r1, [r7, #4]
 8002ad8:	4613      	mov	r3, r2
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	4413      	add	r3, r2
 8002ade:	00db      	lsls	r3, r3, #3
 8002ae0:	440b      	add	r3, r1
 8002ae2:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002aea:	7bfa      	ldrb	r2, [r7, #15]
 8002aec:	6879      	ldr	r1, [r7, #4]
 8002aee:	4613      	mov	r3, r2
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	4413      	add	r3, r2
 8002af4:	00db      	lsls	r3, r3, #3
 8002af6:	440b      	add	r3, r1
 8002af8:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002afc:	2200      	movs	r2, #0
 8002afe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002b00:	7bfa      	ldrb	r2, [r7, #15]
 8002b02:	6879      	ldr	r1, [r7, #4]
 8002b04:	4613      	mov	r3, r2
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	4413      	add	r3, r2
 8002b0a:	00db      	lsls	r3, r3, #3
 8002b0c:	440b      	add	r3, r1
 8002b0e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002b12:	2200      	movs	r2, #0
 8002b14:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002b16:	7bfa      	ldrb	r2, [r7, #15]
 8002b18:	6879      	ldr	r1, [r7, #4]
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	4413      	add	r3, r2
 8002b20:	00db      	lsls	r3, r3, #3
 8002b22:	440b      	add	r3, r1
 8002b24:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002b28:	2200      	movs	r2, #0
 8002b2a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b2c:	7bfb      	ldrb	r3, [r7, #15]
 8002b2e:	3301      	adds	r3, #1
 8002b30:	73fb      	strb	r3, [r7, #15]
 8002b32:	7bfa      	ldrb	r2, [r7, #15]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d3b5      	bcc.n	8002aa8 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	603b      	str	r3, [r7, #0]
 8002b42:	687e      	ldr	r6, [r7, #4]
 8002b44:	466d      	mov	r5, sp
 8002b46:	f106 0410 	add.w	r4, r6, #16
 8002b4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b4e:	6823      	ldr	r3, [r4, #0]
 8002b50:	602b      	str	r3, [r5, #0]
 8002b52:	1d33      	adds	r3, r6, #4
 8002b54:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b56:	6838      	ldr	r0, [r7, #0]
 8002b58:	f003 fa57 	bl	800600a <USB_DevInit>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d005      	beq.n	8002b6e <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2202      	movs	r2, #2
 8002b66:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e00d      	b.n	8002b8a <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2200      	movs	r2, #0
 8002b72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2201      	movs	r2, #1
 8002b7a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4618      	mov	r0, r3
 8002b84:	f005 ff0a 	bl	800899c <USB_DevDisconnect>

  return HAL_OK;
 8002b88:	2300      	movs	r3, #0
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3714      	adds	r7, #20
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002b92 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002b92:	b580      	push	{r7, lr}
 8002b94:	b082      	sub	sp, #8
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d101      	bne.n	8002ba8 <HAL_PCD_Start+0x16>
 8002ba4:	2302      	movs	r3, #2
 8002ba6:	e016      	b.n	8002bd6 <HAL_PCD_Start+0x44>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2201      	movs	r2, #1
 8002bac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f003 f9ec 	bl	8005f92 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002bba:	2101      	movs	r1, #1
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f7ff fbac 	bl	800231a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f005 fede 	bl	8008988 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002bd4:	2300      	movs	r3, #0
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3708      	adds	r7, #8
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}

08002bde <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002bde:	b580      	push	{r7, lr}
 8002be0:	b088      	sub	sp, #32
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4618      	mov	r0, r3
 8002bec:	f005 fee0 	bl	80089b0 <USB_ReadInterrupts>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002bf6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bfa:	d102      	bne.n	8002c02 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f000 fb5f 	bl	80032c0 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4618      	mov	r0, r3
 8002c08:	f005 fed2 	bl	80089b0 <USB_ReadInterrupts>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c16:	d112      	bne.n	8002c3e <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002c20:	b29a      	uxth	r2, r3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c2a:	b292      	uxth	r2, r2
 8002c2c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	f7ff f97a 	bl	8001f2a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002c36:	2100      	movs	r1, #0
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f000 f923 	bl	8002e84 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4618      	mov	r0, r3
 8002c44:	f005 feb4 	bl	80089b0 <USB_ReadInterrupts>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c4e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c52:	d10b      	bne.n	8002c6c <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002c5c:	b29a      	uxth	r2, r3
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002c66:	b292      	uxth	r2, r2
 8002c68:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4618      	mov	r0, r3
 8002c72:	f005 fe9d 	bl	80089b0 <USB_ReadInterrupts>
 8002c76:	4603      	mov	r3, r0
 8002c78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c80:	d10b      	bne.n	8002c9a <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002c8a:	b29a      	uxth	r2, r3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c94:	b292      	uxth	r2, r2
 8002c96:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f005 fe86 	bl	80089b0 <USB_ReadInterrupts>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002caa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cae:	d126      	bne.n	8002cfe <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002cb8:	b29a      	uxth	r2, r3
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f022 0204 	bic.w	r2, r2, #4
 8002cc2:	b292      	uxth	r2, r2
 8002cc4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002cd0:	b29a      	uxth	r2, r3
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f022 0208 	bic.w	r2, r2, #8
 8002cda:	b292      	uxth	r2, r2
 8002cdc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f7ff f95b 	bl	8001f9c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002cee:	b29a      	uxth	r2, r3
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002cf8:	b292      	uxth	r2, r2
 8002cfa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4618      	mov	r0, r3
 8002d04:	f005 fe54 	bl	80089b0 <USB_ReadInterrupts>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d12:	f040 8082 	bne.w	8002e1a <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8002d16:	2300      	movs	r3, #0
 8002d18:	77fb      	strb	r3, [r7, #31]
 8002d1a:	e010      	b.n	8002d3e <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	461a      	mov	r2, r3
 8002d22:	7ffb      	ldrb	r3, [r7, #31]
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	441a      	add	r2, r3
 8002d28:	7ffb      	ldrb	r3, [r7, #31]
 8002d2a:	8812      	ldrh	r2, [r2, #0]
 8002d2c:	b292      	uxth	r2, r2
 8002d2e:	005b      	lsls	r3, r3, #1
 8002d30:	3320      	adds	r3, #32
 8002d32:	443b      	add	r3, r7
 8002d34:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8002d38:	7ffb      	ldrb	r3, [r7, #31]
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	77fb      	strb	r3, [r7, #31]
 8002d3e:	7ffb      	ldrb	r3, [r7, #31]
 8002d40:	2b07      	cmp	r3, #7
 8002d42:	d9eb      	bls.n	8002d1c <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002d4c:	b29a      	uxth	r2, r3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f042 0201 	orr.w	r2, r2, #1
 8002d56:	b292      	uxth	r2, r2
 8002d58:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002d64:	b29a      	uxth	r2, r3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f022 0201 	bic.w	r2, r2, #1
 8002d6e:	b292      	uxth	r2, r2
 8002d70:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002d74:	bf00      	nop
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d0f6      	beq.n	8002d76 <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002d90:	b29a      	uxth	r2, r3
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d9a:	b292      	uxth	r2, r2
 8002d9c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002da0:	2300      	movs	r3, #0
 8002da2:	77fb      	strb	r3, [r7, #31]
 8002da4:	e00f      	b.n	8002dc6 <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002da6:	7ffb      	ldrb	r3, [r7, #31]
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	6812      	ldr	r2, [r2, #0]
 8002dac:	4611      	mov	r1, r2
 8002dae:	7ffa      	ldrb	r2, [r7, #31]
 8002db0:	0092      	lsls	r2, r2, #2
 8002db2:	440a      	add	r2, r1
 8002db4:	005b      	lsls	r3, r3, #1
 8002db6:	3320      	adds	r3, #32
 8002db8:	443b      	add	r3, r7
 8002dba:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8002dbe:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002dc0:	7ffb      	ldrb	r3, [r7, #31]
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	77fb      	strb	r3, [r7, #31]
 8002dc6:	7ffb      	ldrb	r3, [r7, #31]
 8002dc8:	2b07      	cmp	r3, #7
 8002dca:	d9ec      	bls.n	8002da6 <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002dd4:	b29a      	uxth	r2, r3
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f042 0208 	orr.w	r2, r2, #8
 8002dde:	b292      	uxth	r2, r2
 8002de0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002dec:	b29a      	uxth	r2, r3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002df6:	b292      	uxth	r2, r2
 8002df8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002e04:	b29a      	uxth	r2, r3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f042 0204 	orr.w	r2, r2, #4
 8002e0e:	b292      	uxth	r2, r2
 8002e10:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f7ff f8a7 	bl	8001f68 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f005 fdc6 	bl	80089b0 <USB_ReadInterrupts>
 8002e24:	4603      	mov	r3, r0
 8002e26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e2e:	d10e      	bne.n	8002e4e <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002e38:	b29a      	uxth	r2, r3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002e42:	b292      	uxth	r2, r2
 8002e44:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	f7ff f860 	bl	8001f0e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4618      	mov	r0, r3
 8002e54:	f005 fdac 	bl	80089b0 <USB_ReadInterrupts>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e62:	d10b      	bne.n	8002e7c <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002e6c:	b29a      	uxth	r2, r3
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e76:	b292      	uxth	r2, r2
 8002e78:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002e7c:	bf00      	nop
 8002e7e:	3720      	adds	r7, #32
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}

08002e84 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b082      	sub	sp, #8
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	460b      	mov	r3, r1
 8002e8e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d101      	bne.n	8002e9e <HAL_PCD_SetAddress+0x1a>
 8002e9a:	2302      	movs	r3, #2
 8002e9c:	e013      	b.n	8002ec6 <HAL_PCD_SetAddress+0x42>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	78fa      	ldrb	r2, [r7, #3]
 8002eaa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	78fa      	ldrb	r2, [r7, #3]
 8002eb4:	4611      	mov	r1, r2
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f005 fd53 	bl	8008962 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002ec4:	2300      	movs	r3, #0
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3708      	adds	r7, #8
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}

08002ece <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002ece:	b580      	push	{r7, lr}
 8002ed0:	b084      	sub	sp, #16
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	6078      	str	r0, [r7, #4]
 8002ed6:	4608      	mov	r0, r1
 8002ed8:	4611      	mov	r1, r2
 8002eda:	461a      	mov	r2, r3
 8002edc:	4603      	mov	r3, r0
 8002ede:	70fb      	strb	r3, [r7, #3]
 8002ee0:	460b      	mov	r3, r1
 8002ee2:	803b      	strh	r3, [r7, #0]
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002eec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	da0e      	bge.n	8002f12 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ef4:	78fb      	ldrb	r3, [r7, #3]
 8002ef6:	f003 0307 	and.w	r3, r3, #7
 8002efa:	1c5a      	adds	r2, r3, #1
 8002efc:	4613      	mov	r3, r2
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	4413      	add	r3, r2
 8002f02:	00db      	lsls	r3, r3, #3
 8002f04:	687a      	ldr	r2, [r7, #4]
 8002f06:	4413      	add	r3, r2
 8002f08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	705a      	strb	r2, [r3, #1]
 8002f10:	e00e      	b.n	8002f30 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f12:	78fb      	ldrb	r3, [r7, #3]
 8002f14:	f003 0207 	and.w	r2, r3, #7
 8002f18:	4613      	mov	r3, r2
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	4413      	add	r3, r2
 8002f1e:	00db      	lsls	r3, r3, #3
 8002f20:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	4413      	add	r3, r2
 8002f28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002f30:	78fb      	ldrb	r3, [r7, #3]
 8002f32:	f003 0307 	and.w	r3, r3, #7
 8002f36:	b2da      	uxtb	r2, r3
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002f3c:	883a      	ldrh	r2, [r7, #0]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	78ba      	ldrb	r2, [r7, #2]
 8002f46:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	785b      	ldrb	r3, [r3, #1]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d004      	beq.n	8002f5a <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	b29a      	uxth	r2, r3
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002f5a:	78bb      	ldrb	r3, [r7, #2]
 8002f5c:	2b02      	cmp	r3, #2
 8002f5e:	d102      	bne.n	8002f66 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2200      	movs	r2, #0
 8002f64:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d101      	bne.n	8002f74 <HAL_PCD_EP_Open+0xa6>
 8002f70:	2302      	movs	r3, #2
 8002f72:	e00e      	b.n	8002f92 <HAL_PCD_EP_Open+0xc4>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	68f9      	ldr	r1, [r7, #12]
 8002f82:	4618      	mov	r0, r3
 8002f84:	f003 f862 	bl	800604c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002f90:	7afb      	ldrb	r3, [r7, #11]
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3710      	adds	r7, #16
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}

08002f9a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f9a:	b580      	push	{r7, lr}
 8002f9c:	b084      	sub	sp, #16
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	6078      	str	r0, [r7, #4]
 8002fa2:	460b      	mov	r3, r1
 8002fa4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002fa6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	da0e      	bge.n	8002fcc <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fae:	78fb      	ldrb	r3, [r7, #3]
 8002fb0:	f003 0307 	and.w	r3, r3, #7
 8002fb4:	1c5a      	adds	r2, r3, #1
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	4413      	add	r3, r2
 8002fbc:	00db      	lsls	r3, r3, #3
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	4413      	add	r3, r2
 8002fc2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	705a      	strb	r2, [r3, #1]
 8002fca:	e00e      	b.n	8002fea <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fcc:	78fb      	ldrb	r3, [r7, #3]
 8002fce:	f003 0207 	and.w	r2, r3, #7
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	4413      	add	r3, r2
 8002fd8:	00db      	lsls	r3, r3, #3
 8002fda:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	4413      	add	r3, r2
 8002fe2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002fea:	78fb      	ldrb	r3, [r7, #3]
 8002fec:	f003 0307 	and.w	r3, r3, #7
 8002ff0:	b2da      	uxtb	r2, r3
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d101      	bne.n	8003004 <HAL_PCD_EP_Close+0x6a>
 8003000:	2302      	movs	r3, #2
 8003002:	e00e      	b.n	8003022 <HAL_PCD_EP_Close+0x88>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2201      	movs	r2, #1
 8003008:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	68f9      	ldr	r1, [r7, #12]
 8003012:	4618      	mov	r0, r3
 8003014:	f003 fb84 	bl	8006720 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8003020:	2300      	movs	r3, #0
}
 8003022:	4618      	mov	r0, r3
 8003024:	3710      	adds	r7, #16
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}

0800302a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800302a:	b580      	push	{r7, lr}
 800302c:	b086      	sub	sp, #24
 800302e:	af00      	add	r7, sp, #0
 8003030:	60f8      	str	r0, [r7, #12]
 8003032:	607a      	str	r2, [r7, #4]
 8003034:	603b      	str	r3, [r7, #0]
 8003036:	460b      	mov	r3, r1
 8003038:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800303a:	7afb      	ldrb	r3, [r7, #11]
 800303c:	f003 0207 	and.w	r2, r3, #7
 8003040:	4613      	mov	r3, r2
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	4413      	add	r3, r2
 8003046:	00db      	lsls	r3, r3, #3
 8003048:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800304c:	68fa      	ldr	r2, [r7, #12]
 800304e:	4413      	add	r3, r2
 8003050:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	687a      	ldr	r2, [r7, #4]
 8003056:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	683a      	ldr	r2, [r7, #0]
 800305c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	2200      	movs	r2, #0
 8003062:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	2200      	movs	r2, #0
 8003068:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800306a:	7afb      	ldrb	r3, [r7, #11]
 800306c:	f003 0307 	and.w	r3, r3, #7
 8003070:	b2da      	uxtb	r2, r3
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003076:	7afb      	ldrb	r3, [r7, #11]
 8003078:	f003 0307 	and.w	r3, r3, #7
 800307c:	2b00      	cmp	r3, #0
 800307e:	d106      	bne.n	800308e <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	6979      	ldr	r1, [r7, #20]
 8003086:	4618      	mov	r0, r3
 8003088:	f003 fd36 	bl	8006af8 <USB_EPStartXfer>
 800308c:	e005      	b.n	800309a <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	6979      	ldr	r1, [r7, #20]
 8003094:	4618      	mov	r0, r3
 8003096:	f003 fd2f 	bl	8006af8 <USB_EPStartXfer>
  }

  return HAL_OK;
 800309a:	2300      	movs	r3, #0
}
 800309c:	4618      	mov	r0, r3
 800309e:	3718      	adds	r7, #24
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}

080030a4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	460b      	mov	r3, r1
 80030ae:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80030b0:	78fb      	ldrb	r3, [r7, #3]
 80030b2:	f003 0207 	and.w	r2, r3, #7
 80030b6:	6879      	ldr	r1, [r7, #4]
 80030b8:	4613      	mov	r3, r2
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	4413      	add	r3, r2
 80030be:	00db      	lsls	r3, r3, #3
 80030c0:	440b      	add	r3, r1
 80030c2:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80030c6:	681b      	ldr	r3, [r3, #0]
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bc80      	pop	{r7}
 80030d0:	4770      	bx	lr

080030d2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80030d2:	b580      	push	{r7, lr}
 80030d4:	b086      	sub	sp, #24
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	60f8      	str	r0, [r7, #12]
 80030da:	607a      	str	r2, [r7, #4]
 80030dc:	603b      	str	r3, [r7, #0]
 80030de:	460b      	mov	r3, r1
 80030e0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030e2:	7afb      	ldrb	r3, [r7, #11]
 80030e4:	f003 0307 	and.w	r3, r3, #7
 80030e8:	1c5a      	adds	r2, r3, #1
 80030ea:	4613      	mov	r3, r2
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	4413      	add	r3, r2
 80030f0:	00db      	lsls	r3, r3, #3
 80030f2:	68fa      	ldr	r2, [r7, #12]
 80030f4:	4413      	add	r3, r2
 80030f6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	683a      	ldr	r2, [r7, #0]
 8003102:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	2201      	movs	r2, #1
 8003108:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	683a      	ldr	r2, [r7, #0]
 8003110:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	2200      	movs	r2, #0
 8003116:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	2201      	movs	r2, #1
 800311c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800311e:	7afb      	ldrb	r3, [r7, #11]
 8003120:	f003 0307 	and.w	r3, r3, #7
 8003124:	b2da      	uxtb	r2, r3
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800312a:	7afb      	ldrb	r3, [r7, #11]
 800312c:	f003 0307 	and.w	r3, r3, #7
 8003130:	2b00      	cmp	r3, #0
 8003132:	d106      	bne.n	8003142 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	6979      	ldr	r1, [r7, #20]
 800313a:	4618      	mov	r0, r3
 800313c:	f003 fcdc 	bl	8006af8 <USB_EPStartXfer>
 8003140:	e005      	b.n	800314e <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	6979      	ldr	r1, [r7, #20]
 8003148:	4618      	mov	r0, r3
 800314a:	f003 fcd5 	bl	8006af8 <USB_EPStartXfer>
  }

  return HAL_OK;
 800314e:	2300      	movs	r3, #0
}
 8003150:	4618      	mov	r0, r3
 8003152:	3718      	adds	r7, #24
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}

08003158 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	460b      	mov	r3, r1
 8003162:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003164:	78fb      	ldrb	r3, [r7, #3]
 8003166:	f003 0207 	and.w	r2, r3, #7
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	429a      	cmp	r2, r3
 8003170:	d901      	bls.n	8003176 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e04c      	b.n	8003210 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003176:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800317a:	2b00      	cmp	r3, #0
 800317c:	da0e      	bge.n	800319c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800317e:	78fb      	ldrb	r3, [r7, #3]
 8003180:	f003 0307 	and.w	r3, r3, #7
 8003184:	1c5a      	adds	r2, r3, #1
 8003186:	4613      	mov	r3, r2
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	4413      	add	r3, r2
 800318c:	00db      	lsls	r3, r3, #3
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	4413      	add	r3, r2
 8003192:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2201      	movs	r2, #1
 8003198:	705a      	strb	r2, [r3, #1]
 800319a:	e00c      	b.n	80031b6 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800319c:	78fa      	ldrb	r2, [r7, #3]
 800319e:	4613      	mov	r3, r2
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	4413      	add	r3, r2
 80031a4:	00db      	lsls	r3, r3, #3
 80031a6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	4413      	add	r3, r2
 80031ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2200      	movs	r2, #0
 80031b4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2201      	movs	r2, #1
 80031ba:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031bc:	78fb      	ldrb	r3, [r7, #3]
 80031be:	f003 0307 	and.w	r3, r3, #7
 80031c2:	b2da      	uxtb	r2, r3
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d101      	bne.n	80031d6 <HAL_PCD_EP_SetStall+0x7e>
 80031d2:	2302      	movs	r3, #2
 80031d4:	e01c      	b.n	8003210 <HAL_PCD_EP_SetStall+0xb8>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2201      	movs	r2, #1
 80031da:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	68f9      	ldr	r1, [r7, #12]
 80031e4:	4618      	mov	r0, r3
 80031e6:	f005 fabf 	bl	8008768 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80031ea:	78fb      	ldrb	r3, [r7, #3]
 80031ec:	f003 0307 	and.w	r3, r3, #7
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d108      	bne.n	8003206 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80031fe:	4619      	mov	r1, r3
 8003200:	4610      	mov	r0, r2
 8003202:	f005 fbe4 	bl	80089ce <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800320e:	2300      	movs	r3, #0
}
 8003210:	4618      	mov	r0, r3
 8003212:	3710      	adds	r7, #16
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}

08003218 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	460b      	mov	r3, r1
 8003222:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003224:	78fb      	ldrb	r3, [r7, #3]
 8003226:	f003 020f 	and.w	r2, r3, #15
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	429a      	cmp	r2, r3
 8003230:	d901      	bls.n	8003236 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e040      	b.n	80032b8 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003236:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800323a:	2b00      	cmp	r3, #0
 800323c:	da0e      	bge.n	800325c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800323e:	78fb      	ldrb	r3, [r7, #3]
 8003240:	f003 0307 	and.w	r3, r3, #7
 8003244:	1c5a      	adds	r2, r3, #1
 8003246:	4613      	mov	r3, r2
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	4413      	add	r3, r2
 800324c:	00db      	lsls	r3, r3, #3
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	4413      	add	r3, r2
 8003252:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2201      	movs	r2, #1
 8003258:	705a      	strb	r2, [r3, #1]
 800325a:	e00e      	b.n	800327a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800325c:	78fb      	ldrb	r3, [r7, #3]
 800325e:	f003 0207 	and.w	r2, r3, #7
 8003262:	4613      	mov	r3, r2
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	4413      	add	r3, r2
 8003268:	00db      	lsls	r3, r3, #3
 800326a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	4413      	add	r3, r2
 8003272:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2200      	movs	r2, #0
 8003278:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2200      	movs	r2, #0
 800327e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003280:	78fb      	ldrb	r3, [r7, #3]
 8003282:	f003 0307 	and.w	r3, r3, #7
 8003286:	b2da      	uxtb	r2, r3
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003292:	2b01      	cmp	r3, #1
 8003294:	d101      	bne.n	800329a <HAL_PCD_EP_ClrStall+0x82>
 8003296:	2302      	movs	r3, #2
 8003298:	e00e      	b.n	80032b8 <HAL_PCD_EP_ClrStall+0xa0>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2201      	movs	r2, #1
 800329e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	68f9      	ldr	r1, [r7, #12]
 80032a8:	4618      	mov	r0, r3
 80032aa:	f005 faad 	bl	8008808 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80032b6:	2300      	movs	r3, #0
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3710      	adds	r7, #16
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}

080032c0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b08e      	sub	sp, #56	; 0x38
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80032c8:	e2ec      	b.n	80038a4 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80032d2:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80032d4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	f003 030f 	and.w	r3, r3, #15
 80032dc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80032e0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	f040 8161 	bne.w	80035ac <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80032ea:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80032ec:	f003 0310 	and.w	r3, r3, #16
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d152      	bne.n	800339a <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	881b      	ldrh	r3, [r3, #0]
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003300:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003304:	81fb      	strh	r3, [r7, #14]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	89fb      	ldrh	r3, [r7, #14]
 800330c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003310:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003314:	b29b      	uxth	r3, r3
 8003316:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	3328      	adds	r3, #40	; 0x28
 800331c:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003326:	b29b      	uxth	r3, r3
 8003328:	461a      	mov	r2, r3
 800332a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332c:	781b      	ldrb	r3, [r3, #0]
 800332e:	00db      	lsls	r3, r3, #3
 8003330:	4413      	add	r3, r2
 8003332:	3302      	adds	r3, #2
 8003334:	005b      	lsls	r3, r3, #1
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	6812      	ldr	r2, [r2, #0]
 800333a:	4413      	add	r3, r2
 800333c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003340:	881b      	ldrh	r3, [r3, #0]
 8003342:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003348:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800334a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334c:	695a      	ldr	r2, [r3, #20]
 800334e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003350:	69db      	ldr	r3, [r3, #28]
 8003352:	441a      	add	r2, r3
 8003354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003356:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003358:	2100      	movs	r1, #0
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f7fe fdbd 	bl	8001eda <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003366:	b2db      	uxtb	r3, r3
 8003368:	2b00      	cmp	r3, #0
 800336a:	f000 829b 	beq.w	80038a4 <PCD_EP_ISR_Handler+0x5e4>
 800336e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003370:	699b      	ldr	r3, [r3, #24]
 8003372:	2b00      	cmp	r3, #0
 8003374:	f040 8296 	bne.w	80038a4 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800337e:	b2db      	uxtb	r3, r3
 8003380:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003384:	b2da      	uxtb	r2, r3
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	b292      	uxth	r2, r2
 800338c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2200      	movs	r2, #0
 8003394:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003398:	e284      	b.n	80038a4 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80033a0:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	881b      	ldrh	r3, [r3, #0]
 80033a8:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80033aa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80033ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d034      	beq.n	800341e <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033bc:	b29b      	uxth	r3, r3
 80033be:	461a      	mov	r2, r3
 80033c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	00db      	lsls	r3, r3, #3
 80033c6:	4413      	add	r3, r2
 80033c8:	3306      	adds	r3, #6
 80033ca:	005b      	lsls	r3, r3, #1
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	6812      	ldr	r2, [r2, #0]
 80033d0:	4413      	add	r3, r2
 80033d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80033d6:	881b      	ldrh	r3, [r3, #0]
 80033d8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80033dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033de:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6818      	ldr	r0, [r3, #0]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80033ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ec:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80033ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f0:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	f005 fb3b 	bl	8008a6e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	881b      	ldrh	r3, [r3, #0]
 80033fe:	b29a      	uxth	r2, r3
 8003400:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003404:	4013      	ands	r3, r2
 8003406:	823b      	strh	r3, [r7, #16]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	8a3a      	ldrh	r2, [r7, #16]
 800340e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003412:	b292      	uxth	r2, r2
 8003414:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f7fe fd32 	bl	8001e80 <HAL_PCD_SetupStageCallback>
 800341c:	e242      	b.n	80038a4 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800341e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003422:	2b00      	cmp	r3, #0
 8003424:	f280 823e 	bge.w	80038a4 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	881b      	ldrh	r3, [r3, #0]
 800342e:	b29a      	uxth	r2, r3
 8003430:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003434:	4013      	ands	r3, r2
 8003436:	83bb      	strh	r3, [r7, #28]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	8bba      	ldrh	r2, [r7, #28]
 800343e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003442:	b292      	uxth	r2, r2
 8003444:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800344e:	b29b      	uxth	r3, r3
 8003450:	461a      	mov	r2, r3
 8003452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003454:	781b      	ldrb	r3, [r3, #0]
 8003456:	00db      	lsls	r3, r3, #3
 8003458:	4413      	add	r3, r2
 800345a:	3306      	adds	r3, #6
 800345c:	005b      	lsls	r3, r3, #1
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	6812      	ldr	r2, [r2, #0]
 8003462:	4413      	add	r3, r2
 8003464:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003468:	881b      	ldrh	r3, [r3, #0]
 800346a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800346e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003470:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003474:	69db      	ldr	r3, [r3, #28]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d019      	beq.n	80034ae <PCD_EP_ISR_Handler+0x1ee>
 800347a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347c:	695b      	ldr	r3, [r3, #20]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d015      	beq.n	80034ae <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6818      	ldr	r0, [r3, #0]
 8003486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003488:	6959      	ldr	r1, [r3, #20]
 800348a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800348e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003490:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003492:	b29b      	uxth	r3, r3
 8003494:	f005 faeb 	bl	8008a6e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349a:	695a      	ldr	r2, [r3, #20]
 800349c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349e:	69db      	ldr	r3, [r3, #28]
 80034a0:	441a      	add	r2, r3
 80034a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a4:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80034a6:	2100      	movs	r1, #0
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f7fe fcfb 	bl	8001ea4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	881b      	ldrh	r3, [r3, #0]
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	f040 81f2 	bne.w	80038a4 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	61bb      	str	r3, [r7, #24]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	461a      	mov	r2, r3
 80034d2:	69bb      	ldr	r3, [r7, #24]
 80034d4:	4413      	add	r3, r2
 80034d6:	61bb      	str	r3, [r7, #24]
 80034d8:	69bb      	ldr	r3, [r7, #24]
 80034da:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80034de:	617b      	str	r3, [r7, #20]
 80034e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e2:	691b      	ldr	r3, [r3, #16]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d112      	bne.n	800350e <PCD_EP_ISR_Handler+0x24e>
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	881b      	ldrh	r3, [r3, #0]
 80034ec:	b29b      	uxth	r3, r3
 80034ee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80034f2:	b29a      	uxth	r2, r3
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	801a      	strh	r2, [r3, #0]
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	881b      	ldrh	r3, [r3, #0]
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003502:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003506:	b29a      	uxth	r2, r3
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	801a      	strh	r2, [r3, #0]
 800350c:	e02f      	b.n	800356e <PCD_EP_ISR_Handler+0x2ae>
 800350e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003510:	691b      	ldr	r3, [r3, #16]
 8003512:	2b3e      	cmp	r3, #62	; 0x3e
 8003514:	d813      	bhi.n	800353e <PCD_EP_ISR_Handler+0x27e>
 8003516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003518:	691b      	ldr	r3, [r3, #16]
 800351a:	085b      	lsrs	r3, r3, #1
 800351c:	633b      	str	r3, [r7, #48]	; 0x30
 800351e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003520:	691b      	ldr	r3, [r3, #16]
 8003522:	f003 0301 	and.w	r3, r3, #1
 8003526:	2b00      	cmp	r3, #0
 8003528:	d002      	beq.n	8003530 <PCD_EP_ISR_Handler+0x270>
 800352a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800352c:	3301      	adds	r3, #1
 800352e:	633b      	str	r3, [r7, #48]	; 0x30
 8003530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003532:	b29b      	uxth	r3, r3
 8003534:	029b      	lsls	r3, r3, #10
 8003536:	b29a      	uxth	r2, r3
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	801a      	strh	r2, [r3, #0]
 800353c:	e017      	b.n	800356e <PCD_EP_ISR_Handler+0x2ae>
 800353e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003540:	691b      	ldr	r3, [r3, #16]
 8003542:	095b      	lsrs	r3, r3, #5
 8003544:	633b      	str	r3, [r7, #48]	; 0x30
 8003546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003548:	691b      	ldr	r3, [r3, #16]
 800354a:	f003 031f 	and.w	r3, r3, #31
 800354e:	2b00      	cmp	r3, #0
 8003550:	d102      	bne.n	8003558 <PCD_EP_ISR_Handler+0x298>
 8003552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003554:	3b01      	subs	r3, #1
 8003556:	633b      	str	r3, [r7, #48]	; 0x30
 8003558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800355a:	b29b      	uxth	r3, r3
 800355c:	029b      	lsls	r3, r3, #10
 800355e:	b29b      	uxth	r3, r3
 8003560:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003564:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003568:	b29a      	uxth	r2, r3
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	881b      	ldrh	r3, [r3, #0]
 8003574:	b29b      	uxth	r3, r3
 8003576:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800357a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800357e:	827b      	strh	r3, [r7, #18]
 8003580:	8a7b      	ldrh	r3, [r7, #18]
 8003582:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003586:	827b      	strh	r3, [r7, #18]
 8003588:	8a7b      	ldrh	r3, [r7, #18]
 800358a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800358e:	827b      	strh	r3, [r7, #18]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	8a7b      	ldrh	r3, [r7, #18]
 8003596:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800359a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800359e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	8013      	strh	r3, [r2, #0]
 80035aa:	e17b      	b.n	80038a4 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	461a      	mov	r2, r3
 80035b2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	4413      	add	r3, r2
 80035ba:	881b      	ldrh	r3, [r3, #0]
 80035bc:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80035be:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	f280 80ea 	bge.w	800379c <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	461a      	mov	r2, r3
 80035ce:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	4413      	add	r3, r2
 80035d6:	881b      	ldrh	r3, [r3, #0]
 80035d8:	b29a      	uxth	r2, r3
 80035da:	f640 738f 	movw	r3, #3983	; 0xf8f
 80035de:	4013      	ands	r3, r2
 80035e0:	853b      	strh	r3, [r7, #40]	; 0x28
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	461a      	mov	r2, r3
 80035e8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	4413      	add	r3, r2
 80035f0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80035f2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80035f6:	b292      	uxth	r2, r2
 80035f8:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80035fa:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80035fe:	4613      	mov	r3, r2
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	4413      	add	r3, r2
 8003604:	00db      	lsls	r3, r3, #3
 8003606:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	4413      	add	r3, r2
 800360e:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003612:	7b1b      	ldrb	r3, [r3, #12]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d122      	bne.n	800365e <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003620:	b29b      	uxth	r3, r3
 8003622:	461a      	mov	r2, r3
 8003624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003626:	781b      	ldrb	r3, [r3, #0]
 8003628:	00db      	lsls	r3, r3, #3
 800362a:	4413      	add	r3, r2
 800362c:	3306      	adds	r3, #6
 800362e:	005b      	lsls	r3, r3, #1
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	6812      	ldr	r2, [r2, #0]
 8003634:	4413      	add	r3, r2
 8003636:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800363a:	881b      	ldrh	r3, [r3, #0]
 800363c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003640:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8003642:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003644:	2b00      	cmp	r3, #0
 8003646:	f000 8087 	beq.w	8003758 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6818      	ldr	r0, [r3, #0]
 800364e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003650:	6959      	ldr	r1, [r3, #20]
 8003652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003654:	88da      	ldrh	r2, [r3, #6]
 8003656:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003658:	f005 fa09 	bl	8008a6e <USB_ReadPMA>
 800365c:	e07c      	b.n	8003758 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800365e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003660:	78db      	ldrb	r3, [r3, #3]
 8003662:	2b02      	cmp	r3, #2
 8003664:	d108      	bne.n	8003678 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003666:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003668:	461a      	mov	r2, r3
 800366a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f000 f927 	bl	80038c0 <HAL_PCD_EP_DB_Receive>
 8003672:	4603      	mov	r3, r0
 8003674:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003676:	e06f      	b.n	8003758 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	461a      	mov	r2, r3
 800367e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	4413      	add	r3, r2
 8003686:	881b      	ldrh	r3, [r3, #0]
 8003688:	b29b      	uxth	r3, r3
 800368a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800368e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003692:	847b      	strh	r3, [r7, #34]	; 0x22
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	461a      	mov	r2, r3
 800369a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	441a      	add	r2, r3
 80036a2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80036a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036b0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80036b4:	b29b      	uxth	r3, r3
 80036b6:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	461a      	mov	r2, r3
 80036be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c0:	781b      	ldrb	r3, [r3, #0]
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	4413      	add	r3, r2
 80036c6:	881b      	ldrh	r3, [r3, #0]
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d021      	beq.n	8003716 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036da:	b29b      	uxth	r3, r3
 80036dc:	461a      	mov	r2, r3
 80036de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e0:	781b      	ldrb	r3, [r3, #0]
 80036e2:	00db      	lsls	r3, r3, #3
 80036e4:	4413      	add	r3, r2
 80036e6:	3302      	adds	r3, #2
 80036e8:	005b      	lsls	r3, r3, #1
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	6812      	ldr	r2, [r2, #0]
 80036ee:	4413      	add	r3, r2
 80036f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80036f4:	881b      	ldrh	r3, [r3, #0]
 80036f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036fa:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80036fc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d02a      	beq.n	8003758 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6818      	ldr	r0, [r3, #0]
 8003706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003708:	6959      	ldr	r1, [r3, #20]
 800370a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370c:	891a      	ldrh	r2, [r3, #8]
 800370e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003710:	f005 f9ad 	bl	8008a6e <USB_ReadPMA>
 8003714:	e020      	b.n	8003758 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800371e:	b29b      	uxth	r3, r3
 8003720:	461a      	mov	r2, r3
 8003722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	00db      	lsls	r3, r3, #3
 8003728:	4413      	add	r3, r2
 800372a:	3306      	adds	r3, #6
 800372c:	005b      	lsls	r3, r3, #1
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	6812      	ldr	r2, [r2, #0]
 8003732:	4413      	add	r3, r2
 8003734:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003738:	881b      	ldrh	r3, [r3, #0]
 800373a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800373e:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003740:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003742:	2b00      	cmp	r3, #0
 8003744:	d008      	beq.n	8003758 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6818      	ldr	r0, [r3, #0]
 800374a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374c:	6959      	ldr	r1, [r3, #20]
 800374e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003750:	895a      	ldrh	r2, [r3, #10]
 8003752:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003754:	f005 f98b 	bl	8008a6e <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375a:	69da      	ldr	r2, [r3, #28]
 800375c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800375e:	441a      	add	r2, r3
 8003760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003762:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003766:	695a      	ldr	r2, [r3, #20]
 8003768:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800376a:	441a      	add	r2, r3
 800376c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003772:	699b      	ldr	r3, [r3, #24]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d004      	beq.n	8003782 <PCD_EP_ISR_Handler+0x4c2>
 8003778:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800377a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377c:	691b      	ldr	r3, [r3, #16]
 800377e:	429a      	cmp	r2, r3
 8003780:	d206      	bcs.n	8003790 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	4619      	mov	r1, r3
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f7fe fb8b 	bl	8001ea4 <HAL_PCD_DataOutStageCallback>
 800378e:	e005      	b.n	800379c <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003796:	4618      	mov	r0, r3
 8003798:	f003 f9ae 	bl	8006af8 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800379c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800379e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d07e      	beq.n	80038a4 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80037a6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80037aa:	1c5a      	adds	r2, r3, #1
 80037ac:	4613      	mov	r3, r2
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	4413      	add	r3, r2
 80037b2:	00db      	lsls	r3, r3, #3
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	4413      	add	r3, r2
 80037b8:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	461a      	mov	r2, r3
 80037c0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	4413      	add	r3, r2
 80037c8:	881b      	ldrh	r3, [r3, #0]
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80037d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037d4:	843b      	strh	r3, [r7, #32]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	461a      	mov	r2, r3
 80037dc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80037e0:	009b      	lsls	r3, r3, #2
 80037e2:	441a      	add	r2, r3
 80037e4:	8c3b      	ldrh	r3, [r7, #32]
 80037e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037ee:	b29b      	uxth	r3, r3
 80037f0:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80037f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f4:	78db      	ldrb	r3, [r3, #3]
 80037f6:	2b03      	cmp	r3, #3
 80037f8:	d00c      	beq.n	8003814 <PCD_EP_ISR_Handler+0x554>
 80037fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fc:	78db      	ldrb	r3, [r3, #3]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d008      	beq.n	8003814 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003804:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8003806:	2b02      	cmp	r3, #2
 8003808:	d146      	bne.n	8003898 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800380a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800380c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003810:	2b00      	cmp	r3, #0
 8003812:	d141      	bne.n	8003898 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800381c:	b29b      	uxth	r3, r3
 800381e:	461a      	mov	r2, r3
 8003820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	00db      	lsls	r3, r3, #3
 8003826:	4413      	add	r3, r2
 8003828:	3302      	adds	r3, #2
 800382a:	005b      	lsls	r3, r3, #1
 800382c:	687a      	ldr	r2, [r7, #4]
 800382e:	6812      	ldr	r2, [r2, #0]
 8003830:	4413      	add	r3, r2
 8003832:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003836:	881b      	ldrh	r3, [r3, #0]
 8003838:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800383c:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 800383e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003840:	699a      	ldr	r2, [r3, #24]
 8003842:	8bfb      	ldrh	r3, [r7, #30]
 8003844:	429a      	cmp	r2, r3
 8003846:	d906      	bls.n	8003856 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8003848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384a:	699a      	ldr	r2, [r3, #24]
 800384c:	8bfb      	ldrh	r3, [r7, #30]
 800384e:	1ad2      	subs	r2, r2, r3
 8003850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003852:	619a      	str	r2, [r3, #24]
 8003854:	e002      	b.n	800385c <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8003856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003858:	2200      	movs	r2, #0
 800385a:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800385c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385e:	699b      	ldr	r3, [r3, #24]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d106      	bne.n	8003872 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003866:	781b      	ldrb	r3, [r3, #0]
 8003868:	4619      	mov	r1, r3
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f7fe fb35 	bl	8001eda <HAL_PCD_DataInStageCallback>
 8003870:	e018      	b.n	80038a4 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8003872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003874:	695a      	ldr	r2, [r3, #20]
 8003876:	8bfb      	ldrh	r3, [r7, #30]
 8003878:	441a      	add	r2, r3
 800387a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387c:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 800387e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003880:	69da      	ldr	r2, [r3, #28]
 8003882:	8bfb      	ldrh	r3, [r7, #30]
 8003884:	441a      	add	r2, r3
 8003886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003888:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003890:	4618      	mov	r0, r3
 8003892:	f003 f931 	bl	8006af8 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8003896:	e005      	b.n	80038a4 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003898:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800389a:	461a      	mov	r2, r3
 800389c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f000 f91b 	bl	8003ada <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	b21b      	sxth	r3, r3
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	f6ff ad0a 	blt.w	80032ca <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80038b6:	2300      	movs	r3, #0
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3738      	adds	r7, #56	; 0x38
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}

080038c0 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b088      	sub	sp, #32
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	60f8      	str	r0, [r7, #12]
 80038c8:	60b9      	str	r1, [r7, #8]
 80038ca:	4613      	mov	r3, r2
 80038cc:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80038ce:	88fb      	ldrh	r3, [r7, #6]
 80038d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d07e      	beq.n	80039d6 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	461a      	mov	r2, r3
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	781b      	ldrb	r3, [r3, #0]
 80038e8:	00db      	lsls	r3, r3, #3
 80038ea:	4413      	add	r3, r2
 80038ec:	3302      	adds	r3, #2
 80038ee:	005b      	lsls	r3, r3, #1
 80038f0:	68fa      	ldr	r2, [r7, #12]
 80038f2:	6812      	ldr	r2, [r2, #0]
 80038f4:	4413      	add	r3, r2
 80038f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80038fa:	881b      	ldrh	r3, [r3, #0]
 80038fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003900:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	699a      	ldr	r2, [r3, #24]
 8003906:	8b7b      	ldrh	r3, [r7, #26]
 8003908:	429a      	cmp	r2, r3
 800390a:	d306      	bcc.n	800391a <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	699a      	ldr	r2, [r3, #24]
 8003910:	8b7b      	ldrh	r3, [r7, #26]
 8003912:	1ad2      	subs	r2, r2, r3
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	619a      	str	r2, [r3, #24]
 8003918:	e002      	b.n	8003920 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	2200      	movs	r2, #0
 800391e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	699b      	ldr	r3, [r3, #24]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d123      	bne.n	8003970 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	461a      	mov	r2, r3
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	4413      	add	r3, r2
 8003936:	881b      	ldrh	r3, [r3, #0]
 8003938:	b29b      	uxth	r3, r3
 800393a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800393e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003942:	833b      	strh	r3, [r7, #24]
 8003944:	8b3b      	ldrh	r3, [r7, #24]
 8003946:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800394a:	833b      	strh	r3, [r7, #24]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	461a      	mov	r2, r3
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	441a      	add	r2, r3
 800395a:	8b3b      	ldrh	r3, [r7, #24]
 800395c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003960:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003964:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003968:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800396c:	b29b      	uxth	r3, r3
 800396e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003970:	88fb      	ldrh	r3, [r7, #6]
 8003972:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003976:	2b00      	cmp	r3, #0
 8003978:	d01f      	beq.n	80039ba <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	461a      	mov	r2, r3
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	781b      	ldrb	r3, [r3, #0]
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	4413      	add	r3, r2
 8003988:	881b      	ldrh	r3, [r3, #0]
 800398a:	b29b      	uxth	r3, r3
 800398c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003990:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003994:	82fb      	strh	r3, [r7, #22]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	461a      	mov	r2, r3
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	781b      	ldrb	r3, [r3, #0]
 80039a0:	009b      	lsls	r3, r3, #2
 80039a2:	441a      	add	r2, r3
 80039a4:	8afb      	ldrh	r3, [r7, #22]
 80039a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80039aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80039ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039b2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80039ba:	8b7b      	ldrh	r3, [r7, #26]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	f000 8087 	beq.w	8003ad0 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	6818      	ldr	r0, [r3, #0]
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	6959      	ldr	r1, [r3, #20]
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	891a      	ldrh	r2, [r3, #8]
 80039ce:	8b7b      	ldrh	r3, [r7, #26]
 80039d0:	f005 f84d 	bl	8008a6e <USB_ReadPMA>
 80039d4:	e07c      	b.n	8003ad0 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039de:	b29b      	uxth	r3, r3
 80039e0:	461a      	mov	r2, r3
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	781b      	ldrb	r3, [r3, #0]
 80039e6:	00db      	lsls	r3, r3, #3
 80039e8:	4413      	add	r3, r2
 80039ea:	3306      	adds	r3, #6
 80039ec:	005b      	lsls	r3, r3, #1
 80039ee:	68fa      	ldr	r2, [r7, #12]
 80039f0:	6812      	ldr	r2, [r2, #0]
 80039f2:	4413      	add	r3, r2
 80039f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80039f8:	881b      	ldrh	r3, [r3, #0]
 80039fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039fe:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	699a      	ldr	r2, [r3, #24]
 8003a04:	8b7b      	ldrh	r3, [r7, #26]
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d306      	bcc.n	8003a18 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	699a      	ldr	r2, [r3, #24]
 8003a0e:	8b7b      	ldrh	r3, [r7, #26]
 8003a10:	1ad2      	subs	r2, r2, r3
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	619a      	str	r2, [r3, #24]
 8003a16:	e002      	b.n	8003a1e <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	699b      	ldr	r3, [r3, #24]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d123      	bne.n	8003a6e <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	4413      	add	r3, r2
 8003a34:	881b      	ldrh	r3, [r3, #0]
 8003a36:	b29b      	uxth	r3, r3
 8003a38:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a40:	83fb      	strh	r3, [r7, #30]
 8003a42:	8bfb      	ldrh	r3, [r7, #30]
 8003a44:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003a48:	83fb      	strh	r3, [r7, #30]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	461a      	mov	r2, r3
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	441a      	add	r2, r3
 8003a58:	8bfb      	ldrh	r3, [r7, #30]
 8003a5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003a6e:	88fb      	ldrh	r3, [r7, #6]
 8003a70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d11f      	bne.n	8003ab8 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	781b      	ldrb	r3, [r3, #0]
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	4413      	add	r3, r2
 8003a86:	881b      	ldrh	r3, [r3, #0]
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a92:	83bb      	strh	r3, [r7, #28]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	461a      	mov	r2, r3
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	781b      	ldrb	r3, [r3, #0]
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	441a      	add	r2, r3
 8003aa2:	8bbb      	ldrh	r3, [r7, #28]
 8003aa4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003aa8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003aac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ab0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003ab8:	8b7b      	ldrh	r3, [r7, #26]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d008      	beq.n	8003ad0 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	6818      	ldr	r0, [r3, #0]
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	6959      	ldr	r1, [r3, #20]
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	895a      	ldrh	r2, [r3, #10]
 8003aca:	8b7b      	ldrh	r3, [r7, #26]
 8003acc:	f004 ffcf 	bl	8008a6e <USB_ReadPMA>
    }
  }

  return count;
 8003ad0:	8b7b      	ldrh	r3, [r7, #26]
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3720      	adds	r7, #32
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}

08003ada <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003ada:	b580      	push	{r7, lr}
 8003adc:	b0a2      	sub	sp, #136	; 0x88
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	60f8      	str	r0, [r7, #12]
 8003ae2:	60b9      	str	r1, [r7, #8]
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003ae8:	88fb      	ldrh	r3, [r7, #6]
 8003aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	f000 81c7 	beq.w	8003e82 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	461a      	mov	r2, r3
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	781b      	ldrb	r3, [r3, #0]
 8003b04:	00db      	lsls	r3, r3, #3
 8003b06:	4413      	add	r3, r2
 8003b08:	3302      	adds	r3, #2
 8003b0a:	005b      	lsls	r3, r3, #1
 8003b0c:	68fa      	ldr	r2, [r7, #12]
 8003b0e:	6812      	ldr	r2, [r2, #0]
 8003b10:	4413      	add	r3, r2
 8003b12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b16:	881b      	ldrh	r3, [r3, #0]
 8003b18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b1c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	699a      	ldr	r2, [r3, #24]
 8003b24:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d907      	bls.n	8003b3c <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	699a      	ldr	r2, [r3, #24]
 8003b30:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003b34:	1ad2      	subs	r2, r2, r3
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	619a      	str	r2, [r3, #24]
 8003b3a:	e002      	b.n	8003b42 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	699b      	ldr	r3, [r3, #24]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	f040 80b9 	bne.w	8003cbe <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	785b      	ldrb	r3, [r3, #1]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d126      	bne.n	8003ba2 <HAL_PCD_EP_DB_Transmit+0xc8>
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	461a      	mov	r2, r3
 8003b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b68:	4413      	add	r3, r2
 8003b6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	011a      	lsls	r2, r3, #4
 8003b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b74:	4413      	add	r3, r2
 8003b76:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003b7a:	627b      	str	r3, [r7, #36]	; 0x24
 8003b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7e:	881b      	ldrh	r3, [r3, #0]
 8003b80:	b29b      	uxth	r3, r3
 8003b82:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003b86:	b29a      	uxth	r2, r3
 8003b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8a:	801a      	strh	r2, [r3, #0]
 8003b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8e:	881b      	ldrh	r3, [r3, #0]
 8003b90:	b29b      	uxth	r3, r3
 8003b92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b9a:	b29a      	uxth	r2, r3
 8003b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9e:	801a      	strh	r2, [r3, #0]
 8003ba0:	e01a      	b.n	8003bd8 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	785b      	ldrb	r3, [r3, #1]
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d116      	bne.n	8003bd8 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	633b      	str	r3, [r7, #48]	; 0x30
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	461a      	mov	r2, r3
 8003bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bbe:	4413      	add	r3, r2
 8003bc0:	633b      	str	r3, [r7, #48]	; 0x30
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	011a      	lsls	r2, r3, #4
 8003bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bca:	4413      	add	r3, r2
 8003bcc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	623b      	str	r3, [r7, #32]
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	785b      	ldrb	r3, [r3, #1]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d126      	bne.n	8003c34 <HAL_PCD_EP_DB_Transmit+0x15a>
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	61bb      	str	r3, [r7, #24]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bf4:	b29b      	uxth	r3, r3
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	69bb      	ldr	r3, [r7, #24]
 8003bfa:	4413      	add	r3, r2
 8003bfc:	61bb      	str	r3, [r7, #24]
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	781b      	ldrb	r3, [r3, #0]
 8003c02:	011a      	lsls	r2, r3, #4
 8003c04:	69bb      	ldr	r3, [r7, #24]
 8003c06:	4413      	add	r3, r2
 8003c08:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003c0c:	617b      	str	r3, [r7, #20]
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	881b      	ldrh	r3, [r3, #0]
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003c18:	b29a      	uxth	r2, r3
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	801a      	strh	r2, [r3, #0]
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	881b      	ldrh	r3, [r3, #0]
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c2c:	b29a      	uxth	r2, r3
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	801a      	strh	r2, [r3, #0]
 8003c32:	e017      	b.n	8003c64 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	785b      	ldrb	r3, [r3, #1]
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d113      	bne.n	8003c64 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c44:	b29b      	uxth	r3, r3
 8003c46:	461a      	mov	r2, r3
 8003c48:	6a3b      	ldr	r3, [r7, #32]
 8003c4a:	4413      	add	r3, r2
 8003c4c:	623b      	str	r3, [r7, #32]
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	781b      	ldrb	r3, [r3, #0]
 8003c52:	011a      	lsls	r2, r3, #4
 8003c54:	6a3b      	ldr	r3, [r7, #32]
 8003c56:	4413      	add	r3, r2
 8003c58:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003c5c:	61fb      	str	r3, [r7, #28]
 8003c5e:	69fb      	ldr	r3, [r7, #28]
 8003c60:	2200      	movs	r2, #0
 8003c62:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	781b      	ldrb	r3, [r3, #0]
 8003c68:	4619      	mov	r1, r3
 8003c6a:	68f8      	ldr	r0, [r7, #12]
 8003c6c:	f7fe f935 	bl	8001eda <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003c70:	88fb      	ldrh	r3, [r7, #6]
 8003c72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	f000 82d4 	beq.w	8004224 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	461a      	mov	r2, r3
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	781b      	ldrb	r3, [r3, #0]
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	4413      	add	r3, r2
 8003c8a:	881b      	ldrh	r3, [r3, #0]
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c96:	827b      	strh	r3, [r7, #18]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	781b      	ldrb	r3, [r3, #0]
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	441a      	add	r2, r3
 8003ca6:	8a7b      	ldrh	r3, [r7, #18]
 8003ca8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003cac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003cb0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003cb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	8013      	strh	r3, [r2, #0]
 8003cbc:	e2b2      	b.n	8004224 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003cbe:	88fb      	ldrh	r3, [r7, #6]
 8003cc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d021      	beq.n	8003d0c <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	461a      	mov	r2, r3
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	4413      	add	r3, r2
 8003cd6:	881b      	ldrh	r3, [r3, #0]
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ce2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	461a      	mov	r2, r3
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	781b      	ldrb	r3, [r3, #0]
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	441a      	add	r2, r3
 8003cf4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003cf8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003cfc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d00:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	f040 8286 	bne.w	8004224 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	695a      	ldr	r2, [r3, #20]
 8003d1c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003d20:	441a      	add	r2, r3
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	69da      	ldr	r2, [r3, #28]
 8003d2a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003d2e:	441a      	add	r2, r3
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	6a1a      	ldr	r2, [r3, #32]
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	691b      	ldr	r3, [r3, #16]
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d309      	bcc.n	8003d54 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	691b      	ldr	r3, [r3, #16]
 8003d44:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	6a1a      	ldr	r2, [r3, #32]
 8003d4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d4c:	1ad2      	subs	r2, r2, r3
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	621a      	str	r2, [r3, #32]
 8003d52:	e015      	b.n	8003d80 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	6a1b      	ldr	r3, [r3, #32]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d107      	bne.n	8003d6c <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8003d5c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003d60:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	2200      	movs	r2, #0
 8003d66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003d6a:	e009      	b.n	8003d80 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	6a1b      	ldr	r3, [r3, #32]
 8003d78:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	785b      	ldrb	r3, [r3, #1]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d155      	bne.n	8003e34 <HAL_PCD_EP_DB_Transmit+0x35a>
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	461a      	mov	r2, r3
 8003d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d9c:	4413      	add	r3, r2
 8003d9e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	781b      	ldrb	r3, [r3, #0]
 8003da4:	011a      	lsls	r2, r3, #4
 8003da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003da8:	4413      	add	r3, r2
 8003daa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003dae:	637b      	str	r3, [r7, #52]	; 0x34
 8003db0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d112      	bne.n	8003ddc <HAL_PCD_EP_DB_Transmit+0x302>
 8003db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003db8:	881b      	ldrh	r3, [r3, #0]
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003dc0:	b29a      	uxth	r2, r3
 8003dc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dc4:	801a      	strh	r2, [r3, #0]
 8003dc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dc8:	881b      	ldrh	r3, [r3, #0]
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003dd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003dd4:	b29a      	uxth	r2, r3
 8003dd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dd8:	801a      	strh	r2, [r3, #0]
 8003dda:	e047      	b.n	8003e6c <HAL_PCD_EP_DB_Transmit+0x392>
 8003ddc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003dde:	2b3e      	cmp	r3, #62	; 0x3e
 8003de0:	d811      	bhi.n	8003e06 <HAL_PCD_EP_DB_Transmit+0x32c>
 8003de2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003de4:	085b      	lsrs	r3, r3, #1
 8003de6:	64bb      	str	r3, [r7, #72]	; 0x48
 8003de8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003dea:	f003 0301 	and.w	r3, r3, #1
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d002      	beq.n	8003df8 <HAL_PCD_EP_DB_Transmit+0x31e>
 8003df2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003df4:	3301      	adds	r3, #1
 8003df6:	64bb      	str	r3, [r7, #72]	; 0x48
 8003df8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	029b      	lsls	r3, r3, #10
 8003dfe:	b29a      	uxth	r2, r3
 8003e00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e02:	801a      	strh	r2, [r3, #0]
 8003e04:	e032      	b.n	8003e6c <HAL_PCD_EP_DB_Transmit+0x392>
 8003e06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e08:	095b      	lsrs	r3, r3, #5
 8003e0a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e0e:	f003 031f 	and.w	r3, r3, #31
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d102      	bne.n	8003e1c <HAL_PCD_EP_DB_Transmit+0x342>
 8003e16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e18:	3b01      	subs	r3, #1
 8003e1a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	029b      	lsls	r3, r3, #10
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e2c:	b29a      	uxth	r2, r3
 8003e2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e30:	801a      	strh	r2, [r3, #0]
 8003e32:	e01b      	b.n	8003e6c <HAL_PCD_EP_DB_Transmit+0x392>
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	785b      	ldrb	r3, [r3, #1]
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d117      	bne.n	8003e6c <HAL_PCD_EP_DB_Transmit+0x392>
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	643b      	str	r3, [r7, #64]	; 0x40
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e50:	4413      	add	r3, r2
 8003e52:	643b      	str	r3, [r7, #64]	; 0x40
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	781b      	ldrb	r3, [r3, #0]
 8003e58:	011a      	lsls	r2, r3, #4
 8003e5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e5c:	4413      	add	r3, r2
 8003e5e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003e62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e66:	b29a      	uxth	r2, r3
 8003e68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e6a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	6818      	ldr	r0, [r3, #0]
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	6959      	ldr	r1, [r3, #20]
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	891a      	ldrh	r2, [r3, #8]
 8003e78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	f004 fdb2 	bl	80089e4 <USB_WritePMA>
 8003e80:	e1d0      	b.n	8004224 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	781b      	ldrb	r3, [r3, #0]
 8003e92:	00db      	lsls	r3, r3, #3
 8003e94:	4413      	add	r3, r2
 8003e96:	3306      	adds	r3, #6
 8003e98:	005b      	lsls	r3, r3, #1
 8003e9a:	68fa      	ldr	r2, [r7, #12]
 8003e9c:	6812      	ldr	r2, [r2, #0]
 8003e9e:	4413      	add	r3, r2
 8003ea0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ea4:	881b      	ldrh	r3, [r3, #0]
 8003ea6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003eaa:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	699a      	ldr	r2, [r3, #24]
 8003eb2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d307      	bcc.n	8003eca <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	699a      	ldr	r2, [r3, #24]
 8003ebe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003ec2:	1ad2      	subs	r2, r2, r3
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	619a      	str	r2, [r3, #24]
 8003ec8:	e002      	b.n	8003ed0 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	699b      	ldr	r3, [r3, #24]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	f040 80c4 	bne.w	8004062 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	785b      	ldrb	r3, [r3, #1]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d126      	bne.n	8003f30 <HAL_PCD_EP_DB_Transmit+0x456>
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ef6:	4413      	add	r3, r2
 8003ef8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	781b      	ldrb	r3, [r3, #0]
 8003efe:	011a      	lsls	r2, r3, #4
 8003f00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f02:	4413      	add	r3, r2
 8003f04:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003f08:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f0a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f0c:	881b      	ldrh	r3, [r3, #0]
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003f14:	b29a      	uxth	r2, r3
 8003f16:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f18:	801a      	strh	r2, [r3, #0]
 8003f1a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f1c:	881b      	ldrh	r3, [r3, #0]
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f28:	b29a      	uxth	r2, r3
 8003f2a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f2c:	801a      	strh	r2, [r3, #0]
 8003f2e:	e01a      	b.n	8003f66 <HAL_PCD_EP_DB_Transmit+0x48c>
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	785b      	ldrb	r3, [r3, #1]
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d116      	bne.n	8003f66 <HAL_PCD_EP_DB_Transmit+0x48c>
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	677b      	str	r3, [r7, #116]	; 0x74
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	461a      	mov	r2, r3
 8003f4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f4c:	4413      	add	r3, r2
 8003f4e:	677b      	str	r3, [r7, #116]	; 0x74
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	781b      	ldrb	r3, [r3, #0]
 8003f54:	011a      	lsls	r2, r3, #4
 8003f56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f58:	4413      	add	r3, r2
 8003f5a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003f5e:	673b      	str	r3, [r7, #112]	; 0x70
 8003f60:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f62:	2200      	movs	r2, #0
 8003f64:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	67bb      	str	r3, [r7, #120]	; 0x78
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	785b      	ldrb	r3, [r3, #1]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d12f      	bne.n	8003fd4 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f84:	b29b      	uxth	r3, r3
 8003f86:	461a      	mov	r2, r3
 8003f88:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003f8c:	4413      	add	r3, r2
 8003f8e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	781b      	ldrb	r3, [r3, #0]
 8003f96:	011a      	lsls	r2, r3, #4
 8003f98:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003f9c:	4413      	add	r3, r2
 8003f9e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003fa2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003fa6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003faa:	881b      	ldrh	r3, [r3, #0]
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003fb2:	b29a      	uxth	r2, r3
 8003fb4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003fb8:	801a      	strh	r2, [r3, #0]
 8003fba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003fbe:	881b      	ldrh	r3, [r3, #0]
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fca:	b29a      	uxth	r2, r3
 8003fcc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003fd0:	801a      	strh	r2, [r3, #0]
 8003fd2:	e017      	b.n	8004004 <HAL_PCD_EP_DB_Transmit+0x52a>
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	785b      	ldrb	r3, [r3, #1]
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d113      	bne.n	8004004 <HAL_PCD_EP_DB_Transmit+0x52a>
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fe4:	b29b      	uxth	r3, r3
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003fea:	4413      	add	r3, r2
 8003fec:	67bb      	str	r3, [r7, #120]	; 0x78
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	781b      	ldrb	r3, [r3, #0]
 8003ff2:	011a      	lsls	r2, r3, #4
 8003ff4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ff6:	4413      	add	r3, r2
 8003ff8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003ffc:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003ffe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004000:	2200      	movs	r2, #0
 8004002:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	781b      	ldrb	r3, [r3, #0]
 8004008:	4619      	mov	r1, r3
 800400a:	68f8      	ldr	r0, [r7, #12]
 800400c:	f7fd ff65 	bl	8001eda <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004010:	88fb      	ldrh	r3, [r7, #6]
 8004012:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004016:	2b00      	cmp	r3, #0
 8004018:	f040 8104 	bne.w	8004224 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	461a      	mov	r2, r3
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	781b      	ldrb	r3, [r3, #0]
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	4413      	add	r3, r2
 800402a:	881b      	ldrh	r3, [r3, #0]
 800402c:	b29b      	uxth	r3, r3
 800402e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004032:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004036:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	461a      	mov	r2, r3
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	781b      	ldrb	r3, [r3, #0]
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	441a      	add	r2, r3
 8004048:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800404c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004050:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004054:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004058:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800405c:	b29b      	uxth	r3, r3
 800405e:	8013      	strh	r3, [r2, #0]
 8004060:	e0e0      	b.n	8004224 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004062:	88fb      	ldrh	r3, [r7, #6]
 8004064:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004068:	2b00      	cmp	r3, #0
 800406a:	d121      	bne.n	80040b0 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	461a      	mov	r2, r3
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	781b      	ldrb	r3, [r3, #0]
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	4413      	add	r3, r2
 800407a:	881b      	ldrh	r3, [r3, #0]
 800407c:	b29b      	uxth	r3, r3
 800407e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004082:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004086:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	461a      	mov	r2, r3
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	781b      	ldrb	r3, [r3, #0]
 8004094:	009b      	lsls	r3, r3, #2
 8004096:	441a      	add	r2, r3
 8004098:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800409c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80040a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040ac:	b29b      	uxth	r3, r3
 80040ae:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	f040 80b4 	bne.w	8004224 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	695a      	ldr	r2, [r3, #20]
 80040c0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80040c4:	441a      	add	r2, r3
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	69da      	ldr	r2, [r3, #28]
 80040ce:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80040d2:	441a      	add	r2, r3
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	6a1a      	ldr	r2, [r3, #32]
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	691b      	ldr	r3, [r3, #16]
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d309      	bcc.n	80040f8 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	691b      	ldr	r3, [r3, #16]
 80040e8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	6a1a      	ldr	r2, [r3, #32]
 80040ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040f0:	1ad2      	subs	r2, r2, r3
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	621a      	str	r2, [r3, #32]
 80040f6:	e015      	b.n	8004124 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	6a1b      	ldr	r3, [r3, #32]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d107      	bne.n	8004110 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8004100:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004104:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	2200      	movs	r2, #0
 800410a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800410e:	e009      	b.n	8004124 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	6a1b      	ldr	r3, [r3, #32]
 8004114:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	2200      	movs	r2, #0
 800411a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	2200      	movs	r2, #0
 8004120:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	667b      	str	r3, [r7, #100]	; 0x64
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	785b      	ldrb	r3, [r3, #1]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d155      	bne.n	80041de <HAL_PCD_EP_DB_Transmit+0x704>
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004140:	b29b      	uxth	r3, r3
 8004142:	461a      	mov	r2, r3
 8004144:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004146:	4413      	add	r3, r2
 8004148:	65fb      	str	r3, [r7, #92]	; 0x5c
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	781b      	ldrb	r3, [r3, #0]
 800414e:	011a      	lsls	r2, r3, #4
 8004150:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004152:	4413      	add	r3, r2
 8004154:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004158:	65bb      	str	r3, [r7, #88]	; 0x58
 800415a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800415c:	2b00      	cmp	r3, #0
 800415e:	d112      	bne.n	8004186 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8004160:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004162:	881b      	ldrh	r3, [r3, #0]
 8004164:	b29b      	uxth	r3, r3
 8004166:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800416a:	b29a      	uxth	r2, r3
 800416c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800416e:	801a      	strh	r2, [r3, #0]
 8004170:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004172:	881b      	ldrh	r3, [r3, #0]
 8004174:	b29b      	uxth	r3, r3
 8004176:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800417a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800417e:	b29a      	uxth	r2, r3
 8004180:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004182:	801a      	strh	r2, [r3, #0]
 8004184:	e044      	b.n	8004210 <HAL_PCD_EP_DB_Transmit+0x736>
 8004186:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004188:	2b3e      	cmp	r3, #62	; 0x3e
 800418a:	d811      	bhi.n	80041b0 <HAL_PCD_EP_DB_Transmit+0x6d6>
 800418c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800418e:	085b      	lsrs	r3, r3, #1
 8004190:	657b      	str	r3, [r7, #84]	; 0x54
 8004192:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004194:	f003 0301 	and.w	r3, r3, #1
 8004198:	2b00      	cmp	r3, #0
 800419a:	d002      	beq.n	80041a2 <HAL_PCD_EP_DB_Transmit+0x6c8>
 800419c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800419e:	3301      	adds	r3, #1
 80041a0:	657b      	str	r3, [r7, #84]	; 0x54
 80041a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041a4:	b29b      	uxth	r3, r3
 80041a6:	029b      	lsls	r3, r3, #10
 80041a8:	b29a      	uxth	r2, r3
 80041aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041ac:	801a      	strh	r2, [r3, #0]
 80041ae:	e02f      	b.n	8004210 <HAL_PCD_EP_DB_Transmit+0x736>
 80041b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041b2:	095b      	lsrs	r3, r3, #5
 80041b4:	657b      	str	r3, [r7, #84]	; 0x54
 80041b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041b8:	f003 031f 	and.w	r3, r3, #31
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d102      	bne.n	80041c6 <HAL_PCD_EP_DB_Transmit+0x6ec>
 80041c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041c2:	3b01      	subs	r3, #1
 80041c4:	657b      	str	r3, [r7, #84]	; 0x54
 80041c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	029b      	lsls	r3, r3, #10
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041d6:	b29a      	uxth	r2, r3
 80041d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041da:	801a      	strh	r2, [r3, #0]
 80041dc:	e018      	b.n	8004210 <HAL_PCD_EP_DB_Transmit+0x736>
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	785b      	ldrb	r3, [r3, #1]
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d114      	bne.n	8004210 <HAL_PCD_EP_DB_Transmit+0x736>
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	461a      	mov	r2, r3
 80041f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041f4:	4413      	add	r3, r2
 80041f6:	667b      	str	r3, [r7, #100]	; 0x64
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	781b      	ldrb	r3, [r3, #0]
 80041fc:	011a      	lsls	r2, r3, #4
 80041fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004200:	4413      	add	r3, r2
 8004202:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004206:	663b      	str	r3, [r7, #96]	; 0x60
 8004208:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800420a:	b29a      	uxth	r2, r3
 800420c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800420e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	6818      	ldr	r0, [r3, #0]
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	6959      	ldr	r1, [r3, #20]
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	895a      	ldrh	r2, [r3, #10]
 800421c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800421e:	b29b      	uxth	r3, r3
 8004220:	f004 fbe0 	bl	80089e4 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	461a      	mov	r2, r3
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	781b      	ldrb	r3, [r3, #0]
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	4413      	add	r3, r2
 8004232:	881b      	ldrh	r3, [r3, #0]
 8004234:	b29b      	uxth	r3, r3
 8004236:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800423a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800423e:	823b      	strh	r3, [r7, #16]
 8004240:	8a3b      	ldrh	r3, [r7, #16]
 8004242:	f083 0310 	eor.w	r3, r3, #16
 8004246:	823b      	strh	r3, [r7, #16]
 8004248:	8a3b      	ldrh	r3, [r7, #16]
 800424a:	f083 0320 	eor.w	r3, r3, #32
 800424e:	823b      	strh	r3, [r7, #16]
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	461a      	mov	r2, r3
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	781b      	ldrb	r3, [r3, #0]
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	441a      	add	r2, r3
 800425e:	8a3b      	ldrh	r3, [r7, #16]
 8004260:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004264:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004268:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800426c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004270:	b29b      	uxth	r3, r3
 8004272:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004274:	2300      	movs	r3, #0
}
 8004276:	4618      	mov	r0, r3
 8004278:	3788      	adds	r7, #136	; 0x88
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}

0800427e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800427e:	b480      	push	{r7}
 8004280:	b087      	sub	sp, #28
 8004282:	af00      	add	r7, sp, #0
 8004284:	60f8      	str	r0, [r7, #12]
 8004286:	607b      	str	r3, [r7, #4]
 8004288:	460b      	mov	r3, r1
 800428a:	817b      	strh	r3, [r7, #10]
 800428c:	4613      	mov	r3, r2
 800428e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004290:	897b      	ldrh	r3, [r7, #10]
 8004292:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004296:	b29b      	uxth	r3, r3
 8004298:	2b00      	cmp	r3, #0
 800429a:	d00b      	beq.n	80042b4 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800429c:	897b      	ldrh	r3, [r7, #10]
 800429e:	f003 0307 	and.w	r3, r3, #7
 80042a2:	1c5a      	adds	r2, r3, #1
 80042a4:	4613      	mov	r3, r2
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	4413      	add	r3, r2
 80042aa:	00db      	lsls	r3, r3, #3
 80042ac:	68fa      	ldr	r2, [r7, #12]
 80042ae:	4413      	add	r3, r2
 80042b0:	617b      	str	r3, [r7, #20]
 80042b2:	e009      	b.n	80042c8 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80042b4:	897a      	ldrh	r2, [r7, #10]
 80042b6:	4613      	mov	r3, r2
 80042b8:	009b      	lsls	r3, r3, #2
 80042ba:	4413      	add	r3, r2
 80042bc:	00db      	lsls	r3, r3, #3
 80042be:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80042c2:	68fa      	ldr	r2, [r7, #12]
 80042c4:	4413      	add	r3, r2
 80042c6:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80042c8:	893b      	ldrh	r3, [r7, #8]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d107      	bne.n	80042de <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	2200      	movs	r2, #0
 80042d2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	b29a      	uxth	r2, r3
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	80da      	strh	r2, [r3, #6]
 80042dc:	e00b      	b.n	80042f6 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	2201      	movs	r2, #1
 80042e2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	b29a      	uxth	r2, r3
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	0c1b      	lsrs	r3, r3, #16
 80042f0:	b29a      	uxth	r2, r3
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80042f6:	2300      	movs	r3, #0
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	371c      	adds	r7, #28
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bc80      	pop	{r7}
 8004300:	4770      	bx	lr
	...

08004304 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b086      	sub	sp, #24
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d101      	bne.n	8004316 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e272      	b.n	80047fc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 0301 	and.w	r3, r3, #1
 800431e:	2b00      	cmp	r3, #0
 8004320:	f000 8087 	beq.w	8004432 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004324:	4b92      	ldr	r3, [pc, #584]	; (8004570 <HAL_RCC_OscConfig+0x26c>)
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	f003 030c 	and.w	r3, r3, #12
 800432c:	2b04      	cmp	r3, #4
 800432e:	d00c      	beq.n	800434a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004330:	4b8f      	ldr	r3, [pc, #572]	; (8004570 <HAL_RCC_OscConfig+0x26c>)
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	f003 030c 	and.w	r3, r3, #12
 8004338:	2b08      	cmp	r3, #8
 800433a:	d112      	bne.n	8004362 <HAL_RCC_OscConfig+0x5e>
 800433c:	4b8c      	ldr	r3, [pc, #560]	; (8004570 <HAL_RCC_OscConfig+0x26c>)
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004344:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004348:	d10b      	bne.n	8004362 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800434a:	4b89      	ldr	r3, [pc, #548]	; (8004570 <HAL_RCC_OscConfig+0x26c>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004352:	2b00      	cmp	r3, #0
 8004354:	d06c      	beq.n	8004430 <HAL_RCC_OscConfig+0x12c>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d168      	bne.n	8004430 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e24c      	b.n	80047fc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800436a:	d106      	bne.n	800437a <HAL_RCC_OscConfig+0x76>
 800436c:	4b80      	ldr	r3, [pc, #512]	; (8004570 <HAL_RCC_OscConfig+0x26c>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a7f      	ldr	r2, [pc, #508]	; (8004570 <HAL_RCC_OscConfig+0x26c>)
 8004372:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004376:	6013      	str	r3, [r2, #0]
 8004378:	e02e      	b.n	80043d8 <HAL_RCC_OscConfig+0xd4>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d10c      	bne.n	800439c <HAL_RCC_OscConfig+0x98>
 8004382:	4b7b      	ldr	r3, [pc, #492]	; (8004570 <HAL_RCC_OscConfig+0x26c>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a7a      	ldr	r2, [pc, #488]	; (8004570 <HAL_RCC_OscConfig+0x26c>)
 8004388:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800438c:	6013      	str	r3, [r2, #0]
 800438e:	4b78      	ldr	r3, [pc, #480]	; (8004570 <HAL_RCC_OscConfig+0x26c>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a77      	ldr	r2, [pc, #476]	; (8004570 <HAL_RCC_OscConfig+0x26c>)
 8004394:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004398:	6013      	str	r3, [r2, #0]
 800439a:	e01d      	b.n	80043d8 <HAL_RCC_OscConfig+0xd4>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043a4:	d10c      	bne.n	80043c0 <HAL_RCC_OscConfig+0xbc>
 80043a6:	4b72      	ldr	r3, [pc, #456]	; (8004570 <HAL_RCC_OscConfig+0x26c>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a71      	ldr	r2, [pc, #452]	; (8004570 <HAL_RCC_OscConfig+0x26c>)
 80043ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043b0:	6013      	str	r3, [r2, #0]
 80043b2:	4b6f      	ldr	r3, [pc, #444]	; (8004570 <HAL_RCC_OscConfig+0x26c>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a6e      	ldr	r2, [pc, #440]	; (8004570 <HAL_RCC_OscConfig+0x26c>)
 80043b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043bc:	6013      	str	r3, [r2, #0]
 80043be:	e00b      	b.n	80043d8 <HAL_RCC_OscConfig+0xd4>
 80043c0:	4b6b      	ldr	r3, [pc, #428]	; (8004570 <HAL_RCC_OscConfig+0x26c>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a6a      	ldr	r2, [pc, #424]	; (8004570 <HAL_RCC_OscConfig+0x26c>)
 80043c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043ca:	6013      	str	r3, [r2, #0]
 80043cc:	4b68      	ldr	r3, [pc, #416]	; (8004570 <HAL_RCC_OscConfig+0x26c>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a67      	ldr	r2, [pc, #412]	; (8004570 <HAL_RCC_OscConfig+0x26c>)
 80043d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043d6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d013      	beq.n	8004408 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043e0:	f7fe f830 	bl	8002444 <HAL_GetTick>
 80043e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043e6:	e008      	b.n	80043fa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043e8:	f7fe f82c 	bl	8002444 <HAL_GetTick>
 80043ec:	4602      	mov	r2, r0
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	2b64      	cmp	r3, #100	; 0x64
 80043f4:	d901      	bls.n	80043fa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	e200      	b.n	80047fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043fa:	4b5d      	ldr	r3, [pc, #372]	; (8004570 <HAL_RCC_OscConfig+0x26c>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004402:	2b00      	cmp	r3, #0
 8004404:	d0f0      	beq.n	80043e8 <HAL_RCC_OscConfig+0xe4>
 8004406:	e014      	b.n	8004432 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004408:	f7fe f81c 	bl	8002444 <HAL_GetTick>
 800440c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800440e:	e008      	b.n	8004422 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004410:	f7fe f818 	bl	8002444 <HAL_GetTick>
 8004414:	4602      	mov	r2, r0
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	2b64      	cmp	r3, #100	; 0x64
 800441c:	d901      	bls.n	8004422 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e1ec      	b.n	80047fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004422:	4b53      	ldr	r3, [pc, #332]	; (8004570 <HAL_RCC_OscConfig+0x26c>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d1f0      	bne.n	8004410 <HAL_RCC_OscConfig+0x10c>
 800442e:	e000      	b.n	8004432 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004430:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 0302 	and.w	r3, r3, #2
 800443a:	2b00      	cmp	r3, #0
 800443c:	d063      	beq.n	8004506 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800443e:	4b4c      	ldr	r3, [pc, #304]	; (8004570 <HAL_RCC_OscConfig+0x26c>)
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	f003 030c 	and.w	r3, r3, #12
 8004446:	2b00      	cmp	r3, #0
 8004448:	d00b      	beq.n	8004462 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800444a:	4b49      	ldr	r3, [pc, #292]	; (8004570 <HAL_RCC_OscConfig+0x26c>)
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	f003 030c 	and.w	r3, r3, #12
 8004452:	2b08      	cmp	r3, #8
 8004454:	d11c      	bne.n	8004490 <HAL_RCC_OscConfig+0x18c>
 8004456:	4b46      	ldr	r3, [pc, #280]	; (8004570 <HAL_RCC_OscConfig+0x26c>)
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800445e:	2b00      	cmp	r3, #0
 8004460:	d116      	bne.n	8004490 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004462:	4b43      	ldr	r3, [pc, #268]	; (8004570 <HAL_RCC_OscConfig+0x26c>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 0302 	and.w	r3, r3, #2
 800446a:	2b00      	cmp	r3, #0
 800446c:	d005      	beq.n	800447a <HAL_RCC_OscConfig+0x176>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	691b      	ldr	r3, [r3, #16]
 8004472:	2b01      	cmp	r3, #1
 8004474:	d001      	beq.n	800447a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e1c0      	b.n	80047fc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800447a:	4b3d      	ldr	r3, [pc, #244]	; (8004570 <HAL_RCC_OscConfig+0x26c>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	695b      	ldr	r3, [r3, #20]
 8004486:	00db      	lsls	r3, r3, #3
 8004488:	4939      	ldr	r1, [pc, #228]	; (8004570 <HAL_RCC_OscConfig+0x26c>)
 800448a:	4313      	orrs	r3, r2
 800448c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800448e:	e03a      	b.n	8004506 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	691b      	ldr	r3, [r3, #16]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d020      	beq.n	80044da <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004498:	4b36      	ldr	r3, [pc, #216]	; (8004574 <HAL_RCC_OscConfig+0x270>)
 800449a:	2201      	movs	r2, #1
 800449c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800449e:	f7fd ffd1 	bl	8002444 <HAL_GetTick>
 80044a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044a4:	e008      	b.n	80044b8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044a6:	f7fd ffcd 	bl	8002444 <HAL_GetTick>
 80044aa:	4602      	mov	r2, r0
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	1ad3      	subs	r3, r2, r3
 80044b0:	2b02      	cmp	r3, #2
 80044b2:	d901      	bls.n	80044b8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80044b4:	2303      	movs	r3, #3
 80044b6:	e1a1      	b.n	80047fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044b8:	4b2d      	ldr	r3, [pc, #180]	; (8004570 <HAL_RCC_OscConfig+0x26c>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 0302 	and.w	r3, r3, #2
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d0f0      	beq.n	80044a6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044c4:	4b2a      	ldr	r3, [pc, #168]	; (8004570 <HAL_RCC_OscConfig+0x26c>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	695b      	ldr	r3, [r3, #20]
 80044d0:	00db      	lsls	r3, r3, #3
 80044d2:	4927      	ldr	r1, [pc, #156]	; (8004570 <HAL_RCC_OscConfig+0x26c>)
 80044d4:	4313      	orrs	r3, r2
 80044d6:	600b      	str	r3, [r1, #0]
 80044d8:	e015      	b.n	8004506 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044da:	4b26      	ldr	r3, [pc, #152]	; (8004574 <HAL_RCC_OscConfig+0x270>)
 80044dc:	2200      	movs	r2, #0
 80044de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044e0:	f7fd ffb0 	bl	8002444 <HAL_GetTick>
 80044e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044e6:	e008      	b.n	80044fa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044e8:	f7fd ffac 	bl	8002444 <HAL_GetTick>
 80044ec:	4602      	mov	r2, r0
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	2b02      	cmp	r3, #2
 80044f4:	d901      	bls.n	80044fa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80044f6:	2303      	movs	r3, #3
 80044f8:	e180      	b.n	80047fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044fa:	4b1d      	ldr	r3, [pc, #116]	; (8004570 <HAL_RCC_OscConfig+0x26c>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 0302 	and.w	r3, r3, #2
 8004502:	2b00      	cmp	r3, #0
 8004504:	d1f0      	bne.n	80044e8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 0308 	and.w	r3, r3, #8
 800450e:	2b00      	cmp	r3, #0
 8004510:	d03a      	beq.n	8004588 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	699b      	ldr	r3, [r3, #24]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d019      	beq.n	800454e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800451a:	4b17      	ldr	r3, [pc, #92]	; (8004578 <HAL_RCC_OscConfig+0x274>)
 800451c:	2201      	movs	r2, #1
 800451e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004520:	f7fd ff90 	bl	8002444 <HAL_GetTick>
 8004524:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004526:	e008      	b.n	800453a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004528:	f7fd ff8c 	bl	8002444 <HAL_GetTick>
 800452c:	4602      	mov	r2, r0
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	2b02      	cmp	r3, #2
 8004534:	d901      	bls.n	800453a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004536:	2303      	movs	r3, #3
 8004538:	e160      	b.n	80047fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800453a:	4b0d      	ldr	r3, [pc, #52]	; (8004570 <HAL_RCC_OscConfig+0x26c>)
 800453c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453e:	f003 0302 	and.w	r3, r3, #2
 8004542:	2b00      	cmp	r3, #0
 8004544:	d0f0      	beq.n	8004528 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004546:	2001      	movs	r0, #1
 8004548:	f000 faa6 	bl	8004a98 <RCC_Delay>
 800454c:	e01c      	b.n	8004588 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800454e:	4b0a      	ldr	r3, [pc, #40]	; (8004578 <HAL_RCC_OscConfig+0x274>)
 8004550:	2200      	movs	r2, #0
 8004552:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004554:	f7fd ff76 	bl	8002444 <HAL_GetTick>
 8004558:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800455a:	e00f      	b.n	800457c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800455c:	f7fd ff72 	bl	8002444 <HAL_GetTick>
 8004560:	4602      	mov	r2, r0
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	2b02      	cmp	r3, #2
 8004568:	d908      	bls.n	800457c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800456a:	2303      	movs	r3, #3
 800456c:	e146      	b.n	80047fc <HAL_RCC_OscConfig+0x4f8>
 800456e:	bf00      	nop
 8004570:	40021000 	.word	0x40021000
 8004574:	42420000 	.word	0x42420000
 8004578:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800457c:	4b92      	ldr	r3, [pc, #584]	; (80047c8 <HAL_RCC_OscConfig+0x4c4>)
 800457e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004580:	f003 0302 	and.w	r3, r3, #2
 8004584:	2b00      	cmp	r3, #0
 8004586:	d1e9      	bne.n	800455c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 0304 	and.w	r3, r3, #4
 8004590:	2b00      	cmp	r3, #0
 8004592:	f000 80a6 	beq.w	80046e2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004596:	2300      	movs	r3, #0
 8004598:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800459a:	4b8b      	ldr	r3, [pc, #556]	; (80047c8 <HAL_RCC_OscConfig+0x4c4>)
 800459c:	69db      	ldr	r3, [r3, #28]
 800459e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d10d      	bne.n	80045c2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045a6:	4b88      	ldr	r3, [pc, #544]	; (80047c8 <HAL_RCC_OscConfig+0x4c4>)
 80045a8:	69db      	ldr	r3, [r3, #28]
 80045aa:	4a87      	ldr	r2, [pc, #540]	; (80047c8 <HAL_RCC_OscConfig+0x4c4>)
 80045ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045b0:	61d3      	str	r3, [r2, #28]
 80045b2:	4b85      	ldr	r3, [pc, #532]	; (80047c8 <HAL_RCC_OscConfig+0x4c4>)
 80045b4:	69db      	ldr	r3, [r3, #28]
 80045b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045ba:	60bb      	str	r3, [r7, #8]
 80045bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045be:	2301      	movs	r3, #1
 80045c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045c2:	4b82      	ldr	r3, [pc, #520]	; (80047cc <HAL_RCC_OscConfig+0x4c8>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d118      	bne.n	8004600 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045ce:	4b7f      	ldr	r3, [pc, #508]	; (80047cc <HAL_RCC_OscConfig+0x4c8>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a7e      	ldr	r2, [pc, #504]	; (80047cc <HAL_RCC_OscConfig+0x4c8>)
 80045d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045da:	f7fd ff33 	bl	8002444 <HAL_GetTick>
 80045de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045e0:	e008      	b.n	80045f4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045e2:	f7fd ff2f 	bl	8002444 <HAL_GetTick>
 80045e6:	4602      	mov	r2, r0
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	1ad3      	subs	r3, r2, r3
 80045ec:	2b64      	cmp	r3, #100	; 0x64
 80045ee:	d901      	bls.n	80045f4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80045f0:	2303      	movs	r3, #3
 80045f2:	e103      	b.n	80047fc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045f4:	4b75      	ldr	r3, [pc, #468]	; (80047cc <HAL_RCC_OscConfig+0x4c8>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d0f0      	beq.n	80045e2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	2b01      	cmp	r3, #1
 8004606:	d106      	bne.n	8004616 <HAL_RCC_OscConfig+0x312>
 8004608:	4b6f      	ldr	r3, [pc, #444]	; (80047c8 <HAL_RCC_OscConfig+0x4c4>)
 800460a:	6a1b      	ldr	r3, [r3, #32]
 800460c:	4a6e      	ldr	r2, [pc, #440]	; (80047c8 <HAL_RCC_OscConfig+0x4c4>)
 800460e:	f043 0301 	orr.w	r3, r3, #1
 8004612:	6213      	str	r3, [r2, #32]
 8004614:	e02d      	b.n	8004672 <HAL_RCC_OscConfig+0x36e>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	68db      	ldr	r3, [r3, #12]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d10c      	bne.n	8004638 <HAL_RCC_OscConfig+0x334>
 800461e:	4b6a      	ldr	r3, [pc, #424]	; (80047c8 <HAL_RCC_OscConfig+0x4c4>)
 8004620:	6a1b      	ldr	r3, [r3, #32]
 8004622:	4a69      	ldr	r2, [pc, #420]	; (80047c8 <HAL_RCC_OscConfig+0x4c4>)
 8004624:	f023 0301 	bic.w	r3, r3, #1
 8004628:	6213      	str	r3, [r2, #32]
 800462a:	4b67      	ldr	r3, [pc, #412]	; (80047c8 <HAL_RCC_OscConfig+0x4c4>)
 800462c:	6a1b      	ldr	r3, [r3, #32]
 800462e:	4a66      	ldr	r2, [pc, #408]	; (80047c8 <HAL_RCC_OscConfig+0x4c4>)
 8004630:	f023 0304 	bic.w	r3, r3, #4
 8004634:	6213      	str	r3, [r2, #32]
 8004636:	e01c      	b.n	8004672 <HAL_RCC_OscConfig+0x36e>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	2b05      	cmp	r3, #5
 800463e:	d10c      	bne.n	800465a <HAL_RCC_OscConfig+0x356>
 8004640:	4b61      	ldr	r3, [pc, #388]	; (80047c8 <HAL_RCC_OscConfig+0x4c4>)
 8004642:	6a1b      	ldr	r3, [r3, #32]
 8004644:	4a60      	ldr	r2, [pc, #384]	; (80047c8 <HAL_RCC_OscConfig+0x4c4>)
 8004646:	f043 0304 	orr.w	r3, r3, #4
 800464a:	6213      	str	r3, [r2, #32]
 800464c:	4b5e      	ldr	r3, [pc, #376]	; (80047c8 <HAL_RCC_OscConfig+0x4c4>)
 800464e:	6a1b      	ldr	r3, [r3, #32]
 8004650:	4a5d      	ldr	r2, [pc, #372]	; (80047c8 <HAL_RCC_OscConfig+0x4c4>)
 8004652:	f043 0301 	orr.w	r3, r3, #1
 8004656:	6213      	str	r3, [r2, #32]
 8004658:	e00b      	b.n	8004672 <HAL_RCC_OscConfig+0x36e>
 800465a:	4b5b      	ldr	r3, [pc, #364]	; (80047c8 <HAL_RCC_OscConfig+0x4c4>)
 800465c:	6a1b      	ldr	r3, [r3, #32]
 800465e:	4a5a      	ldr	r2, [pc, #360]	; (80047c8 <HAL_RCC_OscConfig+0x4c4>)
 8004660:	f023 0301 	bic.w	r3, r3, #1
 8004664:	6213      	str	r3, [r2, #32]
 8004666:	4b58      	ldr	r3, [pc, #352]	; (80047c8 <HAL_RCC_OscConfig+0x4c4>)
 8004668:	6a1b      	ldr	r3, [r3, #32]
 800466a:	4a57      	ldr	r2, [pc, #348]	; (80047c8 <HAL_RCC_OscConfig+0x4c4>)
 800466c:	f023 0304 	bic.w	r3, r3, #4
 8004670:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	68db      	ldr	r3, [r3, #12]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d015      	beq.n	80046a6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800467a:	f7fd fee3 	bl	8002444 <HAL_GetTick>
 800467e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004680:	e00a      	b.n	8004698 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004682:	f7fd fedf 	bl	8002444 <HAL_GetTick>
 8004686:	4602      	mov	r2, r0
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	1ad3      	subs	r3, r2, r3
 800468c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004690:	4293      	cmp	r3, r2
 8004692:	d901      	bls.n	8004698 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004694:	2303      	movs	r3, #3
 8004696:	e0b1      	b.n	80047fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004698:	4b4b      	ldr	r3, [pc, #300]	; (80047c8 <HAL_RCC_OscConfig+0x4c4>)
 800469a:	6a1b      	ldr	r3, [r3, #32]
 800469c:	f003 0302 	and.w	r3, r3, #2
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d0ee      	beq.n	8004682 <HAL_RCC_OscConfig+0x37e>
 80046a4:	e014      	b.n	80046d0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046a6:	f7fd fecd 	bl	8002444 <HAL_GetTick>
 80046aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046ac:	e00a      	b.n	80046c4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046ae:	f7fd fec9 	bl	8002444 <HAL_GetTick>
 80046b2:	4602      	mov	r2, r0
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	1ad3      	subs	r3, r2, r3
 80046b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80046bc:	4293      	cmp	r3, r2
 80046be:	d901      	bls.n	80046c4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80046c0:	2303      	movs	r3, #3
 80046c2:	e09b      	b.n	80047fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046c4:	4b40      	ldr	r3, [pc, #256]	; (80047c8 <HAL_RCC_OscConfig+0x4c4>)
 80046c6:	6a1b      	ldr	r3, [r3, #32]
 80046c8:	f003 0302 	and.w	r3, r3, #2
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d1ee      	bne.n	80046ae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80046d0:	7dfb      	ldrb	r3, [r7, #23]
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d105      	bne.n	80046e2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046d6:	4b3c      	ldr	r3, [pc, #240]	; (80047c8 <HAL_RCC_OscConfig+0x4c4>)
 80046d8:	69db      	ldr	r3, [r3, #28]
 80046da:	4a3b      	ldr	r2, [pc, #236]	; (80047c8 <HAL_RCC_OscConfig+0x4c4>)
 80046dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046e0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	69db      	ldr	r3, [r3, #28]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	f000 8087 	beq.w	80047fa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80046ec:	4b36      	ldr	r3, [pc, #216]	; (80047c8 <HAL_RCC_OscConfig+0x4c4>)
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	f003 030c 	and.w	r3, r3, #12
 80046f4:	2b08      	cmp	r3, #8
 80046f6:	d061      	beq.n	80047bc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	69db      	ldr	r3, [r3, #28]
 80046fc:	2b02      	cmp	r3, #2
 80046fe:	d146      	bne.n	800478e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004700:	4b33      	ldr	r3, [pc, #204]	; (80047d0 <HAL_RCC_OscConfig+0x4cc>)
 8004702:	2200      	movs	r2, #0
 8004704:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004706:	f7fd fe9d 	bl	8002444 <HAL_GetTick>
 800470a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800470c:	e008      	b.n	8004720 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800470e:	f7fd fe99 	bl	8002444 <HAL_GetTick>
 8004712:	4602      	mov	r2, r0
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	1ad3      	subs	r3, r2, r3
 8004718:	2b02      	cmp	r3, #2
 800471a:	d901      	bls.n	8004720 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800471c:	2303      	movs	r3, #3
 800471e:	e06d      	b.n	80047fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004720:	4b29      	ldr	r3, [pc, #164]	; (80047c8 <HAL_RCC_OscConfig+0x4c4>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004728:	2b00      	cmp	r3, #0
 800472a:	d1f0      	bne.n	800470e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6a1b      	ldr	r3, [r3, #32]
 8004730:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004734:	d108      	bne.n	8004748 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004736:	4b24      	ldr	r3, [pc, #144]	; (80047c8 <HAL_RCC_OscConfig+0x4c4>)
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	4921      	ldr	r1, [pc, #132]	; (80047c8 <HAL_RCC_OscConfig+0x4c4>)
 8004744:	4313      	orrs	r3, r2
 8004746:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004748:	4b1f      	ldr	r3, [pc, #124]	; (80047c8 <HAL_RCC_OscConfig+0x4c4>)
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6a19      	ldr	r1, [r3, #32]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004758:	430b      	orrs	r3, r1
 800475a:	491b      	ldr	r1, [pc, #108]	; (80047c8 <HAL_RCC_OscConfig+0x4c4>)
 800475c:	4313      	orrs	r3, r2
 800475e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004760:	4b1b      	ldr	r3, [pc, #108]	; (80047d0 <HAL_RCC_OscConfig+0x4cc>)
 8004762:	2201      	movs	r2, #1
 8004764:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004766:	f7fd fe6d 	bl	8002444 <HAL_GetTick>
 800476a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800476c:	e008      	b.n	8004780 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800476e:	f7fd fe69 	bl	8002444 <HAL_GetTick>
 8004772:	4602      	mov	r2, r0
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	1ad3      	subs	r3, r2, r3
 8004778:	2b02      	cmp	r3, #2
 800477a:	d901      	bls.n	8004780 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800477c:	2303      	movs	r3, #3
 800477e:	e03d      	b.n	80047fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004780:	4b11      	ldr	r3, [pc, #68]	; (80047c8 <HAL_RCC_OscConfig+0x4c4>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004788:	2b00      	cmp	r3, #0
 800478a:	d0f0      	beq.n	800476e <HAL_RCC_OscConfig+0x46a>
 800478c:	e035      	b.n	80047fa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800478e:	4b10      	ldr	r3, [pc, #64]	; (80047d0 <HAL_RCC_OscConfig+0x4cc>)
 8004790:	2200      	movs	r2, #0
 8004792:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004794:	f7fd fe56 	bl	8002444 <HAL_GetTick>
 8004798:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800479a:	e008      	b.n	80047ae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800479c:	f7fd fe52 	bl	8002444 <HAL_GetTick>
 80047a0:	4602      	mov	r2, r0
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	2b02      	cmp	r3, #2
 80047a8:	d901      	bls.n	80047ae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e026      	b.n	80047fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047ae:	4b06      	ldr	r3, [pc, #24]	; (80047c8 <HAL_RCC_OscConfig+0x4c4>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d1f0      	bne.n	800479c <HAL_RCC_OscConfig+0x498>
 80047ba:	e01e      	b.n	80047fa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	69db      	ldr	r3, [r3, #28]
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d107      	bne.n	80047d4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	e019      	b.n	80047fc <HAL_RCC_OscConfig+0x4f8>
 80047c8:	40021000 	.word	0x40021000
 80047cc:	40007000 	.word	0x40007000
 80047d0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80047d4:	4b0b      	ldr	r3, [pc, #44]	; (8004804 <HAL_RCC_OscConfig+0x500>)
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6a1b      	ldr	r3, [r3, #32]
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d106      	bne.n	80047f6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d001      	beq.n	80047fa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	e000      	b.n	80047fc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80047fa:	2300      	movs	r3, #0
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3718      	adds	r7, #24
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}
 8004804:	40021000 	.word	0x40021000

08004808 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b084      	sub	sp, #16
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d101      	bne.n	800481c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	e0d0      	b.n	80049be <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800481c:	4b6a      	ldr	r3, [pc, #424]	; (80049c8 <HAL_RCC_ClockConfig+0x1c0>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 0307 	and.w	r3, r3, #7
 8004824:	683a      	ldr	r2, [r7, #0]
 8004826:	429a      	cmp	r2, r3
 8004828:	d910      	bls.n	800484c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800482a:	4b67      	ldr	r3, [pc, #412]	; (80049c8 <HAL_RCC_ClockConfig+0x1c0>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f023 0207 	bic.w	r2, r3, #7
 8004832:	4965      	ldr	r1, [pc, #404]	; (80049c8 <HAL_RCC_ClockConfig+0x1c0>)
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	4313      	orrs	r3, r2
 8004838:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800483a:	4b63      	ldr	r3, [pc, #396]	; (80049c8 <HAL_RCC_ClockConfig+0x1c0>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 0307 	and.w	r3, r3, #7
 8004842:	683a      	ldr	r2, [r7, #0]
 8004844:	429a      	cmp	r2, r3
 8004846:	d001      	beq.n	800484c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	e0b8      	b.n	80049be <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 0302 	and.w	r3, r3, #2
 8004854:	2b00      	cmp	r3, #0
 8004856:	d020      	beq.n	800489a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 0304 	and.w	r3, r3, #4
 8004860:	2b00      	cmp	r3, #0
 8004862:	d005      	beq.n	8004870 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004864:	4b59      	ldr	r3, [pc, #356]	; (80049cc <HAL_RCC_ClockConfig+0x1c4>)
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	4a58      	ldr	r2, [pc, #352]	; (80049cc <HAL_RCC_ClockConfig+0x1c4>)
 800486a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800486e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 0308 	and.w	r3, r3, #8
 8004878:	2b00      	cmp	r3, #0
 800487a:	d005      	beq.n	8004888 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800487c:	4b53      	ldr	r3, [pc, #332]	; (80049cc <HAL_RCC_ClockConfig+0x1c4>)
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	4a52      	ldr	r2, [pc, #328]	; (80049cc <HAL_RCC_ClockConfig+0x1c4>)
 8004882:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004886:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004888:	4b50      	ldr	r3, [pc, #320]	; (80049cc <HAL_RCC_ClockConfig+0x1c4>)
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	494d      	ldr	r1, [pc, #308]	; (80049cc <HAL_RCC_ClockConfig+0x1c4>)
 8004896:	4313      	orrs	r3, r2
 8004898:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 0301 	and.w	r3, r3, #1
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d040      	beq.n	8004928 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d107      	bne.n	80048be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048ae:	4b47      	ldr	r3, [pc, #284]	; (80049cc <HAL_RCC_ClockConfig+0x1c4>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d115      	bne.n	80048e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	e07f      	b.n	80049be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	2b02      	cmp	r3, #2
 80048c4:	d107      	bne.n	80048d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048c6:	4b41      	ldr	r3, [pc, #260]	; (80049cc <HAL_RCC_ClockConfig+0x1c4>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d109      	bne.n	80048e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e073      	b.n	80049be <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048d6:	4b3d      	ldr	r3, [pc, #244]	; (80049cc <HAL_RCC_ClockConfig+0x1c4>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 0302 	and.w	r3, r3, #2
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d101      	bne.n	80048e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e06b      	b.n	80049be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048e6:	4b39      	ldr	r3, [pc, #228]	; (80049cc <HAL_RCC_ClockConfig+0x1c4>)
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	f023 0203 	bic.w	r2, r3, #3
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	4936      	ldr	r1, [pc, #216]	; (80049cc <HAL_RCC_ClockConfig+0x1c4>)
 80048f4:	4313      	orrs	r3, r2
 80048f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80048f8:	f7fd fda4 	bl	8002444 <HAL_GetTick>
 80048fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048fe:	e00a      	b.n	8004916 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004900:	f7fd fda0 	bl	8002444 <HAL_GetTick>
 8004904:	4602      	mov	r2, r0
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	1ad3      	subs	r3, r2, r3
 800490a:	f241 3288 	movw	r2, #5000	; 0x1388
 800490e:	4293      	cmp	r3, r2
 8004910:	d901      	bls.n	8004916 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004912:	2303      	movs	r3, #3
 8004914:	e053      	b.n	80049be <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004916:	4b2d      	ldr	r3, [pc, #180]	; (80049cc <HAL_RCC_ClockConfig+0x1c4>)
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	f003 020c 	and.w	r2, r3, #12
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	429a      	cmp	r2, r3
 8004926:	d1eb      	bne.n	8004900 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004928:	4b27      	ldr	r3, [pc, #156]	; (80049c8 <HAL_RCC_ClockConfig+0x1c0>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 0307 	and.w	r3, r3, #7
 8004930:	683a      	ldr	r2, [r7, #0]
 8004932:	429a      	cmp	r2, r3
 8004934:	d210      	bcs.n	8004958 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004936:	4b24      	ldr	r3, [pc, #144]	; (80049c8 <HAL_RCC_ClockConfig+0x1c0>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f023 0207 	bic.w	r2, r3, #7
 800493e:	4922      	ldr	r1, [pc, #136]	; (80049c8 <HAL_RCC_ClockConfig+0x1c0>)
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	4313      	orrs	r3, r2
 8004944:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004946:	4b20      	ldr	r3, [pc, #128]	; (80049c8 <HAL_RCC_ClockConfig+0x1c0>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 0307 	and.w	r3, r3, #7
 800494e:	683a      	ldr	r2, [r7, #0]
 8004950:	429a      	cmp	r2, r3
 8004952:	d001      	beq.n	8004958 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	e032      	b.n	80049be <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 0304 	and.w	r3, r3, #4
 8004960:	2b00      	cmp	r3, #0
 8004962:	d008      	beq.n	8004976 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004964:	4b19      	ldr	r3, [pc, #100]	; (80049cc <HAL_RCC_ClockConfig+0x1c4>)
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	68db      	ldr	r3, [r3, #12]
 8004970:	4916      	ldr	r1, [pc, #88]	; (80049cc <HAL_RCC_ClockConfig+0x1c4>)
 8004972:	4313      	orrs	r3, r2
 8004974:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 0308 	and.w	r3, r3, #8
 800497e:	2b00      	cmp	r3, #0
 8004980:	d009      	beq.n	8004996 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004982:	4b12      	ldr	r3, [pc, #72]	; (80049cc <HAL_RCC_ClockConfig+0x1c4>)
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	691b      	ldr	r3, [r3, #16]
 800498e:	00db      	lsls	r3, r3, #3
 8004990:	490e      	ldr	r1, [pc, #56]	; (80049cc <HAL_RCC_ClockConfig+0x1c4>)
 8004992:	4313      	orrs	r3, r2
 8004994:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004996:	f000 f821 	bl	80049dc <HAL_RCC_GetSysClockFreq>
 800499a:	4602      	mov	r2, r0
 800499c:	4b0b      	ldr	r3, [pc, #44]	; (80049cc <HAL_RCC_ClockConfig+0x1c4>)
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	091b      	lsrs	r3, r3, #4
 80049a2:	f003 030f 	and.w	r3, r3, #15
 80049a6:	490a      	ldr	r1, [pc, #40]	; (80049d0 <HAL_RCC_ClockConfig+0x1c8>)
 80049a8:	5ccb      	ldrb	r3, [r1, r3]
 80049aa:	fa22 f303 	lsr.w	r3, r2, r3
 80049ae:	4a09      	ldr	r2, [pc, #36]	; (80049d4 <HAL_RCC_ClockConfig+0x1cc>)
 80049b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80049b2:	4b09      	ldr	r3, [pc, #36]	; (80049d8 <HAL_RCC_ClockConfig+0x1d0>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4618      	mov	r0, r3
 80049b8:	f7fd fd02 	bl	80023c0 <HAL_InitTick>

  return HAL_OK;
 80049bc:	2300      	movs	r3, #0
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3710      	adds	r7, #16
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}
 80049c6:	bf00      	nop
 80049c8:	40022000 	.word	0x40022000
 80049cc:	40021000 	.word	0x40021000
 80049d0:	0800d078 	.word	0x0800d078
 80049d4:	20000060 	.word	0x20000060
 80049d8:	20000064 	.word	0x20000064

080049dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049dc:	b490      	push	{r4, r7}
 80049de:	b08a      	sub	sp, #40	; 0x28
 80049e0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80049e2:	4b29      	ldr	r3, [pc, #164]	; (8004a88 <HAL_RCC_GetSysClockFreq+0xac>)
 80049e4:	1d3c      	adds	r4, r7, #4
 80049e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80049e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80049ec:	f240 2301 	movw	r3, #513	; 0x201
 80049f0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80049f2:	2300      	movs	r3, #0
 80049f4:	61fb      	str	r3, [r7, #28]
 80049f6:	2300      	movs	r3, #0
 80049f8:	61bb      	str	r3, [r7, #24]
 80049fa:	2300      	movs	r3, #0
 80049fc:	627b      	str	r3, [r7, #36]	; 0x24
 80049fe:	2300      	movs	r3, #0
 8004a00:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004a02:	2300      	movs	r3, #0
 8004a04:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004a06:	4b21      	ldr	r3, [pc, #132]	; (8004a8c <HAL_RCC_GetSysClockFreq+0xb0>)
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004a0c:	69fb      	ldr	r3, [r7, #28]
 8004a0e:	f003 030c 	and.w	r3, r3, #12
 8004a12:	2b04      	cmp	r3, #4
 8004a14:	d002      	beq.n	8004a1c <HAL_RCC_GetSysClockFreq+0x40>
 8004a16:	2b08      	cmp	r3, #8
 8004a18:	d003      	beq.n	8004a22 <HAL_RCC_GetSysClockFreq+0x46>
 8004a1a:	e02b      	b.n	8004a74 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004a1c:	4b1c      	ldr	r3, [pc, #112]	; (8004a90 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004a1e:	623b      	str	r3, [r7, #32]
      break;
 8004a20:	e02b      	b.n	8004a7a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004a22:	69fb      	ldr	r3, [r7, #28]
 8004a24:	0c9b      	lsrs	r3, r3, #18
 8004a26:	f003 030f 	and.w	r3, r3, #15
 8004a2a:	3328      	adds	r3, #40	; 0x28
 8004a2c:	443b      	add	r3, r7
 8004a2e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004a32:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004a34:	69fb      	ldr	r3, [r7, #28]
 8004a36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d012      	beq.n	8004a64 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004a3e:	4b13      	ldr	r3, [pc, #76]	; (8004a8c <HAL_RCC_GetSysClockFreq+0xb0>)
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	0c5b      	lsrs	r3, r3, #17
 8004a44:	f003 0301 	and.w	r3, r3, #1
 8004a48:	3328      	adds	r3, #40	; 0x28
 8004a4a:	443b      	add	r3, r7
 8004a4c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004a50:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	4a0e      	ldr	r2, [pc, #56]	; (8004a90 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004a56:	fb03 f202 	mul.w	r2, r3, r2
 8004a5a:	69bb      	ldr	r3, [r7, #24]
 8004a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a60:	627b      	str	r3, [r7, #36]	; 0x24
 8004a62:	e004      	b.n	8004a6e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	4a0b      	ldr	r2, [pc, #44]	; (8004a94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a68:	fb02 f303 	mul.w	r3, r2, r3
 8004a6c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a70:	623b      	str	r3, [r7, #32]
      break;
 8004a72:	e002      	b.n	8004a7a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004a74:	4b06      	ldr	r3, [pc, #24]	; (8004a90 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004a76:	623b      	str	r3, [r7, #32]
      break;
 8004a78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a7a:	6a3b      	ldr	r3, [r7, #32]
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3728      	adds	r7, #40	; 0x28
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bc90      	pop	{r4, r7}
 8004a84:	4770      	bx	lr
 8004a86:	bf00      	nop
 8004a88:	0800d068 	.word	0x0800d068
 8004a8c:	40021000 	.word	0x40021000
 8004a90:	007a1200 	.word	0x007a1200
 8004a94:	003d0900 	.word	0x003d0900

08004a98 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b085      	sub	sp, #20
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004aa0:	4b0a      	ldr	r3, [pc, #40]	; (8004acc <RCC_Delay+0x34>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a0a      	ldr	r2, [pc, #40]	; (8004ad0 <RCC_Delay+0x38>)
 8004aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8004aaa:	0a5b      	lsrs	r3, r3, #9
 8004aac:	687a      	ldr	r2, [r7, #4]
 8004aae:	fb02 f303 	mul.w	r3, r2, r3
 8004ab2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004ab4:	bf00      	nop
  }
  while (Delay --);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	1e5a      	subs	r2, r3, #1
 8004aba:	60fa      	str	r2, [r7, #12]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d1f9      	bne.n	8004ab4 <RCC_Delay+0x1c>
}
 8004ac0:	bf00      	nop
 8004ac2:	bf00      	nop
 8004ac4:	3714      	adds	r7, #20
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bc80      	pop	{r7}
 8004aca:	4770      	bx	lr
 8004acc:	20000060 	.word	0x20000060
 8004ad0:	10624dd3 	.word	0x10624dd3

08004ad4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b086      	sub	sp, #24
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004adc:	2300      	movs	r3, #0
 8004ade:	613b      	str	r3, [r7, #16]
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f003 0301 	and.w	r3, r3, #1
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d07d      	beq.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004af0:	2300      	movs	r3, #0
 8004af2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004af4:	4b4f      	ldr	r3, [pc, #316]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004af6:	69db      	ldr	r3, [r3, #28]
 8004af8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d10d      	bne.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b00:	4b4c      	ldr	r3, [pc, #304]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b02:	69db      	ldr	r3, [r3, #28]
 8004b04:	4a4b      	ldr	r2, [pc, #300]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b0a:	61d3      	str	r3, [r2, #28]
 8004b0c:	4b49      	ldr	r3, [pc, #292]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b0e:	69db      	ldr	r3, [r3, #28]
 8004b10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b14:	60bb      	str	r3, [r7, #8]
 8004b16:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b1c:	4b46      	ldr	r3, [pc, #280]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d118      	bne.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b28:	4b43      	ldr	r3, [pc, #268]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a42      	ldr	r2, [pc, #264]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004b2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b32:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b34:	f7fd fc86 	bl	8002444 <HAL_GetTick>
 8004b38:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b3a:	e008      	b.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b3c:	f7fd fc82 	bl	8002444 <HAL_GetTick>
 8004b40:	4602      	mov	r2, r0
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	1ad3      	subs	r3, r2, r3
 8004b46:	2b64      	cmp	r3, #100	; 0x64
 8004b48:	d901      	bls.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004b4a:	2303      	movs	r3, #3
 8004b4c:	e06d      	b.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b4e:	4b3a      	ldr	r3, [pc, #232]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d0f0      	beq.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004b5a:	4b36      	ldr	r3, [pc, #216]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b5c:	6a1b      	ldr	r3, [r3, #32]
 8004b5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b62:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d02e      	beq.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b72:	68fa      	ldr	r2, [r7, #12]
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d027      	beq.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b78:	4b2e      	ldr	r3, [pc, #184]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b7a:	6a1b      	ldr	r3, [r3, #32]
 8004b7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b80:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004b82:	4b2e      	ldr	r3, [pc, #184]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004b84:	2201      	movs	r2, #1
 8004b86:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004b88:	4b2c      	ldr	r3, [pc, #176]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004b8e:	4a29      	ldr	r2, [pc, #164]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f003 0301 	and.w	r3, r3, #1
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d014      	beq.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b9e:	f7fd fc51 	bl	8002444 <HAL_GetTick>
 8004ba2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ba4:	e00a      	b.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ba6:	f7fd fc4d 	bl	8002444 <HAL_GetTick>
 8004baa:	4602      	mov	r2, r0
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	1ad3      	subs	r3, r2, r3
 8004bb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d901      	bls.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004bb8:	2303      	movs	r3, #3
 8004bba:	e036      	b.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bbc:	4b1d      	ldr	r3, [pc, #116]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bbe:	6a1b      	ldr	r3, [r3, #32]
 8004bc0:	f003 0302 	and.w	r3, r3, #2
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d0ee      	beq.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004bc8:	4b1a      	ldr	r3, [pc, #104]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bca:	6a1b      	ldr	r3, [r3, #32]
 8004bcc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	4917      	ldr	r1, [pc, #92]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004bda:	7dfb      	ldrb	r3, [r7, #23]
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d105      	bne.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004be0:	4b14      	ldr	r3, [pc, #80]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004be2:	69db      	ldr	r3, [r3, #28]
 8004be4:	4a13      	ldr	r2, [pc, #76]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004be6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bea:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f003 0302 	and.w	r3, r3, #2
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d008      	beq.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004bf8:	4b0e      	ldr	r3, [pc, #56]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	490b      	ldr	r1, [pc, #44]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c06:	4313      	orrs	r3, r2
 8004c08:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 0310 	and.w	r3, r3, #16
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d008      	beq.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c16:	4b07      	ldr	r3, [pc, #28]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	68db      	ldr	r3, [r3, #12]
 8004c22:	4904      	ldr	r1, [pc, #16]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c24:	4313      	orrs	r3, r2
 8004c26:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004c28:	2300      	movs	r3, #0
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3718      	adds	r7, #24
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}
 8004c32:	bf00      	nop
 8004c34:	40021000 	.word	0x40021000
 8004c38:	40007000 	.word	0x40007000
 8004c3c:	42420440 	.word	0x42420440

08004c40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b082      	sub	sp, #8
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d101      	bne.n	8004c52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e041      	b.n	8004cd6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d106      	bne.n	8004c6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2200      	movs	r2, #0
 8004c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f7fc fc6a 	bl	8001540 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2202      	movs	r2, #2
 8004c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	3304      	adds	r3, #4
 8004c7c:	4619      	mov	r1, r3
 8004c7e:	4610      	mov	r0, r2
 8004c80:	f000 fd04 	bl	800568c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2201      	movs	r2, #1
 8004c88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2201      	movs	r2, #1
 8004c98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004cd4:	2300      	movs	r3, #0
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3708      	adds	r7, #8
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}

08004cde <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004cde:	b580      	push	{r7, lr}
 8004ce0:	b082      	sub	sp, #8
 8004ce2:	af00      	add	r7, sp, #0
 8004ce4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d101      	bne.n	8004cf0 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	e041      	b.n	8004d74 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cf6:	b2db      	uxtb	r3, r3
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d106      	bne.n	8004d0a <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	f000 f839 	bl	8004d7c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2202      	movs	r2, #2
 8004d0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	3304      	adds	r3, #4
 8004d1a:	4619      	mov	r1, r3
 8004d1c:	4610      	mov	r0, r2
 8004d1e:	f000 fcb5 	bl	800568c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2201      	movs	r2, #1
 8004d26:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2201      	movs	r2, #1
 8004d36:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2201      	movs	r2, #1
 8004d46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2201      	movs	r2, #1
 8004d56:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2201      	movs	r2, #1
 8004d66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d72:	2300      	movs	r3, #0
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3708      	adds	r7, #8
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}

08004d7c <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b083      	sub	sp, #12
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004d84:	bf00      	nop
 8004d86:	370c      	adds	r7, #12
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bc80      	pop	{r7}
 8004d8c:	4770      	bx	lr

08004d8e <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004d8e:	b580      	push	{r7, lr}
 8004d90:	b082      	sub	sp, #8
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d101      	bne.n	8004da0 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	e041      	b.n	8004e24 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d106      	bne.n	8004dba <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2200      	movs	r2, #0
 8004db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f000 f839 	bl	8004e2c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2202      	movs	r2, #2
 8004dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681a      	ldr	r2, [r3, #0]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	3304      	adds	r3, #4
 8004dca:	4619      	mov	r1, r3
 8004dcc:	4610      	mov	r0, r2
 8004dce:	f000 fc5d 	bl	800568c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2201      	movs	r2, #1
 8004dde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2201      	movs	r2, #1
 8004de6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2201      	movs	r2, #1
 8004dee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2201      	movs	r2, #1
 8004df6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2201      	movs	r2, #1
 8004e06:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2201      	movs	r2, #1
 8004e16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e22:	2300      	movs	r3, #0
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3708      	adds	r7, #8
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}

08004e2c <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b083      	sub	sp, #12
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004e34:	bf00      	nop
 8004e36:	370c      	adds	r7, #12
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bc80      	pop	{r7}
 8004e3c:	4770      	bx	lr
	...

08004e40 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b084      	sub	sp, #16
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d104      	bne.n	8004e5a <HAL_TIM_IC_Start_IT+0x1a>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e56:	b2db      	uxtb	r3, r3
 8004e58:	e013      	b.n	8004e82 <HAL_TIM_IC_Start_IT+0x42>
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	2b04      	cmp	r3, #4
 8004e5e:	d104      	bne.n	8004e6a <HAL_TIM_IC_Start_IT+0x2a>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004e66:	b2db      	uxtb	r3, r3
 8004e68:	e00b      	b.n	8004e82 <HAL_TIM_IC_Start_IT+0x42>
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	2b08      	cmp	r3, #8
 8004e6e:	d104      	bne.n	8004e7a <HAL_TIM_IC_Start_IT+0x3a>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e76:	b2db      	uxtb	r3, r3
 8004e78:	e003      	b.n	8004e82 <HAL_TIM_IC_Start_IT+0x42>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d104      	bne.n	8004e94 <HAL_TIM_IC_Start_IT+0x54>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	e013      	b.n	8004ebc <HAL_TIM_IC_Start_IT+0x7c>
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	2b04      	cmp	r3, #4
 8004e98:	d104      	bne.n	8004ea4 <HAL_TIM_IC_Start_IT+0x64>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	e00b      	b.n	8004ebc <HAL_TIM_IC_Start_IT+0x7c>
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	2b08      	cmp	r3, #8
 8004ea8:	d104      	bne.n	8004eb4 <HAL_TIM_IC_Start_IT+0x74>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004eb0:	b2db      	uxtb	r3, r3
 8004eb2:	e003      	b.n	8004ebc <HAL_TIM_IC_Start_IT+0x7c>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ebe:	7bfb      	ldrb	r3, [r7, #15]
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d102      	bne.n	8004eca <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004ec4:	7bbb      	ldrb	r3, [r7, #14]
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	d001      	beq.n	8004ece <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e0b3      	b.n	8005036 <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d104      	bne.n	8004ede <HAL_TIM_IC_Start_IT+0x9e>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2202      	movs	r2, #2
 8004ed8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004edc:	e013      	b.n	8004f06 <HAL_TIM_IC_Start_IT+0xc6>
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	2b04      	cmp	r3, #4
 8004ee2:	d104      	bne.n	8004eee <HAL_TIM_IC_Start_IT+0xae>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2202      	movs	r2, #2
 8004ee8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004eec:	e00b      	b.n	8004f06 <HAL_TIM_IC_Start_IT+0xc6>
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	2b08      	cmp	r3, #8
 8004ef2:	d104      	bne.n	8004efe <HAL_TIM_IC_Start_IT+0xbe>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2202      	movs	r2, #2
 8004ef8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004efc:	e003      	b.n	8004f06 <HAL_TIM_IC_Start_IT+0xc6>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2202      	movs	r2, #2
 8004f02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d104      	bne.n	8004f16 <HAL_TIM_IC_Start_IT+0xd6>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2202      	movs	r2, #2
 8004f10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f14:	e013      	b.n	8004f3e <HAL_TIM_IC_Start_IT+0xfe>
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	2b04      	cmp	r3, #4
 8004f1a:	d104      	bne.n	8004f26 <HAL_TIM_IC_Start_IT+0xe6>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2202      	movs	r2, #2
 8004f20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f24:	e00b      	b.n	8004f3e <HAL_TIM_IC_Start_IT+0xfe>
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	2b08      	cmp	r3, #8
 8004f2a:	d104      	bne.n	8004f36 <HAL_TIM_IC_Start_IT+0xf6>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2202      	movs	r2, #2
 8004f30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f34:	e003      	b.n	8004f3e <HAL_TIM_IC_Start_IT+0xfe>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2202      	movs	r2, #2
 8004f3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	2b0c      	cmp	r3, #12
 8004f42:	d841      	bhi.n	8004fc8 <HAL_TIM_IC_Start_IT+0x188>
 8004f44:	a201      	add	r2, pc, #4	; (adr r2, 8004f4c <HAL_TIM_IC_Start_IT+0x10c>)
 8004f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f4a:	bf00      	nop
 8004f4c:	08004f81 	.word	0x08004f81
 8004f50:	08004fc9 	.word	0x08004fc9
 8004f54:	08004fc9 	.word	0x08004fc9
 8004f58:	08004fc9 	.word	0x08004fc9
 8004f5c:	08004f93 	.word	0x08004f93
 8004f60:	08004fc9 	.word	0x08004fc9
 8004f64:	08004fc9 	.word	0x08004fc9
 8004f68:	08004fc9 	.word	0x08004fc9
 8004f6c:	08004fa5 	.word	0x08004fa5
 8004f70:	08004fc9 	.word	0x08004fc9
 8004f74:	08004fc9 	.word	0x08004fc9
 8004f78:	08004fc9 	.word	0x08004fc9
 8004f7c:	08004fb7 	.word	0x08004fb7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	68da      	ldr	r2, [r3, #12]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f042 0202 	orr.w	r2, r2, #2
 8004f8e:	60da      	str	r2, [r3, #12]
      break;
 8004f90:	e01b      	b.n	8004fca <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	68da      	ldr	r2, [r3, #12]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f042 0204 	orr.w	r2, r2, #4
 8004fa0:	60da      	str	r2, [r3, #12]
      break;
 8004fa2:	e012      	b.n	8004fca <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	68da      	ldr	r2, [r3, #12]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f042 0208 	orr.w	r2, r2, #8
 8004fb2:	60da      	str	r2, [r3, #12]
      break;
 8004fb4:	e009      	b.n	8004fca <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	68da      	ldr	r2, [r3, #12]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f042 0210 	orr.w	r2, r2, #16
 8004fc4:	60da      	str	r2, [r3, #12]
      break;
 8004fc6:	e000      	b.n	8004fca <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 8004fc8:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	6839      	ldr	r1, [r7, #0]
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f000 fee7 	bl	8005da6 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a18      	ldr	r2, [pc, #96]	; (8005040 <HAL_TIM_IC_Start_IT+0x200>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d00e      	beq.n	8005000 <HAL_TIM_IC_Start_IT+0x1c0>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fea:	d009      	beq.n	8005000 <HAL_TIM_IC_Start_IT+0x1c0>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a14      	ldr	r2, [pc, #80]	; (8005044 <HAL_TIM_IC_Start_IT+0x204>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d004      	beq.n	8005000 <HAL_TIM_IC_Start_IT+0x1c0>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a13      	ldr	r2, [pc, #76]	; (8005048 <HAL_TIM_IC_Start_IT+0x208>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d111      	bne.n	8005024 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	f003 0307 	and.w	r3, r3, #7
 800500a:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	2b06      	cmp	r3, #6
 8005010:	d010      	beq.n	8005034 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f042 0201 	orr.w	r2, r2, #1
 8005020:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005022:	e007      	b.n	8005034 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f042 0201 	orr.w	r2, r2, #1
 8005032:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005034:	2300      	movs	r3, #0
}
 8005036:	4618      	mov	r0, r3
 8005038:	3710      	adds	r7, #16
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
 800503e:	bf00      	nop
 8005040:	40012c00 	.word	0x40012c00
 8005044:	40000400 	.word	0x40000400
 8005048:	40000800 	.word	0x40000800

0800504c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b082      	sub	sp, #8
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	691b      	ldr	r3, [r3, #16]
 800505a:	f003 0302 	and.w	r3, r3, #2
 800505e:	2b02      	cmp	r3, #2
 8005060:	d122      	bne.n	80050a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	f003 0302 	and.w	r3, r3, #2
 800506c:	2b02      	cmp	r3, #2
 800506e:	d11b      	bne.n	80050a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f06f 0202 	mvn.w	r2, #2
 8005078:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2201      	movs	r2, #1
 800507e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	699b      	ldr	r3, [r3, #24]
 8005086:	f003 0303 	and.w	r3, r3, #3
 800508a:	2b00      	cmp	r3, #0
 800508c:	d003      	beq.n	8005096 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f7fb ff92 	bl	8000fb8 <HAL_TIM_IC_CaptureCallback>
 8005094:	e005      	b.n	80050a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f000 fadd 	bl	8005656 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f000 fae3 	bl	8005668 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2200      	movs	r2, #0
 80050a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	691b      	ldr	r3, [r3, #16]
 80050ae:	f003 0304 	and.w	r3, r3, #4
 80050b2:	2b04      	cmp	r3, #4
 80050b4:	d122      	bne.n	80050fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	68db      	ldr	r3, [r3, #12]
 80050bc:	f003 0304 	and.w	r3, r3, #4
 80050c0:	2b04      	cmp	r3, #4
 80050c2:	d11b      	bne.n	80050fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f06f 0204 	mvn.w	r2, #4
 80050cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2202      	movs	r2, #2
 80050d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	699b      	ldr	r3, [r3, #24]
 80050da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d003      	beq.n	80050ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f7fb ff68 	bl	8000fb8 <HAL_TIM_IC_CaptureCallback>
 80050e8:	e005      	b.n	80050f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f000 fab3 	bl	8005656 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050f0:	6878      	ldr	r0, [r7, #4]
 80050f2:	f000 fab9 	bl	8005668 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2200      	movs	r2, #0
 80050fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	691b      	ldr	r3, [r3, #16]
 8005102:	f003 0308 	and.w	r3, r3, #8
 8005106:	2b08      	cmp	r3, #8
 8005108:	d122      	bne.n	8005150 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	68db      	ldr	r3, [r3, #12]
 8005110:	f003 0308 	and.w	r3, r3, #8
 8005114:	2b08      	cmp	r3, #8
 8005116:	d11b      	bne.n	8005150 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f06f 0208 	mvn.w	r2, #8
 8005120:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2204      	movs	r2, #4
 8005126:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	69db      	ldr	r3, [r3, #28]
 800512e:	f003 0303 	and.w	r3, r3, #3
 8005132:	2b00      	cmp	r3, #0
 8005134:	d003      	beq.n	800513e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f7fb ff3e 	bl	8000fb8 <HAL_TIM_IC_CaptureCallback>
 800513c:	e005      	b.n	800514a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f000 fa89 	bl	8005656 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f000 fa8f 	bl	8005668 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2200      	movs	r2, #0
 800514e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	691b      	ldr	r3, [r3, #16]
 8005156:	f003 0310 	and.w	r3, r3, #16
 800515a:	2b10      	cmp	r3, #16
 800515c:	d122      	bne.n	80051a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	f003 0310 	and.w	r3, r3, #16
 8005168:	2b10      	cmp	r3, #16
 800516a:	d11b      	bne.n	80051a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f06f 0210 	mvn.w	r2, #16
 8005174:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2208      	movs	r2, #8
 800517a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	69db      	ldr	r3, [r3, #28]
 8005182:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005186:	2b00      	cmp	r3, #0
 8005188:	d003      	beq.n	8005192 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f7fb ff14 	bl	8000fb8 <HAL_TIM_IC_CaptureCallback>
 8005190:	e005      	b.n	800519e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f000 fa5f 	bl	8005656 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	f000 fa65 	bl	8005668 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2200      	movs	r2, #0
 80051a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	691b      	ldr	r3, [r3, #16]
 80051aa:	f003 0301 	and.w	r3, r3, #1
 80051ae:	2b01      	cmp	r3, #1
 80051b0:	d10e      	bne.n	80051d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	68db      	ldr	r3, [r3, #12]
 80051b8:	f003 0301 	and.w	r3, r3, #1
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d107      	bne.n	80051d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f06f 0201 	mvn.w	r2, #1
 80051c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f000 fa3a 	bl	8005644 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	691b      	ldr	r3, [r3, #16]
 80051d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051da:	2b80      	cmp	r3, #128	; 0x80
 80051dc:	d10e      	bne.n	80051fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	68db      	ldr	r3, [r3, #12]
 80051e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051e8:	2b80      	cmp	r3, #128	; 0x80
 80051ea:	d107      	bne.n	80051fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80051f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f000 feb2 	bl	8005f60 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	691b      	ldr	r3, [r3, #16]
 8005202:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005206:	2b40      	cmp	r3, #64	; 0x40
 8005208:	d10e      	bne.n	8005228 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	68db      	ldr	r3, [r3, #12]
 8005210:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005214:	2b40      	cmp	r3, #64	; 0x40
 8005216:	d107      	bne.n	8005228 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005220:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f000 fa29 	bl	800567a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	691b      	ldr	r3, [r3, #16]
 800522e:	f003 0320 	and.w	r3, r3, #32
 8005232:	2b20      	cmp	r3, #32
 8005234:	d10e      	bne.n	8005254 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	68db      	ldr	r3, [r3, #12]
 800523c:	f003 0320 	and.w	r3, r3, #32
 8005240:	2b20      	cmp	r3, #32
 8005242:	d107      	bne.n	8005254 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f06f 0220 	mvn.w	r2, #32
 800524c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f000 fe7d 	bl	8005f4e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005254:	bf00      	nop
 8005256:	3708      	adds	r7, #8
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}

0800525c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b084      	sub	sp, #16
 8005260:	af00      	add	r7, sp, #0
 8005262:	60f8      	str	r0, [r7, #12]
 8005264:	60b9      	str	r1, [r7, #8]
 8005266:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800526e:	2b01      	cmp	r3, #1
 8005270:	d101      	bne.n	8005276 <HAL_TIM_OC_ConfigChannel+0x1a>
 8005272:	2302      	movs	r3, #2
 8005274:	e046      	b.n	8005304 <HAL_TIM_OC_ConfigChannel+0xa8>
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2201      	movs	r2, #1
 800527a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2b0c      	cmp	r3, #12
 8005282:	d839      	bhi.n	80052f8 <HAL_TIM_OC_ConfigChannel+0x9c>
 8005284:	a201      	add	r2, pc, #4	; (adr r2, 800528c <HAL_TIM_OC_ConfigChannel+0x30>)
 8005286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800528a:	bf00      	nop
 800528c:	080052c1 	.word	0x080052c1
 8005290:	080052f9 	.word	0x080052f9
 8005294:	080052f9 	.word	0x080052f9
 8005298:	080052f9 	.word	0x080052f9
 800529c:	080052cf 	.word	0x080052cf
 80052a0:	080052f9 	.word	0x080052f9
 80052a4:	080052f9 	.word	0x080052f9
 80052a8:	080052f9 	.word	0x080052f9
 80052ac:	080052dd 	.word	0x080052dd
 80052b0:	080052f9 	.word	0x080052f9
 80052b4:	080052f9 	.word	0x080052f9
 80052b8:	080052f9 	.word	0x080052f9
 80052bc:	080052eb 	.word	0x080052eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	68b9      	ldr	r1, [r7, #8]
 80052c6:	4618      	mov	r0, r3
 80052c8:	f000 fa42 	bl	8005750 <TIM_OC1_SetConfig>
      break;
 80052cc:	e015      	b.n	80052fa <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	68b9      	ldr	r1, [r7, #8]
 80052d4:	4618      	mov	r0, r3
 80052d6:	f000 faa1 	bl	800581c <TIM_OC2_SetConfig>
      break;
 80052da:	e00e      	b.n	80052fa <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	68b9      	ldr	r1, [r7, #8]
 80052e2:	4618      	mov	r0, r3
 80052e4:	f000 fb04 	bl	80058f0 <TIM_OC3_SetConfig>
      break;
 80052e8:	e007      	b.n	80052fa <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	68b9      	ldr	r1, [r7, #8]
 80052f0:	4618      	mov	r0, r3
 80052f2:	f000 fb67 	bl	80059c4 <TIM_OC4_SetConfig>
      break;
 80052f6:	e000      	b.n	80052fa <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 80052f8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2200      	movs	r2, #0
 80052fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005302:	2300      	movs	r3, #0
}
 8005304:	4618      	mov	r0, r3
 8005306:	3710      	adds	r7, #16
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}

0800530c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b084      	sub	sp, #16
 8005310:	af00      	add	r7, sp, #0
 8005312:	60f8      	str	r0, [r7, #12]
 8005314:	60b9      	str	r1, [r7, #8]
 8005316:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800531e:	2b01      	cmp	r3, #1
 8005320:	d101      	bne.n	8005326 <HAL_TIM_IC_ConfigChannel+0x1a>
 8005322:	2302      	movs	r3, #2
 8005324:	e082      	b.n	800542c <HAL_TIM_IC_ConfigChannel+0x120>
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2201      	movs	r2, #1
 800532a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d11b      	bne.n	800536c <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	6818      	ldr	r0, [r3, #0]
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	6819      	ldr	r1, [r3, #0]
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	685a      	ldr	r2, [r3, #4]
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	68db      	ldr	r3, [r3, #12]
 8005344:	f000 fb8c 	bl	8005a60 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	699a      	ldr	r2, [r3, #24]
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f022 020c 	bic.w	r2, r2, #12
 8005356:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	6999      	ldr	r1, [r3, #24]
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	689a      	ldr	r2, [r3, #8]
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	430a      	orrs	r2, r1
 8005368:	619a      	str	r2, [r3, #24]
 800536a:	e05a      	b.n	8005422 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2b04      	cmp	r3, #4
 8005370:	d11c      	bne.n	80053ac <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	6818      	ldr	r0, [r3, #0]
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	6819      	ldr	r1, [r3, #0]
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	685a      	ldr	r2, [r3, #4]
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	68db      	ldr	r3, [r3, #12]
 8005382:	f000 fbf5 	bl	8005b70 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	699a      	ldr	r2, [r3, #24]
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005394:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	6999      	ldr	r1, [r3, #24]
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	021a      	lsls	r2, r3, #8
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	430a      	orrs	r2, r1
 80053a8:	619a      	str	r2, [r3, #24]
 80053aa:	e03a      	b.n	8005422 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2b08      	cmp	r3, #8
 80053b0:	d11b      	bne.n	80053ea <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	6818      	ldr	r0, [r3, #0]
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	6819      	ldr	r1, [r3, #0]
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	685a      	ldr	r2, [r3, #4]
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	68db      	ldr	r3, [r3, #12]
 80053c2:	f000 fc40 	bl	8005c46 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	69da      	ldr	r2, [r3, #28]
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f022 020c 	bic.w	r2, r2, #12
 80053d4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	69d9      	ldr	r1, [r3, #28]
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	689a      	ldr	r2, [r3, #8]
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	430a      	orrs	r2, r1
 80053e6:	61da      	str	r2, [r3, #28]
 80053e8:	e01b      	b.n	8005422 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	6818      	ldr	r0, [r3, #0]
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	6819      	ldr	r1, [r3, #0]
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	685a      	ldr	r2, [r3, #4]
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	68db      	ldr	r3, [r3, #12]
 80053fa:	f000 fc5f 	bl	8005cbc <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	69da      	ldr	r2, [r3, #28]
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800540c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	69d9      	ldr	r1, [r3, #28]
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	021a      	lsls	r2, r3, #8
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	430a      	orrs	r2, r1
 8005420:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2200      	movs	r2, #0
 8005426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800542a:	2300      	movs	r3, #0
}
 800542c:	4618      	mov	r0, r3
 800542e:	3710      	adds	r7, #16
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}

08005434 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b084      	sub	sp, #16
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
 800543c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005444:	2b01      	cmp	r3, #1
 8005446:	d101      	bne.n	800544c <HAL_TIM_ConfigClockSource+0x18>
 8005448:	2302      	movs	r3, #2
 800544a:	e0b3      	b.n	80055b4 <HAL_TIM_ConfigClockSource+0x180>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2201      	movs	r2, #1
 8005450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2202      	movs	r2, #2
 8005458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800546a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005472:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	68fa      	ldr	r2, [r7, #12]
 800547a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005484:	d03e      	beq.n	8005504 <HAL_TIM_ConfigClockSource+0xd0>
 8005486:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800548a:	f200 8087 	bhi.w	800559c <HAL_TIM_ConfigClockSource+0x168>
 800548e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005492:	f000 8085 	beq.w	80055a0 <HAL_TIM_ConfigClockSource+0x16c>
 8005496:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800549a:	d87f      	bhi.n	800559c <HAL_TIM_ConfigClockSource+0x168>
 800549c:	2b70      	cmp	r3, #112	; 0x70
 800549e:	d01a      	beq.n	80054d6 <HAL_TIM_ConfigClockSource+0xa2>
 80054a0:	2b70      	cmp	r3, #112	; 0x70
 80054a2:	d87b      	bhi.n	800559c <HAL_TIM_ConfigClockSource+0x168>
 80054a4:	2b60      	cmp	r3, #96	; 0x60
 80054a6:	d050      	beq.n	800554a <HAL_TIM_ConfigClockSource+0x116>
 80054a8:	2b60      	cmp	r3, #96	; 0x60
 80054aa:	d877      	bhi.n	800559c <HAL_TIM_ConfigClockSource+0x168>
 80054ac:	2b50      	cmp	r3, #80	; 0x50
 80054ae:	d03c      	beq.n	800552a <HAL_TIM_ConfigClockSource+0xf6>
 80054b0:	2b50      	cmp	r3, #80	; 0x50
 80054b2:	d873      	bhi.n	800559c <HAL_TIM_ConfigClockSource+0x168>
 80054b4:	2b40      	cmp	r3, #64	; 0x40
 80054b6:	d058      	beq.n	800556a <HAL_TIM_ConfigClockSource+0x136>
 80054b8:	2b40      	cmp	r3, #64	; 0x40
 80054ba:	d86f      	bhi.n	800559c <HAL_TIM_ConfigClockSource+0x168>
 80054bc:	2b30      	cmp	r3, #48	; 0x30
 80054be:	d064      	beq.n	800558a <HAL_TIM_ConfigClockSource+0x156>
 80054c0:	2b30      	cmp	r3, #48	; 0x30
 80054c2:	d86b      	bhi.n	800559c <HAL_TIM_ConfigClockSource+0x168>
 80054c4:	2b20      	cmp	r3, #32
 80054c6:	d060      	beq.n	800558a <HAL_TIM_ConfigClockSource+0x156>
 80054c8:	2b20      	cmp	r3, #32
 80054ca:	d867      	bhi.n	800559c <HAL_TIM_ConfigClockSource+0x168>
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d05c      	beq.n	800558a <HAL_TIM_ConfigClockSource+0x156>
 80054d0:	2b10      	cmp	r3, #16
 80054d2:	d05a      	beq.n	800558a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80054d4:	e062      	b.n	800559c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6818      	ldr	r0, [r3, #0]
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	6899      	ldr	r1, [r3, #8]
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	685a      	ldr	r2, [r3, #4]
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	68db      	ldr	r3, [r3, #12]
 80054e6:	f000 fc3f 	bl	8005d68 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80054f8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	68fa      	ldr	r2, [r7, #12]
 8005500:	609a      	str	r2, [r3, #8]
      break;
 8005502:	e04e      	b.n	80055a2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6818      	ldr	r0, [r3, #0]
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	6899      	ldr	r1, [r3, #8]
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	685a      	ldr	r2, [r3, #4]
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	f000 fc28 	bl	8005d68 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	689a      	ldr	r2, [r3, #8]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005526:	609a      	str	r2, [r3, #8]
      break;
 8005528:	e03b      	b.n	80055a2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6818      	ldr	r0, [r3, #0]
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	6859      	ldr	r1, [r3, #4]
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	68db      	ldr	r3, [r3, #12]
 8005536:	461a      	mov	r2, r3
 8005538:	f000 faec 	bl	8005b14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	2150      	movs	r1, #80	; 0x50
 8005542:	4618      	mov	r0, r3
 8005544:	f000 fbf6 	bl	8005d34 <TIM_ITRx_SetConfig>
      break;
 8005548:	e02b      	b.n	80055a2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6818      	ldr	r0, [r3, #0]
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	6859      	ldr	r1, [r3, #4]
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	68db      	ldr	r3, [r3, #12]
 8005556:	461a      	mov	r2, r3
 8005558:	f000 fb46 	bl	8005be8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	2160      	movs	r1, #96	; 0x60
 8005562:	4618      	mov	r0, r3
 8005564:	f000 fbe6 	bl	8005d34 <TIM_ITRx_SetConfig>
      break;
 8005568:	e01b      	b.n	80055a2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6818      	ldr	r0, [r3, #0]
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	6859      	ldr	r1, [r3, #4]
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	68db      	ldr	r3, [r3, #12]
 8005576:	461a      	mov	r2, r3
 8005578:	f000 facc 	bl	8005b14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	2140      	movs	r1, #64	; 0x40
 8005582:	4618      	mov	r0, r3
 8005584:	f000 fbd6 	bl	8005d34 <TIM_ITRx_SetConfig>
      break;
 8005588:	e00b      	b.n	80055a2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681a      	ldr	r2, [r3, #0]
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4619      	mov	r1, r3
 8005594:	4610      	mov	r0, r2
 8005596:	f000 fbcd 	bl	8005d34 <TIM_ITRx_SetConfig>
        break;
 800559a:	e002      	b.n	80055a2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800559c:	bf00      	nop
 800559e:	e000      	b.n	80055a2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80055a0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2201      	movs	r2, #1
 80055a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2200      	movs	r2, #0
 80055ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055b2:	2300      	movs	r3, #0
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	3710      	adds	r7, #16
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}

080055bc <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80055bc:	b480      	push	{r7}
 80055be:	b085      	sub	sp, #20
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
 80055c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80055c6:	2300      	movs	r3, #0
 80055c8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	2b0c      	cmp	r3, #12
 80055ce:	d831      	bhi.n	8005634 <HAL_TIM_ReadCapturedValue+0x78>
 80055d0:	a201      	add	r2, pc, #4	; (adr r2, 80055d8 <HAL_TIM_ReadCapturedValue+0x1c>)
 80055d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055d6:	bf00      	nop
 80055d8:	0800560d 	.word	0x0800560d
 80055dc:	08005635 	.word	0x08005635
 80055e0:	08005635 	.word	0x08005635
 80055e4:	08005635 	.word	0x08005635
 80055e8:	08005617 	.word	0x08005617
 80055ec:	08005635 	.word	0x08005635
 80055f0:	08005635 	.word	0x08005635
 80055f4:	08005635 	.word	0x08005635
 80055f8:	08005621 	.word	0x08005621
 80055fc:	08005635 	.word	0x08005635
 8005600:	08005635 	.word	0x08005635
 8005604:	08005635 	.word	0x08005635
 8005608:	0800562b 	.word	0x0800562b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005612:	60fb      	str	r3, [r7, #12]

      break;
 8005614:	e00f      	b.n	8005636 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800561c:	60fb      	str	r3, [r7, #12]

      break;
 800561e:	e00a      	b.n	8005636 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005626:	60fb      	str	r3, [r7, #12]

      break;
 8005628:	e005      	b.n	8005636 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005630:	60fb      	str	r3, [r7, #12]

      break;
 8005632:	e000      	b.n	8005636 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005634:	bf00      	nop
  }

  return tmpreg;
 8005636:	68fb      	ldr	r3, [r7, #12]
}
 8005638:	4618      	mov	r0, r3
 800563a:	3714      	adds	r7, #20
 800563c:	46bd      	mov	sp, r7
 800563e:	bc80      	pop	{r7}
 8005640:	4770      	bx	lr
 8005642:	bf00      	nop

08005644 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005644:	b480      	push	{r7}
 8005646:	b083      	sub	sp, #12
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800564c:	bf00      	nop
 800564e:	370c      	adds	r7, #12
 8005650:	46bd      	mov	sp, r7
 8005652:	bc80      	pop	{r7}
 8005654:	4770      	bx	lr

08005656 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005656:	b480      	push	{r7}
 8005658:	b083      	sub	sp, #12
 800565a:	af00      	add	r7, sp, #0
 800565c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800565e:	bf00      	nop
 8005660:	370c      	adds	r7, #12
 8005662:	46bd      	mov	sp, r7
 8005664:	bc80      	pop	{r7}
 8005666:	4770      	bx	lr

08005668 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005668:	b480      	push	{r7}
 800566a:	b083      	sub	sp, #12
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005670:	bf00      	nop
 8005672:	370c      	adds	r7, #12
 8005674:	46bd      	mov	sp, r7
 8005676:	bc80      	pop	{r7}
 8005678:	4770      	bx	lr

0800567a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800567a:	b480      	push	{r7}
 800567c:	b083      	sub	sp, #12
 800567e:	af00      	add	r7, sp, #0
 8005680:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005682:	bf00      	nop
 8005684:	370c      	adds	r7, #12
 8005686:	46bd      	mov	sp, r7
 8005688:	bc80      	pop	{r7}
 800568a:	4770      	bx	lr

0800568c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800568c:	b480      	push	{r7}
 800568e:	b085      	sub	sp, #20
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
 8005694:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	4a29      	ldr	r2, [pc, #164]	; (8005744 <TIM_Base_SetConfig+0xb8>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d00b      	beq.n	80056bc <TIM_Base_SetConfig+0x30>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056aa:	d007      	beq.n	80056bc <TIM_Base_SetConfig+0x30>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	4a26      	ldr	r2, [pc, #152]	; (8005748 <TIM_Base_SetConfig+0xbc>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d003      	beq.n	80056bc <TIM_Base_SetConfig+0x30>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	4a25      	ldr	r2, [pc, #148]	; (800574c <TIM_Base_SetConfig+0xc0>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d108      	bne.n	80056ce <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	68fa      	ldr	r2, [r7, #12]
 80056ca:	4313      	orrs	r3, r2
 80056cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4a1c      	ldr	r2, [pc, #112]	; (8005744 <TIM_Base_SetConfig+0xb8>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d00b      	beq.n	80056ee <TIM_Base_SetConfig+0x62>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056dc:	d007      	beq.n	80056ee <TIM_Base_SetConfig+0x62>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	4a19      	ldr	r2, [pc, #100]	; (8005748 <TIM_Base_SetConfig+0xbc>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d003      	beq.n	80056ee <TIM_Base_SetConfig+0x62>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	4a18      	ldr	r2, [pc, #96]	; (800574c <TIM_Base_SetConfig+0xc0>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d108      	bne.n	8005700 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	68db      	ldr	r3, [r3, #12]
 80056fa:	68fa      	ldr	r2, [r7, #12]
 80056fc:	4313      	orrs	r3, r2
 80056fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	695b      	ldr	r3, [r3, #20]
 800570a:	4313      	orrs	r3, r2
 800570c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	68fa      	ldr	r2, [r7, #12]
 8005712:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	689a      	ldr	r2, [r3, #8]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	4a07      	ldr	r2, [pc, #28]	; (8005744 <TIM_Base_SetConfig+0xb8>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d103      	bne.n	8005734 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	691a      	ldr	r2, [r3, #16]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2201      	movs	r2, #1
 8005738:	615a      	str	r2, [r3, #20]
}
 800573a:	bf00      	nop
 800573c:	3714      	adds	r7, #20
 800573e:	46bd      	mov	sp, r7
 8005740:	bc80      	pop	{r7}
 8005742:	4770      	bx	lr
 8005744:	40012c00 	.word	0x40012c00
 8005748:	40000400 	.word	0x40000400
 800574c:	40000800 	.word	0x40000800

08005750 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005750:	b480      	push	{r7}
 8005752:	b087      	sub	sp, #28
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
 8005758:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6a1b      	ldr	r3, [r3, #32]
 800575e:	f023 0201 	bic.w	r2, r3, #1
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6a1b      	ldr	r3, [r3, #32]
 800576a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	699b      	ldr	r3, [r3, #24]
 8005776:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800577e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f023 0303 	bic.w	r3, r3, #3
 8005786:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	68fa      	ldr	r2, [r7, #12]
 800578e:	4313      	orrs	r3, r2
 8005790:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	f023 0302 	bic.w	r3, r3, #2
 8005798:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	697a      	ldr	r2, [r7, #20]
 80057a0:	4313      	orrs	r3, r2
 80057a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	4a1c      	ldr	r2, [pc, #112]	; (8005818 <TIM_OC1_SetConfig+0xc8>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d10c      	bne.n	80057c6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	f023 0308 	bic.w	r3, r3, #8
 80057b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	68db      	ldr	r3, [r3, #12]
 80057b8:	697a      	ldr	r2, [r7, #20]
 80057ba:	4313      	orrs	r3, r2
 80057bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	f023 0304 	bic.w	r3, r3, #4
 80057c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	4a13      	ldr	r2, [pc, #76]	; (8005818 <TIM_OC1_SetConfig+0xc8>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d111      	bne.n	80057f2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80057dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	695b      	ldr	r3, [r3, #20]
 80057e2:	693a      	ldr	r2, [r7, #16]
 80057e4:	4313      	orrs	r3, r2
 80057e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	699b      	ldr	r3, [r3, #24]
 80057ec:	693a      	ldr	r2, [r7, #16]
 80057ee:	4313      	orrs	r3, r2
 80057f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	693a      	ldr	r2, [r7, #16]
 80057f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	68fa      	ldr	r2, [r7, #12]
 80057fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	685a      	ldr	r2, [r3, #4]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	697a      	ldr	r2, [r7, #20]
 800580a:	621a      	str	r2, [r3, #32]
}
 800580c:	bf00      	nop
 800580e:	371c      	adds	r7, #28
 8005810:	46bd      	mov	sp, r7
 8005812:	bc80      	pop	{r7}
 8005814:	4770      	bx	lr
 8005816:	bf00      	nop
 8005818:	40012c00 	.word	0x40012c00

0800581c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800581c:	b480      	push	{r7}
 800581e:	b087      	sub	sp, #28
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
 8005824:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6a1b      	ldr	r3, [r3, #32]
 800582a:	f023 0210 	bic.w	r2, r3, #16
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6a1b      	ldr	r3, [r3, #32]
 8005836:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	699b      	ldr	r3, [r3, #24]
 8005842:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800584a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005852:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	021b      	lsls	r3, r3, #8
 800585a:	68fa      	ldr	r2, [r7, #12]
 800585c:	4313      	orrs	r3, r2
 800585e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	f023 0320 	bic.w	r3, r3, #32
 8005866:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	011b      	lsls	r3, r3, #4
 800586e:	697a      	ldr	r2, [r7, #20]
 8005870:	4313      	orrs	r3, r2
 8005872:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	4a1d      	ldr	r2, [pc, #116]	; (80058ec <TIM_OC2_SetConfig+0xd0>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d10d      	bne.n	8005898 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005882:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	68db      	ldr	r3, [r3, #12]
 8005888:	011b      	lsls	r3, r3, #4
 800588a:	697a      	ldr	r2, [r7, #20]
 800588c:	4313      	orrs	r3, r2
 800588e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005896:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	4a14      	ldr	r2, [pc, #80]	; (80058ec <TIM_OC2_SetConfig+0xd0>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d113      	bne.n	80058c8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80058a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80058ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	695b      	ldr	r3, [r3, #20]
 80058b4:	009b      	lsls	r3, r3, #2
 80058b6:	693a      	ldr	r2, [r7, #16]
 80058b8:	4313      	orrs	r3, r2
 80058ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	699b      	ldr	r3, [r3, #24]
 80058c0:	009b      	lsls	r3, r3, #2
 80058c2:	693a      	ldr	r2, [r7, #16]
 80058c4:	4313      	orrs	r3, r2
 80058c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	693a      	ldr	r2, [r7, #16]
 80058cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	68fa      	ldr	r2, [r7, #12]
 80058d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	685a      	ldr	r2, [r3, #4]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	697a      	ldr	r2, [r7, #20]
 80058e0:	621a      	str	r2, [r3, #32]
}
 80058e2:	bf00      	nop
 80058e4:	371c      	adds	r7, #28
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bc80      	pop	{r7}
 80058ea:	4770      	bx	lr
 80058ec:	40012c00 	.word	0x40012c00

080058f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b087      	sub	sp, #28
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
 80058f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6a1b      	ldr	r3, [r3, #32]
 80058fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6a1b      	ldr	r3, [r3, #32]
 800590a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	69db      	ldr	r3, [r3, #28]
 8005916:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800591e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f023 0303 	bic.w	r3, r3, #3
 8005926:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	68fa      	ldr	r2, [r7, #12]
 800592e:	4313      	orrs	r3, r2
 8005930:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005938:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	021b      	lsls	r3, r3, #8
 8005940:	697a      	ldr	r2, [r7, #20]
 8005942:	4313      	orrs	r3, r2
 8005944:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	4a1d      	ldr	r2, [pc, #116]	; (80059c0 <TIM_OC3_SetConfig+0xd0>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d10d      	bne.n	800596a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005954:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	68db      	ldr	r3, [r3, #12]
 800595a:	021b      	lsls	r3, r3, #8
 800595c:	697a      	ldr	r2, [r7, #20]
 800595e:	4313      	orrs	r3, r2
 8005960:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005968:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	4a14      	ldr	r2, [pc, #80]	; (80059c0 <TIM_OC3_SetConfig+0xd0>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d113      	bne.n	800599a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005978:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005980:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	695b      	ldr	r3, [r3, #20]
 8005986:	011b      	lsls	r3, r3, #4
 8005988:	693a      	ldr	r2, [r7, #16]
 800598a:	4313      	orrs	r3, r2
 800598c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	699b      	ldr	r3, [r3, #24]
 8005992:	011b      	lsls	r3, r3, #4
 8005994:	693a      	ldr	r2, [r7, #16]
 8005996:	4313      	orrs	r3, r2
 8005998:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	693a      	ldr	r2, [r7, #16]
 800599e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	68fa      	ldr	r2, [r7, #12]
 80059a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	685a      	ldr	r2, [r3, #4]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	697a      	ldr	r2, [r7, #20]
 80059b2:	621a      	str	r2, [r3, #32]
}
 80059b4:	bf00      	nop
 80059b6:	371c      	adds	r7, #28
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bc80      	pop	{r7}
 80059bc:	4770      	bx	lr
 80059be:	bf00      	nop
 80059c0:	40012c00 	.word	0x40012c00

080059c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b087      	sub	sp, #28
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6a1b      	ldr	r3, [r3, #32]
 80059d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6a1b      	ldr	r3, [r3, #32]
 80059de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	69db      	ldr	r3, [r3, #28]
 80059ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	021b      	lsls	r3, r3, #8
 8005a02:	68fa      	ldr	r2, [r7, #12]
 8005a04:	4313      	orrs	r3, r2
 8005a06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	689b      	ldr	r3, [r3, #8]
 8005a14:	031b      	lsls	r3, r3, #12
 8005a16:	693a      	ldr	r2, [r7, #16]
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	4a0f      	ldr	r2, [pc, #60]	; (8005a5c <TIM_OC4_SetConfig+0x98>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d109      	bne.n	8005a38 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a2a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	695b      	ldr	r3, [r3, #20]
 8005a30:	019b      	lsls	r3, r3, #6
 8005a32:	697a      	ldr	r2, [r7, #20]
 8005a34:	4313      	orrs	r3, r2
 8005a36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	697a      	ldr	r2, [r7, #20]
 8005a3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	68fa      	ldr	r2, [r7, #12]
 8005a42:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	685a      	ldr	r2, [r3, #4]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	693a      	ldr	r2, [r7, #16]
 8005a50:	621a      	str	r2, [r3, #32]
}
 8005a52:	bf00      	nop
 8005a54:	371c      	adds	r7, #28
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bc80      	pop	{r7}
 8005a5a:	4770      	bx	lr
 8005a5c:	40012c00 	.word	0x40012c00

08005a60 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b087      	sub	sp, #28
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	60f8      	str	r0, [r7, #12]
 8005a68:	60b9      	str	r1, [r7, #8]
 8005a6a:	607a      	str	r2, [r7, #4]
 8005a6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	6a1b      	ldr	r3, [r3, #32]
 8005a72:	f023 0201 	bic.w	r2, r3, #1
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	699b      	ldr	r3, [r3, #24]
 8005a7e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	6a1b      	ldr	r3, [r3, #32]
 8005a84:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	4a1f      	ldr	r2, [pc, #124]	; (8005b08 <TIM_TI1_SetConfig+0xa8>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d00b      	beq.n	8005aa6 <TIM_TI1_SetConfig+0x46>
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a94:	d007      	beq.n	8005aa6 <TIM_TI1_SetConfig+0x46>
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	4a1c      	ldr	r2, [pc, #112]	; (8005b0c <TIM_TI1_SetConfig+0xac>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d003      	beq.n	8005aa6 <TIM_TI1_SetConfig+0x46>
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	4a1b      	ldr	r2, [pc, #108]	; (8005b10 <TIM_TI1_SetConfig+0xb0>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d101      	bne.n	8005aaa <TIM_TI1_SetConfig+0x4a>
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e000      	b.n	8005aac <TIM_TI1_SetConfig+0x4c>
 8005aaa:	2300      	movs	r3, #0
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d008      	beq.n	8005ac2 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	f023 0303 	bic.w	r3, r3, #3
 8005ab6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005ab8:	697a      	ldr	r2, [r7, #20]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	4313      	orrs	r3, r2
 8005abe:	617b      	str	r3, [r7, #20]
 8005ac0:	e003      	b.n	8005aca <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	f043 0301 	orr.w	r3, r3, #1
 8005ac8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ad0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	011b      	lsls	r3, r3, #4
 8005ad6:	b2db      	uxtb	r3, r3
 8005ad8:	697a      	ldr	r2, [r7, #20]
 8005ada:	4313      	orrs	r3, r2
 8005adc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	f023 030a 	bic.w	r3, r3, #10
 8005ae4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	f003 030a 	and.w	r3, r3, #10
 8005aec:	693a      	ldr	r2, [r7, #16]
 8005aee:	4313      	orrs	r3, r2
 8005af0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	697a      	ldr	r2, [r7, #20]
 8005af6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	693a      	ldr	r2, [r7, #16]
 8005afc:	621a      	str	r2, [r3, #32]
}
 8005afe:	bf00      	nop
 8005b00:	371c      	adds	r7, #28
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bc80      	pop	{r7}
 8005b06:	4770      	bx	lr
 8005b08:	40012c00 	.word	0x40012c00
 8005b0c:	40000400 	.word	0x40000400
 8005b10:	40000800 	.word	0x40000800

08005b14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b087      	sub	sp, #28
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	60f8      	str	r0, [r7, #12]
 8005b1c:	60b9      	str	r1, [r7, #8]
 8005b1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	6a1b      	ldr	r3, [r3, #32]
 8005b24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	6a1b      	ldr	r3, [r3, #32]
 8005b2a:	f023 0201 	bic.w	r2, r3, #1
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	699b      	ldr	r3, [r3, #24]
 8005b36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	011b      	lsls	r3, r3, #4
 8005b44:	693a      	ldr	r2, [r7, #16]
 8005b46:	4313      	orrs	r3, r2
 8005b48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	f023 030a 	bic.w	r3, r3, #10
 8005b50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b52:	697a      	ldr	r2, [r7, #20]
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	4313      	orrs	r3, r2
 8005b58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	693a      	ldr	r2, [r7, #16]
 8005b5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	697a      	ldr	r2, [r7, #20]
 8005b64:	621a      	str	r2, [r3, #32]
}
 8005b66:	bf00      	nop
 8005b68:	371c      	adds	r7, #28
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bc80      	pop	{r7}
 8005b6e:	4770      	bx	lr

08005b70 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b087      	sub	sp, #28
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	60f8      	str	r0, [r7, #12]
 8005b78:	60b9      	str	r1, [r7, #8]
 8005b7a:	607a      	str	r2, [r7, #4]
 8005b7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	6a1b      	ldr	r3, [r3, #32]
 8005b82:	f023 0210 	bic.w	r2, r3, #16
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	699b      	ldr	r3, [r3, #24]
 8005b8e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	6a1b      	ldr	r3, [r3, #32]
 8005b94:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b9c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	021b      	lsls	r3, r3, #8
 8005ba2:	697a      	ldr	r2, [r7, #20]
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005bae:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	031b      	lsls	r3, r3, #12
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	697a      	ldr	r2, [r7, #20]
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005bc2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	011b      	lsls	r3, r3, #4
 8005bc8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005bcc:	693a      	ldr	r2, [r7, #16]
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	697a      	ldr	r2, [r7, #20]
 8005bd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	693a      	ldr	r2, [r7, #16]
 8005bdc:	621a      	str	r2, [r3, #32]
}
 8005bde:	bf00      	nop
 8005be0:	371c      	adds	r7, #28
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bc80      	pop	{r7}
 8005be6:	4770      	bx	lr

08005be8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b087      	sub	sp, #28
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	60f8      	str	r0, [r7, #12]
 8005bf0:	60b9      	str	r1, [r7, #8]
 8005bf2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	6a1b      	ldr	r3, [r3, #32]
 8005bf8:	f023 0210 	bic.w	r2, r3, #16
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	699b      	ldr	r3, [r3, #24]
 8005c04:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	6a1b      	ldr	r3, [r3, #32]
 8005c0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005c12:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	031b      	lsls	r3, r3, #12
 8005c18:	697a      	ldr	r2, [r7, #20]
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005c24:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	011b      	lsls	r3, r3, #4
 8005c2a:	693a      	ldr	r2, [r7, #16]
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	697a      	ldr	r2, [r7, #20]
 8005c34:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	693a      	ldr	r2, [r7, #16]
 8005c3a:	621a      	str	r2, [r3, #32]
}
 8005c3c:	bf00      	nop
 8005c3e:	371c      	adds	r7, #28
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bc80      	pop	{r7}
 8005c44:	4770      	bx	lr

08005c46 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005c46:	b480      	push	{r7}
 8005c48:	b087      	sub	sp, #28
 8005c4a:	af00      	add	r7, sp, #0
 8005c4c:	60f8      	str	r0, [r7, #12]
 8005c4e:	60b9      	str	r1, [r7, #8]
 8005c50:	607a      	str	r2, [r7, #4]
 8005c52:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	6a1b      	ldr	r3, [r3, #32]
 8005c58:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	69db      	ldr	r3, [r3, #28]
 8005c64:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	6a1b      	ldr	r3, [r3, #32]
 8005c6a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	f023 0303 	bic.w	r3, r3, #3
 8005c72:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005c74:	697a      	ldr	r2, [r7, #20]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c82:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	011b      	lsls	r3, r3, #4
 8005c88:	b2db      	uxtb	r3, r3
 8005c8a:	697a      	ldr	r2, [r7, #20]
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c96:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	021b      	lsls	r3, r3, #8
 8005c9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ca0:	693a      	ldr	r2, [r7, #16]
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	697a      	ldr	r2, [r7, #20]
 8005caa:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	693a      	ldr	r2, [r7, #16]
 8005cb0:	621a      	str	r2, [r3, #32]
}
 8005cb2:	bf00      	nop
 8005cb4:	371c      	adds	r7, #28
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bc80      	pop	{r7}
 8005cba:	4770      	bx	lr

08005cbc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b087      	sub	sp, #28
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	60f8      	str	r0, [r7, #12]
 8005cc4:	60b9      	str	r1, [r7, #8]
 8005cc6:	607a      	str	r2, [r7, #4]
 8005cc8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	6a1b      	ldr	r3, [r3, #32]
 8005cce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	69db      	ldr	r3, [r3, #28]
 8005cda:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	6a1b      	ldr	r3, [r3, #32]
 8005ce0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ce8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	021b      	lsls	r3, r3, #8
 8005cee:	697a      	ldr	r2, [r7, #20]
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005cfa:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	031b      	lsls	r3, r3, #12
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	697a      	ldr	r2, [r7, #20]
 8005d04:	4313      	orrs	r3, r2
 8005d06:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d0e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	031b      	lsls	r3, r3, #12
 8005d14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d18:	693a      	ldr	r2, [r7, #16]
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	697a      	ldr	r2, [r7, #20]
 8005d22:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	693a      	ldr	r2, [r7, #16]
 8005d28:	621a      	str	r2, [r3, #32]
}
 8005d2a:	bf00      	nop
 8005d2c:	371c      	adds	r7, #28
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bc80      	pop	{r7}
 8005d32:	4770      	bx	lr

08005d34 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b085      	sub	sp, #20
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
 8005d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	689b      	ldr	r3, [r3, #8]
 8005d42:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d4a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d4c:	683a      	ldr	r2, [r7, #0]
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	4313      	orrs	r3, r2
 8005d52:	f043 0307 	orr.w	r3, r3, #7
 8005d56:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	68fa      	ldr	r2, [r7, #12]
 8005d5c:	609a      	str	r2, [r3, #8]
}
 8005d5e:	bf00      	nop
 8005d60:	3714      	adds	r7, #20
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bc80      	pop	{r7}
 8005d66:	4770      	bx	lr

08005d68 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b087      	sub	sp, #28
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	60f8      	str	r0, [r7, #12]
 8005d70:	60b9      	str	r1, [r7, #8]
 8005d72:	607a      	str	r2, [r7, #4]
 8005d74:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d82:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	021a      	lsls	r2, r3, #8
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	431a      	orrs	r2, r3
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	697a      	ldr	r2, [r7, #20]
 8005d92:	4313      	orrs	r3, r2
 8005d94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	697a      	ldr	r2, [r7, #20]
 8005d9a:	609a      	str	r2, [r3, #8]
}
 8005d9c:	bf00      	nop
 8005d9e:	371c      	adds	r7, #28
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bc80      	pop	{r7}
 8005da4:	4770      	bx	lr

08005da6 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005da6:	b480      	push	{r7}
 8005da8:	b087      	sub	sp, #28
 8005daa:	af00      	add	r7, sp, #0
 8005dac:	60f8      	str	r0, [r7, #12]
 8005dae:	60b9      	str	r1, [r7, #8]
 8005db0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	f003 031f 	and.w	r3, r3, #31
 8005db8:	2201      	movs	r2, #1
 8005dba:	fa02 f303 	lsl.w	r3, r2, r3
 8005dbe:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	6a1a      	ldr	r2, [r3, #32]
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	43db      	mvns	r3, r3
 8005dc8:	401a      	ands	r2, r3
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	6a1a      	ldr	r2, [r3, #32]
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	f003 031f 	and.w	r3, r3, #31
 8005dd8:	6879      	ldr	r1, [r7, #4]
 8005dda:	fa01 f303 	lsl.w	r3, r1, r3
 8005dde:	431a      	orrs	r2, r3
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	621a      	str	r2, [r3, #32]
}
 8005de4:	bf00      	nop
 8005de6:	371c      	adds	r7, #28
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bc80      	pop	{r7}
 8005dec:	4770      	bx	lr
	...

08005df0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b085      	sub	sp, #20
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
 8005df8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d101      	bne.n	8005e08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e04:	2302      	movs	r3, #2
 8005e06:	e046      	b.n	8005e96 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2202      	movs	r2, #2
 8005e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	689b      	ldr	r3, [r3, #8]
 8005e26:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	68fa      	ldr	r2, [r7, #12]
 8005e36:	4313      	orrs	r3, r2
 8005e38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	68fa      	ldr	r2, [r7, #12]
 8005e40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a16      	ldr	r2, [pc, #88]	; (8005ea0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d00e      	beq.n	8005e6a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e54:	d009      	beq.n	8005e6a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a12      	ldr	r2, [pc, #72]	; (8005ea4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d004      	beq.n	8005e6a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a10      	ldr	r2, [pc, #64]	; (8005ea8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d10c      	bne.n	8005e84 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e70:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	68ba      	ldr	r2, [r7, #8]
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	68ba      	ldr	r2, [r7, #8]
 8005e82:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2201      	movs	r2, #1
 8005e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e94:	2300      	movs	r3, #0
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	3714      	adds	r7, #20
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bc80      	pop	{r7}
 8005e9e:	4770      	bx	lr
 8005ea0:	40012c00 	.word	0x40012c00
 8005ea4:	40000400 	.word	0x40000400
 8005ea8:	40000800 	.word	0x40000800

08005eac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b085      	sub	sp, #20
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
 8005eb4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d101      	bne.n	8005ec8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005ec4:	2302      	movs	r3, #2
 8005ec6:	e03d      	b.n	8005f44 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2201      	movs	r2, #1
 8005ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	68db      	ldr	r3, [r3, #12]
 8005eda:	4313      	orrs	r3, r2
 8005edc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4313      	orrs	r3, r2
 8005f06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	691b      	ldr	r3, [r3, #16]
 8005f12:	4313      	orrs	r3, r2
 8005f14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	695b      	ldr	r3, [r3, #20]
 8005f20:	4313      	orrs	r3, r2
 8005f22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	69db      	ldr	r3, [r3, #28]
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	68fa      	ldr	r2, [r7, #12]
 8005f38:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f42:	2300      	movs	r3, #0
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3714      	adds	r7, #20
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bc80      	pop	{r7}
 8005f4c:	4770      	bx	lr

08005f4e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f4e:	b480      	push	{r7}
 8005f50:	b083      	sub	sp, #12
 8005f52:	af00      	add	r7, sp, #0
 8005f54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f56:	bf00      	nop
 8005f58:	370c      	adds	r7, #12
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bc80      	pop	{r7}
 8005f5e:	4770      	bx	lr

08005f60 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b083      	sub	sp, #12
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f68:	bf00      	nop
 8005f6a:	370c      	adds	r7, #12
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bc80      	pop	{r7}
 8005f70:	4770      	bx	lr

08005f72 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005f72:	b084      	sub	sp, #16
 8005f74:	b480      	push	{r7}
 8005f76:	b083      	sub	sp, #12
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
 8005f7c:	f107 0014 	add.w	r0, r7, #20
 8005f80:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005f84:	2300      	movs	r3, #0
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	370c      	adds	r7, #12
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bc80      	pop	{r7}
 8005f8e:	b004      	add	sp, #16
 8005f90:	4770      	bx	lr

08005f92 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005f92:	b480      	push	{r7}
 8005f94:	b085      	sub	sp, #20
 8005f96:	af00      	add	r7, sp, #0
 8005f98:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005fa2:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005fa6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	b29a      	uxth	r2, r3
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005fb2:	2300      	movs	r3, #0
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	3714      	adds	r7, #20
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bc80      	pop	{r7}
 8005fbc:	4770      	bx	lr

08005fbe <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005fbe:	b480      	push	{r7}
 8005fc0:	b085      	sub	sp, #20
 8005fc2:	af00      	add	r7, sp, #0
 8005fc4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005fc6:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005fca:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005fd2:	b29a      	uxth	r2, r3
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	b29b      	uxth	r3, r3
 8005fd8:	43db      	mvns	r3, r3
 8005fda:	b29b      	uxth	r3, r3
 8005fdc:	4013      	ands	r3, r2
 8005fde:	b29a      	uxth	r2, r3
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005fe6:	2300      	movs	r3, #0
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	3714      	adds	r7, #20
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bc80      	pop	{r7}
 8005ff0:	4770      	bx	lr

08005ff2 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8005ff2:	b480      	push	{r7}
 8005ff4:	b083      	sub	sp, #12
 8005ff6:	af00      	add	r7, sp, #0
 8005ff8:	6078      	str	r0, [r7, #4]
 8005ffa:	460b      	mov	r3, r1
 8005ffc:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005ffe:	2300      	movs	r3, #0
}
 8006000:	4618      	mov	r0, r3
 8006002:	370c      	adds	r7, #12
 8006004:	46bd      	mov	sp, r7
 8006006:	bc80      	pop	{r7}
 8006008:	4770      	bx	lr

0800600a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800600a:	b084      	sub	sp, #16
 800600c:	b480      	push	{r7}
 800600e:	b083      	sub	sp, #12
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
 8006014:	f107 0014 	add.w	r0, r7, #20
 8006018:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2201      	movs	r2, #1
 8006020:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2200      	movs	r2, #0
 8006028:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2200      	movs	r2, #0
 8006030:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2200      	movs	r2, #0
 8006038:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800603c:	2300      	movs	r3, #0
}
 800603e:	4618      	mov	r0, r3
 8006040:	370c      	adds	r7, #12
 8006042:	46bd      	mov	sp, r7
 8006044:	bc80      	pop	{r7}
 8006046:	b004      	add	sp, #16
 8006048:	4770      	bx	lr
	...

0800604c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800604c:	b480      	push	{r7}
 800604e:	b09b      	sub	sp, #108	; 0x6c
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
 8006054:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006056:	2300      	movs	r3, #0
 8006058:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800605c:	687a      	ldr	r2, [r7, #4]
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	781b      	ldrb	r3, [r3, #0]
 8006062:	009b      	lsls	r3, r3, #2
 8006064:	4413      	add	r3, r2
 8006066:	881b      	ldrh	r3, [r3, #0]
 8006068:	b29b      	uxth	r3, r3
 800606a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800606e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006072:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	78db      	ldrb	r3, [r3, #3]
 800607a:	2b03      	cmp	r3, #3
 800607c:	d81f      	bhi.n	80060be <USB_ActivateEndpoint+0x72>
 800607e:	a201      	add	r2, pc, #4	; (adr r2, 8006084 <USB_ActivateEndpoint+0x38>)
 8006080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006084:	08006095 	.word	0x08006095
 8006088:	080060b1 	.word	0x080060b1
 800608c:	080060c7 	.word	0x080060c7
 8006090:	080060a3 	.word	0x080060a3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006094:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006098:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800609c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80060a0:	e012      	b.n	80060c8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80060a2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80060a6:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80060aa:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80060ae:	e00b      	b.n	80060c8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80060b0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80060b4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80060b8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80060bc:	e004      	b.n	80060c8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80060be:	2301      	movs	r3, #1
 80060c0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80060c4:	e000      	b.n	80060c8 <USB_ActivateEndpoint+0x7c>
      break;
 80060c6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80060c8:	687a      	ldr	r2, [r7, #4]
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	781b      	ldrb	r3, [r3, #0]
 80060ce:	009b      	lsls	r3, r3, #2
 80060d0:	441a      	add	r2, r3
 80060d2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80060d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80060ea:	687a      	ldr	r2, [r7, #4]
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	781b      	ldrb	r3, [r3, #0]
 80060f0:	009b      	lsls	r3, r3, #2
 80060f2:	4413      	add	r3, r2
 80060f4:	881b      	ldrh	r3, [r3, #0]
 80060f6:	b29b      	uxth	r3, r3
 80060f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006100:	b29a      	uxth	r2, r3
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	781b      	ldrb	r3, [r3, #0]
 8006106:	b29b      	uxth	r3, r3
 8006108:	4313      	orrs	r3, r2
 800610a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800610e:	687a      	ldr	r2, [r7, #4]
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	781b      	ldrb	r3, [r3, #0]
 8006114:	009b      	lsls	r3, r3, #2
 8006116:	441a      	add	r2, r3
 8006118:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800611c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006120:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006124:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006128:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800612c:	b29b      	uxth	r3, r3
 800612e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	7b1b      	ldrb	r3, [r3, #12]
 8006134:	2b00      	cmp	r3, #0
 8006136:	f040 8149 	bne.w	80063cc <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	785b      	ldrb	r3, [r3, #1]
 800613e:	2b00      	cmp	r3, #0
 8006140:	f000 8084 	beq.w	800624c <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	617b      	str	r3, [r7, #20]
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800614e:	b29b      	uxth	r3, r3
 8006150:	461a      	mov	r2, r3
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	4413      	add	r3, r2
 8006156:	617b      	str	r3, [r7, #20]
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	781b      	ldrb	r3, [r3, #0]
 800615c:	011a      	lsls	r2, r3, #4
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	4413      	add	r3, r2
 8006162:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006166:	613b      	str	r3, [r7, #16]
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	88db      	ldrh	r3, [r3, #6]
 800616c:	085b      	lsrs	r3, r3, #1
 800616e:	b29b      	uxth	r3, r3
 8006170:	005b      	lsls	r3, r3, #1
 8006172:	b29a      	uxth	r2, r3
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006178:	687a      	ldr	r2, [r7, #4]
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	781b      	ldrb	r3, [r3, #0]
 800617e:	009b      	lsls	r3, r3, #2
 8006180:	4413      	add	r3, r2
 8006182:	881b      	ldrh	r3, [r3, #0]
 8006184:	81fb      	strh	r3, [r7, #14]
 8006186:	89fb      	ldrh	r3, [r7, #14]
 8006188:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800618c:	2b00      	cmp	r3, #0
 800618e:	d01b      	beq.n	80061c8 <USB_ActivateEndpoint+0x17c>
 8006190:	687a      	ldr	r2, [r7, #4]
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	781b      	ldrb	r3, [r3, #0]
 8006196:	009b      	lsls	r3, r3, #2
 8006198:	4413      	add	r3, r2
 800619a:	881b      	ldrh	r3, [r3, #0]
 800619c:	b29b      	uxth	r3, r3
 800619e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061a6:	81bb      	strh	r3, [r7, #12]
 80061a8:	687a      	ldr	r2, [r7, #4]
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	781b      	ldrb	r3, [r3, #0]
 80061ae:	009b      	lsls	r3, r3, #2
 80061b0:	441a      	add	r2, r3
 80061b2:	89bb      	ldrh	r3, [r7, #12]
 80061b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061c0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	78db      	ldrb	r3, [r3, #3]
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	d020      	beq.n	8006212 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80061d0:	687a      	ldr	r2, [r7, #4]
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	781b      	ldrb	r3, [r3, #0]
 80061d6:	009b      	lsls	r3, r3, #2
 80061d8:	4413      	add	r3, r2
 80061da:	881b      	ldrh	r3, [r3, #0]
 80061dc:	b29b      	uxth	r3, r3
 80061de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061e6:	813b      	strh	r3, [r7, #8]
 80061e8:	893b      	ldrh	r3, [r7, #8]
 80061ea:	f083 0320 	eor.w	r3, r3, #32
 80061ee:	813b      	strh	r3, [r7, #8]
 80061f0:	687a      	ldr	r2, [r7, #4]
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	781b      	ldrb	r3, [r3, #0]
 80061f6:	009b      	lsls	r3, r3, #2
 80061f8:	441a      	add	r2, r3
 80061fa:	893b      	ldrh	r3, [r7, #8]
 80061fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006200:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006204:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006208:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800620c:	b29b      	uxth	r3, r3
 800620e:	8013      	strh	r3, [r2, #0]
 8006210:	e27f      	b.n	8006712 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006212:	687a      	ldr	r2, [r7, #4]
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	781b      	ldrb	r3, [r3, #0]
 8006218:	009b      	lsls	r3, r3, #2
 800621a:	4413      	add	r3, r2
 800621c:	881b      	ldrh	r3, [r3, #0]
 800621e:	b29b      	uxth	r3, r3
 8006220:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006224:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006228:	817b      	strh	r3, [r7, #10]
 800622a:	687a      	ldr	r2, [r7, #4]
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	781b      	ldrb	r3, [r3, #0]
 8006230:	009b      	lsls	r3, r3, #2
 8006232:	441a      	add	r2, r3
 8006234:	897b      	ldrh	r3, [r7, #10]
 8006236:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800623a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800623e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006242:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006246:	b29b      	uxth	r3, r3
 8006248:	8013      	strh	r3, [r2, #0]
 800624a:	e262      	b.n	8006712 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006256:	b29b      	uxth	r3, r3
 8006258:	461a      	mov	r2, r3
 800625a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800625c:	4413      	add	r3, r2
 800625e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	781b      	ldrb	r3, [r3, #0]
 8006264:	011a      	lsls	r2, r3, #4
 8006266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006268:	4413      	add	r3, r2
 800626a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800626e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	88db      	ldrh	r3, [r3, #6]
 8006274:	085b      	lsrs	r3, r3, #1
 8006276:	b29b      	uxth	r3, r3
 8006278:	005b      	lsls	r3, r3, #1
 800627a:	b29a      	uxth	r2, r3
 800627c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800627e:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	627b      	str	r3, [r7, #36]	; 0x24
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800628a:	b29b      	uxth	r3, r3
 800628c:	461a      	mov	r2, r3
 800628e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006290:	4413      	add	r3, r2
 8006292:	627b      	str	r3, [r7, #36]	; 0x24
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	781b      	ldrb	r3, [r3, #0]
 8006298:	011a      	lsls	r2, r3, #4
 800629a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800629c:	4413      	add	r3, r2
 800629e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80062a2:	623b      	str	r3, [r7, #32]
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	691b      	ldr	r3, [r3, #16]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d112      	bne.n	80062d2 <USB_ActivateEndpoint+0x286>
 80062ac:	6a3b      	ldr	r3, [r7, #32]
 80062ae:	881b      	ldrh	r3, [r3, #0]
 80062b0:	b29b      	uxth	r3, r3
 80062b2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80062b6:	b29a      	uxth	r2, r3
 80062b8:	6a3b      	ldr	r3, [r7, #32]
 80062ba:	801a      	strh	r2, [r3, #0]
 80062bc:	6a3b      	ldr	r3, [r7, #32]
 80062be:	881b      	ldrh	r3, [r3, #0]
 80062c0:	b29b      	uxth	r3, r3
 80062c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062ca:	b29a      	uxth	r2, r3
 80062cc:	6a3b      	ldr	r3, [r7, #32]
 80062ce:	801a      	strh	r2, [r3, #0]
 80062d0:	e02f      	b.n	8006332 <USB_ActivateEndpoint+0x2e6>
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	691b      	ldr	r3, [r3, #16]
 80062d6:	2b3e      	cmp	r3, #62	; 0x3e
 80062d8:	d813      	bhi.n	8006302 <USB_ActivateEndpoint+0x2b6>
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	691b      	ldr	r3, [r3, #16]
 80062de:	085b      	lsrs	r3, r3, #1
 80062e0:	663b      	str	r3, [r7, #96]	; 0x60
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	691b      	ldr	r3, [r3, #16]
 80062e6:	f003 0301 	and.w	r3, r3, #1
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d002      	beq.n	80062f4 <USB_ActivateEndpoint+0x2a8>
 80062ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80062f0:	3301      	adds	r3, #1
 80062f2:	663b      	str	r3, [r7, #96]	; 0x60
 80062f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80062f6:	b29b      	uxth	r3, r3
 80062f8:	029b      	lsls	r3, r3, #10
 80062fa:	b29a      	uxth	r2, r3
 80062fc:	6a3b      	ldr	r3, [r7, #32]
 80062fe:	801a      	strh	r2, [r3, #0]
 8006300:	e017      	b.n	8006332 <USB_ActivateEndpoint+0x2e6>
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	691b      	ldr	r3, [r3, #16]
 8006306:	095b      	lsrs	r3, r3, #5
 8006308:	663b      	str	r3, [r7, #96]	; 0x60
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	691b      	ldr	r3, [r3, #16]
 800630e:	f003 031f 	and.w	r3, r3, #31
 8006312:	2b00      	cmp	r3, #0
 8006314:	d102      	bne.n	800631c <USB_ActivateEndpoint+0x2d0>
 8006316:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006318:	3b01      	subs	r3, #1
 800631a:	663b      	str	r3, [r7, #96]	; 0x60
 800631c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800631e:	b29b      	uxth	r3, r3
 8006320:	029b      	lsls	r3, r3, #10
 8006322:	b29b      	uxth	r3, r3
 8006324:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006328:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800632c:	b29a      	uxth	r2, r3
 800632e:	6a3b      	ldr	r3, [r7, #32]
 8006330:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006332:	687a      	ldr	r2, [r7, #4]
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	781b      	ldrb	r3, [r3, #0]
 8006338:	009b      	lsls	r3, r3, #2
 800633a:	4413      	add	r3, r2
 800633c:	881b      	ldrh	r3, [r3, #0]
 800633e:	83fb      	strh	r3, [r7, #30]
 8006340:	8bfb      	ldrh	r3, [r7, #30]
 8006342:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006346:	2b00      	cmp	r3, #0
 8006348:	d01b      	beq.n	8006382 <USB_ActivateEndpoint+0x336>
 800634a:	687a      	ldr	r2, [r7, #4]
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	781b      	ldrb	r3, [r3, #0]
 8006350:	009b      	lsls	r3, r3, #2
 8006352:	4413      	add	r3, r2
 8006354:	881b      	ldrh	r3, [r3, #0]
 8006356:	b29b      	uxth	r3, r3
 8006358:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800635c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006360:	83bb      	strh	r3, [r7, #28]
 8006362:	687a      	ldr	r2, [r7, #4]
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	781b      	ldrb	r3, [r3, #0]
 8006368:	009b      	lsls	r3, r3, #2
 800636a:	441a      	add	r2, r3
 800636c:	8bbb      	ldrh	r3, [r7, #28]
 800636e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006372:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006376:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800637a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800637e:	b29b      	uxth	r3, r3
 8006380:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006382:	687a      	ldr	r2, [r7, #4]
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	781b      	ldrb	r3, [r3, #0]
 8006388:	009b      	lsls	r3, r3, #2
 800638a:	4413      	add	r3, r2
 800638c:	881b      	ldrh	r3, [r3, #0]
 800638e:	b29b      	uxth	r3, r3
 8006390:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006394:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006398:	837b      	strh	r3, [r7, #26]
 800639a:	8b7b      	ldrh	r3, [r7, #26]
 800639c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80063a0:	837b      	strh	r3, [r7, #26]
 80063a2:	8b7b      	ldrh	r3, [r7, #26]
 80063a4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80063a8:	837b      	strh	r3, [r7, #26]
 80063aa:	687a      	ldr	r2, [r7, #4]
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	781b      	ldrb	r3, [r3, #0]
 80063b0:	009b      	lsls	r3, r3, #2
 80063b2:	441a      	add	r2, r3
 80063b4:	8b7b      	ldrh	r3, [r7, #26]
 80063b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063c6:	b29b      	uxth	r3, r3
 80063c8:	8013      	strh	r3, [r2, #0]
 80063ca:	e1a2      	b.n	8006712 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80063cc:	687a      	ldr	r2, [r7, #4]
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	781b      	ldrb	r3, [r3, #0]
 80063d2:	009b      	lsls	r3, r3, #2
 80063d4:	4413      	add	r3, r2
 80063d6:	881b      	ldrh	r3, [r3, #0]
 80063d8:	b29b      	uxth	r3, r3
 80063da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063e2:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80063e6:	687a      	ldr	r2, [r7, #4]
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	781b      	ldrb	r3, [r3, #0]
 80063ec:	009b      	lsls	r3, r3, #2
 80063ee:	441a      	add	r2, r3
 80063f0:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80063f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063fc:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006400:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006404:	b29b      	uxth	r3, r3
 8006406:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	65bb      	str	r3, [r7, #88]	; 0x58
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006412:	b29b      	uxth	r3, r3
 8006414:	461a      	mov	r2, r3
 8006416:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006418:	4413      	add	r3, r2
 800641a:	65bb      	str	r3, [r7, #88]	; 0x58
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	781b      	ldrb	r3, [r3, #0]
 8006420:	011a      	lsls	r2, r3, #4
 8006422:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006424:	4413      	add	r3, r2
 8006426:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800642a:	657b      	str	r3, [r7, #84]	; 0x54
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	891b      	ldrh	r3, [r3, #8]
 8006430:	085b      	lsrs	r3, r3, #1
 8006432:	b29b      	uxth	r3, r3
 8006434:	005b      	lsls	r3, r3, #1
 8006436:	b29a      	uxth	r2, r3
 8006438:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800643a:	801a      	strh	r2, [r3, #0]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	653b      	str	r3, [r7, #80]	; 0x50
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006446:	b29b      	uxth	r3, r3
 8006448:	461a      	mov	r2, r3
 800644a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800644c:	4413      	add	r3, r2
 800644e:	653b      	str	r3, [r7, #80]	; 0x50
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	781b      	ldrb	r3, [r3, #0]
 8006454:	011a      	lsls	r2, r3, #4
 8006456:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006458:	4413      	add	r3, r2
 800645a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800645e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	895b      	ldrh	r3, [r3, #10]
 8006464:	085b      	lsrs	r3, r3, #1
 8006466:	b29b      	uxth	r3, r3
 8006468:	005b      	lsls	r3, r3, #1
 800646a:	b29a      	uxth	r2, r3
 800646c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800646e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	785b      	ldrb	r3, [r3, #1]
 8006474:	2b00      	cmp	r3, #0
 8006476:	f040 8091 	bne.w	800659c <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800647a:	687a      	ldr	r2, [r7, #4]
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	781b      	ldrb	r3, [r3, #0]
 8006480:	009b      	lsls	r3, r3, #2
 8006482:	4413      	add	r3, r2
 8006484:	881b      	ldrh	r3, [r3, #0]
 8006486:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8006488:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800648a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800648e:	2b00      	cmp	r3, #0
 8006490:	d01b      	beq.n	80064ca <USB_ActivateEndpoint+0x47e>
 8006492:	687a      	ldr	r2, [r7, #4]
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	781b      	ldrb	r3, [r3, #0]
 8006498:	009b      	lsls	r3, r3, #2
 800649a:	4413      	add	r3, r2
 800649c:	881b      	ldrh	r3, [r3, #0]
 800649e:	b29b      	uxth	r3, r3
 80064a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064a8:	877b      	strh	r3, [r7, #58]	; 0x3a
 80064aa:	687a      	ldr	r2, [r7, #4]
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	781b      	ldrb	r3, [r3, #0]
 80064b0:	009b      	lsls	r3, r3, #2
 80064b2:	441a      	add	r2, r3
 80064b4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80064b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80064c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064c6:	b29b      	uxth	r3, r3
 80064c8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80064ca:	687a      	ldr	r2, [r7, #4]
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	781b      	ldrb	r3, [r3, #0]
 80064d0:	009b      	lsls	r3, r3, #2
 80064d2:	4413      	add	r3, r2
 80064d4:	881b      	ldrh	r3, [r3, #0]
 80064d6:	873b      	strh	r3, [r7, #56]	; 0x38
 80064d8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80064da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d01b      	beq.n	800651a <USB_ActivateEndpoint+0x4ce>
 80064e2:	687a      	ldr	r2, [r7, #4]
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	781b      	ldrb	r3, [r3, #0]
 80064e8:	009b      	lsls	r3, r3, #2
 80064ea:	4413      	add	r3, r2
 80064ec:	881b      	ldrh	r3, [r3, #0]
 80064ee:	b29b      	uxth	r3, r3
 80064f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064f8:	86fb      	strh	r3, [r7, #54]	; 0x36
 80064fa:	687a      	ldr	r2, [r7, #4]
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	781b      	ldrb	r3, [r3, #0]
 8006500:	009b      	lsls	r3, r3, #2
 8006502:	441a      	add	r2, r3
 8006504:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006506:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800650a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800650e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006512:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006516:	b29b      	uxth	r3, r3
 8006518:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800651a:	687a      	ldr	r2, [r7, #4]
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	781b      	ldrb	r3, [r3, #0]
 8006520:	009b      	lsls	r3, r3, #2
 8006522:	4413      	add	r3, r2
 8006524:	881b      	ldrh	r3, [r3, #0]
 8006526:	b29b      	uxth	r3, r3
 8006528:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800652c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006530:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006532:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006534:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006538:	86bb      	strh	r3, [r7, #52]	; 0x34
 800653a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800653c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006540:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006542:	687a      	ldr	r2, [r7, #4]
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	781b      	ldrb	r3, [r3, #0]
 8006548:	009b      	lsls	r3, r3, #2
 800654a:	441a      	add	r2, r3
 800654c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800654e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006552:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006556:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800655a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800655e:	b29b      	uxth	r3, r3
 8006560:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006562:	687a      	ldr	r2, [r7, #4]
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	781b      	ldrb	r3, [r3, #0]
 8006568:	009b      	lsls	r3, r3, #2
 800656a:	4413      	add	r3, r2
 800656c:	881b      	ldrh	r3, [r3, #0]
 800656e:	b29b      	uxth	r3, r3
 8006570:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006574:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006578:	867b      	strh	r3, [r7, #50]	; 0x32
 800657a:	687a      	ldr	r2, [r7, #4]
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	781b      	ldrb	r3, [r3, #0]
 8006580:	009b      	lsls	r3, r3, #2
 8006582:	441a      	add	r2, r3
 8006584:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006586:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800658a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800658e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006592:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006596:	b29b      	uxth	r3, r3
 8006598:	8013      	strh	r3, [r2, #0]
 800659a:	e0ba      	b.n	8006712 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800659c:	687a      	ldr	r2, [r7, #4]
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	781b      	ldrb	r3, [r3, #0]
 80065a2:	009b      	lsls	r3, r3, #2
 80065a4:	4413      	add	r3, r2
 80065a6:	881b      	ldrh	r3, [r3, #0]
 80065a8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80065ac:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80065b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d01d      	beq.n	80065f4 <USB_ActivateEndpoint+0x5a8>
 80065b8:	687a      	ldr	r2, [r7, #4]
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	781b      	ldrb	r3, [r3, #0]
 80065be:	009b      	lsls	r3, r3, #2
 80065c0:	4413      	add	r3, r2
 80065c2:	881b      	ldrh	r3, [r3, #0]
 80065c4:	b29b      	uxth	r3, r3
 80065c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065ce:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80065d2:	687a      	ldr	r2, [r7, #4]
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	781b      	ldrb	r3, [r3, #0]
 80065d8:	009b      	lsls	r3, r3, #2
 80065da:	441a      	add	r2, r3
 80065dc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80065e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80065ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065f0:	b29b      	uxth	r3, r3
 80065f2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80065f4:	687a      	ldr	r2, [r7, #4]
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	781b      	ldrb	r3, [r3, #0]
 80065fa:	009b      	lsls	r3, r3, #2
 80065fc:	4413      	add	r3, r2
 80065fe:	881b      	ldrh	r3, [r3, #0]
 8006600:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006604:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006608:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800660c:	2b00      	cmp	r3, #0
 800660e:	d01d      	beq.n	800664c <USB_ActivateEndpoint+0x600>
 8006610:	687a      	ldr	r2, [r7, #4]
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	781b      	ldrb	r3, [r3, #0]
 8006616:	009b      	lsls	r3, r3, #2
 8006618:	4413      	add	r3, r2
 800661a:	881b      	ldrh	r3, [r3, #0]
 800661c:	b29b      	uxth	r3, r3
 800661e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006622:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006626:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800662a:	687a      	ldr	r2, [r7, #4]
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	781b      	ldrb	r3, [r3, #0]
 8006630:	009b      	lsls	r3, r3, #2
 8006632:	441a      	add	r2, r3
 8006634:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006638:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800663c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006640:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006644:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006648:	b29b      	uxth	r3, r3
 800664a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	78db      	ldrb	r3, [r3, #3]
 8006650:	2b01      	cmp	r3, #1
 8006652:	d024      	beq.n	800669e <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006654:	687a      	ldr	r2, [r7, #4]
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	781b      	ldrb	r3, [r3, #0]
 800665a:	009b      	lsls	r3, r3, #2
 800665c:	4413      	add	r3, r2
 800665e:	881b      	ldrh	r3, [r3, #0]
 8006660:	b29b      	uxth	r3, r3
 8006662:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006666:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800666a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800666e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006672:	f083 0320 	eor.w	r3, r3, #32
 8006676:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800667a:	687a      	ldr	r2, [r7, #4]
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	781b      	ldrb	r3, [r3, #0]
 8006680:	009b      	lsls	r3, r3, #2
 8006682:	441a      	add	r2, r3
 8006684:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006688:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800668c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006690:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006694:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006698:	b29b      	uxth	r3, r3
 800669a:	8013      	strh	r3, [r2, #0]
 800669c:	e01d      	b.n	80066da <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800669e:	687a      	ldr	r2, [r7, #4]
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	781b      	ldrb	r3, [r3, #0]
 80066a4:	009b      	lsls	r3, r3, #2
 80066a6:	4413      	add	r3, r2
 80066a8:	881b      	ldrh	r3, [r3, #0]
 80066aa:	b29b      	uxth	r3, r3
 80066ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066b4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80066b8:	687a      	ldr	r2, [r7, #4]
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	781b      	ldrb	r3, [r3, #0]
 80066be:	009b      	lsls	r3, r3, #2
 80066c0:	441a      	add	r2, r3
 80066c2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80066c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066d6:	b29b      	uxth	r3, r3
 80066d8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80066da:	687a      	ldr	r2, [r7, #4]
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	781b      	ldrb	r3, [r3, #0]
 80066e0:	009b      	lsls	r3, r3, #2
 80066e2:	4413      	add	r3, r2
 80066e4:	881b      	ldrh	r3, [r3, #0]
 80066e6:	b29b      	uxth	r3, r3
 80066e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80066ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066f0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80066f2:	687a      	ldr	r2, [r7, #4]
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	781b      	ldrb	r3, [r3, #0]
 80066f8:	009b      	lsls	r3, r3, #2
 80066fa:	441a      	add	r2, r3
 80066fc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80066fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006702:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006706:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800670a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800670e:	b29b      	uxth	r3, r3
 8006710:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8006712:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8006716:	4618      	mov	r0, r3
 8006718:	376c      	adds	r7, #108	; 0x6c
 800671a:	46bd      	mov	sp, r7
 800671c:	bc80      	pop	{r7}
 800671e:	4770      	bx	lr

08006720 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006720:	b480      	push	{r7}
 8006722:	b08d      	sub	sp, #52	; 0x34
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
 8006728:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	7b1b      	ldrb	r3, [r3, #12]
 800672e:	2b00      	cmp	r3, #0
 8006730:	f040 808e 	bne.w	8006850 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	785b      	ldrb	r3, [r3, #1]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d044      	beq.n	80067c6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800673c:	687a      	ldr	r2, [r7, #4]
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	781b      	ldrb	r3, [r3, #0]
 8006742:	009b      	lsls	r3, r3, #2
 8006744:	4413      	add	r3, r2
 8006746:	881b      	ldrh	r3, [r3, #0]
 8006748:	81bb      	strh	r3, [r7, #12]
 800674a:	89bb      	ldrh	r3, [r7, #12]
 800674c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006750:	2b00      	cmp	r3, #0
 8006752:	d01b      	beq.n	800678c <USB_DeactivateEndpoint+0x6c>
 8006754:	687a      	ldr	r2, [r7, #4]
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	781b      	ldrb	r3, [r3, #0]
 800675a:	009b      	lsls	r3, r3, #2
 800675c:	4413      	add	r3, r2
 800675e:	881b      	ldrh	r3, [r3, #0]
 8006760:	b29b      	uxth	r3, r3
 8006762:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006766:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800676a:	817b      	strh	r3, [r7, #10]
 800676c:	687a      	ldr	r2, [r7, #4]
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	781b      	ldrb	r3, [r3, #0]
 8006772:	009b      	lsls	r3, r3, #2
 8006774:	441a      	add	r2, r3
 8006776:	897b      	ldrh	r3, [r7, #10]
 8006778:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800677c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006780:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006784:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006788:	b29b      	uxth	r3, r3
 800678a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800678c:	687a      	ldr	r2, [r7, #4]
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	781b      	ldrb	r3, [r3, #0]
 8006792:	009b      	lsls	r3, r3, #2
 8006794:	4413      	add	r3, r2
 8006796:	881b      	ldrh	r3, [r3, #0]
 8006798:	b29b      	uxth	r3, r3
 800679a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800679e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067a2:	813b      	strh	r3, [r7, #8]
 80067a4:	687a      	ldr	r2, [r7, #4]
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	781b      	ldrb	r3, [r3, #0]
 80067aa:	009b      	lsls	r3, r3, #2
 80067ac:	441a      	add	r2, r3
 80067ae:	893b      	ldrh	r3, [r7, #8]
 80067b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067c0:	b29b      	uxth	r3, r3
 80067c2:	8013      	strh	r3, [r2, #0]
 80067c4:	e192      	b.n	8006aec <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80067c6:	687a      	ldr	r2, [r7, #4]
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	781b      	ldrb	r3, [r3, #0]
 80067cc:	009b      	lsls	r3, r3, #2
 80067ce:	4413      	add	r3, r2
 80067d0:	881b      	ldrh	r3, [r3, #0]
 80067d2:	827b      	strh	r3, [r7, #18]
 80067d4:	8a7b      	ldrh	r3, [r7, #18]
 80067d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d01b      	beq.n	8006816 <USB_DeactivateEndpoint+0xf6>
 80067de:	687a      	ldr	r2, [r7, #4]
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	781b      	ldrb	r3, [r3, #0]
 80067e4:	009b      	lsls	r3, r3, #2
 80067e6:	4413      	add	r3, r2
 80067e8:	881b      	ldrh	r3, [r3, #0]
 80067ea:	b29b      	uxth	r3, r3
 80067ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067f4:	823b      	strh	r3, [r7, #16]
 80067f6:	687a      	ldr	r2, [r7, #4]
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	781b      	ldrb	r3, [r3, #0]
 80067fc:	009b      	lsls	r3, r3, #2
 80067fe:	441a      	add	r2, r3
 8006800:	8a3b      	ldrh	r3, [r7, #16]
 8006802:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006806:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800680a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800680e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006812:	b29b      	uxth	r3, r3
 8006814:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006816:	687a      	ldr	r2, [r7, #4]
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	781b      	ldrb	r3, [r3, #0]
 800681c:	009b      	lsls	r3, r3, #2
 800681e:	4413      	add	r3, r2
 8006820:	881b      	ldrh	r3, [r3, #0]
 8006822:	b29b      	uxth	r3, r3
 8006824:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006828:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800682c:	81fb      	strh	r3, [r7, #14]
 800682e:	687a      	ldr	r2, [r7, #4]
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	781b      	ldrb	r3, [r3, #0]
 8006834:	009b      	lsls	r3, r3, #2
 8006836:	441a      	add	r2, r3
 8006838:	89fb      	ldrh	r3, [r7, #14]
 800683a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800683e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006842:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006846:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800684a:	b29b      	uxth	r3, r3
 800684c:	8013      	strh	r3, [r2, #0]
 800684e:	e14d      	b.n	8006aec <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	785b      	ldrb	r3, [r3, #1]
 8006854:	2b00      	cmp	r3, #0
 8006856:	f040 80a5 	bne.w	80069a4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800685a:	687a      	ldr	r2, [r7, #4]
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	781b      	ldrb	r3, [r3, #0]
 8006860:	009b      	lsls	r3, r3, #2
 8006862:	4413      	add	r3, r2
 8006864:	881b      	ldrh	r3, [r3, #0]
 8006866:	843b      	strh	r3, [r7, #32]
 8006868:	8c3b      	ldrh	r3, [r7, #32]
 800686a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800686e:	2b00      	cmp	r3, #0
 8006870:	d01b      	beq.n	80068aa <USB_DeactivateEndpoint+0x18a>
 8006872:	687a      	ldr	r2, [r7, #4]
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	781b      	ldrb	r3, [r3, #0]
 8006878:	009b      	lsls	r3, r3, #2
 800687a:	4413      	add	r3, r2
 800687c:	881b      	ldrh	r3, [r3, #0]
 800687e:	b29b      	uxth	r3, r3
 8006880:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006884:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006888:	83fb      	strh	r3, [r7, #30]
 800688a:	687a      	ldr	r2, [r7, #4]
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	781b      	ldrb	r3, [r3, #0]
 8006890:	009b      	lsls	r3, r3, #2
 8006892:	441a      	add	r2, r3
 8006894:	8bfb      	ldrh	r3, [r7, #30]
 8006896:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800689a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800689e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80068a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068a6:	b29b      	uxth	r3, r3
 80068a8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80068aa:	687a      	ldr	r2, [r7, #4]
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	781b      	ldrb	r3, [r3, #0]
 80068b0:	009b      	lsls	r3, r3, #2
 80068b2:	4413      	add	r3, r2
 80068b4:	881b      	ldrh	r3, [r3, #0]
 80068b6:	83bb      	strh	r3, [r7, #28]
 80068b8:	8bbb      	ldrh	r3, [r7, #28]
 80068ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d01b      	beq.n	80068fa <USB_DeactivateEndpoint+0x1da>
 80068c2:	687a      	ldr	r2, [r7, #4]
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	781b      	ldrb	r3, [r3, #0]
 80068c8:	009b      	lsls	r3, r3, #2
 80068ca:	4413      	add	r3, r2
 80068cc:	881b      	ldrh	r3, [r3, #0]
 80068ce:	b29b      	uxth	r3, r3
 80068d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068d8:	837b      	strh	r3, [r7, #26]
 80068da:	687a      	ldr	r2, [r7, #4]
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	781b      	ldrb	r3, [r3, #0]
 80068e0:	009b      	lsls	r3, r3, #2
 80068e2:	441a      	add	r2, r3
 80068e4:	8b7b      	ldrh	r3, [r7, #26]
 80068e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068f2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80068f6:	b29b      	uxth	r3, r3
 80068f8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80068fa:	687a      	ldr	r2, [r7, #4]
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	781b      	ldrb	r3, [r3, #0]
 8006900:	009b      	lsls	r3, r3, #2
 8006902:	4413      	add	r3, r2
 8006904:	881b      	ldrh	r3, [r3, #0]
 8006906:	b29b      	uxth	r3, r3
 8006908:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800690c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006910:	833b      	strh	r3, [r7, #24]
 8006912:	687a      	ldr	r2, [r7, #4]
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	781b      	ldrb	r3, [r3, #0]
 8006918:	009b      	lsls	r3, r3, #2
 800691a:	441a      	add	r2, r3
 800691c:	8b3b      	ldrh	r3, [r7, #24]
 800691e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006922:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006926:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800692a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800692e:	b29b      	uxth	r3, r3
 8006930:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006932:	687a      	ldr	r2, [r7, #4]
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	781b      	ldrb	r3, [r3, #0]
 8006938:	009b      	lsls	r3, r3, #2
 800693a:	4413      	add	r3, r2
 800693c:	881b      	ldrh	r3, [r3, #0]
 800693e:	b29b      	uxth	r3, r3
 8006940:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006944:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006948:	82fb      	strh	r3, [r7, #22]
 800694a:	687a      	ldr	r2, [r7, #4]
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	781b      	ldrb	r3, [r3, #0]
 8006950:	009b      	lsls	r3, r3, #2
 8006952:	441a      	add	r2, r3
 8006954:	8afb      	ldrh	r3, [r7, #22]
 8006956:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800695a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800695e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006962:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006966:	b29b      	uxth	r3, r3
 8006968:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800696a:	687a      	ldr	r2, [r7, #4]
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	781b      	ldrb	r3, [r3, #0]
 8006970:	009b      	lsls	r3, r3, #2
 8006972:	4413      	add	r3, r2
 8006974:	881b      	ldrh	r3, [r3, #0]
 8006976:	b29b      	uxth	r3, r3
 8006978:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800697c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006980:	82bb      	strh	r3, [r7, #20]
 8006982:	687a      	ldr	r2, [r7, #4]
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	781b      	ldrb	r3, [r3, #0]
 8006988:	009b      	lsls	r3, r3, #2
 800698a:	441a      	add	r2, r3
 800698c:	8abb      	ldrh	r3, [r7, #20]
 800698e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006992:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006996:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800699a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800699e:	b29b      	uxth	r3, r3
 80069a0:	8013      	strh	r3, [r2, #0]
 80069a2:	e0a3      	b.n	8006aec <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80069a4:	687a      	ldr	r2, [r7, #4]
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	781b      	ldrb	r3, [r3, #0]
 80069aa:	009b      	lsls	r3, r3, #2
 80069ac:	4413      	add	r3, r2
 80069ae:	881b      	ldrh	r3, [r3, #0]
 80069b0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80069b2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80069b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d01b      	beq.n	80069f4 <USB_DeactivateEndpoint+0x2d4>
 80069bc:	687a      	ldr	r2, [r7, #4]
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	781b      	ldrb	r3, [r3, #0]
 80069c2:	009b      	lsls	r3, r3, #2
 80069c4:	4413      	add	r3, r2
 80069c6:	881b      	ldrh	r3, [r3, #0]
 80069c8:	b29b      	uxth	r3, r3
 80069ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069d2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80069d4:	687a      	ldr	r2, [r7, #4]
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	781b      	ldrb	r3, [r3, #0]
 80069da:	009b      	lsls	r3, r3, #2
 80069dc:	441a      	add	r2, r3
 80069de:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80069e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80069ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069f0:	b29b      	uxth	r3, r3
 80069f2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80069f4:	687a      	ldr	r2, [r7, #4]
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	781b      	ldrb	r3, [r3, #0]
 80069fa:	009b      	lsls	r3, r3, #2
 80069fc:	4413      	add	r3, r2
 80069fe:	881b      	ldrh	r3, [r3, #0]
 8006a00:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006a02:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006a04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d01b      	beq.n	8006a44 <USB_DeactivateEndpoint+0x324>
 8006a0c:	687a      	ldr	r2, [r7, #4]
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	781b      	ldrb	r3, [r3, #0]
 8006a12:	009b      	lsls	r3, r3, #2
 8006a14:	4413      	add	r3, r2
 8006a16:	881b      	ldrh	r3, [r3, #0]
 8006a18:	b29b      	uxth	r3, r3
 8006a1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a22:	853b      	strh	r3, [r7, #40]	; 0x28
 8006a24:	687a      	ldr	r2, [r7, #4]
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	781b      	ldrb	r3, [r3, #0]
 8006a2a:	009b      	lsls	r3, r3, #2
 8006a2c:	441a      	add	r2, r3
 8006a2e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006a30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a3c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006a40:	b29b      	uxth	r3, r3
 8006a42:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006a44:	687a      	ldr	r2, [r7, #4]
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	781b      	ldrb	r3, [r3, #0]
 8006a4a:	009b      	lsls	r3, r3, #2
 8006a4c:	4413      	add	r3, r2
 8006a4e:	881b      	ldrh	r3, [r3, #0]
 8006a50:	b29b      	uxth	r3, r3
 8006a52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a5a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006a5c:	687a      	ldr	r2, [r7, #4]
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	781b      	ldrb	r3, [r3, #0]
 8006a62:	009b      	lsls	r3, r3, #2
 8006a64:	441a      	add	r2, r3
 8006a66:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006a68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006a74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a78:	b29b      	uxth	r3, r3
 8006a7a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006a7c:	687a      	ldr	r2, [r7, #4]
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	781b      	ldrb	r3, [r3, #0]
 8006a82:	009b      	lsls	r3, r3, #2
 8006a84:	4413      	add	r3, r2
 8006a86:	881b      	ldrh	r3, [r3, #0]
 8006a88:	b29b      	uxth	r3, r3
 8006a8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a92:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006a94:	687a      	ldr	r2, [r7, #4]
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	781b      	ldrb	r3, [r3, #0]
 8006a9a:	009b      	lsls	r3, r3, #2
 8006a9c:	441a      	add	r2, r3
 8006a9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006aa0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006aa4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006aa8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006aac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ab0:	b29b      	uxth	r3, r3
 8006ab2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006ab4:	687a      	ldr	r2, [r7, #4]
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	781b      	ldrb	r3, [r3, #0]
 8006aba:	009b      	lsls	r3, r3, #2
 8006abc:	4413      	add	r3, r2
 8006abe:	881b      	ldrh	r3, [r3, #0]
 8006ac0:	b29b      	uxth	r3, r3
 8006ac2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ac6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006aca:	847b      	strh	r3, [r7, #34]	; 0x22
 8006acc:	687a      	ldr	r2, [r7, #4]
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	781b      	ldrb	r3, [r3, #0]
 8006ad2:	009b      	lsls	r3, r3, #2
 8006ad4:	441a      	add	r2, r3
 8006ad6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006ad8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006adc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ae0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ae4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ae8:	b29b      	uxth	r3, r3
 8006aea:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006aec:	2300      	movs	r3, #0
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	3734      	adds	r7, #52	; 0x34
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bc80      	pop	{r7}
 8006af6:	4770      	bx	lr

08006af8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b0cc      	sub	sp, #304	; 0x130
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b02:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006b06:	6018      	str	r0, [r3, #0]
 8006b08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b10:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006b12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	785b      	ldrb	r3, [r3, #1]
 8006b1e:	2b01      	cmp	r3, #1
 8006b20:	f041 817d 	bne.w	8007e1e <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006b24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b28:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	699a      	ldr	r2, [r3, #24]
 8006b30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b34:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	691b      	ldr	r3, [r3, #16]
 8006b3c:	429a      	cmp	r2, r3
 8006b3e:	d908      	bls.n	8006b52 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006b40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	691b      	ldr	r3, [r3, #16]
 8006b4c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8006b50:	e007      	b.n	8006b62 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006b52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	699b      	ldr	r3, [r3, #24]
 8006b5e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006b62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	7b1b      	ldrb	r3, [r3, #12]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d152      	bne.n	8006c18 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006b72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	6959      	ldr	r1, [r3, #20]
 8006b7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b82:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	88da      	ldrh	r2, [r3, #6]
 8006b8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b8e:	b29b      	uxth	r3, r3
 8006b90:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006b94:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006b98:	6800      	ldr	r0, [r0, #0]
 8006b9a:	f001 ff23 	bl	80089e4 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006b9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ba2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006ba6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006baa:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006bae:	6812      	ldr	r2, [r2, #0]
 8006bb0:	601a      	str	r2, [r3, #0]
 8006bb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bb6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bc0:	b29b      	uxth	r3, r3
 8006bc2:	4619      	mov	r1, r3
 8006bc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bc8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006bcc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006bd0:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8006bd4:	6812      	ldr	r2, [r2, #0]
 8006bd6:	440a      	add	r2, r1
 8006bd8:	601a      	str	r2, [r3, #0]
 8006bda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bde:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	781b      	ldrb	r3, [r3, #0]
 8006be6:	011a      	lsls	r2, r3, #4
 8006be8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bec:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4413      	add	r3, r2
 8006bf4:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006bf8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bfc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8006c00:	601a      	str	r2, [r3, #0]
 8006c02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c06:	b29a      	uxth	r2, r3
 8006c08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c0c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	801a      	strh	r2, [r3, #0]
 8006c14:	f001 b8b5 	b.w	8007d82 <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006c18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	78db      	ldrb	r3, [r3, #3]
 8006c24:	2b02      	cmp	r3, #2
 8006c26:	f040 84c6 	bne.w	80075b6 <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006c2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	6a1a      	ldr	r2, [r3, #32]
 8006c36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	691b      	ldr	r3, [r3, #16]
 8006c42:	429a      	cmp	r2, r3
 8006c44:	f240 8443 	bls.w	80074ce <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8006c48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c4c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c50:	681a      	ldr	r2, [r3, #0]
 8006c52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	781b      	ldrb	r3, [r3, #0]
 8006c5e:	009b      	lsls	r3, r3, #2
 8006c60:	4413      	add	r3, r2
 8006c62:	881b      	ldrh	r3, [r3, #0]
 8006c64:	b29b      	uxth	r3, r3
 8006c66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c6e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8006c72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c76:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c7a:	681a      	ldr	r2, [r3, #0]
 8006c7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c80:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	781b      	ldrb	r3, [r3, #0]
 8006c88:	009b      	lsls	r3, r3, #2
 8006c8a:	441a      	add	r2, r3
 8006c8c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006c90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c98:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006c9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ca0:	b29b      	uxth	r3, r3
 8006ca2:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006ca4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ca8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	6a1a      	ldr	r2, [r3, #32]
 8006cb0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cb4:	1ad2      	subs	r2, r2, r3
 8006cb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006cc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cc6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006cca:	681a      	ldr	r2, [r3, #0]
 8006ccc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cd0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	781b      	ldrb	r3, [r3, #0]
 8006cd8:	009b      	lsls	r3, r3, #2
 8006cda:	4413      	add	r3, r2
 8006cdc:	881b      	ldrh	r3, [r3, #0]
 8006cde:	b29b      	uxth	r3, r3
 8006ce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	f000 823e 	beq.w	8007166 <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006cea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cee:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006cf2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006cf6:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006cfa:	6812      	ldr	r2, [r2, #0]
 8006cfc:	601a      	str	r2, [r3, #0]
 8006cfe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d02:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	785b      	ldrb	r3, [r3, #1]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	f040 809a 	bne.w	8006e44 <USB_EPStartXfer+0x34c>
 8006d10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d18:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006d1c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006d20:	6812      	ldr	r2, [r2, #0]
 8006d22:	601a      	str	r2, [r3, #0]
 8006d24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d28:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d32:	b29b      	uxth	r3, r3
 8006d34:	4619      	mov	r1, r3
 8006d36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d3e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006d42:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8006d46:	6812      	ldr	r2, [r2, #0]
 8006d48:	440a      	add	r2, r1
 8006d4a:	601a      	str	r2, [r3, #0]
 8006d4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	781b      	ldrb	r3, [r3, #0]
 8006d58:	011a      	lsls	r2, r3, #4
 8006d5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4413      	add	r3, r2
 8006d66:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8006d6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d6e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006d72:	601a      	str	r2, [r3, #0]
 8006d74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d122      	bne.n	8006dc2 <USB_EPStartXfer+0x2ca>
 8006d7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d80:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	881b      	ldrh	r3, [r3, #0]
 8006d88:	b29b      	uxth	r3, r3
 8006d8a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006d8e:	b29a      	uxth	r2, r3
 8006d90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d94:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	801a      	strh	r2, [r3, #0]
 8006d9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006da0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	881b      	ldrh	r3, [r3, #0]
 8006da8:	b29b      	uxth	r3, r3
 8006daa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006dae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006db2:	b29a      	uxth	r2, r3
 8006db4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006db8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	801a      	strh	r2, [r3, #0]
 8006dc0:	e079      	b.n	8006eb6 <USB_EPStartXfer+0x3be>
 8006dc2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006dc6:	2b3e      	cmp	r3, #62	; 0x3e
 8006dc8:	d81b      	bhi.n	8006e02 <USB_EPStartXfer+0x30a>
 8006dca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006dce:	085b      	lsrs	r3, r3, #1
 8006dd0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006dd4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006dd8:	f003 0301 	and.w	r3, r3, #1
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d004      	beq.n	8006dea <USB_EPStartXfer+0x2f2>
 8006de0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006de4:	3301      	adds	r3, #1
 8006de6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006dea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006dee:	b29b      	uxth	r3, r3
 8006df0:	029b      	lsls	r3, r3, #10
 8006df2:	b29a      	uxth	r2, r3
 8006df4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006df8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	801a      	strh	r2, [r3, #0]
 8006e00:	e059      	b.n	8006eb6 <USB_EPStartXfer+0x3be>
 8006e02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e06:	095b      	lsrs	r3, r3, #5
 8006e08:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006e0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e10:	f003 031f 	and.w	r3, r3, #31
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d104      	bne.n	8006e22 <USB_EPStartXfer+0x32a>
 8006e18:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006e1c:	3b01      	subs	r3, #1
 8006e1e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006e22:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006e26:	b29b      	uxth	r3, r3
 8006e28:	029b      	lsls	r3, r3, #10
 8006e2a:	b29b      	uxth	r3, r3
 8006e2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e34:	b29a      	uxth	r2, r3
 8006e36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e3a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	801a      	strh	r2, [r3, #0]
 8006e42:	e038      	b.n	8006eb6 <USB_EPStartXfer+0x3be>
 8006e44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e48:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	785b      	ldrb	r3, [r3, #1]
 8006e50:	2b01      	cmp	r3, #1
 8006e52:	d130      	bne.n	8006eb6 <USB_EPStartXfer+0x3be>
 8006e54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e58:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e62:	b29b      	uxth	r3, r3
 8006e64:	4619      	mov	r1, r3
 8006e66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e6a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006e6e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006e72:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8006e76:	6812      	ldr	r2, [r2, #0]
 8006e78:	440a      	add	r2, r1
 8006e7a:	601a      	str	r2, [r3, #0]
 8006e7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e80:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	781b      	ldrb	r3, [r3, #0]
 8006e88:	011a      	lsls	r2, r3, #4
 8006e8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e8e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4413      	add	r3, r2
 8006e96:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8006e9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e9e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ea2:	601a      	str	r2, [r3, #0]
 8006ea4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ea8:	b29a      	uxth	r2, r3
 8006eaa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006eae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006eb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006eba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	895b      	ldrh	r3, [r3, #10]
 8006ec2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006ec6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006eca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	6959      	ldr	r1, [r3, #20]
 8006ed2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ed6:	b29b      	uxth	r3, r3
 8006ed8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006edc:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006ee0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006ee4:	6800      	ldr	r0, [r0, #0]
 8006ee6:	f001 fd7d 	bl	80089e4 <USB_WritePMA>
            ep->xfer_buff += len;
 8006eea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006eee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	695a      	ldr	r2, [r3, #20]
 8006ef6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006efa:	441a      	add	r2, r3
 8006efc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006f08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	6a1a      	ldr	r2, [r3, #32]
 8006f14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f18:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	691b      	ldr	r3, [r3, #16]
 8006f20:	429a      	cmp	r2, r3
 8006f22:	d90f      	bls.n	8006f44 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8006f24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f28:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	6a1a      	ldr	r2, [r3, #32]
 8006f30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f34:	1ad2      	subs	r2, r2, r3
 8006f36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	621a      	str	r2, [r3, #32]
 8006f42:	e00e      	b.n	8006f62 <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8006f44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f48:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	6a1b      	ldr	r3, [r3, #32]
 8006f50:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8006f54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f58:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006f62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	785b      	ldrb	r3, [r3, #1]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	f040 809a 	bne.w	80070a8 <USB_EPStartXfer+0x5b0>
 8006f74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f78:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006f7c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006f80:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006f84:	6812      	ldr	r2, [r2, #0]
 8006f86:	601a      	str	r2, [r3, #0]
 8006f88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f8c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f96:	b29b      	uxth	r3, r3
 8006f98:	4619      	mov	r1, r3
 8006f9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f9e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006fa2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006fa6:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8006faa:	6812      	ldr	r2, [r2, #0]
 8006fac:	440a      	add	r2, r1
 8006fae:	601a      	str	r2, [r3, #0]
 8006fb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fb4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	781b      	ldrb	r3, [r3, #0]
 8006fbc:	011a      	lsls	r2, r3, #4
 8006fbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fc2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4413      	add	r3, r2
 8006fca:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006fce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fd2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006fd6:	601a      	str	r2, [r3, #0]
 8006fd8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d122      	bne.n	8007026 <USB_EPStartXfer+0x52e>
 8006fe0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fe4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	881b      	ldrh	r3, [r3, #0]
 8006fec:	b29b      	uxth	r3, r3
 8006fee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006ff2:	b29a      	uxth	r2, r3
 8006ff4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ff8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	801a      	strh	r2, [r3, #0]
 8007000:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007004:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	881b      	ldrh	r3, [r3, #0]
 800700c:	b29b      	uxth	r3, r3
 800700e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007012:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007016:	b29a      	uxth	r2, r3
 8007018:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800701c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	801a      	strh	r2, [r3, #0]
 8007024:	e083      	b.n	800712e <USB_EPStartXfer+0x636>
 8007026:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800702a:	2b3e      	cmp	r3, #62	; 0x3e
 800702c:	d81b      	bhi.n	8007066 <USB_EPStartXfer+0x56e>
 800702e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007032:	085b      	lsrs	r3, r3, #1
 8007034:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007038:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800703c:	f003 0301 	and.w	r3, r3, #1
 8007040:	2b00      	cmp	r3, #0
 8007042:	d004      	beq.n	800704e <USB_EPStartXfer+0x556>
 8007044:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007048:	3301      	adds	r3, #1
 800704a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800704e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007052:	b29b      	uxth	r3, r3
 8007054:	029b      	lsls	r3, r3, #10
 8007056:	b29a      	uxth	r2, r3
 8007058:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800705c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	801a      	strh	r2, [r3, #0]
 8007064:	e063      	b.n	800712e <USB_EPStartXfer+0x636>
 8007066:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800706a:	095b      	lsrs	r3, r3, #5
 800706c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007070:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007074:	f003 031f 	and.w	r3, r3, #31
 8007078:	2b00      	cmp	r3, #0
 800707a:	d104      	bne.n	8007086 <USB_EPStartXfer+0x58e>
 800707c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007080:	3b01      	subs	r3, #1
 8007082:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007086:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800708a:	b29b      	uxth	r3, r3
 800708c:	029b      	lsls	r3, r3, #10
 800708e:	b29b      	uxth	r3, r3
 8007090:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007094:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007098:	b29a      	uxth	r2, r3
 800709a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800709e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	801a      	strh	r2, [r3, #0]
 80070a6:	e042      	b.n	800712e <USB_EPStartXfer+0x636>
 80070a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	785b      	ldrb	r3, [r3, #1]
 80070b4:	2b01      	cmp	r3, #1
 80070b6:	d13a      	bne.n	800712e <USB_EPStartXfer+0x636>
 80070b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070bc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80070c0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80070c4:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80070c8:	6812      	ldr	r2, [r2, #0]
 80070ca:	601a      	str	r2, [r3, #0]
 80070cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070da:	b29b      	uxth	r3, r3
 80070dc:	4619      	mov	r1, r3
 80070de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070e2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80070e6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80070ea:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80070ee:	6812      	ldr	r2, [r2, #0]
 80070f0:	440a      	add	r2, r1
 80070f2:	601a      	str	r2, [r3, #0]
 80070f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	781b      	ldrb	r3, [r3, #0]
 8007100:	011a      	lsls	r2, r3, #4
 8007102:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007106:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4413      	add	r3, r2
 800710e:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8007112:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007116:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800711a:	601a      	str	r2, [r3, #0]
 800711c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007120:	b29a      	uxth	r2, r3
 8007122:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007126:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800712e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007132:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	891b      	ldrh	r3, [r3, #8]
 800713a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800713e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007142:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	6959      	ldr	r1, [r3, #20]
 800714a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800714e:	b29b      	uxth	r3, r3
 8007150:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007154:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007158:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800715c:	6800      	ldr	r0, [r0, #0]
 800715e:	f001 fc41 	bl	80089e4 <USB_WritePMA>
 8007162:	f000 be0e 	b.w	8007d82 <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007166:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800716a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	785b      	ldrb	r3, [r3, #1]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d16d      	bne.n	8007252 <USB_EPStartXfer+0x75a>
 8007176:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800717a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	64bb      	str	r3, [r7, #72]	; 0x48
 8007182:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007186:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007190:	b29b      	uxth	r3, r3
 8007192:	461a      	mov	r2, r3
 8007194:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007196:	4413      	add	r3, r2
 8007198:	64bb      	str	r3, [r7, #72]	; 0x48
 800719a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800719e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	781b      	ldrb	r3, [r3, #0]
 80071a6:	011a      	lsls	r2, r3, #4
 80071a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071aa:	4413      	add	r3, r2
 80071ac:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80071b0:	647b      	str	r3, [r7, #68]	; 0x44
 80071b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d112      	bne.n	80071e0 <USB_EPStartXfer+0x6e8>
 80071ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071bc:	881b      	ldrh	r3, [r3, #0]
 80071be:	b29b      	uxth	r3, r3
 80071c0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80071c4:	b29a      	uxth	r2, r3
 80071c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071c8:	801a      	strh	r2, [r3, #0]
 80071ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071cc:	881b      	ldrh	r3, [r3, #0]
 80071ce:	b29b      	uxth	r3, r3
 80071d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071d8:	b29a      	uxth	r2, r3
 80071da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071dc:	801a      	strh	r2, [r3, #0]
 80071de:	e063      	b.n	80072a8 <USB_EPStartXfer+0x7b0>
 80071e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071e4:	2b3e      	cmp	r3, #62	; 0x3e
 80071e6:	d817      	bhi.n	8007218 <USB_EPStartXfer+0x720>
 80071e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071ec:	085b      	lsrs	r3, r3, #1
 80071ee:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80071f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071f6:	f003 0301 	and.w	r3, r3, #1
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d004      	beq.n	8007208 <USB_EPStartXfer+0x710>
 80071fe:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007202:	3301      	adds	r3, #1
 8007204:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007208:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800720c:	b29b      	uxth	r3, r3
 800720e:	029b      	lsls	r3, r3, #10
 8007210:	b29a      	uxth	r2, r3
 8007212:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007214:	801a      	strh	r2, [r3, #0]
 8007216:	e047      	b.n	80072a8 <USB_EPStartXfer+0x7b0>
 8007218:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800721c:	095b      	lsrs	r3, r3, #5
 800721e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007222:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007226:	f003 031f 	and.w	r3, r3, #31
 800722a:	2b00      	cmp	r3, #0
 800722c:	d104      	bne.n	8007238 <USB_EPStartXfer+0x740>
 800722e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007232:	3b01      	subs	r3, #1
 8007234:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007238:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800723c:	b29b      	uxth	r3, r3
 800723e:	029b      	lsls	r3, r3, #10
 8007240:	b29b      	uxth	r3, r3
 8007242:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007246:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800724a:	b29a      	uxth	r2, r3
 800724c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800724e:	801a      	strh	r2, [r3, #0]
 8007250:	e02a      	b.n	80072a8 <USB_EPStartXfer+0x7b0>
 8007252:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007256:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	785b      	ldrb	r3, [r3, #1]
 800725e:	2b01      	cmp	r3, #1
 8007260:	d122      	bne.n	80072a8 <USB_EPStartXfer+0x7b0>
 8007262:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007266:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	653b      	str	r3, [r7, #80]	; 0x50
 800726e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007272:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800727c:	b29b      	uxth	r3, r3
 800727e:	461a      	mov	r2, r3
 8007280:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007282:	4413      	add	r3, r2
 8007284:	653b      	str	r3, [r7, #80]	; 0x50
 8007286:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800728a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	781b      	ldrb	r3, [r3, #0]
 8007292:	011a      	lsls	r2, r3, #4
 8007294:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007296:	4413      	add	r3, r2
 8007298:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800729c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800729e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072a2:	b29a      	uxth	r2, r3
 80072a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072a6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80072a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	891b      	ldrh	r3, [r3, #8]
 80072b4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80072b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	6959      	ldr	r1, [r3, #20]
 80072c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072c8:	b29b      	uxth	r3, r3
 80072ca:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80072ce:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80072d2:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80072d6:	6800      	ldr	r0, [r0, #0]
 80072d8:	f001 fb84 	bl	80089e4 <USB_WritePMA>
            ep->xfer_buff += len;
 80072dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	695a      	ldr	r2, [r3, #20]
 80072e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072ec:	441a      	add	r2, r3
 80072ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80072fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	6a1a      	ldr	r2, [r3, #32]
 8007306:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800730a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	691b      	ldr	r3, [r3, #16]
 8007312:	429a      	cmp	r2, r3
 8007314:	d90f      	bls.n	8007336 <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 8007316:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800731a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	6a1a      	ldr	r2, [r3, #32]
 8007322:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007326:	1ad2      	subs	r2, r2, r3
 8007328:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800732c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	621a      	str	r2, [r3, #32]
 8007334:	e00e      	b.n	8007354 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 8007336:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800733a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	6a1b      	ldr	r3, [r3, #32]
 8007342:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8007346:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800734a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	2200      	movs	r2, #0
 8007352:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007354:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007358:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	643b      	str	r3, [r7, #64]	; 0x40
 8007360:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007364:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	785b      	ldrb	r3, [r3, #1]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d16d      	bne.n	800744c <USB_EPStartXfer+0x954>
 8007370:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007374:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	63bb      	str	r3, [r7, #56]	; 0x38
 800737c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007380:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800738a:	b29b      	uxth	r3, r3
 800738c:	461a      	mov	r2, r3
 800738e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007390:	4413      	add	r3, r2
 8007392:	63bb      	str	r3, [r7, #56]	; 0x38
 8007394:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007398:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	781b      	ldrb	r3, [r3, #0]
 80073a0:	011a      	lsls	r2, r3, #4
 80073a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073a4:	4413      	add	r3, r2
 80073a6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80073aa:	637b      	str	r3, [r7, #52]	; 0x34
 80073ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d112      	bne.n	80073da <USB_EPStartXfer+0x8e2>
 80073b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073b6:	881b      	ldrh	r3, [r3, #0]
 80073b8:	b29b      	uxth	r3, r3
 80073ba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80073be:	b29a      	uxth	r2, r3
 80073c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073c2:	801a      	strh	r2, [r3, #0]
 80073c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073c6:	881b      	ldrh	r3, [r3, #0]
 80073c8:	b29b      	uxth	r3, r3
 80073ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073d2:	b29a      	uxth	r2, r3
 80073d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073d6:	801a      	strh	r2, [r3, #0]
 80073d8:	e05d      	b.n	8007496 <USB_EPStartXfer+0x99e>
 80073da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073de:	2b3e      	cmp	r3, #62	; 0x3e
 80073e0:	d817      	bhi.n	8007412 <USB_EPStartXfer+0x91a>
 80073e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073e6:	085b      	lsrs	r3, r3, #1
 80073e8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80073ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073f0:	f003 0301 	and.w	r3, r3, #1
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d004      	beq.n	8007402 <USB_EPStartXfer+0x90a>
 80073f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80073fc:	3301      	adds	r3, #1
 80073fe:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007402:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007406:	b29b      	uxth	r3, r3
 8007408:	029b      	lsls	r3, r3, #10
 800740a:	b29a      	uxth	r2, r3
 800740c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800740e:	801a      	strh	r2, [r3, #0]
 8007410:	e041      	b.n	8007496 <USB_EPStartXfer+0x99e>
 8007412:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007416:	095b      	lsrs	r3, r3, #5
 8007418:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800741c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007420:	f003 031f 	and.w	r3, r3, #31
 8007424:	2b00      	cmp	r3, #0
 8007426:	d104      	bne.n	8007432 <USB_EPStartXfer+0x93a>
 8007428:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800742c:	3b01      	subs	r3, #1
 800742e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007432:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007436:	b29b      	uxth	r3, r3
 8007438:	029b      	lsls	r3, r3, #10
 800743a:	b29b      	uxth	r3, r3
 800743c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007440:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007444:	b29a      	uxth	r2, r3
 8007446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007448:	801a      	strh	r2, [r3, #0]
 800744a:	e024      	b.n	8007496 <USB_EPStartXfer+0x99e>
 800744c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007450:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	785b      	ldrb	r3, [r3, #1]
 8007458:	2b01      	cmp	r3, #1
 800745a:	d11c      	bne.n	8007496 <USB_EPStartXfer+0x99e>
 800745c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007460:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800746a:	b29b      	uxth	r3, r3
 800746c:	461a      	mov	r2, r3
 800746e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007470:	4413      	add	r3, r2
 8007472:	643b      	str	r3, [r7, #64]	; 0x40
 8007474:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007478:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	781b      	ldrb	r3, [r3, #0]
 8007480:	011a      	lsls	r2, r3, #4
 8007482:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007484:	4413      	add	r3, r2
 8007486:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800748a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800748c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007490:	b29a      	uxth	r2, r3
 8007492:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007494:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007496:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800749a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	895b      	ldrh	r3, [r3, #10]
 80074a2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80074a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	6959      	ldr	r1, [r3, #20]
 80074b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074b6:	b29b      	uxth	r3, r3
 80074b8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80074bc:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80074c0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80074c4:	6800      	ldr	r0, [r0, #0]
 80074c6:	f001 fa8d 	bl	80089e4 <USB_WritePMA>
 80074ca:	f000 bc5a 	b.w	8007d82 <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80074ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	6a1b      	ldr	r3, [r3, #32]
 80074da:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80074de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074e2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80074e6:	681a      	ldr	r2, [r3, #0]
 80074e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	781b      	ldrb	r3, [r3, #0]
 80074f4:	009b      	lsls	r3, r3, #2
 80074f6:	4413      	add	r3, r2
 80074f8:	881b      	ldrh	r3, [r3, #0]
 80074fa:	b29b      	uxth	r3, r3
 80074fc:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007500:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007504:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8007508:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800750c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007510:	681a      	ldr	r2, [r3, #0]
 8007512:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007516:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	781b      	ldrb	r3, [r3, #0]
 800751e:	009b      	lsls	r3, r3, #2
 8007520:	441a      	add	r2, r3
 8007522:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8007526:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800752a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800752e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007532:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007536:	b29b      	uxth	r3, r3
 8007538:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800753a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800753e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007546:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800754a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007554:	b29b      	uxth	r3, r3
 8007556:	461a      	mov	r2, r3
 8007558:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800755a:	4413      	add	r3, r2
 800755c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800755e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007562:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	781b      	ldrb	r3, [r3, #0]
 800756a:	011a      	lsls	r2, r3, #4
 800756c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800756e:	4413      	add	r3, r2
 8007570:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007574:	65bb      	str	r3, [r7, #88]	; 0x58
 8007576:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800757a:	b29a      	uxth	r2, r3
 800757c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800757e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007580:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007584:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	891b      	ldrh	r3, [r3, #8]
 800758c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007590:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007594:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	6959      	ldr	r1, [r3, #20]
 800759c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075a0:	b29b      	uxth	r3, r3
 80075a2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80075a6:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80075aa:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80075ae:	6800      	ldr	r0, [r0, #0]
 80075b0:	f001 fa18 	bl	80089e4 <USB_WritePMA>
 80075b4:	e3e5      	b.n	8007d82 <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 80075b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075ba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80075be:	681a      	ldr	r2, [r3, #0]
 80075c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	781b      	ldrb	r3, [r3, #0]
 80075cc:	009b      	lsls	r3, r3, #2
 80075ce:	4413      	add	r3, r2
 80075d0:	881b      	ldrh	r3, [r3, #0]
 80075d2:	b29b      	uxth	r3, r3
 80075d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075dc:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 80075e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075e4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80075e8:	681a      	ldr	r2, [r3, #0]
 80075ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	781b      	ldrb	r3, [r3, #0]
 80075f6:	009b      	lsls	r3, r3, #2
 80075f8:	441a      	add	r2, r3
 80075fa:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80075fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007602:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007606:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800760a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800760e:	b29b      	uxth	r3, r3
 8007610:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007612:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007616:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	6a1a      	ldr	r2, [r3, #32]
 800761e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007622:	1ad2      	subs	r2, r2, r3
 8007624:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007628:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007630:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007634:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007638:	681a      	ldr	r2, [r3, #0]
 800763a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800763e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	781b      	ldrb	r3, [r3, #0]
 8007646:	009b      	lsls	r3, r3, #2
 8007648:	4413      	add	r3, r2
 800764a:	881b      	ldrh	r3, [r3, #0]
 800764c:	b29b      	uxth	r3, r3
 800764e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007652:	2b00      	cmp	r3, #0
 8007654:	f000 81bc 	beq.w	80079d0 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007658:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800765c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007666:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800766a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	785b      	ldrb	r3, [r3, #1]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d16d      	bne.n	8007752 <USB_EPStartXfer+0xc5a>
 8007676:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800767a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	67bb      	str	r3, [r7, #120]	; 0x78
 8007682:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007686:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007690:	b29b      	uxth	r3, r3
 8007692:	461a      	mov	r2, r3
 8007694:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007696:	4413      	add	r3, r2
 8007698:	67bb      	str	r3, [r7, #120]	; 0x78
 800769a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800769e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	781b      	ldrb	r3, [r3, #0]
 80076a6:	011a      	lsls	r2, r3, #4
 80076a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80076aa:	4413      	add	r3, r2
 80076ac:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80076b0:	677b      	str	r3, [r7, #116]	; 0x74
 80076b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d112      	bne.n	80076e0 <USB_EPStartXfer+0xbe8>
 80076ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80076bc:	881b      	ldrh	r3, [r3, #0]
 80076be:	b29b      	uxth	r3, r3
 80076c0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80076c4:	b29a      	uxth	r2, r3
 80076c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80076c8:	801a      	strh	r2, [r3, #0]
 80076ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80076cc:	881b      	ldrh	r3, [r3, #0]
 80076ce:	b29b      	uxth	r3, r3
 80076d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076d8:	b29a      	uxth	r2, r3
 80076da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80076dc:	801a      	strh	r2, [r3, #0]
 80076de:	e060      	b.n	80077a2 <USB_EPStartXfer+0xcaa>
 80076e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076e4:	2b3e      	cmp	r3, #62	; 0x3e
 80076e6:	d817      	bhi.n	8007718 <USB_EPStartXfer+0xc20>
 80076e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076ec:	085b      	lsrs	r3, r3, #1
 80076ee:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80076f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076f6:	f003 0301 	and.w	r3, r3, #1
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d004      	beq.n	8007708 <USB_EPStartXfer+0xc10>
 80076fe:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007702:	3301      	adds	r3, #1
 8007704:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007708:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800770c:	b29b      	uxth	r3, r3
 800770e:	029b      	lsls	r3, r3, #10
 8007710:	b29a      	uxth	r2, r3
 8007712:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007714:	801a      	strh	r2, [r3, #0]
 8007716:	e044      	b.n	80077a2 <USB_EPStartXfer+0xcaa>
 8007718:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800771c:	095b      	lsrs	r3, r3, #5
 800771e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007722:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007726:	f003 031f 	and.w	r3, r3, #31
 800772a:	2b00      	cmp	r3, #0
 800772c:	d104      	bne.n	8007738 <USB_EPStartXfer+0xc40>
 800772e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007732:	3b01      	subs	r3, #1
 8007734:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007738:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800773c:	b29b      	uxth	r3, r3
 800773e:	029b      	lsls	r3, r3, #10
 8007740:	b29b      	uxth	r3, r3
 8007742:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007746:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800774a:	b29a      	uxth	r2, r3
 800774c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800774e:	801a      	strh	r2, [r3, #0]
 8007750:	e027      	b.n	80077a2 <USB_EPStartXfer+0xcaa>
 8007752:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007756:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	785b      	ldrb	r3, [r3, #1]
 800775e:	2b01      	cmp	r3, #1
 8007760:	d11f      	bne.n	80077a2 <USB_EPStartXfer+0xcaa>
 8007762:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007766:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007770:	b29b      	uxth	r3, r3
 8007772:	461a      	mov	r2, r3
 8007774:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007778:	4413      	add	r3, r2
 800777a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800777e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007782:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	781b      	ldrb	r3, [r3, #0]
 800778a:	011a      	lsls	r2, r3, #4
 800778c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007790:	4413      	add	r3, r2
 8007792:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007796:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007798:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800779c:	b29a      	uxth	r2, r3
 800779e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80077a0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80077a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	895b      	ldrh	r3, [r3, #10]
 80077ae:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80077b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	6959      	ldr	r1, [r3, #20]
 80077be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077c2:	b29b      	uxth	r3, r3
 80077c4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80077c8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80077cc:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80077d0:	6800      	ldr	r0, [r0, #0]
 80077d2:	f001 f907 	bl	80089e4 <USB_WritePMA>
          ep->xfer_buff += len;
 80077d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	695a      	ldr	r2, [r3, #20]
 80077e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077e6:	441a      	add	r2, r3
 80077e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80077f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	6a1a      	ldr	r2, [r3, #32]
 8007800:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007804:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	691b      	ldr	r3, [r3, #16]
 800780c:	429a      	cmp	r2, r3
 800780e:	d90f      	bls.n	8007830 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8007810:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007814:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	6a1a      	ldr	r2, [r3, #32]
 800781c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007820:	1ad2      	subs	r2, r2, r3
 8007822:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007826:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	621a      	str	r2, [r3, #32]
 800782e:	e00e      	b.n	800784e <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8007830:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007834:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	6a1b      	ldr	r3, [r3, #32]
 800783c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8007840:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007844:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	2200      	movs	r2, #0
 800784c:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800784e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007852:	2b00      	cmp	r3, #0
 8007854:	f000 8295 	beq.w	8007d82 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007858:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800785c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	785b      	ldrb	r3, [r3, #1]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d16d      	bne.n	8007944 <USB_EPStartXfer+0xe4c>
 8007868:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800786c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	66bb      	str	r3, [r7, #104]	; 0x68
 8007874:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007878:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007882:	b29b      	uxth	r3, r3
 8007884:	461a      	mov	r2, r3
 8007886:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007888:	4413      	add	r3, r2
 800788a:	66bb      	str	r3, [r7, #104]	; 0x68
 800788c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007890:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	781b      	ldrb	r3, [r3, #0]
 8007898:	011a      	lsls	r2, r3, #4
 800789a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800789c:	4413      	add	r3, r2
 800789e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80078a2:	667b      	str	r3, [r7, #100]	; 0x64
 80078a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d112      	bne.n	80078d2 <USB_EPStartXfer+0xdda>
 80078ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80078ae:	881b      	ldrh	r3, [r3, #0]
 80078b0:	b29b      	uxth	r3, r3
 80078b2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80078b6:	b29a      	uxth	r2, r3
 80078b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80078ba:	801a      	strh	r2, [r3, #0]
 80078bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80078be:	881b      	ldrh	r3, [r3, #0]
 80078c0:	b29b      	uxth	r3, r3
 80078c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078ca:	b29a      	uxth	r2, r3
 80078cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80078ce:	801a      	strh	r2, [r3, #0]
 80078d0:	e063      	b.n	800799a <USB_EPStartXfer+0xea2>
 80078d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078d6:	2b3e      	cmp	r3, #62	; 0x3e
 80078d8:	d817      	bhi.n	800790a <USB_EPStartXfer+0xe12>
 80078da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078de:	085b      	lsrs	r3, r3, #1
 80078e0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80078e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078e8:	f003 0301 	and.w	r3, r3, #1
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d004      	beq.n	80078fa <USB_EPStartXfer+0xe02>
 80078f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078f4:	3301      	adds	r3, #1
 80078f6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80078fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078fe:	b29b      	uxth	r3, r3
 8007900:	029b      	lsls	r3, r3, #10
 8007902:	b29a      	uxth	r2, r3
 8007904:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007906:	801a      	strh	r2, [r3, #0]
 8007908:	e047      	b.n	800799a <USB_EPStartXfer+0xea2>
 800790a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800790e:	095b      	lsrs	r3, r3, #5
 8007910:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007914:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007918:	f003 031f 	and.w	r3, r3, #31
 800791c:	2b00      	cmp	r3, #0
 800791e:	d104      	bne.n	800792a <USB_EPStartXfer+0xe32>
 8007920:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007924:	3b01      	subs	r3, #1
 8007926:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800792a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800792e:	b29b      	uxth	r3, r3
 8007930:	029b      	lsls	r3, r3, #10
 8007932:	b29b      	uxth	r3, r3
 8007934:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007938:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800793c:	b29a      	uxth	r2, r3
 800793e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007940:	801a      	strh	r2, [r3, #0]
 8007942:	e02a      	b.n	800799a <USB_EPStartXfer+0xea2>
 8007944:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007948:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	785b      	ldrb	r3, [r3, #1]
 8007950:	2b01      	cmp	r3, #1
 8007952:	d122      	bne.n	800799a <USB_EPStartXfer+0xea2>
 8007954:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007958:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	673b      	str	r3, [r7, #112]	; 0x70
 8007960:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007964:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800796e:	b29b      	uxth	r3, r3
 8007970:	461a      	mov	r2, r3
 8007972:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007974:	4413      	add	r3, r2
 8007976:	673b      	str	r3, [r7, #112]	; 0x70
 8007978:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800797c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	781b      	ldrb	r3, [r3, #0]
 8007984:	011a      	lsls	r2, r3, #4
 8007986:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007988:	4413      	add	r3, r2
 800798a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800798e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007990:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007994:	b29a      	uxth	r2, r3
 8007996:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007998:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800799a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800799e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	891b      	ldrh	r3, [r3, #8]
 80079a6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80079aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	6959      	ldr	r1, [r3, #20]
 80079b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079ba:	b29b      	uxth	r3, r3
 80079bc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80079c0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80079c4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80079c8:	6800      	ldr	r0, [r0, #0]
 80079ca:	f001 f80b 	bl	80089e4 <USB_WritePMA>
 80079ce:	e1d8      	b.n	8007d82 <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80079d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	785b      	ldrb	r3, [r3, #1]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d178      	bne.n	8007ad2 <USB_EPStartXfer+0xfda>
 80079e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079e4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80079ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079f2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079fc:	b29b      	uxth	r3, r3
 80079fe:	461a      	mov	r2, r3
 8007a00:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007a04:	4413      	add	r3, r2
 8007a06:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007a0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	781b      	ldrb	r3, [r3, #0]
 8007a16:	011a      	lsls	r2, r3, #4
 8007a18:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007a1c:	4413      	add	r3, r2
 8007a1e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007a22:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007a26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d116      	bne.n	8007a5c <USB_EPStartXfer+0xf64>
 8007a2e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007a32:	881b      	ldrh	r3, [r3, #0]
 8007a34:	b29b      	uxth	r3, r3
 8007a36:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007a3a:	b29a      	uxth	r2, r3
 8007a3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007a40:	801a      	strh	r2, [r3, #0]
 8007a42:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007a46:	881b      	ldrh	r3, [r3, #0]
 8007a48:	b29b      	uxth	r3, r3
 8007a4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a52:	b29a      	uxth	r2, r3
 8007a54:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007a58:	801a      	strh	r2, [r3, #0]
 8007a5a:	e06b      	b.n	8007b34 <USB_EPStartXfer+0x103c>
 8007a5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a60:	2b3e      	cmp	r3, #62	; 0x3e
 8007a62:	d818      	bhi.n	8007a96 <USB_EPStartXfer+0xf9e>
 8007a64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a68:	085b      	lsrs	r3, r3, #1
 8007a6a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007a6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a72:	f003 0301 	and.w	r3, r3, #1
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d004      	beq.n	8007a84 <USB_EPStartXfer+0xf8c>
 8007a7a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007a7e:	3301      	adds	r3, #1
 8007a80:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007a84:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007a88:	b29b      	uxth	r3, r3
 8007a8a:	029b      	lsls	r3, r3, #10
 8007a8c:	b29a      	uxth	r2, r3
 8007a8e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007a92:	801a      	strh	r2, [r3, #0]
 8007a94:	e04e      	b.n	8007b34 <USB_EPStartXfer+0x103c>
 8007a96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a9a:	095b      	lsrs	r3, r3, #5
 8007a9c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007aa0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007aa4:	f003 031f 	and.w	r3, r3, #31
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d104      	bne.n	8007ab6 <USB_EPStartXfer+0xfbe>
 8007aac:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007ab0:	3b01      	subs	r3, #1
 8007ab2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007ab6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007aba:	b29b      	uxth	r3, r3
 8007abc:	029b      	lsls	r3, r3, #10
 8007abe:	b29b      	uxth	r3, r3
 8007ac0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ac4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ac8:	b29a      	uxth	r2, r3
 8007aca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007ace:	801a      	strh	r2, [r3, #0]
 8007ad0:	e030      	b.n	8007b34 <USB_EPStartXfer+0x103c>
 8007ad2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ad6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	785b      	ldrb	r3, [r3, #1]
 8007ade:	2b01      	cmp	r3, #1
 8007ae0:	d128      	bne.n	8007b34 <USB_EPStartXfer+0x103c>
 8007ae2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ae6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007af0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007af4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007afe:	b29b      	uxth	r3, r3
 8007b00:	461a      	mov	r2, r3
 8007b02:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007b06:	4413      	add	r3, r2
 8007b08:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007b0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b10:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	781b      	ldrb	r3, [r3, #0]
 8007b18:	011a      	lsls	r2, r3, #4
 8007b1a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007b1e:	4413      	add	r3, r2
 8007b20:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007b24:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007b28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b2c:	b29a      	uxth	r2, r3
 8007b2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007b32:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007b34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b38:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	891b      	ldrh	r3, [r3, #8]
 8007b40:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007b44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b48:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	6959      	ldr	r1, [r3, #20]
 8007b50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b54:	b29b      	uxth	r3, r3
 8007b56:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007b5a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007b5e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007b62:	6800      	ldr	r0, [r0, #0]
 8007b64:	f000 ff3e 	bl	80089e4 <USB_WritePMA>
          ep->xfer_buff += len;
 8007b68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b6c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	695a      	ldr	r2, [r3, #20]
 8007b74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b78:	441a      	add	r2, r3
 8007b7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8007b86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	6a1a      	ldr	r2, [r3, #32]
 8007b92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b96:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	691b      	ldr	r3, [r3, #16]
 8007b9e:	429a      	cmp	r2, r3
 8007ba0:	d90f      	bls.n	8007bc2 <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8007ba2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ba6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	6a1a      	ldr	r2, [r3, #32]
 8007bae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bb2:	1ad2      	subs	r2, r2, r3
 8007bb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bb8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	621a      	str	r2, [r3, #32]
 8007bc0:	e00e      	b.n	8007be0 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8007bc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bc6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	6a1b      	ldr	r3, [r3, #32]
 8007bce:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8007bd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bd6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8007be0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	f000 80cc 	beq.w	8007d82 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007bea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007bf8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bfc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	785b      	ldrb	r3, [r3, #1]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d178      	bne.n	8007cfa <USB_EPStartXfer+0x1202>
 8007c08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c0c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007c16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c1a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c24:	b29b      	uxth	r3, r3
 8007c26:	461a      	mov	r2, r3
 8007c28:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007c2c:	4413      	add	r3, r2
 8007c2e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007c32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	781b      	ldrb	r3, [r3, #0]
 8007c3e:	011a      	lsls	r2, r3, #4
 8007c40:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007c44:	4413      	add	r3, r2
 8007c46:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007c4a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007c4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d116      	bne.n	8007c84 <USB_EPStartXfer+0x118c>
 8007c56:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007c5a:	881b      	ldrh	r3, [r3, #0]
 8007c5c:	b29b      	uxth	r3, r3
 8007c5e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007c62:	b29a      	uxth	r2, r3
 8007c64:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007c68:	801a      	strh	r2, [r3, #0]
 8007c6a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007c6e:	881b      	ldrh	r3, [r3, #0]
 8007c70:	b29b      	uxth	r3, r3
 8007c72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c7a:	b29a      	uxth	r2, r3
 8007c7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007c80:	801a      	strh	r2, [r3, #0]
 8007c82:	e064      	b.n	8007d4e <USB_EPStartXfer+0x1256>
 8007c84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c88:	2b3e      	cmp	r3, #62	; 0x3e
 8007c8a:	d818      	bhi.n	8007cbe <USB_EPStartXfer+0x11c6>
 8007c8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c90:	085b      	lsrs	r3, r3, #1
 8007c92:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007c96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c9a:	f003 0301 	and.w	r3, r3, #1
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d004      	beq.n	8007cac <USB_EPStartXfer+0x11b4>
 8007ca2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ca6:	3301      	adds	r3, #1
 8007ca8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007cac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007cb0:	b29b      	uxth	r3, r3
 8007cb2:	029b      	lsls	r3, r3, #10
 8007cb4:	b29a      	uxth	r2, r3
 8007cb6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007cba:	801a      	strh	r2, [r3, #0]
 8007cbc:	e047      	b.n	8007d4e <USB_EPStartXfer+0x1256>
 8007cbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cc2:	095b      	lsrs	r3, r3, #5
 8007cc4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007cc8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ccc:	f003 031f 	and.w	r3, r3, #31
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d104      	bne.n	8007cde <USB_EPStartXfer+0x11e6>
 8007cd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007cd8:	3b01      	subs	r3, #1
 8007cda:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007cde:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ce2:	b29b      	uxth	r3, r3
 8007ce4:	029b      	lsls	r3, r3, #10
 8007ce6:	b29b      	uxth	r3, r3
 8007ce8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007cec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007cf0:	b29a      	uxth	r2, r3
 8007cf2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007cf6:	801a      	strh	r2, [r3, #0]
 8007cf8:	e029      	b.n	8007d4e <USB_EPStartXfer+0x1256>
 8007cfa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cfe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	785b      	ldrb	r3, [r3, #1]
 8007d06:	2b01      	cmp	r3, #1
 8007d08:	d121      	bne.n	8007d4e <USB_EPStartXfer+0x1256>
 8007d0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d0e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d18:	b29b      	uxth	r3, r3
 8007d1a:	461a      	mov	r2, r3
 8007d1c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007d20:	4413      	add	r3, r2
 8007d22:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007d26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	781b      	ldrb	r3, [r3, #0]
 8007d32:	011a      	lsls	r2, r3, #4
 8007d34:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007d38:	4413      	add	r3, r2
 8007d3a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007d3e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007d42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d46:	b29a      	uxth	r2, r3
 8007d48:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007d4c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007d4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	895b      	ldrh	r3, [r3, #10]
 8007d5a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007d5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	6959      	ldr	r1, [r3, #20]
 8007d6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d6e:	b29b      	uxth	r3, r3
 8007d70:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007d74:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007d78:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007d7c:	6800      	ldr	r0, [r0, #0]
 8007d7e:	f000 fe31 	bl	80089e4 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007d82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d86:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007d8a:	681a      	ldr	r2, [r3, #0]
 8007d8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d90:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	781b      	ldrb	r3, [r3, #0]
 8007d98:	009b      	lsls	r3, r3, #2
 8007d9a:	4413      	add	r3, r2
 8007d9c:	881b      	ldrh	r3, [r3, #0]
 8007d9e:	b29b      	uxth	r3, r3
 8007da0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007da4:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8007da8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007dac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007db0:	8013      	strh	r3, [r2, #0]
 8007db2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007db6:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8007dba:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007dbe:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8007dc2:	8812      	ldrh	r2, [r2, #0]
 8007dc4:	f082 0210 	eor.w	r2, r2, #16
 8007dc8:	801a      	strh	r2, [r3, #0]
 8007dca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dce:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8007dd2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007dd6:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8007dda:	8812      	ldrh	r2, [r2, #0]
 8007ddc:	f082 0220 	eor.w	r2, r2, #32
 8007de0:	801a      	strh	r2, [r3, #0]
 8007de2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007de6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007dea:	681a      	ldr	r2, [r3, #0]
 8007dec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007df0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	781b      	ldrb	r3, [r3, #0]
 8007df8:	009b      	lsls	r3, r3, #2
 8007dfa:	441a      	add	r2, r3
 8007dfc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e00:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8007e04:	881b      	ldrh	r3, [r3, #0]
 8007e06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e16:	b29b      	uxth	r3, r3
 8007e18:	8013      	strh	r3, [r2, #0]
 8007e1a:	f000 bc9f 	b.w	800875c <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007e1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	7b1b      	ldrb	r3, [r3, #12]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	f040 80ae 	bne.w	8007f8c <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007e30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e34:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	699a      	ldr	r2, [r3, #24]
 8007e3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e40:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	691b      	ldr	r3, [r3, #16]
 8007e48:	429a      	cmp	r2, r3
 8007e4a:	d917      	bls.n	8007e7c <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8007e4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	691b      	ldr	r3, [r3, #16]
 8007e58:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8007e5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e60:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	699a      	ldr	r2, [r3, #24]
 8007e68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e6c:	1ad2      	subs	r2, r2, r3
 8007e6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	619a      	str	r2, [r3, #24]
 8007e7a:	e00e      	b.n	8007e9a <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8007e7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e80:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	699b      	ldr	r3, [r3, #24]
 8007e88:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8007e8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e90:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	2200      	movs	r2, #0
 8007e98:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007e9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e9e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007ea8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007eac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007eb6:	b29b      	uxth	r3, r3
 8007eb8:	461a      	mov	r2, r3
 8007eba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007ebe:	4413      	add	r3, r2
 8007ec0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007ec4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ec8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	781b      	ldrb	r3, [r3, #0]
 8007ed0:	011a      	lsls	r2, r3, #4
 8007ed2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007ed6:	4413      	add	r3, r2
 8007ed8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007edc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007ee0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d116      	bne.n	8007f16 <USB_EPStartXfer+0x141e>
 8007ee8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007eec:	881b      	ldrh	r3, [r3, #0]
 8007eee:	b29b      	uxth	r3, r3
 8007ef0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007ef4:	b29a      	uxth	r2, r3
 8007ef6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007efa:	801a      	strh	r2, [r3, #0]
 8007efc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007f00:	881b      	ldrh	r3, [r3, #0]
 8007f02:	b29b      	uxth	r3, r3
 8007f04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f0c:	b29a      	uxth	r2, r3
 8007f0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007f12:	801a      	strh	r2, [r3, #0]
 8007f14:	e3e8      	b.n	80086e8 <USB_EPStartXfer+0x1bf0>
 8007f16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f1a:	2b3e      	cmp	r3, #62	; 0x3e
 8007f1c:	d818      	bhi.n	8007f50 <USB_EPStartXfer+0x1458>
 8007f1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f22:	085b      	lsrs	r3, r3, #1
 8007f24:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007f28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f2c:	f003 0301 	and.w	r3, r3, #1
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d004      	beq.n	8007f3e <USB_EPStartXfer+0x1446>
 8007f34:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007f38:	3301      	adds	r3, #1
 8007f3a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007f3e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007f42:	b29b      	uxth	r3, r3
 8007f44:	029b      	lsls	r3, r3, #10
 8007f46:	b29a      	uxth	r2, r3
 8007f48:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007f4c:	801a      	strh	r2, [r3, #0]
 8007f4e:	e3cb      	b.n	80086e8 <USB_EPStartXfer+0x1bf0>
 8007f50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f54:	095b      	lsrs	r3, r3, #5
 8007f56:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007f5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f5e:	f003 031f 	and.w	r3, r3, #31
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d104      	bne.n	8007f70 <USB_EPStartXfer+0x1478>
 8007f66:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007f6a:	3b01      	subs	r3, #1
 8007f6c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007f70:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007f74:	b29b      	uxth	r3, r3
 8007f76:	029b      	lsls	r3, r3, #10
 8007f78:	b29b      	uxth	r3, r3
 8007f7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f82:	b29a      	uxth	r2, r3
 8007f84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007f88:	801a      	strh	r2, [r3, #0]
 8007f8a:	e3ad      	b.n	80086e8 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007f8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f90:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	78db      	ldrb	r3, [r3, #3]
 8007f98:	2b02      	cmp	r3, #2
 8007f9a:	f040 8200 	bne.w	800839e <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007f9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fa2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	785b      	ldrb	r3, [r3, #1]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	f040 8091 	bne.w	80080d2 <USB_EPStartXfer+0x15da>
 8007fb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fb4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007fbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fc2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007fcc:	b29b      	uxth	r3, r3
 8007fce:	461a      	mov	r2, r3
 8007fd0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007fd4:	4413      	add	r3, r2
 8007fd6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007fda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fde:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	781b      	ldrb	r3, [r3, #0]
 8007fe6:	011a      	lsls	r2, r3, #4
 8007fe8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007fec:	4413      	add	r3, r2
 8007fee:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007ff2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007ff6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ffa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	691b      	ldr	r3, [r3, #16]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d116      	bne.n	8008034 <USB_EPStartXfer+0x153c>
 8008006:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800800a:	881b      	ldrh	r3, [r3, #0]
 800800c:	b29b      	uxth	r3, r3
 800800e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008012:	b29a      	uxth	r2, r3
 8008014:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008018:	801a      	strh	r2, [r3, #0]
 800801a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800801e:	881b      	ldrh	r3, [r3, #0]
 8008020:	b29b      	uxth	r3, r3
 8008022:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008026:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800802a:	b29a      	uxth	r2, r3
 800802c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008030:	801a      	strh	r2, [r3, #0]
 8008032:	e083      	b.n	800813c <USB_EPStartXfer+0x1644>
 8008034:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008038:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	691b      	ldr	r3, [r3, #16]
 8008040:	2b3e      	cmp	r3, #62	; 0x3e
 8008042:	d820      	bhi.n	8008086 <USB_EPStartXfer+0x158e>
 8008044:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008048:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	691b      	ldr	r3, [r3, #16]
 8008050:	085b      	lsrs	r3, r3, #1
 8008052:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008056:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800805a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	691b      	ldr	r3, [r3, #16]
 8008062:	f003 0301 	and.w	r3, r3, #1
 8008066:	2b00      	cmp	r3, #0
 8008068:	d004      	beq.n	8008074 <USB_EPStartXfer+0x157c>
 800806a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800806e:	3301      	adds	r3, #1
 8008070:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008074:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008078:	b29b      	uxth	r3, r3
 800807a:	029b      	lsls	r3, r3, #10
 800807c:	b29a      	uxth	r2, r3
 800807e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008082:	801a      	strh	r2, [r3, #0]
 8008084:	e05a      	b.n	800813c <USB_EPStartXfer+0x1644>
 8008086:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800808a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	691b      	ldr	r3, [r3, #16]
 8008092:	095b      	lsrs	r3, r3, #5
 8008094:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008098:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800809c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	691b      	ldr	r3, [r3, #16]
 80080a4:	f003 031f 	and.w	r3, r3, #31
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d104      	bne.n	80080b6 <USB_EPStartXfer+0x15be>
 80080ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080b0:	3b01      	subs	r3, #1
 80080b2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80080b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080ba:	b29b      	uxth	r3, r3
 80080bc:	029b      	lsls	r3, r3, #10
 80080be:	b29b      	uxth	r3, r3
 80080c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080c8:	b29a      	uxth	r2, r3
 80080ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80080ce:	801a      	strh	r2, [r3, #0]
 80080d0:	e034      	b.n	800813c <USB_EPStartXfer+0x1644>
 80080d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	785b      	ldrb	r3, [r3, #1]
 80080de:	2b01      	cmp	r3, #1
 80080e0:	d12c      	bne.n	800813c <USB_EPStartXfer+0x1644>
 80080e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080e6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80080f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080fe:	b29b      	uxth	r3, r3
 8008100:	461a      	mov	r2, r3
 8008102:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008106:	4413      	add	r3, r2
 8008108:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800810c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008110:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	781b      	ldrb	r3, [r3, #0]
 8008118:	011a      	lsls	r2, r3, #4
 800811a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800811e:	4413      	add	r3, r2
 8008120:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008124:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008128:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800812c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	691b      	ldr	r3, [r3, #16]
 8008134:	b29a      	uxth	r2, r3
 8008136:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800813a:	801a      	strh	r2, [r3, #0]
 800813c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008140:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800814a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800814e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	785b      	ldrb	r3, [r3, #1]
 8008156:	2b00      	cmp	r3, #0
 8008158:	f040 8091 	bne.w	800827e <USB_EPStartXfer+0x1786>
 800815c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008160:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800816a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800816e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008178:	b29b      	uxth	r3, r3
 800817a:	461a      	mov	r2, r3
 800817c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008180:	4413      	add	r3, r2
 8008182:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008186:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800818a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	781b      	ldrb	r3, [r3, #0]
 8008192:	011a      	lsls	r2, r3, #4
 8008194:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008198:	4413      	add	r3, r2
 800819a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800819e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80081a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	691b      	ldr	r3, [r3, #16]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d116      	bne.n	80081e0 <USB_EPStartXfer+0x16e8>
 80081b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80081b6:	881b      	ldrh	r3, [r3, #0]
 80081b8:	b29b      	uxth	r3, r3
 80081ba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80081be:	b29a      	uxth	r2, r3
 80081c0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80081c4:	801a      	strh	r2, [r3, #0]
 80081c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80081ca:	881b      	ldrh	r3, [r3, #0]
 80081cc:	b29b      	uxth	r3, r3
 80081ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081d6:	b29a      	uxth	r2, r3
 80081d8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80081dc:	801a      	strh	r2, [r3, #0]
 80081de:	e07c      	b.n	80082da <USB_EPStartXfer+0x17e2>
 80081e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	691b      	ldr	r3, [r3, #16]
 80081ec:	2b3e      	cmp	r3, #62	; 0x3e
 80081ee:	d820      	bhi.n	8008232 <USB_EPStartXfer+0x173a>
 80081f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	691b      	ldr	r3, [r3, #16]
 80081fc:	085b      	lsrs	r3, r3, #1
 80081fe:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008202:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008206:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	691b      	ldr	r3, [r3, #16]
 800820e:	f003 0301 	and.w	r3, r3, #1
 8008212:	2b00      	cmp	r3, #0
 8008214:	d004      	beq.n	8008220 <USB_EPStartXfer+0x1728>
 8008216:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800821a:	3301      	adds	r3, #1
 800821c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008220:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008224:	b29b      	uxth	r3, r3
 8008226:	029b      	lsls	r3, r3, #10
 8008228:	b29a      	uxth	r2, r3
 800822a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800822e:	801a      	strh	r2, [r3, #0]
 8008230:	e053      	b.n	80082da <USB_EPStartXfer+0x17e2>
 8008232:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008236:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	691b      	ldr	r3, [r3, #16]
 800823e:	095b      	lsrs	r3, r3, #5
 8008240:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008244:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008248:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	691b      	ldr	r3, [r3, #16]
 8008250:	f003 031f 	and.w	r3, r3, #31
 8008254:	2b00      	cmp	r3, #0
 8008256:	d104      	bne.n	8008262 <USB_EPStartXfer+0x176a>
 8008258:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800825c:	3b01      	subs	r3, #1
 800825e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008262:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008266:	b29b      	uxth	r3, r3
 8008268:	029b      	lsls	r3, r3, #10
 800826a:	b29b      	uxth	r3, r3
 800826c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008270:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008274:	b29a      	uxth	r2, r3
 8008276:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800827a:	801a      	strh	r2, [r3, #0]
 800827c:	e02d      	b.n	80082da <USB_EPStartXfer+0x17e2>
 800827e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008282:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	785b      	ldrb	r3, [r3, #1]
 800828a:	2b01      	cmp	r3, #1
 800828c:	d125      	bne.n	80082da <USB_EPStartXfer+0x17e2>
 800828e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008292:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800829c:	b29b      	uxth	r3, r3
 800829e:	461a      	mov	r2, r3
 80082a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80082a4:	4413      	add	r3, r2
 80082a6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80082aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	781b      	ldrb	r3, [r3, #0]
 80082b6:	011a      	lsls	r2, r3, #4
 80082b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80082bc:	4413      	add	r3, r2
 80082be:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80082c2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80082c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	691b      	ldr	r3, [r3, #16]
 80082d2:	b29a      	uxth	r2, r3
 80082d4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80082d8:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80082da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	69db      	ldr	r3, [r3, #28]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	f000 81fe 	beq.w	80086e8 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80082ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082f0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80082f4:	681a      	ldr	r2, [r3, #0]
 80082f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	781b      	ldrb	r3, [r3, #0]
 8008302:	009b      	lsls	r3, r3, #2
 8008304:	4413      	add	r3, r2
 8008306:	881b      	ldrh	r3, [r3, #0]
 8008308:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800830c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008310:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008314:	2b00      	cmp	r3, #0
 8008316:	d005      	beq.n	8008324 <USB_EPStartXfer+0x182c>
 8008318:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800831c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008320:	2b00      	cmp	r3, #0
 8008322:	d10d      	bne.n	8008340 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008324:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008328:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800832c:	2b00      	cmp	r3, #0
 800832e:	f040 81db 	bne.w	80086e8 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008332:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800833a:	2b00      	cmp	r3, #0
 800833c:	f040 81d4 	bne.w	80086e8 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8008340:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008344:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008348:	681a      	ldr	r2, [r3, #0]
 800834a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800834e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	781b      	ldrb	r3, [r3, #0]
 8008356:	009b      	lsls	r3, r3, #2
 8008358:	4413      	add	r3, r2
 800835a:	881b      	ldrh	r3, [r3, #0]
 800835c:	b29b      	uxth	r3, r3
 800835e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008362:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008366:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800836a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800836e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008372:	681a      	ldr	r2, [r3, #0]
 8008374:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008378:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	781b      	ldrb	r3, [r3, #0]
 8008380:	009b      	lsls	r3, r3, #2
 8008382:	441a      	add	r2, r3
 8008384:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8008388:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800838c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008390:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008394:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008398:	b29b      	uxth	r3, r3
 800839a:	8013      	strh	r3, [r2, #0]
 800839c:	e1a4      	b.n	80086e8 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800839e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	78db      	ldrb	r3, [r3, #3]
 80083aa:	2b01      	cmp	r3, #1
 80083ac:	f040 819a 	bne.w	80086e4 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80083b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	699a      	ldr	r2, [r3, #24]
 80083bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	691b      	ldr	r3, [r3, #16]
 80083c8:	429a      	cmp	r2, r3
 80083ca:	d917      	bls.n	80083fc <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 80083cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	691b      	ldr	r3, [r3, #16]
 80083d8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 80083dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	699a      	ldr	r2, [r3, #24]
 80083e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083ec:	1ad2      	subs	r2, r2, r3
 80083ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	619a      	str	r2, [r3, #24]
 80083fa:	e00e      	b.n	800841a <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 80083fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008400:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	699b      	ldr	r3, [r3, #24]
 8008408:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 800840c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008410:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	2200      	movs	r2, #0
 8008418:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800841a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800841e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	785b      	ldrb	r3, [r3, #1]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d178      	bne.n	800851c <USB_EPStartXfer+0x1a24>
 800842a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800842e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008438:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800843c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008446:	b29b      	uxth	r3, r3
 8008448:	461a      	mov	r2, r3
 800844a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800844e:	4413      	add	r3, r2
 8008450:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008454:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008458:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	781b      	ldrb	r3, [r3, #0]
 8008460:	011a      	lsls	r2, r3, #4
 8008462:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008466:	4413      	add	r3, r2
 8008468:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800846c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008470:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008474:	2b00      	cmp	r3, #0
 8008476:	d116      	bne.n	80084a6 <USB_EPStartXfer+0x19ae>
 8008478:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800847c:	881b      	ldrh	r3, [r3, #0]
 800847e:	b29b      	uxth	r3, r3
 8008480:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008484:	b29a      	uxth	r2, r3
 8008486:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800848a:	801a      	strh	r2, [r3, #0]
 800848c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008490:	881b      	ldrh	r3, [r3, #0]
 8008492:	b29b      	uxth	r3, r3
 8008494:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008498:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800849c:	b29a      	uxth	r2, r3
 800849e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80084a2:	801a      	strh	r2, [r3, #0]
 80084a4:	e06b      	b.n	800857e <USB_EPStartXfer+0x1a86>
 80084a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084aa:	2b3e      	cmp	r3, #62	; 0x3e
 80084ac:	d818      	bhi.n	80084e0 <USB_EPStartXfer+0x19e8>
 80084ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084b2:	085b      	lsrs	r3, r3, #1
 80084b4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80084b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084bc:	f003 0301 	and.w	r3, r3, #1
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d004      	beq.n	80084ce <USB_EPStartXfer+0x19d6>
 80084c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80084c8:	3301      	adds	r3, #1
 80084ca:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80084ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80084d2:	b29b      	uxth	r3, r3
 80084d4:	029b      	lsls	r3, r3, #10
 80084d6:	b29a      	uxth	r2, r3
 80084d8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80084dc:	801a      	strh	r2, [r3, #0]
 80084de:	e04e      	b.n	800857e <USB_EPStartXfer+0x1a86>
 80084e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084e4:	095b      	lsrs	r3, r3, #5
 80084e6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80084ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084ee:	f003 031f 	and.w	r3, r3, #31
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d104      	bne.n	8008500 <USB_EPStartXfer+0x1a08>
 80084f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80084fa:	3b01      	subs	r3, #1
 80084fc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008500:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008504:	b29b      	uxth	r3, r3
 8008506:	029b      	lsls	r3, r3, #10
 8008508:	b29b      	uxth	r3, r3
 800850a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800850e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008512:	b29a      	uxth	r2, r3
 8008514:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008518:	801a      	strh	r2, [r3, #0]
 800851a:	e030      	b.n	800857e <USB_EPStartXfer+0x1a86>
 800851c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008520:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	785b      	ldrb	r3, [r3, #1]
 8008528:	2b01      	cmp	r3, #1
 800852a:	d128      	bne.n	800857e <USB_EPStartXfer+0x1a86>
 800852c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008530:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800853a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800853e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008548:	b29b      	uxth	r3, r3
 800854a:	461a      	mov	r2, r3
 800854c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008550:	4413      	add	r3, r2
 8008552:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008556:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800855a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	781b      	ldrb	r3, [r3, #0]
 8008562:	011a      	lsls	r2, r3, #4
 8008564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008568:	4413      	add	r3, r2
 800856a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800856e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008572:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008576:	b29a      	uxth	r2, r3
 8008578:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800857c:	801a      	strh	r2, [r3, #0]
 800857e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008582:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800858c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008590:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	785b      	ldrb	r3, [r3, #1]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d178      	bne.n	800868e <USB_EPStartXfer+0x1b96>
 800859c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085a0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80085aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085ae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80085b8:	b29b      	uxth	r3, r3
 80085ba:	461a      	mov	r2, r3
 80085bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80085c0:	4413      	add	r3, r2
 80085c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80085c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	781b      	ldrb	r3, [r3, #0]
 80085d2:	011a      	lsls	r2, r3, #4
 80085d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80085d8:	4413      	add	r3, r2
 80085da:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80085de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80085e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d116      	bne.n	8008618 <USB_EPStartXfer+0x1b20>
 80085ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80085ee:	881b      	ldrh	r3, [r3, #0]
 80085f0:	b29b      	uxth	r3, r3
 80085f2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80085f6:	b29a      	uxth	r2, r3
 80085f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80085fc:	801a      	strh	r2, [r3, #0]
 80085fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008602:	881b      	ldrh	r3, [r3, #0]
 8008604:	b29b      	uxth	r3, r3
 8008606:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800860a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800860e:	b29a      	uxth	r2, r3
 8008610:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008614:	801a      	strh	r2, [r3, #0]
 8008616:	e067      	b.n	80086e8 <USB_EPStartXfer+0x1bf0>
 8008618:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800861c:	2b3e      	cmp	r3, #62	; 0x3e
 800861e:	d818      	bhi.n	8008652 <USB_EPStartXfer+0x1b5a>
 8008620:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008624:	085b      	lsrs	r3, r3, #1
 8008626:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800862a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800862e:	f003 0301 	and.w	r3, r3, #1
 8008632:	2b00      	cmp	r3, #0
 8008634:	d004      	beq.n	8008640 <USB_EPStartXfer+0x1b48>
 8008636:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800863a:	3301      	adds	r3, #1
 800863c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008640:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008644:	b29b      	uxth	r3, r3
 8008646:	029b      	lsls	r3, r3, #10
 8008648:	b29a      	uxth	r2, r3
 800864a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800864e:	801a      	strh	r2, [r3, #0]
 8008650:	e04a      	b.n	80086e8 <USB_EPStartXfer+0x1bf0>
 8008652:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008656:	095b      	lsrs	r3, r3, #5
 8008658:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800865c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008660:	f003 031f 	and.w	r3, r3, #31
 8008664:	2b00      	cmp	r3, #0
 8008666:	d104      	bne.n	8008672 <USB_EPStartXfer+0x1b7a>
 8008668:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800866c:	3b01      	subs	r3, #1
 800866e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008672:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008676:	b29b      	uxth	r3, r3
 8008678:	029b      	lsls	r3, r3, #10
 800867a:	b29b      	uxth	r3, r3
 800867c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008680:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008684:	b29a      	uxth	r2, r3
 8008686:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800868a:	801a      	strh	r2, [r3, #0]
 800868c:	e02c      	b.n	80086e8 <USB_EPStartXfer+0x1bf0>
 800868e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008692:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	785b      	ldrb	r3, [r3, #1]
 800869a:	2b01      	cmp	r3, #1
 800869c:	d124      	bne.n	80086e8 <USB_EPStartXfer+0x1bf0>
 800869e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086a2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80086ac:	b29b      	uxth	r3, r3
 80086ae:	461a      	mov	r2, r3
 80086b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086b4:	4413      	add	r3, r2
 80086b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80086ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	781b      	ldrb	r3, [r3, #0]
 80086c6:	011a      	lsls	r2, r3, #4
 80086c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086cc:	4413      	add	r3, r2
 80086ce:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80086d2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80086d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086da:	b29a      	uxth	r2, r3
 80086dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086e0:	801a      	strh	r2, [r3, #0]
 80086e2:	e001      	b.n	80086e8 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 80086e4:	2301      	movs	r3, #1
 80086e6:	e03a      	b.n	800875e <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80086e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086ec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80086f0:	681a      	ldr	r2, [r3, #0]
 80086f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	781b      	ldrb	r3, [r3, #0]
 80086fe:	009b      	lsls	r3, r3, #2
 8008700:	4413      	add	r3, r2
 8008702:	881b      	ldrh	r3, [r3, #0]
 8008704:	b29b      	uxth	r3, r3
 8008706:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800870a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800870e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008712:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008716:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800871a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800871e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008722:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008726:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800872a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800872e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008732:	681a      	ldr	r2, [r3, #0]
 8008734:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008738:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	781b      	ldrb	r3, [r3, #0]
 8008740:	009b      	lsls	r3, r3, #2
 8008742:	441a      	add	r2, r3
 8008744:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008748:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800874c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008750:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008754:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008758:	b29b      	uxth	r3, r3
 800875a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800875c:	2300      	movs	r3, #0
}
 800875e:	4618      	mov	r0, r3
 8008760:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008764:	46bd      	mov	sp, r7
 8008766:	bd80      	pop	{r7, pc}

08008768 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008768:	b480      	push	{r7}
 800876a:	b085      	sub	sp, #20
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
 8008770:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	785b      	ldrb	r3, [r3, #1]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d020      	beq.n	80087bc <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800877a:	687a      	ldr	r2, [r7, #4]
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	781b      	ldrb	r3, [r3, #0]
 8008780:	009b      	lsls	r3, r3, #2
 8008782:	4413      	add	r3, r2
 8008784:	881b      	ldrh	r3, [r3, #0]
 8008786:	b29b      	uxth	r3, r3
 8008788:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800878c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008790:	81bb      	strh	r3, [r7, #12]
 8008792:	89bb      	ldrh	r3, [r7, #12]
 8008794:	f083 0310 	eor.w	r3, r3, #16
 8008798:	81bb      	strh	r3, [r7, #12]
 800879a:	687a      	ldr	r2, [r7, #4]
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	781b      	ldrb	r3, [r3, #0]
 80087a0:	009b      	lsls	r3, r3, #2
 80087a2:	441a      	add	r2, r3
 80087a4:	89bb      	ldrh	r3, [r7, #12]
 80087a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80087aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80087ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087b6:	b29b      	uxth	r3, r3
 80087b8:	8013      	strh	r3, [r2, #0]
 80087ba:	e01f      	b.n	80087fc <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80087bc:	687a      	ldr	r2, [r7, #4]
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	781b      	ldrb	r3, [r3, #0]
 80087c2:	009b      	lsls	r3, r3, #2
 80087c4:	4413      	add	r3, r2
 80087c6:	881b      	ldrh	r3, [r3, #0]
 80087c8:	b29b      	uxth	r3, r3
 80087ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80087ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087d2:	81fb      	strh	r3, [r7, #14]
 80087d4:	89fb      	ldrh	r3, [r7, #14]
 80087d6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80087da:	81fb      	strh	r3, [r7, #14]
 80087dc:	687a      	ldr	r2, [r7, #4]
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	781b      	ldrb	r3, [r3, #0]
 80087e2:	009b      	lsls	r3, r3, #2
 80087e4:	441a      	add	r2, r3
 80087e6:	89fb      	ldrh	r3, [r7, #14]
 80087e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80087ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80087f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087f8:	b29b      	uxth	r3, r3
 80087fa:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80087fc:	2300      	movs	r3, #0
}
 80087fe:	4618      	mov	r0, r3
 8008800:	3714      	adds	r7, #20
 8008802:	46bd      	mov	sp, r7
 8008804:	bc80      	pop	{r7}
 8008806:	4770      	bx	lr

08008808 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008808:	b480      	push	{r7}
 800880a:	b087      	sub	sp, #28
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
 8008810:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	7b1b      	ldrb	r3, [r3, #12]
 8008816:	2b00      	cmp	r3, #0
 8008818:	f040 809d 	bne.w	8008956 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	785b      	ldrb	r3, [r3, #1]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d04c      	beq.n	80088be <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008824:	687a      	ldr	r2, [r7, #4]
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	781b      	ldrb	r3, [r3, #0]
 800882a:	009b      	lsls	r3, r3, #2
 800882c:	4413      	add	r3, r2
 800882e:	881b      	ldrh	r3, [r3, #0]
 8008830:	823b      	strh	r3, [r7, #16]
 8008832:	8a3b      	ldrh	r3, [r7, #16]
 8008834:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008838:	2b00      	cmp	r3, #0
 800883a:	d01b      	beq.n	8008874 <USB_EPClearStall+0x6c>
 800883c:	687a      	ldr	r2, [r7, #4]
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	781b      	ldrb	r3, [r3, #0]
 8008842:	009b      	lsls	r3, r3, #2
 8008844:	4413      	add	r3, r2
 8008846:	881b      	ldrh	r3, [r3, #0]
 8008848:	b29b      	uxth	r3, r3
 800884a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800884e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008852:	81fb      	strh	r3, [r7, #14]
 8008854:	687a      	ldr	r2, [r7, #4]
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	781b      	ldrb	r3, [r3, #0]
 800885a:	009b      	lsls	r3, r3, #2
 800885c:	441a      	add	r2, r3
 800885e:	89fb      	ldrh	r3, [r7, #14]
 8008860:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008864:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008868:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800886c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008870:	b29b      	uxth	r3, r3
 8008872:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	78db      	ldrb	r3, [r3, #3]
 8008878:	2b01      	cmp	r3, #1
 800887a:	d06c      	beq.n	8008956 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800887c:	687a      	ldr	r2, [r7, #4]
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	781b      	ldrb	r3, [r3, #0]
 8008882:	009b      	lsls	r3, r3, #2
 8008884:	4413      	add	r3, r2
 8008886:	881b      	ldrh	r3, [r3, #0]
 8008888:	b29b      	uxth	r3, r3
 800888a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800888e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008892:	81bb      	strh	r3, [r7, #12]
 8008894:	89bb      	ldrh	r3, [r7, #12]
 8008896:	f083 0320 	eor.w	r3, r3, #32
 800889a:	81bb      	strh	r3, [r7, #12]
 800889c:	687a      	ldr	r2, [r7, #4]
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	781b      	ldrb	r3, [r3, #0]
 80088a2:	009b      	lsls	r3, r3, #2
 80088a4:	441a      	add	r2, r3
 80088a6:	89bb      	ldrh	r3, [r7, #12]
 80088a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80088ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80088b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80088b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088b8:	b29b      	uxth	r3, r3
 80088ba:	8013      	strh	r3, [r2, #0]
 80088bc:	e04b      	b.n	8008956 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80088be:	687a      	ldr	r2, [r7, #4]
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	781b      	ldrb	r3, [r3, #0]
 80088c4:	009b      	lsls	r3, r3, #2
 80088c6:	4413      	add	r3, r2
 80088c8:	881b      	ldrh	r3, [r3, #0]
 80088ca:	82fb      	strh	r3, [r7, #22]
 80088cc:	8afb      	ldrh	r3, [r7, #22]
 80088ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d01b      	beq.n	800890e <USB_EPClearStall+0x106>
 80088d6:	687a      	ldr	r2, [r7, #4]
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	781b      	ldrb	r3, [r3, #0]
 80088dc:	009b      	lsls	r3, r3, #2
 80088de:	4413      	add	r3, r2
 80088e0:	881b      	ldrh	r3, [r3, #0]
 80088e2:	b29b      	uxth	r3, r3
 80088e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088ec:	82bb      	strh	r3, [r7, #20]
 80088ee:	687a      	ldr	r2, [r7, #4]
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	781b      	ldrb	r3, [r3, #0]
 80088f4:	009b      	lsls	r3, r3, #2
 80088f6:	441a      	add	r2, r3
 80088f8:	8abb      	ldrh	r3, [r7, #20]
 80088fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80088fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008902:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008906:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800890a:	b29b      	uxth	r3, r3
 800890c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800890e:	687a      	ldr	r2, [r7, #4]
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	781b      	ldrb	r3, [r3, #0]
 8008914:	009b      	lsls	r3, r3, #2
 8008916:	4413      	add	r3, r2
 8008918:	881b      	ldrh	r3, [r3, #0]
 800891a:	b29b      	uxth	r3, r3
 800891c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008920:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008924:	827b      	strh	r3, [r7, #18]
 8008926:	8a7b      	ldrh	r3, [r7, #18]
 8008928:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800892c:	827b      	strh	r3, [r7, #18]
 800892e:	8a7b      	ldrh	r3, [r7, #18]
 8008930:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008934:	827b      	strh	r3, [r7, #18]
 8008936:	687a      	ldr	r2, [r7, #4]
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	781b      	ldrb	r3, [r3, #0]
 800893c:	009b      	lsls	r3, r3, #2
 800893e:	441a      	add	r2, r3
 8008940:	8a7b      	ldrh	r3, [r7, #18]
 8008942:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008946:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800894a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800894e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008952:	b29b      	uxth	r3, r3
 8008954:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008956:	2300      	movs	r3, #0
}
 8008958:	4618      	mov	r0, r3
 800895a:	371c      	adds	r7, #28
 800895c:	46bd      	mov	sp, r7
 800895e:	bc80      	pop	{r7}
 8008960:	4770      	bx	lr

08008962 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008962:	b480      	push	{r7}
 8008964:	b083      	sub	sp, #12
 8008966:	af00      	add	r7, sp, #0
 8008968:	6078      	str	r0, [r7, #4]
 800896a:	460b      	mov	r3, r1
 800896c:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800896e:	78fb      	ldrb	r3, [r7, #3]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d103      	bne.n	800897c <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2280      	movs	r2, #128	; 0x80
 8008978:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800897c:	2300      	movs	r3, #0
}
 800897e:	4618      	mov	r0, r3
 8008980:	370c      	adds	r7, #12
 8008982:	46bd      	mov	sp, r7
 8008984:	bc80      	pop	{r7}
 8008986:	4770      	bx	lr

08008988 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008988:	b480      	push	{r7}
 800898a:	b083      	sub	sp, #12
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008990:	2300      	movs	r3, #0
}
 8008992:	4618      	mov	r0, r3
 8008994:	370c      	adds	r7, #12
 8008996:	46bd      	mov	sp, r7
 8008998:	bc80      	pop	{r7}
 800899a:	4770      	bx	lr

0800899c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800899c:	b480      	push	{r7}
 800899e:	b083      	sub	sp, #12
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80089a4:	2300      	movs	r3, #0
}
 80089a6:	4618      	mov	r0, r3
 80089a8:	370c      	adds	r7, #12
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bc80      	pop	{r7}
 80089ae:	4770      	bx	lr

080089b0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80089b0:	b480      	push	{r7}
 80089b2:	b085      	sub	sp, #20
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80089be:	b29b      	uxth	r3, r3
 80089c0:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80089c2:	68fb      	ldr	r3, [r7, #12]
}
 80089c4:	4618      	mov	r0, r3
 80089c6:	3714      	adds	r7, #20
 80089c8:	46bd      	mov	sp, r7
 80089ca:	bc80      	pop	{r7}
 80089cc:	4770      	bx	lr

080089ce <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80089ce:	b480      	push	{r7}
 80089d0:	b083      	sub	sp, #12
 80089d2:	af00      	add	r7, sp, #0
 80089d4:	6078      	str	r0, [r7, #4]
 80089d6:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80089d8:	2300      	movs	r3, #0
}
 80089da:	4618      	mov	r0, r3
 80089dc:	370c      	adds	r7, #12
 80089de:	46bd      	mov	sp, r7
 80089e0:	bc80      	pop	{r7}
 80089e2:	4770      	bx	lr

080089e4 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80089e4:	b480      	push	{r7}
 80089e6:	b08d      	sub	sp, #52	; 0x34
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	60f8      	str	r0, [r7, #12]
 80089ec:	60b9      	str	r1, [r7, #8]
 80089ee:	4611      	mov	r1, r2
 80089f0:	461a      	mov	r2, r3
 80089f2:	460b      	mov	r3, r1
 80089f4:	80fb      	strh	r3, [r7, #6]
 80089f6:	4613      	mov	r3, r2
 80089f8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80089fa:	88bb      	ldrh	r3, [r7, #4]
 80089fc:	3301      	adds	r3, #1
 80089fe:	085b      	lsrs	r3, r3, #1
 8008a00:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008a06:	68bb      	ldr	r3, [r7, #8]
 8008a08:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008a0a:	88fb      	ldrh	r3, [r7, #6]
 8008a0c:	005a      	lsls	r2, r3, #1
 8008a0e:	69fb      	ldr	r3, [r7, #28]
 8008a10:	4413      	add	r3, r2
 8008a12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008a16:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8008a18:	6a3b      	ldr	r3, [r7, #32]
 8008a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a1c:	e01e      	b.n	8008a5c <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8008a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a20:	781b      	ldrb	r3, [r3, #0]
 8008a22:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8008a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a26:	3301      	adds	r3, #1
 8008a28:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8008a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a2c:	781b      	ldrb	r3, [r3, #0]
 8008a2e:	b29b      	uxth	r3, r3
 8008a30:	021b      	lsls	r3, r3, #8
 8008a32:	b29b      	uxth	r3, r3
 8008a34:	461a      	mov	r2, r3
 8008a36:	69bb      	ldr	r3, [r7, #24]
 8008a38:	4313      	orrs	r3, r2
 8008a3a:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8008a3c:	697b      	ldr	r3, [r7, #20]
 8008a3e:	b29a      	uxth	r2, r3
 8008a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a42:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a46:	3302      	adds	r3, #2
 8008a48:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8008a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a4c:	3302      	adds	r3, #2
 8008a4e:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8008a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a52:	3301      	adds	r3, #1
 8008a54:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8008a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a58:	3b01      	subs	r3, #1
 8008a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d1dd      	bne.n	8008a1e <USB_WritePMA+0x3a>
  }
}
 8008a62:	bf00      	nop
 8008a64:	bf00      	nop
 8008a66:	3734      	adds	r7, #52	; 0x34
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	bc80      	pop	{r7}
 8008a6c:	4770      	bx	lr

08008a6e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008a6e:	b480      	push	{r7}
 8008a70:	b08b      	sub	sp, #44	; 0x2c
 8008a72:	af00      	add	r7, sp, #0
 8008a74:	60f8      	str	r0, [r7, #12]
 8008a76:	60b9      	str	r1, [r7, #8]
 8008a78:	4611      	mov	r1, r2
 8008a7a:	461a      	mov	r2, r3
 8008a7c:	460b      	mov	r3, r1
 8008a7e:	80fb      	strh	r3, [r7, #6]
 8008a80:	4613      	mov	r3, r2
 8008a82:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008a84:	88bb      	ldrh	r3, [r7, #4]
 8008a86:	085b      	lsrs	r3, r3, #1
 8008a88:	b29b      	uxth	r3, r3
 8008a8a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008a90:	68bb      	ldr	r3, [r7, #8]
 8008a92:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008a94:	88fb      	ldrh	r3, [r7, #6]
 8008a96:	005a      	lsls	r2, r3, #1
 8008a98:	697b      	ldr	r3, [r7, #20]
 8008a9a:	4413      	add	r3, r2
 8008a9c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008aa0:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8008aa2:	69bb      	ldr	r3, [r7, #24]
 8008aa4:	627b      	str	r3, [r7, #36]	; 0x24
 8008aa6:	e01b      	b.n	8008ae0 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8008aa8:	6a3b      	ldr	r3, [r7, #32]
 8008aaa:	881b      	ldrh	r3, [r3, #0]
 8008aac:	b29b      	uxth	r3, r3
 8008aae:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008ab0:	6a3b      	ldr	r3, [r7, #32]
 8008ab2:	3302      	adds	r3, #2
 8008ab4:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008ab6:	693b      	ldr	r3, [r7, #16]
 8008ab8:	b2da      	uxtb	r2, r3
 8008aba:	69fb      	ldr	r3, [r7, #28]
 8008abc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008abe:	69fb      	ldr	r3, [r7, #28]
 8008ac0:	3301      	adds	r3, #1
 8008ac2:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8008ac4:	693b      	ldr	r3, [r7, #16]
 8008ac6:	0a1b      	lsrs	r3, r3, #8
 8008ac8:	b2da      	uxtb	r2, r3
 8008aca:	69fb      	ldr	r3, [r7, #28]
 8008acc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008ace:	69fb      	ldr	r3, [r7, #28]
 8008ad0:	3301      	adds	r3, #1
 8008ad2:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008ad4:	6a3b      	ldr	r3, [r7, #32]
 8008ad6:	3302      	adds	r3, #2
 8008ad8:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8008ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008adc:	3b01      	subs	r3, #1
 8008ade:	627b      	str	r3, [r7, #36]	; 0x24
 8008ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d1e0      	bne.n	8008aa8 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8008ae6:	88bb      	ldrh	r3, [r7, #4]
 8008ae8:	f003 0301 	and.w	r3, r3, #1
 8008aec:	b29b      	uxth	r3, r3
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d007      	beq.n	8008b02 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8008af2:	6a3b      	ldr	r3, [r7, #32]
 8008af4:	881b      	ldrh	r3, [r3, #0]
 8008af6:	b29b      	uxth	r3, r3
 8008af8:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008afa:	693b      	ldr	r3, [r7, #16]
 8008afc:	b2da      	uxtb	r2, r3
 8008afe:	69fb      	ldr	r3, [r7, #28]
 8008b00:	701a      	strb	r2, [r3, #0]
  }
}
 8008b02:	bf00      	nop
 8008b04:	372c      	adds	r7, #44	; 0x2c
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bc80      	pop	{r7}
 8008b0a:	4770      	bx	lr

08008b0c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b084      	sub	sp, #16
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
 8008b14:	460b      	mov	r3, r1
 8008b16:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008b18:	2300      	movs	r3, #0
 8008b1a:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	7c1b      	ldrb	r3, [r3, #16]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d115      	bne.n	8008b50 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008b24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008b28:	2202      	movs	r2, #2
 8008b2a:	2181      	movs	r1, #129	; 0x81
 8008b2c:	6878      	ldr	r0, [r7, #4]
 8008b2e:	f7f9 fab8 	bl	80020a2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	2201      	movs	r2, #1
 8008b36:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008b38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008b3c:	2202      	movs	r2, #2
 8008b3e:	2101      	movs	r1, #1
 8008b40:	6878      	ldr	r0, [r7, #4]
 8008b42:	f7f9 faae 	bl	80020a2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	2201      	movs	r2, #1
 8008b4a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8008b4e:	e012      	b.n	8008b76 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008b50:	2340      	movs	r3, #64	; 0x40
 8008b52:	2202      	movs	r2, #2
 8008b54:	2181      	movs	r1, #129	; 0x81
 8008b56:	6878      	ldr	r0, [r7, #4]
 8008b58:	f7f9 faa3 	bl	80020a2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2201      	movs	r2, #1
 8008b60:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008b62:	2340      	movs	r3, #64	; 0x40
 8008b64:	2202      	movs	r2, #2
 8008b66:	2101      	movs	r1, #1
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	f7f9 fa9a 	bl	80020a2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2201      	movs	r2, #1
 8008b72:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008b76:	2308      	movs	r3, #8
 8008b78:	2203      	movs	r2, #3
 8008b7a:	2182      	movs	r1, #130	; 0x82
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	f7f9 fa90 	bl	80020a2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2201      	movs	r2, #1
 8008b86:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008b88:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008b8c:	f7f9 fbb0 	bl	80022f0 <USBD_static_malloc>
 8008b90:	4602      	mov	r2, r0
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d102      	bne.n	8008ba8 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8008ba2:	2301      	movs	r3, #1
 8008ba4:	73fb      	strb	r3, [r7, #15]
 8008ba6:	e026      	b.n	8008bf6 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bae:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	7c1b      	ldrb	r3, [r3, #16]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d109      	bne.n	8008be6 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008bd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008bdc:	2101      	movs	r1, #1
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	f7f9 fb50 	bl	8002284 <USBD_LL_PrepareReceive>
 8008be4:	e007      	b.n	8008bf6 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008bec:	2340      	movs	r3, #64	; 0x40
 8008bee:	2101      	movs	r1, #1
 8008bf0:	6878      	ldr	r0, [r7, #4]
 8008bf2:	f7f9 fb47 	bl	8002284 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008bf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	3710      	adds	r7, #16
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	bd80      	pop	{r7, pc}

08008c00 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b084      	sub	sp, #16
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
 8008c08:	460b      	mov	r3, r1
 8008c0a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008c10:	2181      	movs	r1, #129	; 0x81
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	f7f9 fa6b 	bl	80020ee <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008c1e:	2101      	movs	r1, #1
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	f7f9 fa64 	bl	80020ee <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2200      	movs	r2, #0
 8008c2a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008c2e:	2182      	movs	r1, #130	; 0x82
 8008c30:	6878      	ldr	r0, [r7, #4]
 8008c32:	f7f9 fa5c 	bl	80020ee <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2200      	movs	r2, #0
 8008c3a:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d00e      	beq.n	8008c64 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008c4c:	685b      	ldr	r3, [r3, #4]
 8008c4e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c56:	4618      	mov	r0, r3
 8008c58:	f7f9 fb56 	bl	8002308 <USBD_static_free>
    pdev->pClassData = NULL;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2200      	movs	r2, #0
 8008c60:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8008c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c66:	4618      	mov	r0, r3
 8008c68:	3710      	adds	r7, #16
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	bd80      	pop	{r7, pc}

08008c6e <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008c6e:	b580      	push	{r7, lr}
 8008c70:	b086      	sub	sp, #24
 8008c72:	af00      	add	r7, sp, #0
 8008c74:	6078      	str	r0, [r7, #4]
 8008c76:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c7e:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8008c80:	2300      	movs	r3, #0
 8008c82:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8008c84:	2300      	movs	r3, #0
 8008c86:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8008c88:	2300      	movs	r3, #0
 8008c8a:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	781b      	ldrb	r3, [r3, #0]
 8008c90:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d039      	beq.n	8008d0c <USBD_CDC_Setup+0x9e>
 8008c98:	2b20      	cmp	r3, #32
 8008c9a:	d17f      	bne.n	8008d9c <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	88db      	ldrh	r3, [r3, #6]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d029      	beq.n	8008cf8 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	781b      	ldrb	r3, [r3, #0]
 8008ca8:	b25b      	sxtb	r3, r3
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	da11      	bge.n	8008cd2 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008cb4:	689b      	ldr	r3, [r3, #8]
 8008cb6:	683a      	ldr	r2, [r7, #0]
 8008cb8:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8008cba:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008cbc:	683a      	ldr	r2, [r7, #0]
 8008cbe:	88d2      	ldrh	r2, [r2, #6]
 8008cc0:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008cc2:	6939      	ldr	r1, [r7, #16]
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	88db      	ldrh	r3, [r3, #6]
 8008cc8:	461a      	mov	r2, r3
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f001 fa09 	bl	800a0e2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8008cd0:	e06b      	b.n	8008daa <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	785a      	ldrb	r2, [r3, #1]
 8008cd6:	693b      	ldr	r3, [r7, #16]
 8008cd8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	88db      	ldrh	r3, [r3, #6]
 8008ce0:	b2da      	uxtb	r2, r3
 8008ce2:	693b      	ldr	r3, [r7, #16]
 8008ce4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008ce8:	6939      	ldr	r1, [r7, #16]
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	88db      	ldrh	r3, [r3, #6]
 8008cee:	461a      	mov	r2, r3
 8008cf0:	6878      	ldr	r0, [r7, #4]
 8008cf2:	f001 fa24 	bl	800a13e <USBD_CtlPrepareRx>
      break;
 8008cf6:	e058      	b.n	8008daa <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008cfe:	689b      	ldr	r3, [r3, #8]
 8008d00:	683a      	ldr	r2, [r7, #0]
 8008d02:	7850      	ldrb	r0, [r2, #1]
 8008d04:	2200      	movs	r2, #0
 8008d06:	6839      	ldr	r1, [r7, #0]
 8008d08:	4798      	blx	r3
      break;
 8008d0a:	e04e      	b.n	8008daa <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	785b      	ldrb	r3, [r3, #1]
 8008d10:	2b0b      	cmp	r3, #11
 8008d12:	d02e      	beq.n	8008d72 <USBD_CDC_Setup+0x104>
 8008d14:	2b0b      	cmp	r3, #11
 8008d16:	dc38      	bgt.n	8008d8a <USBD_CDC_Setup+0x11c>
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d002      	beq.n	8008d22 <USBD_CDC_Setup+0xb4>
 8008d1c:	2b0a      	cmp	r3, #10
 8008d1e:	d014      	beq.n	8008d4a <USBD_CDC_Setup+0xdc>
 8008d20:	e033      	b.n	8008d8a <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d28:	2b03      	cmp	r3, #3
 8008d2a:	d107      	bne.n	8008d3c <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008d2c:	f107 030c 	add.w	r3, r7, #12
 8008d30:	2202      	movs	r2, #2
 8008d32:	4619      	mov	r1, r3
 8008d34:	6878      	ldr	r0, [r7, #4]
 8008d36:	f001 f9d4 	bl	800a0e2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008d3a:	e02e      	b.n	8008d9a <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008d3c:	6839      	ldr	r1, [r7, #0]
 8008d3e:	6878      	ldr	r0, [r7, #4]
 8008d40:	f001 f965 	bl	800a00e <USBD_CtlError>
            ret = USBD_FAIL;
 8008d44:	2302      	movs	r3, #2
 8008d46:	75fb      	strb	r3, [r7, #23]
          break;
 8008d48:	e027      	b.n	8008d9a <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d50:	2b03      	cmp	r3, #3
 8008d52:	d107      	bne.n	8008d64 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8008d54:	f107 030f 	add.w	r3, r7, #15
 8008d58:	2201      	movs	r2, #1
 8008d5a:	4619      	mov	r1, r3
 8008d5c:	6878      	ldr	r0, [r7, #4]
 8008d5e:	f001 f9c0 	bl	800a0e2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008d62:	e01a      	b.n	8008d9a <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008d64:	6839      	ldr	r1, [r7, #0]
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	f001 f951 	bl	800a00e <USBD_CtlError>
            ret = USBD_FAIL;
 8008d6c:	2302      	movs	r3, #2
 8008d6e:	75fb      	strb	r3, [r7, #23]
          break;
 8008d70:	e013      	b.n	8008d9a <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d78:	2b03      	cmp	r3, #3
 8008d7a:	d00d      	beq.n	8008d98 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8008d7c:	6839      	ldr	r1, [r7, #0]
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f001 f945 	bl	800a00e <USBD_CtlError>
            ret = USBD_FAIL;
 8008d84:	2302      	movs	r3, #2
 8008d86:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008d88:	e006      	b.n	8008d98 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8008d8a:	6839      	ldr	r1, [r7, #0]
 8008d8c:	6878      	ldr	r0, [r7, #4]
 8008d8e:	f001 f93e 	bl	800a00e <USBD_CtlError>
          ret = USBD_FAIL;
 8008d92:	2302      	movs	r3, #2
 8008d94:	75fb      	strb	r3, [r7, #23]
          break;
 8008d96:	e000      	b.n	8008d9a <USBD_CDC_Setup+0x12c>
          break;
 8008d98:	bf00      	nop
      }
      break;
 8008d9a:	e006      	b.n	8008daa <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008d9c:	6839      	ldr	r1, [r7, #0]
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	f001 f935 	bl	800a00e <USBD_CtlError>
      ret = USBD_FAIL;
 8008da4:	2302      	movs	r3, #2
 8008da6:	75fb      	strb	r3, [r7, #23]
      break;
 8008da8:	bf00      	nop
  }

  return ret;
 8008daa:	7dfb      	ldrb	r3, [r7, #23]
}
 8008dac:	4618      	mov	r0, r3
 8008dae:	3718      	adds	r7, #24
 8008db0:	46bd      	mov	sp, r7
 8008db2:	bd80      	pop	{r7, pc}

08008db4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b084      	sub	sp, #16
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
 8008dbc:	460b      	mov	r3, r1
 8008dbe:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008dc6:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008dce:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d03a      	beq.n	8008e50 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008dda:	78fa      	ldrb	r2, [r7, #3]
 8008ddc:	6879      	ldr	r1, [r7, #4]
 8008dde:	4613      	mov	r3, r2
 8008de0:	009b      	lsls	r3, r3, #2
 8008de2:	4413      	add	r3, r2
 8008de4:	009b      	lsls	r3, r3, #2
 8008de6:	440b      	add	r3, r1
 8008de8:	331c      	adds	r3, #28
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d029      	beq.n	8008e44 <USBD_CDC_DataIn+0x90>
 8008df0:	78fa      	ldrb	r2, [r7, #3]
 8008df2:	6879      	ldr	r1, [r7, #4]
 8008df4:	4613      	mov	r3, r2
 8008df6:	009b      	lsls	r3, r3, #2
 8008df8:	4413      	add	r3, r2
 8008dfa:	009b      	lsls	r3, r3, #2
 8008dfc:	440b      	add	r3, r1
 8008dfe:	331c      	adds	r3, #28
 8008e00:	681a      	ldr	r2, [r3, #0]
 8008e02:	78f9      	ldrb	r1, [r7, #3]
 8008e04:	68b8      	ldr	r0, [r7, #8]
 8008e06:	460b      	mov	r3, r1
 8008e08:	009b      	lsls	r3, r3, #2
 8008e0a:	440b      	add	r3, r1
 8008e0c:	00db      	lsls	r3, r3, #3
 8008e0e:	4403      	add	r3, r0
 8008e10:	3338      	adds	r3, #56	; 0x38
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	fbb2 f1f3 	udiv	r1, r2, r3
 8008e18:	fb01 f303 	mul.w	r3, r1, r3
 8008e1c:	1ad3      	subs	r3, r2, r3
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d110      	bne.n	8008e44 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008e22:	78fa      	ldrb	r2, [r7, #3]
 8008e24:	6879      	ldr	r1, [r7, #4]
 8008e26:	4613      	mov	r3, r2
 8008e28:	009b      	lsls	r3, r3, #2
 8008e2a:	4413      	add	r3, r2
 8008e2c:	009b      	lsls	r3, r3, #2
 8008e2e:	440b      	add	r3, r1
 8008e30:	331c      	adds	r3, #28
 8008e32:	2200      	movs	r2, #0
 8008e34:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008e36:	78f9      	ldrb	r1, [r7, #3]
 8008e38:	2300      	movs	r3, #0
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	6878      	ldr	r0, [r7, #4]
 8008e3e:	f7f9 f9fe 	bl	800223e <USBD_LL_Transmit>
 8008e42:	e003      	b.n	8008e4c <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	2200      	movs	r2, #0
 8008e48:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	e000      	b.n	8008e52 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8008e50:	2302      	movs	r3, #2
  }
}
 8008e52:	4618      	mov	r0, r3
 8008e54:	3710      	adds	r7, #16
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bd80      	pop	{r7, pc}

08008e5a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008e5a:	b580      	push	{r7, lr}
 8008e5c:	b084      	sub	sp, #16
 8008e5e:	af00      	add	r7, sp, #0
 8008e60:	6078      	str	r0, [r7, #4]
 8008e62:	460b      	mov	r3, r1
 8008e64:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e6c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008e6e:	78fb      	ldrb	r3, [r7, #3]
 8008e70:	4619      	mov	r1, r3
 8008e72:	6878      	ldr	r0, [r7, #4]
 8008e74:	f7f9 fa29 	bl	80022ca <USBD_LL_GetRxDataSize>
 8008e78:	4602      	mov	r2, r0
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d00d      	beq.n	8008ea6 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008e90:	68db      	ldr	r3, [r3, #12]
 8008e92:	68fa      	ldr	r2, [r7, #12]
 8008e94:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008e98:	68fa      	ldr	r2, [r7, #12]
 8008e9a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008e9e:	4611      	mov	r1, r2
 8008ea0:	4798      	blx	r3

    return USBD_OK;
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	e000      	b.n	8008ea8 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8008ea6:	2302      	movs	r3, #2
  }
}
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	3710      	adds	r7, #16
 8008eac:	46bd      	mov	sp, r7
 8008eae:	bd80      	pop	{r7, pc}

08008eb0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b084      	sub	sp, #16
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ebe:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d015      	beq.n	8008ef6 <USBD_CDC_EP0_RxReady+0x46>
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008ed0:	2bff      	cmp	r3, #255	; 0xff
 8008ed2:	d010      	beq.n	8008ef6 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008eda:	689b      	ldr	r3, [r3, #8]
 8008edc:	68fa      	ldr	r2, [r7, #12]
 8008ede:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008ee2:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008ee4:	68fa      	ldr	r2, [r7, #12]
 8008ee6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008eea:	b292      	uxth	r2, r2
 8008eec:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	22ff      	movs	r2, #255	; 0xff
 8008ef2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8008ef6:	2300      	movs	r3, #0
}
 8008ef8:	4618      	mov	r0, r3
 8008efa:	3710      	adds	r7, #16
 8008efc:	46bd      	mov	sp, r7
 8008efe:	bd80      	pop	{r7, pc}

08008f00 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008f00:	b480      	push	{r7}
 8008f02:	b083      	sub	sp, #12
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2243      	movs	r2, #67	; 0x43
 8008f0c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8008f0e:	4b03      	ldr	r3, [pc, #12]	; (8008f1c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008f10:	4618      	mov	r0, r3
 8008f12:	370c      	adds	r7, #12
 8008f14:	46bd      	mov	sp, r7
 8008f16:	bc80      	pop	{r7}
 8008f18:	4770      	bx	lr
 8008f1a:	bf00      	nop
 8008f1c:	200000f4 	.word	0x200000f4

08008f20 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008f20:	b480      	push	{r7}
 8008f22:	b083      	sub	sp, #12
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2243      	movs	r2, #67	; 0x43
 8008f2c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8008f2e:	4b03      	ldr	r3, [pc, #12]	; (8008f3c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008f30:	4618      	mov	r0, r3
 8008f32:	370c      	adds	r7, #12
 8008f34:	46bd      	mov	sp, r7
 8008f36:	bc80      	pop	{r7}
 8008f38:	4770      	bx	lr
 8008f3a:	bf00      	nop
 8008f3c:	200000b0 	.word	0x200000b0

08008f40 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008f40:	b480      	push	{r7}
 8008f42:	b083      	sub	sp, #12
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2243      	movs	r2, #67	; 0x43
 8008f4c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8008f4e:	4b03      	ldr	r3, [pc, #12]	; (8008f5c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008f50:	4618      	mov	r0, r3
 8008f52:	370c      	adds	r7, #12
 8008f54:	46bd      	mov	sp, r7
 8008f56:	bc80      	pop	{r7}
 8008f58:	4770      	bx	lr
 8008f5a:	bf00      	nop
 8008f5c:	20000138 	.word	0x20000138

08008f60 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008f60:	b480      	push	{r7}
 8008f62:	b083      	sub	sp, #12
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	220a      	movs	r2, #10
 8008f6c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8008f6e:	4b03      	ldr	r3, [pc, #12]	; (8008f7c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008f70:	4618      	mov	r0, r3
 8008f72:	370c      	adds	r7, #12
 8008f74:	46bd      	mov	sp, r7
 8008f76:	bc80      	pop	{r7}
 8008f78:	4770      	bx	lr
 8008f7a:	bf00      	nop
 8008f7c:	2000006c 	.word	0x2000006c

08008f80 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8008f80:	b480      	push	{r7}
 8008f82:	b085      	sub	sp, #20
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
 8008f88:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8008f8a:	2302      	movs	r3, #2
 8008f8c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d005      	beq.n	8008fa0 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	683a      	ldr	r2, [r7, #0]
 8008f98:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	3714      	adds	r7, #20
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	bc80      	pop	{r7}
 8008faa:	4770      	bx	lr

08008fac <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8008fac:	b480      	push	{r7}
 8008fae:	b087      	sub	sp, #28
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	60f8      	str	r0, [r7, #12]
 8008fb4:	60b9      	str	r1, [r7, #8]
 8008fb6:	4613      	mov	r3, r2
 8008fb8:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fc0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008fc2:	697b      	ldr	r3, [r7, #20]
 8008fc4:	68ba      	ldr	r2, [r7, #8]
 8008fc6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008fca:	88fa      	ldrh	r2, [r7, #6]
 8008fcc:	697b      	ldr	r3, [r7, #20]
 8008fce:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8008fd2:	2300      	movs	r3, #0
}
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	371c      	adds	r7, #28
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	bc80      	pop	{r7}
 8008fdc:	4770      	bx	lr

08008fde <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8008fde:	b480      	push	{r7}
 8008fe0:	b085      	sub	sp, #20
 8008fe2:	af00      	add	r7, sp, #0
 8008fe4:	6078      	str	r0, [r7, #4]
 8008fe6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fee:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	683a      	ldr	r2, [r7, #0]
 8008ff4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8008ff8:	2300      	movs	r3, #0
}
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	3714      	adds	r7, #20
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bc80      	pop	{r7}
 8009002:	4770      	bx	lr

08009004 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b084      	sub	sp, #16
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009012:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800901a:	2b00      	cmp	r3, #0
 800901c:	d01c      	beq.n	8009058 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009024:	2b00      	cmp	r3, #0
 8009026:	d115      	bne.n	8009054 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	2201      	movs	r2, #1
 800902c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009046:	b29b      	uxth	r3, r3
 8009048:	2181      	movs	r1, #129	; 0x81
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	f7f9 f8f7 	bl	800223e <USBD_LL_Transmit>

      return USBD_OK;
 8009050:	2300      	movs	r3, #0
 8009052:	e002      	b.n	800905a <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8009054:	2301      	movs	r3, #1
 8009056:	e000      	b.n	800905a <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8009058:	2302      	movs	r3, #2
  }
}
 800905a:	4618      	mov	r0, r3
 800905c:	3710      	adds	r7, #16
 800905e:	46bd      	mov	sp, r7
 8009060:	bd80      	pop	{r7, pc}

08009062 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009062:	b580      	push	{r7, lr}
 8009064:	b084      	sub	sp, #16
 8009066:	af00      	add	r7, sp, #0
 8009068:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009070:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009078:	2b00      	cmp	r3, #0
 800907a:	d017      	beq.n	80090ac <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	7c1b      	ldrb	r3, [r3, #16]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d109      	bne.n	8009098 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800908a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800908e:	2101      	movs	r1, #1
 8009090:	6878      	ldr	r0, [r7, #4]
 8009092:	f7f9 f8f7 	bl	8002284 <USBD_LL_PrepareReceive>
 8009096:	e007      	b.n	80090a8 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800909e:	2340      	movs	r3, #64	; 0x40
 80090a0:	2101      	movs	r1, #1
 80090a2:	6878      	ldr	r0, [r7, #4]
 80090a4:	f7f9 f8ee 	bl	8002284 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80090a8:	2300      	movs	r3, #0
 80090aa:	e000      	b.n	80090ae <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80090ac:	2302      	movs	r3, #2
  }
}
 80090ae:	4618      	mov	r0, r3
 80090b0:	3710      	adds	r7, #16
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bd80      	pop	{r7, pc}

080090b6 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80090b6:	b580      	push	{r7, lr}
 80090b8:	b084      	sub	sp, #16
 80090ba:	af00      	add	r7, sp, #0
 80090bc:	60f8      	str	r0, [r7, #12]
 80090be:	60b9      	str	r1, [r7, #8]
 80090c0:	4613      	mov	r3, r2
 80090c2:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d101      	bne.n	80090ce <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80090ca:	2302      	movs	r3, #2
 80090cc:	e01a      	b.n	8009104 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d003      	beq.n	80090e0 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	2200      	movs	r2, #0
 80090dc:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d003      	beq.n	80090ee <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	68ba      	ldr	r2, [r7, #8]
 80090ea:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	2201      	movs	r2, #1
 80090f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	79fa      	ldrb	r2, [r7, #7]
 80090fa:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80090fc:	68f8      	ldr	r0, [r7, #12]
 80090fe:	f7f8 ff5b 	bl	8001fb8 <USBD_LL_Init>

  return USBD_OK;
 8009102:	2300      	movs	r3, #0
}
 8009104:	4618      	mov	r0, r3
 8009106:	3710      	adds	r7, #16
 8009108:	46bd      	mov	sp, r7
 800910a:	bd80      	pop	{r7, pc}

0800910c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800910c:	b480      	push	{r7}
 800910e:	b085      	sub	sp, #20
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
 8009114:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8009116:	2300      	movs	r3, #0
 8009118:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d006      	beq.n	800912e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	683a      	ldr	r2, [r7, #0]
 8009124:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8009128:	2300      	movs	r3, #0
 800912a:	73fb      	strb	r3, [r7, #15]
 800912c:	e001      	b.n	8009132 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800912e:	2302      	movs	r3, #2
 8009130:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009132:	7bfb      	ldrb	r3, [r7, #15]
}
 8009134:	4618      	mov	r0, r3
 8009136:	3714      	adds	r7, #20
 8009138:	46bd      	mov	sp, r7
 800913a:	bc80      	pop	{r7}
 800913c:	4770      	bx	lr

0800913e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800913e:	b580      	push	{r7, lr}
 8009140:	b082      	sub	sp, #8
 8009142:	af00      	add	r7, sp, #0
 8009144:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8009146:	6878      	ldr	r0, [r7, #4]
 8009148:	f7f8 ff90 	bl	800206c <USBD_LL_Start>

  return USBD_OK;
 800914c:	2300      	movs	r3, #0
}
 800914e:	4618      	mov	r0, r3
 8009150:	3708      	adds	r7, #8
 8009152:	46bd      	mov	sp, r7
 8009154:	bd80      	pop	{r7, pc}

08009156 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009156:	b480      	push	{r7}
 8009158:	b083      	sub	sp, #12
 800915a:	af00      	add	r7, sp, #0
 800915c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800915e:	2300      	movs	r3, #0
}
 8009160:	4618      	mov	r0, r3
 8009162:	370c      	adds	r7, #12
 8009164:	46bd      	mov	sp, r7
 8009166:	bc80      	pop	{r7}
 8009168:	4770      	bx	lr

0800916a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800916a:	b580      	push	{r7, lr}
 800916c:	b084      	sub	sp, #16
 800916e:	af00      	add	r7, sp, #0
 8009170:	6078      	str	r0, [r7, #4]
 8009172:	460b      	mov	r3, r1
 8009174:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009176:	2302      	movs	r3, #2
 8009178:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009180:	2b00      	cmp	r3, #0
 8009182:	d00c      	beq.n	800919e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	78fa      	ldrb	r2, [r7, #3]
 800918e:	4611      	mov	r1, r2
 8009190:	6878      	ldr	r0, [r7, #4]
 8009192:	4798      	blx	r3
 8009194:	4603      	mov	r3, r0
 8009196:	2b00      	cmp	r3, #0
 8009198:	d101      	bne.n	800919e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800919a:	2300      	movs	r3, #0
 800919c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800919e:	7bfb      	ldrb	r3, [r7, #15]
}
 80091a0:	4618      	mov	r0, r3
 80091a2:	3710      	adds	r7, #16
 80091a4:	46bd      	mov	sp, r7
 80091a6:	bd80      	pop	{r7, pc}

080091a8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b082      	sub	sp, #8
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
 80091b0:	460b      	mov	r3, r1
 80091b2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091ba:	685b      	ldr	r3, [r3, #4]
 80091bc:	78fa      	ldrb	r2, [r7, #3]
 80091be:	4611      	mov	r1, r2
 80091c0:	6878      	ldr	r0, [r7, #4]
 80091c2:	4798      	blx	r3

  return USBD_OK;
 80091c4:	2300      	movs	r3, #0
}
 80091c6:	4618      	mov	r0, r3
 80091c8:	3708      	adds	r7, #8
 80091ca:	46bd      	mov	sp, r7
 80091cc:	bd80      	pop	{r7, pc}

080091ce <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80091ce:	b580      	push	{r7, lr}
 80091d0:	b082      	sub	sp, #8
 80091d2:	af00      	add	r7, sp, #0
 80091d4:	6078      	str	r0, [r7, #4]
 80091d6:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80091de:	6839      	ldr	r1, [r7, #0]
 80091e0:	4618      	mov	r0, r3
 80091e2:	f000 fed8 	bl	8009f96 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	2201      	movs	r2, #1
 80091ea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80091f4:	461a      	mov	r2, r3
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009202:	f003 031f 	and.w	r3, r3, #31
 8009206:	2b02      	cmp	r3, #2
 8009208:	d016      	beq.n	8009238 <USBD_LL_SetupStage+0x6a>
 800920a:	2b02      	cmp	r3, #2
 800920c:	d81c      	bhi.n	8009248 <USBD_LL_SetupStage+0x7a>
 800920e:	2b00      	cmp	r3, #0
 8009210:	d002      	beq.n	8009218 <USBD_LL_SetupStage+0x4a>
 8009212:	2b01      	cmp	r3, #1
 8009214:	d008      	beq.n	8009228 <USBD_LL_SetupStage+0x5a>
 8009216:	e017      	b.n	8009248 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800921e:	4619      	mov	r1, r3
 8009220:	6878      	ldr	r0, [r7, #4]
 8009222:	f000 f9cb 	bl	80095bc <USBD_StdDevReq>
      break;
 8009226:	e01a      	b.n	800925e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800922e:	4619      	mov	r1, r3
 8009230:	6878      	ldr	r0, [r7, #4]
 8009232:	f000 fa2d 	bl	8009690 <USBD_StdItfReq>
      break;
 8009236:	e012      	b.n	800925e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800923e:	4619      	mov	r1, r3
 8009240:	6878      	ldr	r0, [r7, #4]
 8009242:	f000 fa6d 	bl	8009720 <USBD_StdEPReq>
      break;
 8009246:	e00a      	b.n	800925e <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800924e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009252:	b2db      	uxtb	r3, r3
 8009254:	4619      	mov	r1, r3
 8009256:	6878      	ldr	r0, [r7, #4]
 8009258:	f7f8 ff68 	bl	800212c <USBD_LL_StallEP>
      break;
 800925c:	bf00      	nop
  }

  return USBD_OK;
 800925e:	2300      	movs	r3, #0
}
 8009260:	4618      	mov	r0, r3
 8009262:	3708      	adds	r7, #8
 8009264:	46bd      	mov	sp, r7
 8009266:	bd80      	pop	{r7, pc}

08009268 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b086      	sub	sp, #24
 800926c:	af00      	add	r7, sp, #0
 800926e:	60f8      	str	r0, [r7, #12]
 8009270:	460b      	mov	r3, r1
 8009272:	607a      	str	r2, [r7, #4]
 8009274:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009276:	7afb      	ldrb	r3, [r7, #11]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d14b      	bne.n	8009314 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009282:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800928a:	2b03      	cmp	r3, #3
 800928c:	d134      	bne.n	80092f8 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800928e:	697b      	ldr	r3, [r7, #20]
 8009290:	68da      	ldr	r2, [r3, #12]
 8009292:	697b      	ldr	r3, [r7, #20]
 8009294:	691b      	ldr	r3, [r3, #16]
 8009296:	429a      	cmp	r2, r3
 8009298:	d919      	bls.n	80092ce <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800929a:	697b      	ldr	r3, [r7, #20]
 800929c:	68da      	ldr	r2, [r3, #12]
 800929e:	697b      	ldr	r3, [r7, #20]
 80092a0:	691b      	ldr	r3, [r3, #16]
 80092a2:	1ad2      	subs	r2, r2, r3
 80092a4:	697b      	ldr	r3, [r7, #20]
 80092a6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80092a8:	697b      	ldr	r3, [r7, #20]
 80092aa:	68da      	ldr	r2, [r3, #12]
 80092ac:	697b      	ldr	r3, [r7, #20]
 80092ae:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80092b0:	429a      	cmp	r2, r3
 80092b2:	d203      	bcs.n	80092bc <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80092b4:	697b      	ldr	r3, [r7, #20]
 80092b6:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80092b8:	b29b      	uxth	r3, r3
 80092ba:	e002      	b.n	80092c2 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80092bc:	697b      	ldr	r3, [r7, #20]
 80092be:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80092c0:	b29b      	uxth	r3, r3
 80092c2:	461a      	mov	r2, r3
 80092c4:	6879      	ldr	r1, [r7, #4]
 80092c6:	68f8      	ldr	r0, [r7, #12]
 80092c8:	f000 ff57 	bl	800a17a <USBD_CtlContinueRx>
 80092cc:	e038      	b.n	8009340 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092d4:	691b      	ldr	r3, [r3, #16]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d00a      	beq.n	80092f0 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80092e0:	2b03      	cmp	r3, #3
 80092e2:	d105      	bne.n	80092f0 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092ea:	691b      	ldr	r3, [r3, #16]
 80092ec:	68f8      	ldr	r0, [r7, #12]
 80092ee:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80092f0:	68f8      	ldr	r0, [r7, #12]
 80092f2:	f000 ff54 	bl	800a19e <USBD_CtlSendStatus>
 80092f6:	e023      	b.n	8009340 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80092fe:	2b05      	cmp	r3, #5
 8009300:	d11e      	bne.n	8009340 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	2200      	movs	r2, #0
 8009306:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800930a:	2100      	movs	r1, #0
 800930c:	68f8      	ldr	r0, [r7, #12]
 800930e:	f7f8 ff0d 	bl	800212c <USBD_LL_StallEP>
 8009312:	e015      	b.n	8009340 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800931a:	699b      	ldr	r3, [r3, #24]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d00d      	beq.n	800933c <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8009326:	2b03      	cmp	r3, #3
 8009328:	d108      	bne.n	800933c <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009330:	699b      	ldr	r3, [r3, #24]
 8009332:	7afa      	ldrb	r2, [r7, #11]
 8009334:	4611      	mov	r1, r2
 8009336:	68f8      	ldr	r0, [r7, #12]
 8009338:	4798      	blx	r3
 800933a:	e001      	b.n	8009340 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800933c:	2302      	movs	r3, #2
 800933e:	e000      	b.n	8009342 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8009340:	2300      	movs	r3, #0
}
 8009342:	4618      	mov	r0, r3
 8009344:	3718      	adds	r7, #24
 8009346:	46bd      	mov	sp, r7
 8009348:	bd80      	pop	{r7, pc}

0800934a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800934a:	b580      	push	{r7, lr}
 800934c:	b086      	sub	sp, #24
 800934e:	af00      	add	r7, sp, #0
 8009350:	60f8      	str	r0, [r7, #12]
 8009352:	460b      	mov	r3, r1
 8009354:	607a      	str	r2, [r7, #4]
 8009356:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009358:	7afb      	ldrb	r3, [r7, #11]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d17f      	bne.n	800945e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	3314      	adds	r3, #20
 8009362:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800936a:	2b02      	cmp	r3, #2
 800936c:	d15c      	bne.n	8009428 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800936e:	697b      	ldr	r3, [r7, #20]
 8009370:	68da      	ldr	r2, [r3, #12]
 8009372:	697b      	ldr	r3, [r7, #20]
 8009374:	691b      	ldr	r3, [r3, #16]
 8009376:	429a      	cmp	r2, r3
 8009378:	d915      	bls.n	80093a6 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800937a:	697b      	ldr	r3, [r7, #20]
 800937c:	68da      	ldr	r2, [r3, #12]
 800937e:	697b      	ldr	r3, [r7, #20]
 8009380:	691b      	ldr	r3, [r3, #16]
 8009382:	1ad2      	subs	r2, r2, r3
 8009384:	697b      	ldr	r3, [r7, #20]
 8009386:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8009388:	697b      	ldr	r3, [r7, #20]
 800938a:	68db      	ldr	r3, [r3, #12]
 800938c:	b29b      	uxth	r3, r3
 800938e:	461a      	mov	r2, r3
 8009390:	6879      	ldr	r1, [r7, #4]
 8009392:	68f8      	ldr	r0, [r7, #12]
 8009394:	f000 fec1 	bl	800a11a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009398:	2300      	movs	r3, #0
 800939a:	2200      	movs	r2, #0
 800939c:	2100      	movs	r1, #0
 800939e:	68f8      	ldr	r0, [r7, #12]
 80093a0:	f7f8 ff70 	bl	8002284 <USBD_LL_PrepareReceive>
 80093a4:	e04e      	b.n	8009444 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80093a6:	697b      	ldr	r3, [r7, #20]
 80093a8:	689b      	ldr	r3, [r3, #8]
 80093aa:	697a      	ldr	r2, [r7, #20]
 80093ac:	6912      	ldr	r2, [r2, #16]
 80093ae:	fbb3 f1f2 	udiv	r1, r3, r2
 80093b2:	fb01 f202 	mul.w	r2, r1, r2
 80093b6:	1a9b      	subs	r3, r3, r2
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d11c      	bne.n	80093f6 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80093bc:	697b      	ldr	r3, [r7, #20]
 80093be:	689a      	ldr	r2, [r3, #8]
 80093c0:	697b      	ldr	r3, [r7, #20]
 80093c2:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80093c4:	429a      	cmp	r2, r3
 80093c6:	d316      	bcc.n	80093f6 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80093c8:	697b      	ldr	r3, [r7, #20]
 80093ca:	689a      	ldr	r2, [r3, #8]
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80093d2:	429a      	cmp	r2, r3
 80093d4:	d20f      	bcs.n	80093f6 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80093d6:	2200      	movs	r2, #0
 80093d8:	2100      	movs	r1, #0
 80093da:	68f8      	ldr	r0, [r7, #12]
 80093dc:	f000 fe9d 	bl	800a11a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	2200      	movs	r2, #0
 80093e4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80093e8:	2300      	movs	r3, #0
 80093ea:	2200      	movs	r2, #0
 80093ec:	2100      	movs	r1, #0
 80093ee:	68f8      	ldr	r0, [r7, #12]
 80093f0:	f7f8 ff48 	bl	8002284 <USBD_LL_PrepareReceive>
 80093f4:	e026      	b.n	8009444 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093fc:	68db      	ldr	r3, [r3, #12]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d00a      	beq.n	8009418 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009408:	2b03      	cmp	r3, #3
 800940a:	d105      	bne.n	8009418 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009412:	68db      	ldr	r3, [r3, #12]
 8009414:	68f8      	ldr	r0, [r7, #12]
 8009416:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8009418:	2180      	movs	r1, #128	; 0x80
 800941a:	68f8      	ldr	r0, [r7, #12]
 800941c:	f7f8 fe86 	bl	800212c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8009420:	68f8      	ldr	r0, [r7, #12]
 8009422:	f000 fecf 	bl	800a1c4 <USBD_CtlReceiveStatus>
 8009426:	e00d      	b.n	8009444 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800942e:	2b04      	cmp	r3, #4
 8009430:	d004      	beq.n	800943c <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009438:	2b00      	cmp	r3, #0
 800943a:	d103      	bne.n	8009444 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800943c:	2180      	movs	r1, #128	; 0x80
 800943e:	68f8      	ldr	r0, [r7, #12]
 8009440:	f7f8 fe74 	bl	800212c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800944a:	2b01      	cmp	r3, #1
 800944c:	d11d      	bne.n	800948a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800944e:	68f8      	ldr	r0, [r7, #12]
 8009450:	f7ff fe81 	bl	8009156 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	2200      	movs	r2, #0
 8009458:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800945c:	e015      	b.n	800948a <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009464:	695b      	ldr	r3, [r3, #20]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d00d      	beq.n	8009486 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009470:	2b03      	cmp	r3, #3
 8009472:	d108      	bne.n	8009486 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800947a:	695b      	ldr	r3, [r3, #20]
 800947c:	7afa      	ldrb	r2, [r7, #11]
 800947e:	4611      	mov	r1, r2
 8009480:	68f8      	ldr	r0, [r7, #12]
 8009482:	4798      	blx	r3
 8009484:	e001      	b.n	800948a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009486:	2302      	movs	r3, #2
 8009488:	e000      	b.n	800948c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800948a:	2300      	movs	r3, #0
}
 800948c:	4618      	mov	r0, r3
 800948e:	3718      	adds	r7, #24
 8009490:	46bd      	mov	sp, r7
 8009492:	bd80      	pop	{r7, pc}

08009494 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b082      	sub	sp, #8
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800949c:	2340      	movs	r3, #64	; 0x40
 800949e:	2200      	movs	r2, #0
 80094a0:	2100      	movs	r1, #0
 80094a2:	6878      	ldr	r0, [r7, #4]
 80094a4:	f7f8 fdfd 	bl	80020a2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	2201      	movs	r2, #1
 80094ac:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2240      	movs	r2, #64	; 0x40
 80094b4:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80094b8:	2340      	movs	r3, #64	; 0x40
 80094ba:	2200      	movs	r2, #0
 80094bc:	2180      	movs	r1, #128	; 0x80
 80094be:	6878      	ldr	r0, [r7, #4]
 80094c0:	f7f8 fdef 	bl	80020a2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2201      	movs	r2, #1
 80094c8:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	2240      	movs	r2, #64	; 0x40
 80094ce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2201      	movs	r2, #1
 80094d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2200      	movs	r2, #0
 80094dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2200      	movs	r2, #0
 80094e4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	2200      	movs	r2, #0
 80094ea:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d009      	beq.n	800950c <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094fe:	685b      	ldr	r3, [r3, #4]
 8009500:	687a      	ldr	r2, [r7, #4]
 8009502:	6852      	ldr	r2, [r2, #4]
 8009504:	b2d2      	uxtb	r2, r2
 8009506:	4611      	mov	r1, r2
 8009508:	6878      	ldr	r0, [r7, #4]
 800950a:	4798      	blx	r3
  }

  return USBD_OK;
 800950c:	2300      	movs	r3, #0
}
 800950e:	4618      	mov	r0, r3
 8009510:	3708      	adds	r7, #8
 8009512:	46bd      	mov	sp, r7
 8009514:	bd80      	pop	{r7, pc}

08009516 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009516:	b480      	push	{r7}
 8009518:	b083      	sub	sp, #12
 800951a:	af00      	add	r7, sp, #0
 800951c:	6078      	str	r0, [r7, #4]
 800951e:	460b      	mov	r3, r1
 8009520:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	78fa      	ldrb	r2, [r7, #3]
 8009526:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009528:	2300      	movs	r3, #0
}
 800952a:	4618      	mov	r0, r3
 800952c:	370c      	adds	r7, #12
 800952e:	46bd      	mov	sp, r7
 8009530:	bc80      	pop	{r7}
 8009532:	4770      	bx	lr

08009534 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009534:	b480      	push	{r7}
 8009536:	b083      	sub	sp, #12
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2204      	movs	r2, #4
 800954c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009550:	2300      	movs	r3, #0
}
 8009552:	4618      	mov	r0, r3
 8009554:	370c      	adds	r7, #12
 8009556:	46bd      	mov	sp, r7
 8009558:	bc80      	pop	{r7}
 800955a:	4770      	bx	lr

0800955c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800955c:	b480      	push	{r7}
 800955e:	b083      	sub	sp, #12
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800956a:	2b04      	cmp	r3, #4
 800956c:	d105      	bne.n	800957a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800957a:	2300      	movs	r3, #0
}
 800957c:	4618      	mov	r0, r3
 800957e:	370c      	adds	r7, #12
 8009580:	46bd      	mov	sp, r7
 8009582:	bc80      	pop	{r7}
 8009584:	4770      	bx	lr

08009586 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009586:	b580      	push	{r7, lr}
 8009588:	b082      	sub	sp, #8
 800958a:	af00      	add	r7, sp, #0
 800958c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009594:	2b03      	cmp	r3, #3
 8009596:	d10b      	bne.n	80095b0 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800959e:	69db      	ldr	r3, [r3, #28]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d005      	beq.n	80095b0 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095aa:	69db      	ldr	r3, [r3, #28]
 80095ac:	6878      	ldr	r0, [r7, #4]
 80095ae:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80095b0:	2300      	movs	r3, #0
}
 80095b2:	4618      	mov	r0, r3
 80095b4:	3708      	adds	r7, #8
 80095b6:	46bd      	mov	sp, r7
 80095b8:	bd80      	pop	{r7, pc}
	...

080095bc <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b084      	sub	sp, #16
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
 80095c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80095c6:	2300      	movs	r3, #0
 80095c8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80095ca:	683b      	ldr	r3, [r7, #0]
 80095cc:	781b      	ldrb	r3, [r3, #0]
 80095ce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80095d2:	2b40      	cmp	r3, #64	; 0x40
 80095d4:	d005      	beq.n	80095e2 <USBD_StdDevReq+0x26>
 80095d6:	2b40      	cmp	r3, #64	; 0x40
 80095d8:	d84f      	bhi.n	800967a <USBD_StdDevReq+0xbe>
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d009      	beq.n	80095f2 <USBD_StdDevReq+0x36>
 80095de:	2b20      	cmp	r3, #32
 80095e0:	d14b      	bne.n	800967a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095e8:	689b      	ldr	r3, [r3, #8]
 80095ea:	6839      	ldr	r1, [r7, #0]
 80095ec:	6878      	ldr	r0, [r7, #4]
 80095ee:	4798      	blx	r3
      break;
 80095f0:	e048      	b.n	8009684 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	785b      	ldrb	r3, [r3, #1]
 80095f6:	2b09      	cmp	r3, #9
 80095f8:	d839      	bhi.n	800966e <USBD_StdDevReq+0xb2>
 80095fa:	a201      	add	r2, pc, #4	; (adr r2, 8009600 <USBD_StdDevReq+0x44>)
 80095fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009600:	08009651 	.word	0x08009651
 8009604:	08009665 	.word	0x08009665
 8009608:	0800966f 	.word	0x0800966f
 800960c:	0800965b 	.word	0x0800965b
 8009610:	0800966f 	.word	0x0800966f
 8009614:	08009633 	.word	0x08009633
 8009618:	08009629 	.word	0x08009629
 800961c:	0800966f 	.word	0x0800966f
 8009620:	08009647 	.word	0x08009647
 8009624:	0800963d 	.word	0x0800963d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009628:	6839      	ldr	r1, [r7, #0]
 800962a:	6878      	ldr	r0, [r7, #4]
 800962c:	f000 f9dc 	bl	80099e8 <USBD_GetDescriptor>
          break;
 8009630:	e022      	b.n	8009678 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009632:	6839      	ldr	r1, [r7, #0]
 8009634:	6878      	ldr	r0, [r7, #4]
 8009636:	f000 fb3f 	bl	8009cb8 <USBD_SetAddress>
          break;
 800963a:	e01d      	b.n	8009678 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800963c:	6839      	ldr	r1, [r7, #0]
 800963e:	6878      	ldr	r0, [r7, #4]
 8009640:	f000 fb7e 	bl	8009d40 <USBD_SetConfig>
          break;
 8009644:	e018      	b.n	8009678 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009646:	6839      	ldr	r1, [r7, #0]
 8009648:	6878      	ldr	r0, [r7, #4]
 800964a:	f000 fc07 	bl	8009e5c <USBD_GetConfig>
          break;
 800964e:	e013      	b.n	8009678 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009650:	6839      	ldr	r1, [r7, #0]
 8009652:	6878      	ldr	r0, [r7, #4]
 8009654:	f000 fc37 	bl	8009ec6 <USBD_GetStatus>
          break;
 8009658:	e00e      	b.n	8009678 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800965a:	6839      	ldr	r1, [r7, #0]
 800965c:	6878      	ldr	r0, [r7, #4]
 800965e:	f000 fc65 	bl	8009f2c <USBD_SetFeature>
          break;
 8009662:	e009      	b.n	8009678 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009664:	6839      	ldr	r1, [r7, #0]
 8009666:	6878      	ldr	r0, [r7, #4]
 8009668:	f000 fc74 	bl	8009f54 <USBD_ClrFeature>
          break;
 800966c:	e004      	b.n	8009678 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800966e:	6839      	ldr	r1, [r7, #0]
 8009670:	6878      	ldr	r0, [r7, #4]
 8009672:	f000 fccc 	bl	800a00e <USBD_CtlError>
          break;
 8009676:	bf00      	nop
      }
      break;
 8009678:	e004      	b.n	8009684 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800967a:	6839      	ldr	r1, [r7, #0]
 800967c:	6878      	ldr	r0, [r7, #4]
 800967e:	f000 fcc6 	bl	800a00e <USBD_CtlError>
      break;
 8009682:	bf00      	nop
  }

  return ret;
 8009684:	7bfb      	ldrb	r3, [r7, #15]
}
 8009686:	4618      	mov	r0, r3
 8009688:	3710      	adds	r7, #16
 800968a:	46bd      	mov	sp, r7
 800968c:	bd80      	pop	{r7, pc}
 800968e:	bf00      	nop

08009690 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b084      	sub	sp, #16
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
 8009698:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800969a:	2300      	movs	r3, #0
 800969c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800969e:	683b      	ldr	r3, [r7, #0]
 80096a0:	781b      	ldrb	r3, [r3, #0]
 80096a2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80096a6:	2b40      	cmp	r3, #64	; 0x40
 80096a8:	d005      	beq.n	80096b6 <USBD_StdItfReq+0x26>
 80096aa:	2b40      	cmp	r3, #64	; 0x40
 80096ac:	d82e      	bhi.n	800970c <USBD_StdItfReq+0x7c>
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d001      	beq.n	80096b6 <USBD_StdItfReq+0x26>
 80096b2:	2b20      	cmp	r3, #32
 80096b4:	d12a      	bne.n	800970c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096bc:	3b01      	subs	r3, #1
 80096be:	2b02      	cmp	r3, #2
 80096c0:	d81d      	bhi.n	80096fe <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	889b      	ldrh	r3, [r3, #4]
 80096c6:	b2db      	uxtb	r3, r3
 80096c8:	2b01      	cmp	r3, #1
 80096ca:	d813      	bhi.n	80096f4 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096d2:	689b      	ldr	r3, [r3, #8]
 80096d4:	6839      	ldr	r1, [r7, #0]
 80096d6:	6878      	ldr	r0, [r7, #4]
 80096d8:	4798      	blx	r3
 80096da:	4603      	mov	r3, r0
 80096dc:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	88db      	ldrh	r3, [r3, #6]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d110      	bne.n	8009708 <USBD_StdItfReq+0x78>
 80096e6:	7bfb      	ldrb	r3, [r7, #15]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d10d      	bne.n	8009708 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80096ec:	6878      	ldr	r0, [r7, #4]
 80096ee:	f000 fd56 	bl	800a19e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80096f2:	e009      	b.n	8009708 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80096f4:	6839      	ldr	r1, [r7, #0]
 80096f6:	6878      	ldr	r0, [r7, #4]
 80096f8:	f000 fc89 	bl	800a00e <USBD_CtlError>
          break;
 80096fc:	e004      	b.n	8009708 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80096fe:	6839      	ldr	r1, [r7, #0]
 8009700:	6878      	ldr	r0, [r7, #4]
 8009702:	f000 fc84 	bl	800a00e <USBD_CtlError>
          break;
 8009706:	e000      	b.n	800970a <USBD_StdItfReq+0x7a>
          break;
 8009708:	bf00      	nop
      }
      break;
 800970a:	e004      	b.n	8009716 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800970c:	6839      	ldr	r1, [r7, #0]
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	f000 fc7d 	bl	800a00e <USBD_CtlError>
      break;
 8009714:	bf00      	nop
  }

  return USBD_OK;
 8009716:	2300      	movs	r3, #0
}
 8009718:	4618      	mov	r0, r3
 800971a:	3710      	adds	r7, #16
 800971c:	46bd      	mov	sp, r7
 800971e:	bd80      	pop	{r7, pc}

08009720 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b084      	sub	sp, #16
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
 8009728:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800972a:	2300      	movs	r3, #0
 800972c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800972e:	683b      	ldr	r3, [r7, #0]
 8009730:	889b      	ldrh	r3, [r3, #4]
 8009732:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	781b      	ldrb	r3, [r3, #0]
 8009738:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800973c:	2b40      	cmp	r3, #64	; 0x40
 800973e:	d007      	beq.n	8009750 <USBD_StdEPReq+0x30>
 8009740:	2b40      	cmp	r3, #64	; 0x40
 8009742:	f200 8146 	bhi.w	80099d2 <USBD_StdEPReq+0x2b2>
 8009746:	2b00      	cmp	r3, #0
 8009748:	d00a      	beq.n	8009760 <USBD_StdEPReq+0x40>
 800974a:	2b20      	cmp	r3, #32
 800974c:	f040 8141 	bne.w	80099d2 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009756:	689b      	ldr	r3, [r3, #8]
 8009758:	6839      	ldr	r1, [r7, #0]
 800975a:	6878      	ldr	r0, [r7, #4]
 800975c:	4798      	blx	r3
      break;
 800975e:	e13d      	b.n	80099dc <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	781b      	ldrb	r3, [r3, #0]
 8009764:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009768:	2b20      	cmp	r3, #32
 800976a:	d10a      	bne.n	8009782 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009772:	689b      	ldr	r3, [r3, #8]
 8009774:	6839      	ldr	r1, [r7, #0]
 8009776:	6878      	ldr	r0, [r7, #4]
 8009778:	4798      	blx	r3
 800977a:	4603      	mov	r3, r0
 800977c:	73fb      	strb	r3, [r7, #15]

        return ret;
 800977e:	7bfb      	ldrb	r3, [r7, #15]
 8009780:	e12d      	b.n	80099de <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	785b      	ldrb	r3, [r3, #1]
 8009786:	2b03      	cmp	r3, #3
 8009788:	d007      	beq.n	800979a <USBD_StdEPReq+0x7a>
 800978a:	2b03      	cmp	r3, #3
 800978c:	f300 811b 	bgt.w	80099c6 <USBD_StdEPReq+0x2a6>
 8009790:	2b00      	cmp	r3, #0
 8009792:	d072      	beq.n	800987a <USBD_StdEPReq+0x15a>
 8009794:	2b01      	cmp	r3, #1
 8009796:	d03a      	beq.n	800980e <USBD_StdEPReq+0xee>
 8009798:	e115      	b.n	80099c6 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097a0:	2b02      	cmp	r3, #2
 80097a2:	d002      	beq.n	80097aa <USBD_StdEPReq+0x8a>
 80097a4:	2b03      	cmp	r3, #3
 80097a6:	d015      	beq.n	80097d4 <USBD_StdEPReq+0xb4>
 80097a8:	e02b      	b.n	8009802 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80097aa:	7bbb      	ldrb	r3, [r7, #14]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d00c      	beq.n	80097ca <USBD_StdEPReq+0xaa>
 80097b0:	7bbb      	ldrb	r3, [r7, #14]
 80097b2:	2b80      	cmp	r3, #128	; 0x80
 80097b4:	d009      	beq.n	80097ca <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80097b6:	7bbb      	ldrb	r3, [r7, #14]
 80097b8:	4619      	mov	r1, r3
 80097ba:	6878      	ldr	r0, [r7, #4]
 80097bc:	f7f8 fcb6 	bl	800212c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80097c0:	2180      	movs	r1, #128	; 0x80
 80097c2:	6878      	ldr	r0, [r7, #4]
 80097c4:	f7f8 fcb2 	bl	800212c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80097c8:	e020      	b.n	800980c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80097ca:	6839      	ldr	r1, [r7, #0]
 80097cc:	6878      	ldr	r0, [r7, #4]
 80097ce:	f000 fc1e 	bl	800a00e <USBD_CtlError>
              break;
 80097d2:	e01b      	b.n	800980c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80097d4:	683b      	ldr	r3, [r7, #0]
 80097d6:	885b      	ldrh	r3, [r3, #2]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d10e      	bne.n	80097fa <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80097dc:	7bbb      	ldrb	r3, [r7, #14]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d00b      	beq.n	80097fa <USBD_StdEPReq+0xda>
 80097e2:	7bbb      	ldrb	r3, [r7, #14]
 80097e4:	2b80      	cmp	r3, #128	; 0x80
 80097e6:	d008      	beq.n	80097fa <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	88db      	ldrh	r3, [r3, #6]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d104      	bne.n	80097fa <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80097f0:	7bbb      	ldrb	r3, [r7, #14]
 80097f2:	4619      	mov	r1, r3
 80097f4:	6878      	ldr	r0, [r7, #4]
 80097f6:	f7f8 fc99 	bl	800212c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80097fa:	6878      	ldr	r0, [r7, #4]
 80097fc:	f000 fccf 	bl	800a19e <USBD_CtlSendStatus>

              break;
 8009800:	e004      	b.n	800980c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8009802:	6839      	ldr	r1, [r7, #0]
 8009804:	6878      	ldr	r0, [r7, #4]
 8009806:	f000 fc02 	bl	800a00e <USBD_CtlError>
              break;
 800980a:	bf00      	nop
          }
          break;
 800980c:	e0e0      	b.n	80099d0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009814:	2b02      	cmp	r3, #2
 8009816:	d002      	beq.n	800981e <USBD_StdEPReq+0xfe>
 8009818:	2b03      	cmp	r3, #3
 800981a:	d015      	beq.n	8009848 <USBD_StdEPReq+0x128>
 800981c:	e026      	b.n	800986c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800981e:	7bbb      	ldrb	r3, [r7, #14]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d00c      	beq.n	800983e <USBD_StdEPReq+0x11e>
 8009824:	7bbb      	ldrb	r3, [r7, #14]
 8009826:	2b80      	cmp	r3, #128	; 0x80
 8009828:	d009      	beq.n	800983e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800982a:	7bbb      	ldrb	r3, [r7, #14]
 800982c:	4619      	mov	r1, r3
 800982e:	6878      	ldr	r0, [r7, #4]
 8009830:	f7f8 fc7c 	bl	800212c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009834:	2180      	movs	r1, #128	; 0x80
 8009836:	6878      	ldr	r0, [r7, #4]
 8009838:	f7f8 fc78 	bl	800212c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800983c:	e01c      	b.n	8009878 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800983e:	6839      	ldr	r1, [r7, #0]
 8009840:	6878      	ldr	r0, [r7, #4]
 8009842:	f000 fbe4 	bl	800a00e <USBD_CtlError>
              break;
 8009846:	e017      	b.n	8009878 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009848:	683b      	ldr	r3, [r7, #0]
 800984a:	885b      	ldrh	r3, [r3, #2]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d112      	bne.n	8009876 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009850:	7bbb      	ldrb	r3, [r7, #14]
 8009852:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009856:	2b00      	cmp	r3, #0
 8009858:	d004      	beq.n	8009864 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800985a:	7bbb      	ldrb	r3, [r7, #14]
 800985c:	4619      	mov	r1, r3
 800985e:	6878      	ldr	r0, [r7, #4]
 8009860:	f7f8 fc83 	bl	800216a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8009864:	6878      	ldr	r0, [r7, #4]
 8009866:	f000 fc9a 	bl	800a19e <USBD_CtlSendStatus>
              }
              break;
 800986a:	e004      	b.n	8009876 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800986c:	6839      	ldr	r1, [r7, #0]
 800986e:	6878      	ldr	r0, [r7, #4]
 8009870:	f000 fbcd 	bl	800a00e <USBD_CtlError>
              break;
 8009874:	e000      	b.n	8009878 <USBD_StdEPReq+0x158>
              break;
 8009876:	bf00      	nop
          }
          break;
 8009878:	e0aa      	b.n	80099d0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009880:	2b02      	cmp	r3, #2
 8009882:	d002      	beq.n	800988a <USBD_StdEPReq+0x16a>
 8009884:	2b03      	cmp	r3, #3
 8009886:	d032      	beq.n	80098ee <USBD_StdEPReq+0x1ce>
 8009888:	e097      	b.n	80099ba <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800988a:	7bbb      	ldrb	r3, [r7, #14]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d007      	beq.n	80098a0 <USBD_StdEPReq+0x180>
 8009890:	7bbb      	ldrb	r3, [r7, #14]
 8009892:	2b80      	cmp	r3, #128	; 0x80
 8009894:	d004      	beq.n	80098a0 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8009896:	6839      	ldr	r1, [r7, #0]
 8009898:	6878      	ldr	r0, [r7, #4]
 800989a:	f000 fbb8 	bl	800a00e <USBD_CtlError>
                break;
 800989e:	e091      	b.n	80099c4 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80098a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	da0b      	bge.n	80098c0 <USBD_StdEPReq+0x1a0>
 80098a8:	7bbb      	ldrb	r3, [r7, #14]
 80098aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80098ae:	4613      	mov	r3, r2
 80098b0:	009b      	lsls	r3, r3, #2
 80098b2:	4413      	add	r3, r2
 80098b4:	009b      	lsls	r3, r3, #2
 80098b6:	3310      	adds	r3, #16
 80098b8:	687a      	ldr	r2, [r7, #4]
 80098ba:	4413      	add	r3, r2
 80098bc:	3304      	adds	r3, #4
 80098be:	e00b      	b.n	80098d8 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80098c0:	7bbb      	ldrb	r3, [r7, #14]
 80098c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80098c6:	4613      	mov	r3, r2
 80098c8:	009b      	lsls	r3, r3, #2
 80098ca:	4413      	add	r3, r2
 80098cc:	009b      	lsls	r3, r3, #2
 80098ce:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80098d2:	687a      	ldr	r2, [r7, #4]
 80098d4:	4413      	add	r3, r2
 80098d6:	3304      	adds	r3, #4
 80098d8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80098da:	68bb      	ldr	r3, [r7, #8]
 80098dc:	2200      	movs	r2, #0
 80098de:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80098e0:	68bb      	ldr	r3, [r7, #8]
 80098e2:	2202      	movs	r2, #2
 80098e4:	4619      	mov	r1, r3
 80098e6:	6878      	ldr	r0, [r7, #4]
 80098e8:	f000 fbfb 	bl	800a0e2 <USBD_CtlSendData>
              break;
 80098ec:	e06a      	b.n	80099c4 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80098ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	da11      	bge.n	800991a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80098f6:	7bbb      	ldrb	r3, [r7, #14]
 80098f8:	f003 020f 	and.w	r2, r3, #15
 80098fc:	6879      	ldr	r1, [r7, #4]
 80098fe:	4613      	mov	r3, r2
 8009900:	009b      	lsls	r3, r3, #2
 8009902:	4413      	add	r3, r2
 8009904:	009b      	lsls	r3, r3, #2
 8009906:	440b      	add	r3, r1
 8009908:	3318      	adds	r3, #24
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d117      	bne.n	8009940 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009910:	6839      	ldr	r1, [r7, #0]
 8009912:	6878      	ldr	r0, [r7, #4]
 8009914:	f000 fb7b 	bl	800a00e <USBD_CtlError>
                  break;
 8009918:	e054      	b.n	80099c4 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800991a:	7bbb      	ldrb	r3, [r7, #14]
 800991c:	f003 020f 	and.w	r2, r3, #15
 8009920:	6879      	ldr	r1, [r7, #4]
 8009922:	4613      	mov	r3, r2
 8009924:	009b      	lsls	r3, r3, #2
 8009926:	4413      	add	r3, r2
 8009928:	009b      	lsls	r3, r3, #2
 800992a:	440b      	add	r3, r1
 800992c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d104      	bne.n	8009940 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009936:	6839      	ldr	r1, [r7, #0]
 8009938:	6878      	ldr	r0, [r7, #4]
 800993a:	f000 fb68 	bl	800a00e <USBD_CtlError>
                  break;
 800993e:	e041      	b.n	80099c4 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009940:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009944:	2b00      	cmp	r3, #0
 8009946:	da0b      	bge.n	8009960 <USBD_StdEPReq+0x240>
 8009948:	7bbb      	ldrb	r3, [r7, #14]
 800994a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800994e:	4613      	mov	r3, r2
 8009950:	009b      	lsls	r3, r3, #2
 8009952:	4413      	add	r3, r2
 8009954:	009b      	lsls	r3, r3, #2
 8009956:	3310      	adds	r3, #16
 8009958:	687a      	ldr	r2, [r7, #4]
 800995a:	4413      	add	r3, r2
 800995c:	3304      	adds	r3, #4
 800995e:	e00b      	b.n	8009978 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009960:	7bbb      	ldrb	r3, [r7, #14]
 8009962:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009966:	4613      	mov	r3, r2
 8009968:	009b      	lsls	r3, r3, #2
 800996a:	4413      	add	r3, r2
 800996c:	009b      	lsls	r3, r3, #2
 800996e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009972:	687a      	ldr	r2, [r7, #4]
 8009974:	4413      	add	r3, r2
 8009976:	3304      	adds	r3, #4
 8009978:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800997a:	7bbb      	ldrb	r3, [r7, #14]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d002      	beq.n	8009986 <USBD_StdEPReq+0x266>
 8009980:	7bbb      	ldrb	r3, [r7, #14]
 8009982:	2b80      	cmp	r3, #128	; 0x80
 8009984:	d103      	bne.n	800998e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8009986:	68bb      	ldr	r3, [r7, #8]
 8009988:	2200      	movs	r2, #0
 800998a:	601a      	str	r2, [r3, #0]
 800998c:	e00e      	b.n	80099ac <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800998e:	7bbb      	ldrb	r3, [r7, #14]
 8009990:	4619      	mov	r1, r3
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	f7f8 fc08 	bl	80021a8 <USBD_LL_IsStallEP>
 8009998:	4603      	mov	r3, r0
 800999a:	2b00      	cmp	r3, #0
 800999c:	d003      	beq.n	80099a6 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800999e:	68bb      	ldr	r3, [r7, #8]
 80099a0:	2201      	movs	r2, #1
 80099a2:	601a      	str	r2, [r3, #0]
 80099a4:	e002      	b.n	80099ac <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80099a6:	68bb      	ldr	r3, [r7, #8]
 80099a8:	2200      	movs	r2, #0
 80099aa:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80099ac:	68bb      	ldr	r3, [r7, #8]
 80099ae:	2202      	movs	r2, #2
 80099b0:	4619      	mov	r1, r3
 80099b2:	6878      	ldr	r0, [r7, #4]
 80099b4:	f000 fb95 	bl	800a0e2 <USBD_CtlSendData>
              break;
 80099b8:	e004      	b.n	80099c4 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80099ba:	6839      	ldr	r1, [r7, #0]
 80099bc:	6878      	ldr	r0, [r7, #4]
 80099be:	f000 fb26 	bl	800a00e <USBD_CtlError>
              break;
 80099c2:	bf00      	nop
          }
          break;
 80099c4:	e004      	b.n	80099d0 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80099c6:	6839      	ldr	r1, [r7, #0]
 80099c8:	6878      	ldr	r0, [r7, #4]
 80099ca:	f000 fb20 	bl	800a00e <USBD_CtlError>
          break;
 80099ce:	bf00      	nop
      }
      break;
 80099d0:	e004      	b.n	80099dc <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80099d2:	6839      	ldr	r1, [r7, #0]
 80099d4:	6878      	ldr	r0, [r7, #4]
 80099d6:	f000 fb1a 	bl	800a00e <USBD_CtlError>
      break;
 80099da:	bf00      	nop
  }

  return ret;
 80099dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80099de:	4618      	mov	r0, r3
 80099e0:	3710      	adds	r7, #16
 80099e2:	46bd      	mov	sp, r7
 80099e4:	bd80      	pop	{r7, pc}
	...

080099e8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b084      	sub	sp, #16
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
 80099f0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80099f2:	2300      	movs	r3, #0
 80099f4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80099f6:	2300      	movs	r3, #0
 80099f8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80099fa:	2300      	movs	r3, #0
 80099fc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	885b      	ldrh	r3, [r3, #2]
 8009a02:	0a1b      	lsrs	r3, r3, #8
 8009a04:	b29b      	uxth	r3, r3
 8009a06:	3b01      	subs	r3, #1
 8009a08:	2b06      	cmp	r3, #6
 8009a0a:	f200 8128 	bhi.w	8009c5e <USBD_GetDescriptor+0x276>
 8009a0e:	a201      	add	r2, pc, #4	; (adr r2, 8009a14 <USBD_GetDescriptor+0x2c>)
 8009a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a14:	08009a31 	.word	0x08009a31
 8009a18:	08009a49 	.word	0x08009a49
 8009a1c:	08009a89 	.word	0x08009a89
 8009a20:	08009c5f 	.word	0x08009c5f
 8009a24:	08009c5f 	.word	0x08009c5f
 8009a28:	08009bff 	.word	0x08009bff
 8009a2c:	08009c2b 	.word	0x08009c2b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	687a      	ldr	r2, [r7, #4]
 8009a3a:	7c12      	ldrb	r2, [r2, #16]
 8009a3c:	f107 0108 	add.w	r1, r7, #8
 8009a40:	4610      	mov	r0, r2
 8009a42:	4798      	blx	r3
 8009a44:	60f8      	str	r0, [r7, #12]
      break;
 8009a46:	e112      	b.n	8009c6e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	7c1b      	ldrb	r3, [r3, #16]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d10d      	bne.n	8009a6c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a58:	f107 0208 	add.w	r2, r7, #8
 8009a5c:	4610      	mov	r0, r2
 8009a5e:	4798      	blx	r3
 8009a60:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	3301      	adds	r3, #1
 8009a66:	2202      	movs	r2, #2
 8009a68:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009a6a:	e100      	b.n	8009c6e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a74:	f107 0208 	add.w	r2, r7, #8
 8009a78:	4610      	mov	r0, r2
 8009a7a:	4798      	blx	r3
 8009a7c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	3301      	adds	r3, #1
 8009a82:	2202      	movs	r2, #2
 8009a84:	701a      	strb	r2, [r3, #0]
      break;
 8009a86:	e0f2      	b.n	8009c6e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	885b      	ldrh	r3, [r3, #2]
 8009a8c:	b2db      	uxtb	r3, r3
 8009a8e:	2b05      	cmp	r3, #5
 8009a90:	f200 80ac 	bhi.w	8009bec <USBD_GetDescriptor+0x204>
 8009a94:	a201      	add	r2, pc, #4	; (adr r2, 8009a9c <USBD_GetDescriptor+0xb4>)
 8009a96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a9a:	bf00      	nop
 8009a9c:	08009ab5 	.word	0x08009ab5
 8009aa0:	08009ae9 	.word	0x08009ae9
 8009aa4:	08009b1d 	.word	0x08009b1d
 8009aa8:	08009b51 	.word	0x08009b51
 8009aac:	08009b85 	.word	0x08009b85
 8009ab0:	08009bb9 	.word	0x08009bb9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009aba:	685b      	ldr	r3, [r3, #4]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d00b      	beq.n	8009ad8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009ac6:	685b      	ldr	r3, [r3, #4]
 8009ac8:	687a      	ldr	r2, [r7, #4]
 8009aca:	7c12      	ldrb	r2, [r2, #16]
 8009acc:	f107 0108 	add.w	r1, r7, #8
 8009ad0:	4610      	mov	r0, r2
 8009ad2:	4798      	blx	r3
 8009ad4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ad6:	e091      	b.n	8009bfc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ad8:	6839      	ldr	r1, [r7, #0]
 8009ada:	6878      	ldr	r0, [r7, #4]
 8009adc:	f000 fa97 	bl	800a00e <USBD_CtlError>
            err++;
 8009ae0:	7afb      	ldrb	r3, [r7, #11]
 8009ae2:	3301      	adds	r3, #1
 8009ae4:	72fb      	strb	r3, [r7, #11]
          break;
 8009ae6:	e089      	b.n	8009bfc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009aee:	689b      	ldr	r3, [r3, #8]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d00b      	beq.n	8009b0c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009afa:	689b      	ldr	r3, [r3, #8]
 8009afc:	687a      	ldr	r2, [r7, #4]
 8009afe:	7c12      	ldrb	r2, [r2, #16]
 8009b00:	f107 0108 	add.w	r1, r7, #8
 8009b04:	4610      	mov	r0, r2
 8009b06:	4798      	blx	r3
 8009b08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b0a:	e077      	b.n	8009bfc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009b0c:	6839      	ldr	r1, [r7, #0]
 8009b0e:	6878      	ldr	r0, [r7, #4]
 8009b10:	f000 fa7d 	bl	800a00e <USBD_CtlError>
            err++;
 8009b14:	7afb      	ldrb	r3, [r7, #11]
 8009b16:	3301      	adds	r3, #1
 8009b18:	72fb      	strb	r3, [r7, #11]
          break;
 8009b1a:	e06f      	b.n	8009bfc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009b22:	68db      	ldr	r3, [r3, #12]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d00b      	beq.n	8009b40 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009b2e:	68db      	ldr	r3, [r3, #12]
 8009b30:	687a      	ldr	r2, [r7, #4]
 8009b32:	7c12      	ldrb	r2, [r2, #16]
 8009b34:	f107 0108 	add.w	r1, r7, #8
 8009b38:	4610      	mov	r0, r2
 8009b3a:	4798      	blx	r3
 8009b3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b3e:	e05d      	b.n	8009bfc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009b40:	6839      	ldr	r1, [r7, #0]
 8009b42:	6878      	ldr	r0, [r7, #4]
 8009b44:	f000 fa63 	bl	800a00e <USBD_CtlError>
            err++;
 8009b48:	7afb      	ldrb	r3, [r7, #11]
 8009b4a:	3301      	adds	r3, #1
 8009b4c:	72fb      	strb	r3, [r7, #11]
          break;
 8009b4e:	e055      	b.n	8009bfc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009b56:	691b      	ldr	r3, [r3, #16]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d00b      	beq.n	8009b74 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009b62:	691b      	ldr	r3, [r3, #16]
 8009b64:	687a      	ldr	r2, [r7, #4]
 8009b66:	7c12      	ldrb	r2, [r2, #16]
 8009b68:	f107 0108 	add.w	r1, r7, #8
 8009b6c:	4610      	mov	r0, r2
 8009b6e:	4798      	blx	r3
 8009b70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b72:	e043      	b.n	8009bfc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009b74:	6839      	ldr	r1, [r7, #0]
 8009b76:	6878      	ldr	r0, [r7, #4]
 8009b78:	f000 fa49 	bl	800a00e <USBD_CtlError>
            err++;
 8009b7c:	7afb      	ldrb	r3, [r7, #11]
 8009b7e:	3301      	adds	r3, #1
 8009b80:	72fb      	strb	r3, [r7, #11]
          break;
 8009b82:	e03b      	b.n	8009bfc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009b8a:	695b      	ldr	r3, [r3, #20]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d00b      	beq.n	8009ba8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009b96:	695b      	ldr	r3, [r3, #20]
 8009b98:	687a      	ldr	r2, [r7, #4]
 8009b9a:	7c12      	ldrb	r2, [r2, #16]
 8009b9c:	f107 0108 	add.w	r1, r7, #8
 8009ba0:	4610      	mov	r0, r2
 8009ba2:	4798      	blx	r3
 8009ba4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ba6:	e029      	b.n	8009bfc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ba8:	6839      	ldr	r1, [r7, #0]
 8009baa:	6878      	ldr	r0, [r7, #4]
 8009bac:	f000 fa2f 	bl	800a00e <USBD_CtlError>
            err++;
 8009bb0:	7afb      	ldrb	r3, [r7, #11]
 8009bb2:	3301      	adds	r3, #1
 8009bb4:	72fb      	strb	r3, [r7, #11]
          break;
 8009bb6:	e021      	b.n	8009bfc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009bbe:	699b      	ldr	r3, [r3, #24]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d00b      	beq.n	8009bdc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009bca:	699b      	ldr	r3, [r3, #24]
 8009bcc:	687a      	ldr	r2, [r7, #4]
 8009bce:	7c12      	ldrb	r2, [r2, #16]
 8009bd0:	f107 0108 	add.w	r1, r7, #8
 8009bd4:	4610      	mov	r0, r2
 8009bd6:	4798      	blx	r3
 8009bd8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009bda:	e00f      	b.n	8009bfc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009bdc:	6839      	ldr	r1, [r7, #0]
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	f000 fa15 	bl	800a00e <USBD_CtlError>
            err++;
 8009be4:	7afb      	ldrb	r3, [r7, #11]
 8009be6:	3301      	adds	r3, #1
 8009be8:	72fb      	strb	r3, [r7, #11]
          break;
 8009bea:	e007      	b.n	8009bfc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009bec:	6839      	ldr	r1, [r7, #0]
 8009bee:	6878      	ldr	r0, [r7, #4]
 8009bf0:	f000 fa0d 	bl	800a00e <USBD_CtlError>
          err++;
 8009bf4:	7afb      	ldrb	r3, [r7, #11]
 8009bf6:	3301      	adds	r3, #1
 8009bf8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8009bfa:	e038      	b.n	8009c6e <USBD_GetDescriptor+0x286>
 8009bfc:	e037      	b.n	8009c6e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	7c1b      	ldrb	r3, [r3, #16]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d109      	bne.n	8009c1a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c0e:	f107 0208 	add.w	r2, r7, #8
 8009c12:	4610      	mov	r0, r2
 8009c14:	4798      	blx	r3
 8009c16:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009c18:	e029      	b.n	8009c6e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009c1a:	6839      	ldr	r1, [r7, #0]
 8009c1c:	6878      	ldr	r0, [r7, #4]
 8009c1e:	f000 f9f6 	bl	800a00e <USBD_CtlError>
        err++;
 8009c22:	7afb      	ldrb	r3, [r7, #11]
 8009c24:	3301      	adds	r3, #1
 8009c26:	72fb      	strb	r3, [r7, #11]
      break;
 8009c28:	e021      	b.n	8009c6e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	7c1b      	ldrb	r3, [r3, #16]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d10d      	bne.n	8009c4e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c3a:	f107 0208 	add.w	r2, r7, #8
 8009c3e:	4610      	mov	r0, r2
 8009c40:	4798      	blx	r3
 8009c42:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	3301      	adds	r3, #1
 8009c48:	2207      	movs	r2, #7
 8009c4a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009c4c:	e00f      	b.n	8009c6e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009c4e:	6839      	ldr	r1, [r7, #0]
 8009c50:	6878      	ldr	r0, [r7, #4]
 8009c52:	f000 f9dc 	bl	800a00e <USBD_CtlError>
        err++;
 8009c56:	7afb      	ldrb	r3, [r7, #11]
 8009c58:	3301      	adds	r3, #1
 8009c5a:	72fb      	strb	r3, [r7, #11]
      break;
 8009c5c:	e007      	b.n	8009c6e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009c5e:	6839      	ldr	r1, [r7, #0]
 8009c60:	6878      	ldr	r0, [r7, #4]
 8009c62:	f000 f9d4 	bl	800a00e <USBD_CtlError>
      err++;
 8009c66:	7afb      	ldrb	r3, [r7, #11]
 8009c68:	3301      	adds	r3, #1
 8009c6a:	72fb      	strb	r3, [r7, #11]
      break;
 8009c6c:	bf00      	nop
  }

  if (err != 0U)
 8009c6e:	7afb      	ldrb	r3, [r7, #11]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d11c      	bne.n	8009cae <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009c74:	893b      	ldrh	r3, [r7, #8]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d011      	beq.n	8009c9e <USBD_GetDescriptor+0x2b6>
 8009c7a:	683b      	ldr	r3, [r7, #0]
 8009c7c:	88db      	ldrh	r3, [r3, #6]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d00d      	beq.n	8009c9e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8009c82:	683b      	ldr	r3, [r7, #0]
 8009c84:	88da      	ldrh	r2, [r3, #6]
 8009c86:	893b      	ldrh	r3, [r7, #8]
 8009c88:	4293      	cmp	r3, r2
 8009c8a:	bf28      	it	cs
 8009c8c:	4613      	movcs	r3, r2
 8009c8e:	b29b      	uxth	r3, r3
 8009c90:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009c92:	893b      	ldrh	r3, [r7, #8]
 8009c94:	461a      	mov	r2, r3
 8009c96:	68f9      	ldr	r1, [r7, #12]
 8009c98:	6878      	ldr	r0, [r7, #4]
 8009c9a:	f000 fa22 	bl	800a0e2 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	88db      	ldrh	r3, [r3, #6]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d104      	bne.n	8009cb0 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8009ca6:	6878      	ldr	r0, [r7, #4]
 8009ca8:	f000 fa79 	bl	800a19e <USBD_CtlSendStatus>
 8009cac:	e000      	b.n	8009cb0 <USBD_GetDescriptor+0x2c8>
    return;
 8009cae:	bf00      	nop
    }
  }
}
 8009cb0:	3710      	adds	r7, #16
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	bd80      	pop	{r7, pc}
 8009cb6:	bf00      	nop

08009cb8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b084      	sub	sp, #16
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
 8009cc0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009cc2:	683b      	ldr	r3, [r7, #0]
 8009cc4:	889b      	ldrh	r3, [r3, #4]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d130      	bne.n	8009d2c <USBD_SetAddress+0x74>
 8009cca:	683b      	ldr	r3, [r7, #0]
 8009ccc:	88db      	ldrh	r3, [r3, #6]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d12c      	bne.n	8009d2c <USBD_SetAddress+0x74>
 8009cd2:	683b      	ldr	r3, [r7, #0]
 8009cd4:	885b      	ldrh	r3, [r3, #2]
 8009cd6:	2b7f      	cmp	r3, #127	; 0x7f
 8009cd8:	d828      	bhi.n	8009d2c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	885b      	ldrh	r3, [r3, #2]
 8009cde:	b2db      	uxtb	r3, r3
 8009ce0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ce4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009cec:	2b03      	cmp	r3, #3
 8009cee:	d104      	bne.n	8009cfa <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009cf0:	6839      	ldr	r1, [r7, #0]
 8009cf2:	6878      	ldr	r0, [r7, #4]
 8009cf4:	f000 f98b 	bl	800a00e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009cf8:	e01d      	b.n	8009d36 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	7bfa      	ldrb	r2, [r7, #15]
 8009cfe:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009d02:	7bfb      	ldrb	r3, [r7, #15]
 8009d04:	4619      	mov	r1, r3
 8009d06:	6878      	ldr	r0, [r7, #4]
 8009d08:	f7f8 fa7a 	bl	8002200 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009d0c:	6878      	ldr	r0, [r7, #4]
 8009d0e:	f000 fa46 	bl	800a19e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009d12:	7bfb      	ldrb	r3, [r7, #15]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d004      	beq.n	8009d22 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	2202      	movs	r2, #2
 8009d1c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d20:	e009      	b.n	8009d36 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	2201      	movs	r2, #1
 8009d26:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d2a:	e004      	b.n	8009d36 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009d2c:	6839      	ldr	r1, [r7, #0]
 8009d2e:	6878      	ldr	r0, [r7, #4]
 8009d30:	f000 f96d 	bl	800a00e <USBD_CtlError>
  }
}
 8009d34:	bf00      	nop
 8009d36:	bf00      	nop
 8009d38:	3710      	adds	r7, #16
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bd80      	pop	{r7, pc}
	...

08009d40 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b082      	sub	sp, #8
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
 8009d48:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009d4a:	683b      	ldr	r3, [r7, #0]
 8009d4c:	885b      	ldrh	r3, [r3, #2]
 8009d4e:	b2da      	uxtb	r2, r3
 8009d50:	4b41      	ldr	r3, [pc, #260]	; (8009e58 <USBD_SetConfig+0x118>)
 8009d52:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009d54:	4b40      	ldr	r3, [pc, #256]	; (8009e58 <USBD_SetConfig+0x118>)
 8009d56:	781b      	ldrb	r3, [r3, #0]
 8009d58:	2b01      	cmp	r3, #1
 8009d5a:	d904      	bls.n	8009d66 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009d5c:	6839      	ldr	r1, [r7, #0]
 8009d5e:	6878      	ldr	r0, [r7, #4]
 8009d60:	f000 f955 	bl	800a00e <USBD_CtlError>
 8009d64:	e075      	b.n	8009e52 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d6c:	2b02      	cmp	r3, #2
 8009d6e:	d002      	beq.n	8009d76 <USBD_SetConfig+0x36>
 8009d70:	2b03      	cmp	r3, #3
 8009d72:	d023      	beq.n	8009dbc <USBD_SetConfig+0x7c>
 8009d74:	e062      	b.n	8009e3c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8009d76:	4b38      	ldr	r3, [pc, #224]	; (8009e58 <USBD_SetConfig+0x118>)
 8009d78:	781b      	ldrb	r3, [r3, #0]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d01a      	beq.n	8009db4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8009d7e:	4b36      	ldr	r3, [pc, #216]	; (8009e58 <USBD_SetConfig+0x118>)
 8009d80:	781b      	ldrb	r3, [r3, #0]
 8009d82:	461a      	mov	r2, r3
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	2203      	movs	r2, #3
 8009d8c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009d90:	4b31      	ldr	r3, [pc, #196]	; (8009e58 <USBD_SetConfig+0x118>)
 8009d92:	781b      	ldrb	r3, [r3, #0]
 8009d94:	4619      	mov	r1, r3
 8009d96:	6878      	ldr	r0, [r7, #4]
 8009d98:	f7ff f9e7 	bl	800916a <USBD_SetClassConfig>
 8009d9c:	4603      	mov	r3, r0
 8009d9e:	2b02      	cmp	r3, #2
 8009da0:	d104      	bne.n	8009dac <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8009da2:	6839      	ldr	r1, [r7, #0]
 8009da4:	6878      	ldr	r0, [r7, #4]
 8009da6:	f000 f932 	bl	800a00e <USBD_CtlError>
            return;
 8009daa:	e052      	b.n	8009e52 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009dac:	6878      	ldr	r0, [r7, #4]
 8009dae:	f000 f9f6 	bl	800a19e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009db2:	e04e      	b.n	8009e52 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009db4:	6878      	ldr	r0, [r7, #4]
 8009db6:	f000 f9f2 	bl	800a19e <USBD_CtlSendStatus>
        break;
 8009dba:	e04a      	b.n	8009e52 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009dbc:	4b26      	ldr	r3, [pc, #152]	; (8009e58 <USBD_SetConfig+0x118>)
 8009dbe:	781b      	ldrb	r3, [r3, #0]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d112      	bne.n	8009dea <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	2202      	movs	r2, #2
 8009dc8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8009dcc:	4b22      	ldr	r3, [pc, #136]	; (8009e58 <USBD_SetConfig+0x118>)
 8009dce:	781b      	ldrb	r3, [r3, #0]
 8009dd0:	461a      	mov	r2, r3
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009dd6:	4b20      	ldr	r3, [pc, #128]	; (8009e58 <USBD_SetConfig+0x118>)
 8009dd8:	781b      	ldrb	r3, [r3, #0]
 8009dda:	4619      	mov	r1, r3
 8009ddc:	6878      	ldr	r0, [r7, #4]
 8009dde:	f7ff f9e3 	bl	80091a8 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009de2:	6878      	ldr	r0, [r7, #4]
 8009de4:	f000 f9db 	bl	800a19e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009de8:	e033      	b.n	8009e52 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8009dea:	4b1b      	ldr	r3, [pc, #108]	; (8009e58 <USBD_SetConfig+0x118>)
 8009dec:	781b      	ldrb	r3, [r3, #0]
 8009dee:	461a      	mov	r2, r3
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	685b      	ldr	r3, [r3, #4]
 8009df4:	429a      	cmp	r2, r3
 8009df6:	d01d      	beq.n	8009e34 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	685b      	ldr	r3, [r3, #4]
 8009dfc:	b2db      	uxtb	r3, r3
 8009dfe:	4619      	mov	r1, r3
 8009e00:	6878      	ldr	r0, [r7, #4]
 8009e02:	f7ff f9d1 	bl	80091a8 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009e06:	4b14      	ldr	r3, [pc, #80]	; (8009e58 <USBD_SetConfig+0x118>)
 8009e08:	781b      	ldrb	r3, [r3, #0]
 8009e0a:	461a      	mov	r2, r3
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009e10:	4b11      	ldr	r3, [pc, #68]	; (8009e58 <USBD_SetConfig+0x118>)
 8009e12:	781b      	ldrb	r3, [r3, #0]
 8009e14:	4619      	mov	r1, r3
 8009e16:	6878      	ldr	r0, [r7, #4]
 8009e18:	f7ff f9a7 	bl	800916a <USBD_SetClassConfig>
 8009e1c:	4603      	mov	r3, r0
 8009e1e:	2b02      	cmp	r3, #2
 8009e20:	d104      	bne.n	8009e2c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009e22:	6839      	ldr	r1, [r7, #0]
 8009e24:	6878      	ldr	r0, [r7, #4]
 8009e26:	f000 f8f2 	bl	800a00e <USBD_CtlError>
            return;
 8009e2a:	e012      	b.n	8009e52 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009e2c:	6878      	ldr	r0, [r7, #4]
 8009e2e:	f000 f9b6 	bl	800a19e <USBD_CtlSendStatus>
        break;
 8009e32:	e00e      	b.n	8009e52 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009e34:	6878      	ldr	r0, [r7, #4]
 8009e36:	f000 f9b2 	bl	800a19e <USBD_CtlSendStatus>
        break;
 8009e3a:	e00a      	b.n	8009e52 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009e3c:	6839      	ldr	r1, [r7, #0]
 8009e3e:	6878      	ldr	r0, [r7, #4]
 8009e40:	f000 f8e5 	bl	800a00e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009e44:	4b04      	ldr	r3, [pc, #16]	; (8009e58 <USBD_SetConfig+0x118>)
 8009e46:	781b      	ldrb	r3, [r3, #0]
 8009e48:	4619      	mov	r1, r3
 8009e4a:	6878      	ldr	r0, [r7, #4]
 8009e4c:	f7ff f9ac 	bl	80091a8 <USBD_ClrClassConfig>
        break;
 8009e50:	bf00      	nop
    }
  }
}
 8009e52:	3708      	adds	r7, #8
 8009e54:	46bd      	mov	sp, r7
 8009e56:	bd80      	pop	{r7, pc}
 8009e58:	200015b8 	.word	0x200015b8

08009e5c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	b082      	sub	sp, #8
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
 8009e64:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	88db      	ldrh	r3, [r3, #6]
 8009e6a:	2b01      	cmp	r3, #1
 8009e6c:	d004      	beq.n	8009e78 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009e6e:	6839      	ldr	r1, [r7, #0]
 8009e70:	6878      	ldr	r0, [r7, #4]
 8009e72:	f000 f8cc 	bl	800a00e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009e76:	e022      	b.n	8009ebe <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e7e:	2b02      	cmp	r3, #2
 8009e80:	dc02      	bgt.n	8009e88 <USBD_GetConfig+0x2c>
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	dc03      	bgt.n	8009e8e <USBD_GetConfig+0x32>
 8009e86:	e015      	b.n	8009eb4 <USBD_GetConfig+0x58>
 8009e88:	2b03      	cmp	r3, #3
 8009e8a:	d00b      	beq.n	8009ea4 <USBD_GetConfig+0x48>
 8009e8c:	e012      	b.n	8009eb4 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	2200      	movs	r2, #0
 8009e92:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	3308      	adds	r3, #8
 8009e98:	2201      	movs	r2, #1
 8009e9a:	4619      	mov	r1, r3
 8009e9c:	6878      	ldr	r0, [r7, #4]
 8009e9e:	f000 f920 	bl	800a0e2 <USBD_CtlSendData>
        break;
 8009ea2:	e00c      	b.n	8009ebe <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	3304      	adds	r3, #4
 8009ea8:	2201      	movs	r2, #1
 8009eaa:	4619      	mov	r1, r3
 8009eac:	6878      	ldr	r0, [r7, #4]
 8009eae:	f000 f918 	bl	800a0e2 <USBD_CtlSendData>
        break;
 8009eb2:	e004      	b.n	8009ebe <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009eb4:	6839      	ldr	r1, [r7, #0]
 8009eb6:	6878      	ldr	r0, [r7, #4]
 8009eb8:	f000 f8a9 	bl	800a00e <USBD_CtlError>
        break;
 8009ebc:	bf00      	nop
}
 8009ebe:	bf00      	nop
 8009ec0:	3708      	adds	r7, #8
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	bd80      	pop	{r7, pc}

08009ec6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ec6:	b580      	push	{r7, lr}
 8009ec8:	b082      	sub	sp, #8
 8009eca:	af00      	add	r7, sp, #0
 8009ecc:	6078      	str	r0, [r7, #4]
 8009ece:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ed6:	3b01      	subs	r3, #1
 8009ed8:	2b02      	cmp	r3, #2
 8009eda:	d81e      	bhi.n	8009f1a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009edc:	683b      	ldr	r3, [r7, #0]
 8009ede:	88db      	ldrh	r3, [r3, #6]
 8009ee0:	2b02      	cmp	r3, #2
 8009ee2:	d004      	beq.n	8009eee <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009ee4:	6839      	ldr	r1, [r7, #0]
 8009ee6:	6878      	ldr	r0, [r7, #4]
 8009ee8:	f000 f891 	bl	800a00e <USBD_CtlError>
        break;
 8009eec:	e01a      	b.n	8009f24 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	2201      	movs	r2, #1
 8009ef2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d005      	beq.n	8009f0a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	68db      	ldr	r3, [r3, #12]
 8009f02:	f043 0202 	orr.w	r2, r3, #2
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	330c      	adds	r3, #12
 8009f0e:	2202      	movs	r2, #2
 8009f10:	4619      	mov	r1, r3
 8009f12:	6878      	ldr	r0, [r7, #4]
 8009f14:	f000 f8e5 	bl	800a0e2 <USBD_CtlSendData>
      break;
 8009f18:	e004      	b.n	8009f24 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009f1a:	6839      	ldr	r1, [r7, #0]
 8009f1c:	6878      	ldr	r0, [r7, #4]
 8009f1e:	f000 f876 	bl	800a00e <USBD_CtlError>
      break;
 8009f22:	bf00      	nop
  }
}
 8009f24:	bf00      	nop
 8009f26:	3708      	adds	r7, #8
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	bd80      	pop	{r7, pc}

08009f2c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	b082      	sub	sp, #8
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
 8009f34:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009f36:	683b      	ldr	r3, [r7, #0]
 8009f38:	885b      	ldrh	r3, [r3, #2]
 8009f3a:	2b01      	cmp	r3, #1
 8009f3c:	d106      	bne.n	8009f4c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	2201      	movs	r2, #1
 8009f42:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8009f46:	6878      	ldr	r0, [r7, #4]
 8009f48:	f000 f929 	bl	800a19e <USBD_CtlSendStatus>
  }
}
 8009f4c:	bf00      	nop
 8009f4e:	3708      	adds	r7, #8
 8009f50:	46bd      	mov	sp, r7
 8009f52:	bd80      	pop	{r7, pc}

08009f54 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b082      	sub	sp, #8
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
 8009f5c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f64:	3b01      	subs	r3, #1
 8009f66:	2b02      	cmp	r3, #2
 8009f68:	d80b      	bhi.n	8009f82 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009f6a:	683b      	ldr	r3, [r7, #0]
 8009f6c:	885b      	ldrh	r3, [r3, #2]
 8009f6e:	2b01      	cmp	r3, #1
 8009f70:	d10c      	bne.n	8009f8c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	2200      	movs	r2, #0
 8009f76:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8009f7a:	6878      	ldr	r0, [r7, #4]
 8009f7c:	f000 f90f 	bl	800a19e <USBD_CtlSendStatus>
      }
      break;
 8009f80:	e004      	b.n	8009f8c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009f82:	6839      	ldr	r1, [r7, #0]
 8009f84:	6878      	ldr	r0, [r7, #4]
 8009f86:	f000 f842 	bl	800a00e <USBD_CtlError>
      break;
 8009f8a:	e000      	b.n	8009f8e <USBD_ClrFeature+0x3a>
      break;
 8009f8c:	bf00      	nop
  }
}
 8009f8e:	bf00      	nop
 8009f90:	3708      	adds	r7, #8
 8009f92:	46bd      	mov	sp, r7
 8009f94:	bd80      	pop	{r7, pc}

08009f96 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009f96:	b480      	push	{r7}
 8009f98:	b083      	sub	sp, #12
 8009f9a:	af00      	add	r7, sp, #0
 8009f9c:	6078      	str	r0, [r7, #4]
 8009f9e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	781a      	ldrb	r2, [r3, #0]
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	785a      	ldrb	r2, [r3, #1]
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009fb0:	683b      	ldr	r3, [r7, #0]
 8009fb2:	3302      	adds	r3, #2
 8009fb4:	781b      	ldrb	r3, [r3, #0]
 8009fb6:	b29a      	uxth	r2, r3
 8009fb8:	683b      	ldr	r3, [r7, #0]
 8009fba:	3303      	adds	r3, #3
 8009fbc:	781b      	ldrb	r3, [r3, #0]
 8009fbe:	b29b      	uxth	r3, r3
 8009fc0:	021b      	lsls	r3, r3, #8
 8009fc2:	b29b      	uxth	r3, r3
 8009fc4:	4413      	add	r3, r2
 8009fc6:	b29a      	uxth	r2, r3
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009fcc:	683b      	ldr	r3, [r7, #0]
 8009fce:	3304      	adds	r3, #4
 8009fd0:	781b      	ldrb	r3, [r3, #0]
 8009fd2:	b29a      	uxth	r2, r3
 8009fd4:	683b      	ldr	r3, [r7, #0]
 8009fd6:	3305      	adds	r3, #5
 8009fd8:	781b      	ldrb	r3, [r3, #0]
 8009fda:	b29b      	uxth	r3, r3
 8009fdc:	021b      	lsls	r3, r3, #8
 8009fde:	b29b      	uxth	r3, r3
 8009fe0:	4413      	add	r3, r2
 8009fe2:	b29a      	uxth	r2, r3
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009fe8:	683b      	ldr	r3, [r7, #0]
 8009fea:	3306      	adds	r3, #6
 8009fec:	781b      	ldrb	r3, [r3, #0]
 8009fee:	b29a      	uxth	r2, r3
 8009ff0:	683b      	ldr	r3, [r7, #0]
 8009ff2:	3307      	adds	r3, #7
 8009ff4:	781b      	ldrb	r3, [r3, #0]
 8009ff6:	b29b      	uxth	r3, r3
 8009ff8:	021b      	lsls	r3, r3, #8
 8009ffa:	b29b      	uxth	r3, r3
 8009ffc:	4413      	add	r3, r2
 8009ffe:	b29a      	uxth	r2, r3
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	80da      	strh	r2, [r3, #6]

}
 800a004:	bf00      	nop
 800a006:	370c      	adds	r7, #12
 800a008:	46bd      	mov	sp, r7
 800a00a:	bc80      	pop	{r7}
 800a00c:	4770      	bx	lr

0800a00e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800a00e:	b580      	push	{r7, lr}
 800a010:	b082      	sub	sp, #8
 800a012:	af00      	add	r7, sp, #0
 800a014:	6078      	str	r0, [r7, #4]
 800a016:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800a018:	2180      	movs	r1, #128	; 0x80
 800a01a:	6878      	ldr	r0, [r7, #4]
 800a01c:	f7f8 f886 	bl	800212c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800a020:	2100      	movs	r1, #0
 800a022:	6878      	ldr	r0, [r7, #4]
 800a024:	f7f8 f882 	bl	800212c <USBD_LL_StallEP>
}
 800a028:	bf00      	nop
 800a02a:	3708      	adds	r7, #8
 800a02c:	46bd      	mov	sp, r7
 800a02e:	bd80      	pop	{r7, pc}

0800a030 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b086      	sub	sp, #24
 800a034:	af00      	add	r7, sp, #0
 800a036:	60f8      	str	r0, [r7, #12]
 800a038:	60b9      	str	r1, [r7, #8]
 800a03a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a03c:	2300      	movs	r3, #0
 800a03e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d032      	beq.n	800a0ac <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800a046:	68f8      	ldr	r0, [r7, #12]
 800a048:	f000 f834 	bl	800a0b4 <USBD_GetLen>
 800a04c:	4603      	mov	r3, r0
 800a04e:	3301      	adds	r3, #1
 800a050:	b29b      	uxth	r3, r3
 800a052:	005b      	lsls	r3, r3, #1
 800a054:	b29a      	uxth	r2, r3
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a05a:	7dfb      	ldrb	r3, [r7, #23]
 800a05c:	1c5a      	adds	r2, r3, #1
 800a05e:	75fa      	strb	r2, [r7, #23]
 800a060:	461a      	mov	r2, r3
 800a062:	68bb      	ldr	r3, [r7, #8]
 800a064:	4413      	add	r3, r2
 800a066:	687a      	ldr	r2, [r7, #4]
 800a068:	7812      	ldrb	r2, [r2, #0]
 800a06a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a06c:	7dfb      	ldrb	r3, [r7, #23]
 800a06e:	1c5a      	adds	r2, r3, #1
 800a070:	75fa      	strb	r2, [r7, #23]
 800a072:	461a      	mov	r2, r3
 800a074:	68bb      	ldr	r3, [r7, #8]
 800a076:	4413      	add	r3, r2
 800a078:	2203      	movs	r2, #3
 800a07a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800a07c:	e012      	b.n	800a0a4 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	1c5a      	adds	r2, r3, #1
 800a082:	60fa      	str	r2, [r7, #12]
 800a084:	7dfa      	ldrb	r2, [r7, #23]
 800a086:	1c51      	adds	r1, r2, #1
 800a088:	75f9      	strb	r1, [r7, #23]
 800a08a:	4611      	mov	r1, r2
 800a08c:	68ba      	ldr	r2, [r7, #8]
 800a08e:	440a      	add	r2, r1
 800a090:	781b      	ldrb	r3, [r3, #0]
 800a092:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800a094:	7dfb      	ldrb	r3, [r7, #23]
 800a096:	1c5a      	adds	r2, r3, #1
 800a098:	75fa      	strb	r2, [r7, #23]
 800a09a:	461a      	mov	r2, r3
 800a09c:	68bb      	ldr	r3, [r7, #8]
 800a09e:	4413      	add	r3, r2
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	781b      	ldrb	r3, [r3, #0]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d1e8      	bne.n	800a07e <USBD_GetString+0x4e>
    }
  }
}
 800a0ac:	bf00      	nop
 800a0ae:	3718      	adds	r7, #24
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	bd80      	pop	{r7, pc}

0800a0b4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a0b4:	b480      	push	{r7}
 800a0b6:	b085      	sub	sp, #20
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a0bc:	2300      	movs	r3, #0
 800a0be:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800a0c0:	e005      	b.n	800a0ce <USBD_GetLen+0x1a>
  {
    len++;
 800a0c2:	7bfb      	ldrb	r3, [r7, #15]
 800a0c4:	3301      	adds	r3, #1
 800a0c6:	73fb      	strb	r3, [r7, #15]
    buf++;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	3301      	adds	r3, #1
 800a0cc:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	781b      	ldrb	r3, [r3, #0]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d1f5      	bne.n	800a0c2 <USBD_GetLen+0xe>
  }

  return len;
 800a0d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0d8:	4618      	mov	r0, r3
 800a0da:	3714      	adds	r7, #20
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	bc80      	pop	{r7}
 800a0e0:	4770      	bx	lr

0800a0e2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800a0e2:	b580      	push	{r7, lr}
 800a0e4:	b084      	sub	sp, #16
 800a0e6:	af00      	add	r7, sp, #0
 800a0e8:	60f8      	str	r0, [r7, #12]
 800a0ea:	60b9      	str	r1, [r7, #8]
 800a0ec:	4613      	mov	r3, r2
 800a0ee:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	2202      	movs	r2, #2
 800a0f4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a0f8:	88fa      	ldrh	r2, [r7, #6]
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a0fe:	88fa      	ldrh	r2, [r7, #6]
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a104:	88fb      	ldrh	r3, [r7, #6]
 800a106:	68ba      	ldr	r2, [r7, #8]
 800a108:	2100      	movs	r1, #0
 800a10a:	68f8      	ldr	r0, [r7, #12]
 800a10c:	f7f8 f897 	bl	800223e <USBD_LL_Transmit>

  return USBD_OK;
 800a110:	2300      	movs	r3, #0
}
 800a112:	4618      	mov	r0, r3
 800a114:	3710      	adds	r7, #16
 800a116:	46bd      	mov	sp, r7
 800a118:	bd80      	pop	{r7, pc}

0800a11a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800a11a:	b580      	push	{r7, lr}
 800a11c:	b084      	sub	sp, #16
 800a11e:	af00      	add	r7, sp, #0
 800a120:	60f8      	str	r0, [r7, #12]
 800a122:	60b9      	str	r1, [r7, #8]
 800a124:	4613      	mov	r3, r2
 800a126:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a128:	88fb      	ldrh	r3, [r7, #6]
 800a12a:	68ba      	ldr	r2, [r7, #8]
 800a12c:	2100      	movs	r1, #0
 800a12e:	68f8      	ldr	r0, [r7, #12]
 800a130:	f7f8 f885 	bl	800223e <USBD_LL_Transmit>

  return USBD_OK;
 800a134:	2300      	movs	r3, #0
}
 800a136:	4618      	mov	r0, r3
 800a138:	3710      	adds	r7, #16
 800a13a:	46bd      	mov	sp, r7
 800a13c:	bd80      	pop	{r7, pc}

0800a13e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800a13e:	b580      	push	{r7, lr}
 800a140:	b084      	sub	sp, #16
 800a142:	af00      	add	r7, sp, #0
 800a144:	60f8      	str	r0, [r7, #12]
 800a146:	60b9      	str	r1, [r7, #8]
 800a148:	4613      	mov	r3, r2
 800a14a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	2203      	movs	r2, #3
 800a150:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a154:	88fa      	ldrh	r2, [r7, #6]
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800a15c:	88fa      	ldrh	r2, [r7, #6]
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a164:	88fb      	ldrh	r3, [r7, #6]
 800a166:	68ba      	ldr	r2, [r7, #8]
 800a168:	2100      	movs	r1, #0
 800a16a:	68f8      	ldr	r0, [r7, #12]
 800a16c:	f7f8 f88a 	bl	8002284 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a170:	2300      	movs	r3, #0
}
 800a172:	4618      	mov	r0, r3
 800a174:	3710      	adds	r7, #16
 800a176:	46bd      	mov	sp, r7
 800a178:	bd80      	pop	{r7, pc}

0800a17a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800a17a:	b580      	push	{r7, lr}
 800a17c:	b084      	sub	sp, #16
 800a17e:	af00      	add	r7, sp, #0
 800a180:	60f8      	str	r0, [r7, #12]
 800a182:	60b9      	str	r1, [r7, #8]
 800a184:	4613      	mov	r3, r2
 800a186:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a188:	88fb      	ldrh	r3, [r7, #6]
 800a18a:	68ba      	ldr	r2, [r7, #8]
 800a18c:	2100      	movs	r1, #0
 800a18e:	68f8      	ldr	r0, [r7, #12]
 800a190:	f7f8 f878 	bl	8002284 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a194:	2300      	movs	r3, #0
}
 800a196:	4618      	mov	r0, r3
 800a198:	3710      	adds	r7, #16
 800a19a:	46bd      	mov	sp, r7
 800a19c:	bd80      	pop	{r7, pc}

0800a19e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a19e:	b580      	push	{r7, lr}
 800a1a0:	b082      	sub	sp, #8
 800a1a2:	af00      	add	r7, sp, #0
 800a1a4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	2204      	movs	r2, #4
 800a1aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	2100      	movs	r1, #0
 800a1b4:	6878      	ldr	r0, [r7, #4]
 800a1b6:	f7f8 f842 	bl	800223e <USBD_LL_Transmit>

  return USBD_OK;
 800a1ba:	2300      	movs	r3, #0
}
 800a1bc:	4618      	mov	r0, r3
 800a1be:	3708      	adds	r7, #8
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	bd80      	pop	{r7, pc}

0800a1c4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b082      	sub	sp, #8
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2205      	movs	r2, #5
 800a1d0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	2100      	movs	r1, #0
 800a1da:	6878      	ldr	r0, [r7, #4]
 800a1dc:	f7f8 f852 	bl	8002284 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a1e0:	2300      	movs	r3, #0
}
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	3708      	adds	r7, #8
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	bd80      	pop	{r7, pc}
	...

0800a1ec <__errno>:
 800a1ec:	4b01      	ldr	r3, [pc, #4]	; (800a1f4 <__errno+0x8>)
 800a1ee:	6818      	ldr	r0, [r3, #0]
 800a1f0:	4770      	bx	lr
 800a1f2:	bf00      	nop
 800a1f4:	2000017c 	.word	0x2000017c

0800a1f8 <__libc_init_array>:
 800a1f8:	b570      	push	{r4, r5, r6, lr}
 800a1fa:	2600      	movs	r6, #0
 800a1fc:	4d0c      	ldr	r5, [pc, #48]	; (800a230 <__libc_init_array+0x38>)
 800a1fe:	4c0d      	ldr	r4, [pc, #52]	; (800a234 <__libc_init_array+0x3c>)
 800a200:	1b64      	subs	r4, r4, r5
 800a202:	10a4      	asrs	r4, r4, #2
 800a204:	42a6      	cmp	r6, r4
 800a206:	d109      	bne.n	800a21c <__libc_init_array+0x24>
 800a208:	f002 fefa 	bl	800d000 <_init>
 800a20c:	2600      	movs	r6, #0
 800a20e:	4d0a      	ldr	r5, [pc, #40]	; (800a238 <__libc_init_array+0x40>)
 800a210:	4c0a      	ldr	r4, [pc, #40]	; (800a23c <__libc_init_array+0x44>)
 800a212:	1b64      	subs	r4, r4, r5
 800a214:	10a4      	asrs	r4, r4, #2
 800a216:	42a6      	cmp	r6, r4
 800a218:	d105      	bne.n	800a226 <__libc_init_array+0x2e>
 800a21a:	bd70      	pop	{r4, r5, r6, pc}
 800a21c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a220:	4798      	blx	r3
 800a222:	3601      	adds	r6, #1
 800a224:	e7ee      	b.n	800a204 <__libc_init_array+0xc>
 800a226:	f855 3b04 	ldr.w	r3, [r5], #4
 800a22a:	4798      	blx	r3
 800a22c:	3601      	adds	r6, #1
 800a22e:	e7f2      	b.n	800a216 <__libc_init_array+0x1e>
 800a230:	0800d464 	.word	0x0800d464
 800a234:	0800d464 	.word	0x0800d464
 800a238:	0800d464 	.word	0x0800d464
 800a23c:	0800d468 	.word	0x0800d468

0800a240 <memset>:
 800a240:	4603      	mov	r3, r0
 800a242:	4402      	add	r2, r0
 800a244:	4293      	cmp	r3, r2
 800a246:	d100      	bne.n	800a24a <memset+0xa>
 800a248:	4770      	bx	lr
 800a24a:	f803 1b01 	strb.w	r1, [r3], #1
 800a24e:	e7f9      	b.n	800a244 <memset+0x4>

0800a250 <__cvt>:
 800a250:	2b00      	cmp	r3, #0
 800a252:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a256:	461f      	mov	r7, r3
 800a258:	bfbb      	ittet	lt
 800a25a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800a25e:	461f      	movlt	r7, r3
 800a260:	2300      	movge	r3, #0
 800a262:	232d      	movlt	r3, #45	; 0x2d
 800a264:	b088      	sub	sp, #32
 800a266:	4614      	mov	r4, r2
 800a268:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a26a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800a26c:	7013      	strb	r3, [r2, #0]
 800a26e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a270:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800a274:	f023 0820 	bic.w	r8, r3, #32
 800a278:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a27c:	d005      	beq.n	800a28a <__cvt+0x3a>
 800a27e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a282:	d100      	bne.n	800a286 <__cvt+0x36>
 800a284:	3501      	adds	r5, #1
 800a286:	2302      	movs	r3, #2
 800a288:	e000      	b.n	800a28c <__cvt+0x3c>
 800a28a:	2303      	movs	r3, #3
 800a28c:	aa07      	add	r2, sp, #28
 800a28e:	9204      	str	r2, [sp, #16]
 800a290:	aa06      	add	r2, sp, #24
 800a292:	e9cd a202 	strd	sl, r2, [sp, #8]
 800a296:	e9cd 3500 	strd	r3, r5, [sp]
 800a29a:	4622      	mov	r2, r4
 800a29c:	463b      	mov	r3, r7
 800a29e:	f000 fce3 	bl	800ac68 <_dtoa_r>
 800a2a2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a2a6:	4606      	mov	r6, r0
 800a2a8:	d102      	bne.n	800a2b0 <__cvt+0x60>
 800a2aa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a2ac:	07db      	lsls	r3, r3, #31
 800a2ae:	d522      	bpl.n	800a2f6 <__cvt+0xa6>
 800a2b0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a2b4:	eb06 0905 	add.w	r9, r6, r5
 800a2b8:	d110      	bne.n	800a2dc <__cvt+0x8c>
 800a2ba:	7833      	ldrb	r3, [r6, #0]
 800a2bc:	2b30      	cmp	r3, #48	; 0x30
 800a2be:	d10a      	bne.n	800a2d6 <__cvt+0x86>
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	4620      	mov	r0, r4
 800a2c6:	4639      	mov	r1, r7
 800a2c8:	f7f6 fb6e 	bl	80009a8 <__aeabi_dcmpeq>
 800a2cc:	b918      	cbnz	r0, 800a2d6 <__cvt+0x86>
 800a2ce:	f1c5 0501 	rsb	r5, r5, #1
 800a2d2:	f8ca 5000 	str.w	r5, [sl]
 800a2d6:	f8da 3000 	ldr.w	r3, [sl]
 800a2da:	4499      	add	r9, r3
 800a2dc:	2200      	movs	r2, #0
 800a2de:	2300      	movs	r3, #0
 800a2e0:	4620      	mov	r0, r4
 800a2e2:	4639      	mov	r1, r7
 800a2e4:	f7f6 fb60 	bl	80009a8 <__aeabi_dcmpeq>
 800a2e8:	b108      	cbz	r0, 800a2ee <__cvt+0x9e>
 800a2ea:	f8cd 901c 	str.w	r9, [sp, #28]
 800a2ee:	2230      	movs	r2, #48	; 0x30
 800a2f0:	9b07      	ldr	r3, [sp, #28]
 800a2f2:	454b      	cmp	r3, r9
 800a2f4:	d307      	bcc.n	800a306 <__cvt+0xb6>
 800a2f6:	4630      	mov	r0, r6
 800a2f8:	9b07      	ldr	r3, [sp, #28]
 800a2fa:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a2fc:	1b9b      	subs	r3, r3, r6
 800a2fe:	6013      	str	r3, [r2, #0]
 800a300:	b008      	add	sp, #32
 800a302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a306:	1c59      	adds	r1, r3, #1
 800a308:	9107      	str	r1, [sp, #28]
 800a30a:	701a      	strb	r2, [r3, #0]
 800a30c:	e7f0      	b.n	800a2f0 <__cvt+0xa0>

0800a30e <__exponent>:
 800a30e:	4603      	mov	r3, r0
 800a310:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a312:	2900      	cmp	r1, #0
 800a314:	f803 2b02 	strb.w	r2, [r3], #2
 800a318:	bfb6      	itet	lt
 800a31a:	222d      	movlt	r2, #45	; 0x2d
 800a31c:	222b      	movge	r2, #43	; 0x2b
 800a31e:	4249      	neglt	r1, r1
 800a320:	2909      	cmp	r1, #9
 800a322:	7042      	strb	r2, [r0, #1]
 800a324:	dd2b      	ble.n	800a37e <__exponent+0x70>
 800a326:	f10d 0407 	add.w	r4, sp, #7
 800a32a:	46a4      	mov	ip, r4
 800a32c:	270a      	movs	r7, #10
 800a32e:	fb91 f6f7 	sdiv	r6, r1, r7
 800a332:	460a      	mov	r2, r1
 800a334:	46a6      	mov	lr, r4
 800a336:	fb07 1516 	mls	r5, r7, r6, r1
 800a33a:	2a63      	cmp	r2, #99	; 0x63
 800a33c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800a340:	4631      	mov	r1, r6
 800a342:	f104 34ff 	add.w	r4, r4, #4294967295
 800a346:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a34a:	dcf0      	bgt.n	800a32e <__exponent+0x20>
 800a34c:	3130      	adds	r1, #48	; 0x30
 800a34e:	f1ae 0502 	sub.w	r5, lr, #2
 800a352:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a356:	4629      	mov	r1, r5
 800a358:	1c44      	adds	r4, r0, #1
 800a35a:	4561      	cmp	r1, ip
 800a35c:	d30a      	bcc.n	800a374 <__exponent+0x66>
 800a35e:	f10d 0209 	add.w	r2, sp, #9
 800a362:	eba2 020e 	sub.w	r2, r2, lr
 800a366:	4565      	cmp	r5, ip
 800a368:	bf88      	it	hi
 800a36a:	2200      	movhi	r2, #0
 800a36c:	4413      	add	r3, r2
 800a36e:	1a18      	subs	r0, r3, r0
 800a370:	b003      	add	sp, #12
 800a372:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a374:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a378:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a37c:	e7ed      	b.n	800a35a <__exponent+0x4c>
 800a37e:	2330      	movs	r3, #48	; 0x30
 800a380:	3130      	adds	r1, #48	; 0x30
 800a382:	7083      	strb	r3, [r0, #2]
 800a384:	70c1      	strb	r1, [r0, #3]
 800a386:	1d03      	adds	r3, r0, #4
 800a388:	e7f1      	b.n	800a36e <__exponent+0x60>
	...

0800a38c <_printf_float>:
 800a38c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a390:	b091      	sub	sp, #68	; 0x44
 800a392:	460c      	mov	r4, r1
 800a394:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800a398:	4616      	mov	r6, r2
 800a39a:	461f      	mov	r7, r3
 800a39c:	4605      	mov	r5, r0
 800a39e:	f001 fa51 	bl	800b844 <_localeconv_r>
 800a3a2:	6803      	ldr	r3, [r0, #0]
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	9309      	str	r3, [sp, #36]	; 0x24
 800a3a8:	f7f5 fed2 	bl	8000150 <strlen>
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	930e      	str	r3, [sp, #56]	; 0x38
 800a3b0:	f8d8 3000 	ldr.w	r3, [r8]
 800a3b4:	900a      	str	r0, [sp, #40]	; 0x28
 800a3b6:	3307      	adds	r3, #7
 800a3b8:	f023 0307 	bic.w	r3, r3, #7
 800a3bc:	f103 0208 	add.w	r2, r3, #8
 800a3c0:	f894 9018 	ldrb.w	r9, [r4, #24]
 800a3c4:	f8d4 b000 	ldr.w	fp, [r4]
 800a3c8:	f8c8 2000 	str.w	r2, [r8]
 800a3cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3d0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a3d4:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800a3d8:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800a3dc:	930b      	str	r3, [sp, #44]	; 0x2c
 800a3de:	f04f 32ff 	mov.w	r2, #4294967295
 800a3e2:	4640      	mov	r0, r8
 800a3e4:	4b9c      	ldr	r3, [pc, #624]	; (800a658 <_printf_float+0x2cc>)
 800a3e6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a3e8:	f7f6 fb10 	bl	8000a0c <__aeabi_dcmpun>
 800a3ec:	bb70      	cbnz	r0, 800a44c <_printf_float+0xc0>
 800a3ee:	f04f 32ff 	mov.w	r2, #4294967295
 800a3f2:	4640      	mov	r0, r8
 800a3f4:	4b98      	ldr	r3, [pc, #608]	; (800a658 <_printf_float+0x2cc>)
 800a3f6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a3f8:	f7f6 faea 	bl	80009d0 <__aeabi_dcmple>
 800a3fc:	bb30      	cbnz	r0, 800a44c <_printf_float+0xc0>
 800a3fe:	2200      	movs	r2, #0
 800a400:	2300      	movs	r3, #0
 800a402:	4640      	mov	r0, r8
 800a404:	4651      	mov	r1, sl
 800a406:	f7f6 fad9 	bl	80009bc <__aeabi_dcmplt>
 800a40a:	b110      	cbz	r0, 800a412 <_printf_float+0x86>
 800a40c:	232d      	movs	r3, #45	; 0x2d
 800a40e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a412:	4b92      	ldr	r3, [pc, #584]	; (800a65c <_printf_float+0x2d0>)
 800a414:	4892      	ldr	r0, [pc, #584]	; (800a660 <_printf_float+0x2d4>)
 800a416:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800a41a:	bf94      	ite	ls
 800a41c:	4698      	movls	r8, r3
 800a41e:	4680      	movhi	r8, r0
 800a420:	2303      	movs	r3, #3
 800a422:	f04f 0a00 	mov.w	sl, #0
 800a426:	6123      	str	r3, [r4, #16]
 800a428:	f02b 0304 	bic.w	r3, fp, #4
 800a42c:	6023      	str	r3, [r4, #0]
 800a42e:	4633      	mov	r3, r6
 800a430:	4621      	mov	r1, r4
 800a432:	4628      	mov	r0, r5
 800a434:	9700      	str	r7, [sp, #0]
 800a436:	aa0f      	add	r2, sp, #60	; 0x3c
 800a438:	f000 f9d4 	bl	800a7e4 <_printf_common>
 800a43c:	3001      	adds	r0, #1
 800a43e:	f040 8090 	bne.w	800a562 <_printf_float+0x1d6>
 800a442:	f04f 30ff 	mov.w	r0, #4294967295
 800a446:	b011      	add	sp, #68	; 0x44
 800a448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a44c:	4642      	mov	r2, r8
 800a44e:	4653      	mov	r3, sl
 800a450:	4640      	mov	r0, r8
 800a452:	4651      	mov	r1, sl
 800a454:	f7f6 fada 	bl	8000a0c <__aeabi_dcmpun>
 800a458:	b148      	cbz	r0, 800a46e <_printf_float+0xe2>
 800a45a:	f1ba 0f00 	cmp.w	sl, #0
 800a45e:	bfb8      	it	lt
 800a460:	232d      	movlt	r3, #45	; 0x2d
 800a462:	4880      	ldr	r0, [pc, #512]	; (800a664 <_printf_float+0x2d8>)
 800a464:	bfb8      	it	lt
 800a466:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a46a:	4b7f      	ldr	r3, [pc, #508]	; (800a668 <_printf_float+0x2dc>)
 800a46c:	e7d3      	b.n	800a416 <_printf_float+0x8a>
 800a46e:	6863      	ldr	r3, [r4, #4]
 800a470:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800a474:	1c5a      	adds	r2, r3, #1
 800a476:	d142      	bne.n	800a4fe <_printf_float+0x172>
 800a478:	2306      	movs	r3, #6
 800a47a:	6063      	str	r3, [r4, #4]
 800a47c:	2200      	movs	r2, #0
 800a47e:	9206      	str	r2, [sp, #24]
 800a480:	aa0e      	add	r2, sp, #56	; 0x38
 800a482:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800a486:	aa0d      	add	r2, sp, #52	; 0x34
 800a488:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800a48c:	9203      	str	r2, [sp, #12]
 800a48e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800a492:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800a496:	6023      	str	r3, [r4, #0]
 800a498:	6863      	ldr	r3, [r4, #4]
 800a49a:	4642      	mov	r2, r8
 800a49c:	9300      	str	r3, [sp, #0]
 800a49e:	4628      	mov	r0, r5
 800a4a0:	4653      	mov	r3, sl
 800a4a2:	910b      	str	r1, [sp, #44]	; 0x2c
 800a4a4:	f7ff fed4 	bl	800a250 <__cvt>
 800a4a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a4aa:	4680      	mov	r8, r0
 800a4ac:	2947      	cmp	r1, #71	; 0x47
 800a4ae:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a4b0:	d108      	bne.n	800a4c4 <_printf_float+0x138>
 800a4b2:	1cc8      	adds	r0, r1, #3
 800a4b4:	db02      	blt.n	800a4bc <_printf_float+0x130>
 800a4b6:	6863      	ldr	r3, [r4, #4]
 800a4b8:	4299      	cmp	r1, r3
 800a4ba:	dd40      	ble.n	800a53e <_printf_float+0x1b2>
 800a4bc:	f1a9 0902 	sub.w	r9, r9, #2
 800a4c0:	fa5f f989 	uxtb.w	r9, r9
 800a4c4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800a4c8:	d81f      	bhi.n	800a50a <_printf_float+0x17e>
 800a4ca:	464a      	mov	r2, r9
 800a4cc:	3901      	subs	r1, #1
 800a4ce:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a4d2:	910d      	str	r1, [sp, #52]	; 0x34
 800a4d4:	f7ff ff1b 	bl	800a30e <__exponent>
 800a4d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a4da:	4682      	mov	sl, r0
 800a4dc:	1813      	adds	r3, r2, r0
 800a4de:	2a01      	cmp	r2, #1
 800a4e0:	6123      	str	r3, [r4, #16]
 800a4e2:	dc02      	bgt.n	800a4ea <_printf_float+0x15e>
 800a4e4:	6822      	ldr	r2, [r4, #0]
 800a4e6:	07d2      	lsls	r2, r2, #31
 800a4e8:	d501      	bpl.n	800a4ee <_printf_float+0x162>
 800a4ea:	3301      	adds	r3, #1
 800a4ec:	6123      	str	r3, [r4, #16]
 800a4ee:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d09b      	beq.n	800a42e <_printf_float+0xa2>
 800a4f6:	232d      	movs	r3, #45	; 0x2d
 800a4f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a4fc:	e797      	b.n	800a42e <_printf_float+0xa2>
 800a4fe:	2947      	cmp	r1, #71	; 0x47
 800a500:	d1bc      	bne.n	800a47c <_printf_float+0xf0>
 800a502:	2b00      	cmp	r3, #0
 800a504:	d1ba      	bne.n	800a47c <_printf_float+0xf0>
 800a506:	2301      	movs	r3, #1
 800a508:	e7b7      	b.n	800a47a <_printf_float+0xee>
 800a50a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800a50e:	d118      	bne.n	800a542 <_printf_float+0x1b6>
 800a510:	2900      	cmp	r1, #0
 800a512:	6863      	ldr	r3, [r4, #4]
 800a514:	dd0b      	ble.n	800a52e <_printf_float+0x1a2>
 800a516:	6121      	str	r1, [r4, #16]
 800a518:	b913      	cbnz	r3, 800a520 <_printf_float+0x194>
 800a51a:	6822      	ldr	r2, [r4, #0]
 800a51c:	07d0      	lsls	r0, r2, #31
 800a51e:	d502      	bpl.n	800a526 <_printf_float+0x19a>
 800a520:	3301      	adds	r3, #1
 800a522:	440b      	add	r3, r1
 800a524:	6123      	str	r3, [r4, #16]
 800a526:	f04f 0a00 	mov.w	sl, #0
 800a52a:	65a1      	str	r1, [r4, #88]	; 0x58
 800a52c:	e7df      	b.n	800a4ee <_printf_float+0x162>
 800a52e:	b913      	cbnz	r3, 800a536 <_printf_float+0x1aa>
 800a530:	6822      	ldr	r2, [r4, #0]
 800a532:	07d2      	lsls	r2, r2, #31
 800a534:	d501      	bpl.n	800a53a <_printf_float+0x1ae>
 800a536:	3302      	adds	r3, #2
 800a538:	e7f4      	b.n	800a524 <_printf_float+0x198>
 800a53a:	2301      	movs	r3, #1
 800a53c:	e7f2      	b.n	800a524 <_printf_float+0x198>
 800a53e:	f04f 0967 	mov.w	r9, #103	; 0x67
 800a542:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a544:	4299      	cmp	r1, r3
 800a546:	db05      	blt.n	800a554 <_printf_float+0x1c8>
 800a548:	6823      	ldr	r3, [r4, #0]
 800a54a:	6121      	str	r1, [r4, #16]
 800a54c:	07d8      	lsls	r0, r3, #31
 800a54e:	d5ea      	bpl.n	800a526 <_printf_float+0x19a>
 800a550:	1c4b      	adds	r3, r1, #1
 800a552:	e7e7      	b.n	800a524 <_printf_float+0x198>
 800a554:	2900      	cmp	r1, #0
 800a556:	bfcc      	ite	gt
 800a558:	2201      	movgt	r2, #1
 800a55a:	f1c1 0202 	rsble	r2, r1, #2
 800a55e:	4413      	add	r3, r2
 800a560:	e7e0      	b.n	800a524 <_printf_float+0x198>
 800a562:	6823      	ldr	r3, [r4, #0]
 800a564:	055a      	lsls	r2, r3, #21
 800a566:	d407      	bmi.n	800a578 <_printf_float+0x1ec>
 800a568:	6923      	ldr	r3, [r4, #16]
 800a56a:	4642      	mov	r2, r8
 800a56c:	4631      	mov	r1, r6
 800a56e:	4628      	mov	r0, r5
 800a570:	47b8      	blx	r7
 800a572:	3001      	adds	r0, #1
 800a574:	d12b      	bne.n	800a5ce <_printf_float+0x242>
 800a576:	e764      	b.n	800a442 <_printf_float+0xb6>
 800a578:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800a57c:	f240 80dd 	bls.w	800a73a <_printf_float+0x3ae>
 800a580:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a584:	2200      	movs	r2, #0
 800a586:	2300      	movs	r3, #0
 800a588:	f7f6 fa0e 	bl	80009a8 <__aeabi_dcmpeq>
 800a58c:	2800      	cmp	r0, #0
 800a58e:	d033      	beq.n	800a5f8 <_printf_float+0x26c>
 800a590:	2301      	movs	r3, #1
 800a592:	4631      	mov	r1, r6
 800a594:	4628      	mov	r0, r5
 800a596:	4a35      	ldr	r2, [pc, #212]	; (800a66c <_printf_float+0x2e0>)
 800a598:	47b8      	blx	r7
 800a59a:	3001      	adds	r0, #1
 800a59c:	f43f af51 	beq.w	800a442 <_printf_float+0xb6>
 800a5a0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a5a4:	429a      	cmp	r2, r3
 800a5a6:	db02      	blt.n	800a5ae <_printf_float+0x222>
 800a5a8:	6823      	ldr	r3, [r4, #0]
 800a5aa:	07d8      	lsls	r0, r3, #31
 800a5ac:	d50f      	bpl.n	800a5ce <_printf_float+0x242>
 800a5ae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a5b2:	4631      	mov	r1, r6
 800a5b4:	4628      	mov	r0, r5
 800a5b6:	47b8      	blx	r7
 800a5b8:	3001      	adds	r0, #1
 800a5ba:	f43f af42 	beq.w	800a442 <_printf_float+0xb6>
 800a5be:	f04f 0800 	mov.w	r8, #0
 800a5c2:	f104 091a 	add.w	r9, r4, #26
 800a5c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a5c8:	3b01      	subs	r3, #1
 800a5ca:	4543      	cmp	r3, r8
 800a5cc:	dc09      	bgt.n	800a5e2 <_printf_float+0x256>
 800a5ce:	6823      	ldr	r3, [r4, #0]
 800a5d0:	079b      	lsls	r3, r3, #30
 800a5d2:	f100 8102 	bmi.w	800a7da <_printf_float+0x44e>
 800a5d6:	68e0      	ldr	r0, [r4, #12]
 800a5d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a5da:	4298      	cmp	r0, r3
 800a5dc:	bfb8      	it	lt
 800a5de:	4618      	movlt	r0, r3
 800a5e0:	e731      	b.n	800a446 <_printf_float+0xba>
 800a5e2:	2301      	movs	r3, #1
 800a5e4:	464a      	mov	r2, r9
 800a5e6:	4631      	mov	r1, r6
 800a5e8:	4628      	mov	r0, r5
 800a5ea:	47b8      	blx	r7
 800a5ec:	3001      	adds	r0, #1
 800a5ee:	f43f af28 	beq.w	800a442 <_printf_float+0xb6>
 800a5f2:	f108 0801 	add.w	r8, r8, #1
 800a5f6:	e7e6      	b.n	800a5c6 <_printf_float+0x23a>
 800a5f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	dc38      	bgt.n	800a670 <_printf_float+0x2e4>
 800a5fe:	2301      	movs	r3, #1
 800a600:	4631      	mov	r1, r6
 800a602:	4628      	mov	r0, r5
 800a604:	4a19      	ldr	r2, [pc, #100]	; (800a66c <_printf_float+0x2e0>)
 800a606:	47b8      	blx	r7
 800a608:	3001      	adds	r0, #1
 800a60a:	f43f af1a 	beq.w	800a442 <_printf_float+0xb6>
 800a60e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a612:	4313      	orrs	r3, r2
 800a614:	d102      	bne.n	800a61c <_printf_float+0x290>
 800a616:	6823      	ldr	r3, [r4, #0]
 800a618:	07d9      	lsls	r1, r3, #31
 800a61a:	d5d8      	bpl.n	800a5ce <_printf_float+0x242>
 800a61c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a620:	4631      	mov	r1, r6
 800a622:	4628      	mov	r0, r5
 800a624:	47b8      	blx	r7
 800a626:	3001      	adds	r0, #1
 800a628:	f43f af0b 	beq.w	800a442 <_printf_float+0xb6>
 800a62c:	f04f 0900 	mov.w	r9, #0
 800a630:	f104 0a1a 	add.w	sl, r4, #26
 800a634:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a636:	425b      	negs	r3, r3
 800a638:	454b      	cmp	r3, r9
 800a63a:	dc01      	bgt.n	800a640 <_printf_float+0x2b4>
 800a63c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a63e:	e794      	b.n	800a56a <_printf_float+0x1de>
 800a640:	2301      	movs	r3, #1
 800a642:	4652      	mov	r2, sl
 800a644:	4631      	mov	r1, r6
 800a646:	4628      	mov	r0, r5
 800a648:	47b8      	blx	r7
 800a64a:	3001      	adds	r0, #1
 800a64c:	f43f aef9 	beq.w	800a442 <_printf_float+0xb6>
 800a650:	f109 0901 	add.w	r9, r9, #1
 800a654:	e7ee      	b.n	800a634 <_printf_float+0x2a8>
 800a656:	bf00      	nop
 800a658:	7fefffff 	.word	0x7fefffff
 800a65c:	0800d08c 	.word	0x0800d08c
 800a660:	0800d090 	.word	0x0800d090
 800a664:	0800d098 	.word	0x0800d098
 800a668:	0800d094 	.word	0x0800d094
 800a66c:	0800d09c 	.word	0x0800d09c
 800a670:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a672:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a674:	429a      	cmp	r2, r3
 800a676:	bfa8      	it	ge
 800a678:	461a      	movge	r2, r3
 800a67a:	2a00      	cmp	r2, #0
 800a67c:	4691      	mov	r9, r2
 800a67e:	dc37      	bgt.n	800a6f0 <_printf_float+0x364>
 800a680:	f04f 0b00 	mov.w	fp, #0
 800a684:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a688:	f104 021a 	add.w	r2, r4, #26
 800a68c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800a690:	ebaa 0309 	sub.w	r3, sl, r9
 800a694:	455b      	cmp	r3, fp
 800a696:	dc33      	bgt.n	800a700 <_printf_float+0x374>
 800a698:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a69c:	429a      	cmp	r2, r3
 800a69e:	db3b      	blt.n	800a718 <_printf_float+0x38c>
 800a6a0:	6823      	ldr	r3, [r4, #0]
 800a6a2:	07da      	lsls	r2, r3, #31
 800a6a4:	d438      	bmi.n	800a718 <_printf_float+0x38c>
 800a6a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a6a8:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a6aa:	eba3 020a 	sub.w	r2, r3, sl
 800a6ae:	eba3 0901 	sub.w	r9, r3, r1
 800a6b2:	4591      	cmp	r9, r2
 800a6b4:	bfa8      	it	ge
 800a6b6:	4691      	movge	r9, r2
 800a6b8:	f1b9 0f00 	cmp.w	r9, #0
 800a6bc:	dc34      	bgt.n	800a728 <_printf_float+0x39c>
 800a6be:	f04f 0800 	mov.w	r8, #0
 800a6c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a6c6:	f104 0a1a 	add.w	sl, r4, #26
 800a6ca:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a6ce:	1a9b      	subs	r3, r3, r2
 800a6d0:	eba3 0309 	sub.w	r3, r3, r9
 800a6d4:	4543      	cmp	r3, r8
 800a6d6:	f77f af7a 	ble.w	800a5ce <_printf_float+0x242>
 800a6da:	2301      	movs	r3, #1
 800a6dc:	4652      	mov	r2, sl
 800a6de:	4631      	mov	r1, r6
 800a6e0:	4628      	mov	r0, r5
 800a6e2:	47b8      	blx	r7
 800a6e4:	3001      	adds	r0, #1
 800a6e6:	f43f aeac 	beq.w	800a442 <_printf_float+0xb6>
 800a6ea:	f108 0801 	add.w	r8, r8, #1
 800a6ee:	e7ec      	b.n	800a6ca <_printf_float+0x33e>
 800a6f0:	4613      	mov	r3, r2
 800a6f2:	4631      	mov	r1, r6
 800a6f4:	4642      	mov	r2, r8
 800a6f6:	4628      	mov	r0, r5
 800a6f8:	47b8      	blx	r7
 800a6fa:	3001      	adds	r0, #1
 800a6fc:	d1c0      	bne.n	800a680 <_printf_float+0x2f4>
 800a6fe:	e6a0      	b.n	800a442 <_printf_float+0xb6>
 800a700:	2301      	movs	r3, #1
 800a702:	4631      	mov	r1, r6
 800a704:	4628      	mov	r0, r5
 800a706:	920b      	str	r2, [sp, #44]	; 0x2c
 800a708:	47b8      	blx	r7
 800a70a:	3001      	adds	r0, #1
 800a70c:	f43f ae99 	beq.w	800a442 <_printf_float+0xb6>
 800a710:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a712:	f10b 0b01 	add.w	fp, fp, #1
 800a716:	e7b9      	b.n	800a68c <_printf_float+0x300>
 800a718:	4631      	mov	r1, r6
 800a71a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a71e:	4628      	mov	r0, r5
 800a720:	47b8      	blx	r7
 800a722:	3001      	adds	r0, #1
 800a724:	d1bf      	bne.n	800a6a6 <_printf_float+0x31a>
 800a726:	e68c      	b.n	800a442 <_printf_float+0xb6>
 800a728:	464b      	mov	r3, r9
 800a72a:	4631      	mov	r1, r6
 800a72c:	4628      	mov	r0, r5
 800a72e:	eb08 020a 	add.w	r2, r8, sl
 800a732:	47b8      	blx	r7
 800a734:	3001      	adds	r0, #1
 800a736:	d1c2      	bne.n	800a6be <_printf_float+0x332>
 800a738:	e683      	b.n	800a442 <_printf_float+0xb6>
 800a73a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a73c:	2a01      	cmp	r2, #1
 800a73e:	dc01      	bgt.n	800a744 <_printf_float+0x3b8>
 800a740:	07db      	lsls	r3, r3, #31
 800a742:	d537      	bpl.n	800a7b4 <_printf_float+0x428>
 800a744:	2301      	movs	r3, #1
 800a746:	4642      	mov	r2, r8
 800a748:	4631      	mov	r1, r6
 800a74a:	4628      	mov	r0, r5
 800a74c:	47b8      	blx	r7
 800a74e:	3001      	adds	r0, #1
 800a750:	f43f ae77 	beq.w	800a442 <_printf_float+0xb6>
 800a754:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a758:	4631      	mov	r1, r6
 800a75a:	4628      	mov	r0, r5
 800a75c:	47b8      	blx	r7
 800a75e:	3001      	adds	r0, #1
 800a760:	f43f ae6f 	beq.w	800a442 <_printf_float+0xb6>
 800a764:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a768:	2200      	movs	r2, #0
 800a76a:	2300      	movs	r3, #0
 800a76c:	f7f6 f91c 	bl	80009a8 <__aeabi_dcmpeq>
 800a770:	b9d8      	cbnz	r0, 800a7aa <_printf_float+0x41e>
 800a772:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a774:	f108 0201 	add.w	r2, r8, #1
 800a778:	3b01      	subs	r3, #1
 800a77a:	4631      	mov	r1, r6
 800a77c:	4628      	mov	r0, r5
 800a77e:	47b8      	blx	r7
 800a780:	3001      	adds	r0, #1
 800a782:	d10e      	bne.n	800a7a2 <_printf_float+0x416>
 800a784:	e65d      	b.n	800a442 <_printf_float+0xb6>
 800a786:	2301      	movs	r3, #1
 800a788:	464a      	mov	r2, r9
 800a78a:	4631      	mov	r1, r6
 800a78c:	4628      	mov	r0, r5
 800a78e:	47b8      	blx	r7
 800a790:	3001      	adds	r0, #1
 800a792:	f43f ae56 	beq.w	800a442 <_printf_float+0xb6>
 800a796:	f108 0801 	add.w	r8, r8, #1
 800a79a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a79c:	3b01      	subs	r3, #1
 800a79e:	4543      	cmp	r3, r8
 800a7a0:	dcf1      	bgt.n	800a786 <_printf_float+0x3fa>
 800a7a2:	4653      	mov	r3, sl
 800a7a4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a7a8:	e6e0      	b.n	800a56c <_printf_float+0x1e0>
 800a7aa:	f04f 0800 	mov.w	r8, #0
 800a7ae:	f104 091a 	add.w	r9, r4, #26
 800a7b2:	e7f2      	b.n	800a79a <_printf_float+0x40e>
 800a7b4:	2301      	movs	r3, #1
 800a7b6:	4642      	mov	r2, r8
 800a7b8:	e7df      	b.n	800a77a <_printf_float+0x3ee>
 800a7ba:	2301      	movs	r3, #1
 800a7bc:	464a      	mov	r2, r9
 800a7be:	4631      	mov	r1, r6
 800a7c0:	4628      	mov	r0, r5
 800a7c2:	47b8      	blx	r7
 800a7c4:	3001      	adds	r0, #1
 800a7c6:	f43f ae3c 	beq.w	800a442 <_printf_float+0xb6>
 800a7ca:	f108 0801 	add.w	r8, r8, #1
 800a7ce:	68e3      	ldr	r3, [r4, #12]
 800a7d0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a7d2:	1a5b      	subs	r3, r3, r1
 800a7d4:	4543      	cmp	r3, r8
 800a7d6:	dcf0      	bgt.n	800a7ba <_printf_float+0x42e>
 800a7d8:	e6fd      	b.n	800a5d6 <_printf_float+0x24a>
 800a7da:	f04f 0800 	mov.w	r8, #0
 800a7de:	f104 0919 	add.w	r9, r4, #25
 800a7e2:	e7f4      	b.n	800a7ce <_printf_float+0x442>

0800a7e4 <_printf_common>:
 800a7e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7e8:	4616      	mov	r6, r2
 800a7ea:	4699      	mov	r9, r3
 800a7ec:	688a      	ldr	r2, [r1, #8]
 800a7ee:	690b      	ldr	r3, [r1, #16]
 800a7f0:	4607      	mov	r7, r0
 800a7f2:	4293      	cmp	r3, r2
 800a7f4:	bfb8      	it	lt
 800a7f6:	4613      	movlt	r3, r2
 800a7f8:	6033      	str	r3, [r6, #0]
 800a7fa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a7fe:	460c      	mov	r4, r1
 800a800:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a804:	b10a      	cbz	r2, 800a80a <_printf_common+0x26>
 800a806:	3301      	adds	r3, #1
 800a808:	6033      	str	r3, [r6, #0]
 800a80a:	6823      	ldr	r3, [r4, #0]
 800a80c:	0699      	lsls	r1, r3, #26
 800a80e:	bf42      	ittt	mi
 800a810:	6833      	ldrmi	r3, [r6, #0]
 800a812:	3302      	addmi	r3, #2
 800a814:	6033      	strmi	r3, [r6, #0]
 800a816:	6825      	ldr	r5, [r4, #0]
 800a818:	f015 0506 	ands.w	r5, r5, #6
 800a81c:	d106      	bne.n	800a82c <_printf_common+0x48>
 800a81e:	f104 0a19 	add.w	sl, r4, #25
 800a822:	68e3      	ldr	r3, [r4, #12]
 800a824:	6832      	ldr	r2, [r6, #0]
 800a826:	1a9b      	subs	r3, r3, r2
 800a828:	42ab      	cmp	r3, r5
 800a82a:	dc28      	bgt.n	800a87e <_printf_common+0x9a>
 800a82c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a830:	1e13      	subs	r3, r2, #0
 800a832:	6822      	ldr	r2, [r4, #0]
 800a834:	bf18      	it	ne
 800a836:	2301      	movne	r3, #1
 800a838:	0692      	lsls	r2, r2, #26
 800a83a:	d42d      	bmi.n	800a898 <_printf_common+0xb4>
 800a83c:	4649      	mov	r1, r9
 800a83e:	4638      	mov	r0, r7
 800a840:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a844:	47c0      	blx	r8
 800a846:	3001      	adds	r0, #1
 800a848:	d020      	beq.n	800a88c <_printf_common+0xa8>
 800a84a:	6823      	ldr	r3, [r4, #0]
 800a84c:	68e5      	ldr	r5, [r4, #12]
 800a84e:	f003 0306 	and.w	r3, r3, #6
 800a852:	2b04      	cmp	r3, #4
 800a854:	bf18      	it	ne
 800a856:	2500      	movne	r5, #0
 800a858:	6832      	ldr	r2, [r6, #0]
 800a85a:	f04f 0600 	mov.w	r6, #0
 800a85e:	68a3      	ldr	r3, [r4, #8]
 800a860:	bf08      	it	eq
 800a862:	1aad      	subeq	r5, r5, r2
 800a864:	6922      	ldr	r2, [r4, #16]
 800a866:	bf08      	it	eq
 800a868:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a86c:	4293      	cmp	r3, r2
 800a86e:	bfc4      	itt	gt
 800a870:	1a9b      	subgt	r3, r3, r2
 800a872:	18ed      	addgt	r5, r5, r3
 800a874:	341a      	adds	r4, #26
 800a876:	42b5      	cmp	r5, r6
 800a878:	d11a      	bne.n	800a8b0 <_printf_common+0xcc>
 800a87a:	2000      	movs	r0, #0
 800a87c:	e008      	b.n	800a890 <_printf_common+0xac>
 800a87e:	2301      	movs	r3, #1
 800a880:	4652      	mov	r2, sl
 800a882:	4649      	mov	r1, r9
 800a884:	4638      	mov	r0, r7
 800a886:	47c0      	blx	r8
 800a888:	3001      	adds	r0, #1
 800a88a:	d103      	bne.n	800a894 <_printf_common+0xb0>
 800a88c:	f04f 30ff 	mov.w	r0, #4294967295
 800a890:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a894:	3501      	adds	r5, #1
 800a896:	e7c4      	b.n	800a822 <_printf_common+0x3e>
 800a898:	2030      	movs	r0, #48	; 0x30
 800a89a:	18e1      	adds	r1, r4, r3
 800a89c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a8a0:	1c5a      	adds	r2, r3, #1
 800a8a2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a8a6:	4422      	add	r2, r4
 800a8a8:	3302      	adds	r3, #2
 800a8aa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a8ae:	e7c5      	b.n	800a83c <_printf_common+0x58>
 800a8b0:	2301      	movs	r3, #1
 800a8b2:	4622      	mov	r2, r4
 800a8b4:	4649      	mov	r1, r9
 800a8b6:	4638      	mov	r0, r7
 800a8b8:	47c0      	blx	r8
 800a8ba:	3001      	adds	r0, #1
 800a8bc:	d0e6      	beq.n	800a88c <_printf_common+0xa8>
 800a8be:	3601      	adds	r6, #1
 800a8c0:	e7d9      	b.n	800a876 <_printf_common+0x92>
	...

0800a8c4 <_printf_i>:
 800a8c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a8c8:	7e0f      	ldrb	r7, [r1, #24]
 800a8ca:	4691      	mov	r9, r2
 800a8cc:	2f78      	cmp	r7, #120	; 0x78
 800a8ce:	4680      	mov	r8, r0
 800a8d0:	460c      	mov	r4, r1
 800a8d2:	469a      	mov	sl, r3
 800a8d4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a8d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a8da:	d807      	bhi.n	800a8ec <_printf_i+0x28>
 800a8dc:	2f62      	cmp	r7, #98	; 0x62
 800a8de:	d80a      	bhi.n	800a8f6 <_printf_i+0x32>
 800a8e0:	2f00      	cmp	r7, #0
 800a8e2:	f000 80d9 	beq.w	800aa98 <_printf_i+0x1d4>
 800a8e6:	2f58      	cmp	r7, #88	; 0x58
 800a8e8:	f000 80a4 	beq.w	800aa34 <_printf_i+0x170>
 800a8ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a8f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a8f4:	e03a      	b.n	800a96c <_printf_i+0xa8>
 800a8f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a8fa:	2b15      	cmp	r3, #21
 800a8fc:	d8f6      	bhi.n	800a8ec <_printf_i+0x28>
 800a8fe:	a101      	add	r1, pc, #4	; (adr r1, 800a904 <_printf_i+0x40>)
 800a900:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a904:	0800a95d 	.word	0x0800a95d
 800a908:	0800a971 	.word	0x0800a971
 800a90c:	0800a8ed 	.word	0x0800a8ed
 800a910:	0800a8ed 	.word	0x0800a8ed
 800a914:	0800a8ed 	.word	0x0800a8ed
 800a918:	0800a8ed 	.word	0x0800a8ed
 800a91c:	0800a971 	.word	0x0800a971
 800a920:	0800a8ed 	.word	0x0800a8ed
 800a924:	0800a8ed 	.word	0x0800a8ed
 800a928:	0800a8ed 	.word	0x0800a8ed
 800a92c:	0800a8ed 	.word	0x0800a8ed
 800a930:	0800aa7f 	.word	0x0800aa7f
 800a934:	0800a9a1 	.word	0x0800a9a1
 800a938:	0800aa61 	.word	0x0800aa61
 800a93c:	0800a8ed 	.word	0x0800a8ed
 800a940:	0800a8ed 	.word	0x0800a8ed
 800a944:	0800aaa1 	.word	0x0800aaa1
 800a948:	0800a8ed 	.word	0x0800a8ed
 800a94c:	0800a9a1 	.word	0x0800a9a1
 800a950:	0800a8ed 	.word	0x0800a8ed
 800a954:	0800a8ed 	.word	0x0800a8ed
 800a958:	0800aa69 	.word	0x0800aa69
 800a95c:	682b      	ldr	r3, [r5, #0]
 800a95e:	1d1a      	adds	r2, r3, #4
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	602a      	str	r2, [r5, #0]
 800a964:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a968:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a96c:	2301      	movs	r3, #1
 800a96e:	e0a4      	b.n	800aaba <_printf_i+0x1f6>
 800a970:	6820      	ldr	r0, [r4, #0]
 800a972:	6829      	ldr	r1, [r5, #0]
 800a974:	0606      	lsls	r6, r0, #24
 800a976:	f101 0304 	add.w	r3, r1, #4
 800a97a:	d50a      	bpl.n	800a992 <_printf_i+0xce>
 800a97c:	680e      	ldr	r6, [r1, #0]
 800a97e:	602b      	str	r3, [r5, #0]
 800a980:	2e00      	cmp	r6, #0
 800a982:	da03      	bge.n	800a98c <_printf_i+0xc8>
 800a984:	232d      	movs	r3, #45	; 0x2d
 800a986:	4276      	negs	r6, r6
 800a988:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a98c:	230a      	movs	r3, #10
 800a98e:	485e      	ldr	r0, [pc, #376]	; (800ab08 <_printf_i+0x244>)
 800a990:	e019      	b.n	800a9c6 <_printf_i+0x102>
 800a992:	680e      	ldr	r6, [r1, #0]
 800a994:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a998:	602b      	str	r3, [r5, #0]
 800a99a:	bf18      	it	ne
 800a99c:	b236      	sxthne	r6, r6
 800a99e:	e7ef      	b.n	800a980 <_printf_i+0xbc>
 800a9a0:	682b      	ldr	r3, [r5, #0]
 800a9a2:	6820      	ldr	r0, [r4, #0]
 800a9a4:	1d19      	adds	r1, r3, #4
 800a9a6:	6029      	str	r1, [r5, #0]
 800a9a8:	0601      	lsls	r1, r0, #24
 800a9aa:	d501      	bpl.n	800a9b0 <_printf_i+0xec>
 800a9ac:	681e      	ldr	r6, [r3, #0]
 800a9ae:	e002      	b.n	800a9b6 <_printf_i+0xf2>
 800a9b0:	0646      	lsls	r6, r0, #25
 800a9b2:	d5fb      	bpl.n	800a9ac <_printf_i+0xe8>
 800a9b4:	881e      	ldrh	r6, [r3, #0]
 800a9b6:	2f6f      	cmp	r7, #111	; 0x6f
 800a9b8:	bf0c      	ite	eq
 800a9ba:	2308      	moveq	r3, #8
 800a9bc:	230a      	movne	r3, #10
 800a9be:	4852      	ldr	r0, [pc, #328]	; (800ab08 <_printf_i+0x244>)
 800a9c0:	2100      	movs	r1, #0
 800a9c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a9c6:	6865      	ldr	r5, [r4, #4]
 800a9c8:	2d00      	cmp	r5, #0
 800a9ca:	bfa8      	it	ge
 800a9cc:	6821      	ldrge	r1, [r4, #0]
 800a9ce:	60a5      	str	r5, [r4, #8]
 800a9d0:	bfa4      	itt	ge
 800a9d2:	f021 0104 	bicge.w	r1, r1, #4
 800a9d6:	6021      	strge	r1, [r4, #0]
 800a9d8:	b90e      	cbnz	r6, 800a9de <_printf_i+0x11a>
 800a9da:	2d00      	cmp	r5, #0
 800a9dc:	d04d      	beq.n	800aa7a <_printf_i+0x1b6>
 800a9de:	4615      	mov	r5, r2
 800a9e0:	fbb6 f1f3 	udiv	r1, r6, r3
 800a9e4:	fb03 6711 	mls	r7, r3, r1, r6
 800a9e8:	5dc7      	ldrb	r7, [r0, r7]
 800a9ea:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a9ee:	4637      	mov	r7, r6
 800a9f0:	42bb      	cmp	r3, r7
 800a9f2:	460e      	mov	r6, r1
 800a9f4:	d9f4      	bls.n	800a9e0 <_printf_i+0x11c>
 800a9f6:	2b08      	cmp	r3, #8
 800a9f8:	d10b      	bne.n	800aa12 <_printf_i+0x14e>
 800a9fa:	6823      	ldr	r3, [r4, #0]
 800a9fc:	07de      	lsls	r6, r3, #31
 800a9fe:	d508      	bpl.n	800aa12 <_printf_i+0x14e>
 800aa00:	6923      	ldr	r3, [r4, #16]
 800aa02:	6861      	ldr	r1, [r4, #4]
 800aa04:	4299      	cmp	r1, r3
 800aa06:	bfde      	ittt	le
 800aa08:	2330      	movle	r3, #48	; 0x30
 800aa0a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800aa0e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800aa12:	1b52      	subs	r2, r2, r5
 800aa14:	6122      	str	r2, [r4, #16]
 800aa16:	464b      	mov	r3, r9
 800aa18:	4621      	mov	r1, r4
 800aa1a:	4640      	mov	r0, r8
 800aa1c:	f8cd a000 	str.w	sl, [sp]
 800aa20:	aa03      	add	r2, sp, #12
 800aa22:	f7ff fedf 	bl	800a7e4 <_printf_common>
 800aa26:	3001      	adds	r0, #1
 800aa28:	d14c      	bne.n	800aac4 <_printf_i+0x200>
 800aa2a:	f04f 30ff 	mov.w	r0, #4294967295
 800aa2e:	b004      	add	sp, #16
 800aa30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa34:	4834      	ldr	r0, [pc, #208]	; (800ab08 <_printf_i+0x244>)
 800aa36:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800aa3a:	6829      	ldr	r1, [r5, #0]
 800aa3c:	6823      	ldr	r3, [r4, #0]
 800aa3e:	f851 6b04 	ldr.w	r6, [r1], #4
 800aa42:	6029      	str	r1, [r5, #0]
 800aa44:	061d      	lsls	r5, r3, #24
 800aa46:	d514      	bpl.n	800aa72 <_printf_i+0x1ae>
 800aa48:	07df      	lsls	r7, r3, #31
 800aa4a:	bf44      	itt	mi
 800aa4c:	f043 0320 	orrmi.w	r3, r3, #32
 800aa50:	6023      	strmi	r3, [r4, #0]
 800aa52:	b91e      	cbnz	r6, 800aa5c <_printf_i+0x198>
 800aa54:	6823      	ldr	r3, [r4, #0]
 800aa56:	f023 0320 	bic.w	r3, r3, #32
 800aa5a:	6023      	str	r3, [r4, #0]
 800aa5c:	2310      	movs	r3, #16
 800aa5e:	e7af      	b.n	800a9c0 <_printf_i+0xfc>
 800aa60:	6823      	ldr	r3, [r4, #0]
 800aa62:	f043 0320 	orr.w	r3, r3, #32
 800aa66:	6023      	str	r3, [r4, #0]
 800aa68:	2378      	movs	r3, #120	; 0x78
 800aa6a:	4828      	ldr	r0, [pc, #160]	; (800ab0c <_printf_i+0x248>)
 800aa6c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800aa70:	e7e3      	b.n	800aa3a <_printf_i+0x176>
 800aa72:	0659      	lsls	r1, r3, #25
 800aa74:	bf48      	it	mi
 800aa76:	b2b6      	uxthmi	r6, r6
 800aa78:	e7e6      	b.n	800aa48 <_printf_i+0x184>
 800aa7a:	4615      	mov	r5, r2
 800aa7c:	e7bb      	b.n	800a9f6 <_printf_i+0x132>
 800aa7e:	682b      	ldr	r3, [r5, #0]
 800aa80:	6826      	ldr	r6, [r4, #0]
 800aa82:	1d18      	adds	r0, r3, #4
 800aa84:	6961      	ldr	r1, [r4, #20]
 800aa86:	6028      	str	r0, [r5, #0]
 800aa88:	0635      	lsls	r5, r6, #24
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	d501      	bpl.n	800aa92 <_printf_i+0x1ce>
 800aa8e:	6019      	str	r1, [r3, #0]
 800aa90:	e002      	b.n	800aa98 <_printf_i+0x1d4>
 800aa92:	0670      	lsls	r0, r6, #25
 800aa94:	d5fb      	bpl.n	800aa8e <_printf_i+0x1ca>
 800aa96:	8019      	strh	r1, [r3, #0]
 800aa98:	2300      	movs	r3, #0
 800aa9a:	4615      	mov	r5, r2
 800aa9c:	6123      	str	r3, [r4, #16]
 800aa9e:	e7ba      	b.n	800aa16 <_printf_i+0x152>
 800aaa0:	682b      	ldr	r3, [r5, #0]
 800aaa2:	2100      	movs	r1, #0
 800aaa4:	1d1a      	adds	r2, r3, #4
 800aaa6:	602a      	str	r2, [r5, #0]
 800aaa8:	681d      	ldr	r5, [r3, #0]
 800aaaa:	6862      	ldr	r2, [r4, #4]
 800aaac:	4628      	mov	r0, r5
 800aaae:	f000 fed5 	bl	800b85c <memchr>
 800aab2:	b108      	cbz	r0, 800aab8 <_printf_i+0x1f4>
 800aab4:	1b40      	subs	r0, r0, r5
 800aab6:	6060      	str	r0, [r4, #4]
 800aab8:	6863      	ldr	r3, [r4, #4]
 800aaba:	6123      	str	r3, [r4, #16]
 800aabc:	2300      	movs	r3, #0
 800aabe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aac2:	e7a8      	b.n	800aa16 <_printf_i+0x152>
 800aac4:	462a      	mov	r2, r5
 800aac6:	4649      	mov	r1, r9
 800aac8:	4640      	mov	r0, r8
 800aaca:	6923      	ldr	r3, [r4, #16]
 800aacc:	47d0      	blx	sl
 800aace:	3001      	adds	r0, #1
 800aad0:	d0ab      	beq.n	800aa2a <_printf_i+0x166>
 800aad2:	6823      	ldr	r3, [r4, #0]
 800aad4:	079b      	lsls	r3, r3, #30
 800aad6:	d413      	bmi.n	800ab00 <_printf_i+0x23c>
 800aad8:	68e0      	ldr	r0, [r4, #12]
 800aada:	9b03      	ldr	r3, [sp, #12]
 800aadc:	4298      	cmp	r0, r3
 800aade:	bfb8      	it	lt
 800aae0:	4618      	movlt	r0, r3
 800aae2:	e7a4      	b.n	800aa2e <_printf_i+0x16a>
 800aae4:	2301      	movs	r3, #1
 800aae6:	4632      	mov	r2, r6
 800aae8:	4649      	mov	r1, r9
 800aaea:	4640      	mov	r0, r8
 800aaec:	47d0      	blx	sl
 800aaee:	3001      	adds	r0, #1
 800aaf0:	d09b      	beq.n	800aa2a <_printf_i+0x166>
 800aaf2:	3501      	adds	r5, #1
 800aaf4:	68e3      	ldr	r3, [r4, #12]
 800aaf6:	9903      	ldr	r1, [sp, #12]
 800aaf8:	1a5b      	subs	r3, r3, r1
 800aafa:	42ab      	cmp	r3, r5
 800aafc:	dcf2      	bgt.n	800aae4 <_printf_i+0x220>
 800aafe:	e7eb      	b.n	800aad8 <_printf_i+0x214>
 800ab00:	2500      	movs	r5, #0
 800ab02:	f104 0619 	add.w	r6, r4, #25
 800ab06:	e7f5      	b.n	800aaf4 <_printf_i+0x230>
 800ab08:	0800d09e 	.word	0x0800d09e
 800ab0c:	0800d0af 	.word	0x0800d0af

0800ab10 <siprintf>:
 800ab10:	b40e      	push	{r1, r2, r3}
 800ab12:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ab16:	b500      	push	{lr}
 800ab18:	b09c      	sub	sp, #112	; 0x70
 800ab1a:	ab1d      	add	r3, sp, #116	; 0x74
 800ab1c:	9002      	str	r0, [sp, #8]
 800ab1e:	9006      	str	r0, [sp, #24]
 800ab20:	9107      	str	r1, [sp, #28]
 800ab22:	9104      	str	r1, [sp, #16]
 800ab24:	4808      	ldr	r0, [pc, #32]	; (800ab48 <siprintf+0x38>)
 800ab26:	4909      	ldr	r1, [pc, #36]	; (800ab4c <siprintf+0x3c>)
 800ab28:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab2c:	9105      	str	r1, [sp, #20]
 800ab2e:	6800      	ldr	r0, [r0, #0]
 800ab30:	a902      	add	r1, sp, #8
 800ab32:	9301      	str	r3, [sp, #4]
 800ab34:	f001 fb7c 	bl	800c230 <_svfiprintf_r>
 800ab38:	2200      	movs	r2, #0
 800ab3a:	9b02      	ldr	r3, [sp, #8]
 800ab3c:	701a      	strb	r2, [r3, #0]
 800ab3e:	b01c      	add	sp, #112	; 0x70
 800ab40:	f85d eb04 	ldr.w	lr, [sp], #4
 800ab44:	b003      	add	sp, #12
 800ab46:	4770      	bx	lr
 800ab48:	2000017c 	.word	0x2000017c
 800ab4c:	ffff0208 	.word	0xffff0208

0800ab50 <quorem>:
 800ab50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab54:	6903      	ldr	r3, [r0, #16]
 800ab56:	690c      	ldr	r4, [r1, #16]
 800ab58:	4607      	mov	r7, r0
 800ab5a:	42a3      	cmp	r3, r4
 800ab5c:	f2c0 8082 	blt.w	800ac64 <quorem+0x114>
 800ab60:	3c01      	subs	r4, #1
 800ab62:	f100 0514 	add.w	r5, r0, #20
 800ab66:	f101 0814 	add.w	r8, r1, #20
 800ab6a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ab6e:	9301      	str	r3, [sp, #4]
 800ab70:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ab74:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ab78:	3301      	adds	r3, #1
 800ab7a:	429a      	cmp	r2, r3
 800ab7c:	fbb2 f6f3 	udiv	r6, r2, r3
 800ab80:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ab84:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ab88:	d331      	bcc.n	800abee <quorem+0x9e>
 800ab8a:	f04f 0e00 	mov.w	lr, #0
 800ab8e:	4640      	mov	r0, r8
 800ab90:	46ac      	mov	ip, r5
 800ab92:	46f2      	mov	sl, lr
 800ab94:	f850 2b04 	ldr.w	r2, [r0], #4
 800ab98:	b293      	uxth	r3, r2
 800ab9a:	fb06 e303 	mla	r3, r6, r3, lr
 800ab9e:	0c12      	lsrs	r2, r2, #16
 800aba0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800aba4:	b29b      	uxth	r3, r3
 800aba6:	fb06 e202 	mla	r2, r6, r2, lr
 800abaa:	ebaa 0303 	sub.w	r3, sl, r3
 800abae:	f8dc a000 	ldr.w	sl, [ip]
 800abb2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800abb6:	fa1f fa8a 	uxth.w	sl, sl
 800abba:	4453      	add	r3, sl
 800abbc:	f8dc a000 	ldr.w	sl, [ip]
 800abc0:	b292      	uxth	r2, r2
 800abc2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800abc6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800abca:	b29b      	uxth	r3, r3
 800abcc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800abd0:	4581      	cmp	r9, r0
 800abd2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800abd6:	f84c 3b04 	str.w	r3, [ip], #4
 800abda:	d2db      	bcs.n	800ab94 <quorem+0x44>
 800abdc:	f855 300b 	ldr.w	r3, [r5, fp]
 800abe0:	b92b      	cbnz	r3, 800abee <quorem+0x9e>
 800abe2:	9b01      	ldr	r3, [sp, #4]
 800abe4:	3b04      	subs	r3, #4
 800abe6:	429d      	cmp	r5, r3
 800abe8:	461a      	mov	r2, r3
 800abea:	d32f      	bcc.n	800ac4c <quorem+0xfc>
 800abec:	613c      	str	r4, [r7, #16]
 800abee:	4638      	mov	r0, r7
 800abf0:	f001 f8ce 	bl	800bd90 <__mcmp>
 800abf4:	2800      	cmp	r0, #0
 800abf6:	db25      	blt.n	800ac44 <quorem+0xf4>
 800abf8:	4628      	mov	r0, r5
 800abfa:	f04f 0c00 	mov.w	ip, #0
 800abfe:	3601      	adds	r6, #1
 800ac00:	f858 1b04 	ldr.w	r1, [r8], #4
 800ac04:	f8d0 e000 	ldr.w	lr, [r0]
 800ac08:	b28b      	uxth	r3, r1
 800ac0a:	ebac 0303 	sub.w	r3, ip, r3
 800ac0e:	fa1f f28e 	uxth.w	r2, lr
 800ac12:	4413      	add	r3, r2
 800ac14:	0c0a      	lsrs	r2, r1, #16
 800ac16:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ac1a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ac1e:	b29b      	uxth	r3, r3
 800ac20:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ac24:	45c1      	cmp	r9, r8
 800ac26:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ac2a:	f840 3b04 	str.w	r3, [r0], #4
 800ac2e:	d2e7      	bcs.n	800ac00 <quorem+0xb0>
 800ac30:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ac34:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ac38:	b922      	cbnz	r2, 800ac44 <quorem+0xf4>
 800ac3a:	3b04      	subs	r3, #4
 800ac3c:	429d      	cmp	r5, r3
 800ac3e:	461a      	mov	r2, r3
 800ac40:	d30a      	bcc.n	800ac58 <quorem+0x108>
 800ac42:	613c      	str	r4, [r7, #16]
 800ac44:	4630      	mov	r0, r6
 800ac46:	b003      	add	sp, #12
 800ac48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac4c:	6812      	ldr	r2, [r2, #0]
 800ac4e:	3b04      	subs	r3, #4
 800ac50:	2a00      	cmp	r2, #0
 800ac52:	d1cb      	bne.n	800abec <quorem+0x9c>
 800ac54:	3c01      	subs	r4, #1
 800ac56:	e7c6      	b.n	800abe6 <quorem+0x96>
 800ac58:	6812      	ldr	r2, [r2, #0]
 800ac5a:	3b04      	subs	r3, #4
 800ac5c:	2a00      	cmp	r2, #0
 800ac5e:	d1f0      	bne.n	800ac42 <quorem+0xf2>
 800ac60:	3c01      	subs	r4, #1
 800ac62:	e7eb      	b.n	800ac3c <quorem+0xec>
 800ac64:	2000      	movs	r0, #0
 800ac66:	e7ee      	b.n	800ac46 <quorem+0xf6>

0800ac68 <_dtoa_r>:
 800ac68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac6c:	4616      	mov	r6, r2
 800ac6e:	461f      	mov	r7, r3
 800ac70:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800ac72:	b099      	sub	sp, #100	; 0x64
 800ac74:	4605      	mov	r5, r0
 800ac76:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800ac7a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800ac7e:	b974      	cbnz	r4, 800ac9e <_dtoa_r+0x36>
 800ac80:	2010      	movs	r0, #16
 800ac82:	f000 fde3 	bl	800b84c <malloc>
 800ac86:	4602      	mov	r2, r0
 800ac88:	6268      	str	r0, [r5, #36]	; 0x24
 800ac8a:	b920      	cbnz	r0, 800ac96 <_dtoa_r+0x2e>
 800ac8c:	21ea      	movs	r1, #234	; 0xea
 800ac8e:	4ba8      	ldr	r3, [pc, #672]	; (800af30 <_dtoa_r+0x2c8>)
 800ac90:	48a8      	ldr	r0, [pc, #672]	; (800af34 <_dtoa_r+0x2cc>)
 800ac92:	f001 fbdd 	bl	800c450 <__assert_func>
 800ac96:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ac9a:	6004      	str	r4, [r0, #0]
 800ac9c:	60c4      	str	r4, [r0, #12]
 800ac9e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800aca0:	6819      	ldr	r1, [r3, #0]
 800aca2:	b151      	cbz	r1, 800acba <_dtoa_r+0x52>
 800aca4:	685a      	ldr	r2, [r3, #4]
 800aca6:	2301      	movs	r3, #1
 800aca8:	4093      	lsls	r3, r2
 800acaa:	604a      	str	r2, [r1, #4]
 800acac:	608b      	str	r3, [r1, #8]
 800acae:	4628      	mov	r0, r5
 800acb0:	f000 fe30 	bl	800b914 <_Bfree>
 800acb4:	2200      	movs	r2, #0
 800acb6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800acb8:	601a      	str	r2, [r3, #0]
 800acba:	1e3b      	subs	r3, r7, #0
 800acbc:	bfaf      	iteee	ge
 800acbe:	2300      	movge	r3, #0
 800acc0:	2201      	movlt	r2, #1
 800acc2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800acc6:	9305      	strlt	r3, [sp, #20]
 800acc8:	bfa8      	it	ge
 800acca:	f8c8 3000 	strge.w	r3, [r8]
 800acce:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800acd2:	4b99      	ldr	r3, [pc, #612]	; (800af38 <_dtoa_r+0x2d0>)
 800acd4:	bfb8      	it	lt
 800acd6:	f8c8 2000 	strlt.w	r2, [r8]
 800acda:	ea33 0309 	bics.w	r3, r3, r9
 800acde:	d119      	bne.n	800ad14 <_dtoa_r+0xac>
 800ace0:	f242 730f 	movw	r3, #9999	; 0x270f
 800ace4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800ace6:	6013      	str	r3, [r2, #0]
 800ace8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800acec:	4333      	orrs	r3, r6
 800acee:	f000 857f 	beq.w	800b7f0 <_dtoa_r+0xb88>
 800acf2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800acf4:	b953      	cbnz	r3, 800ad0c <_dtoa_r+0xa4>
 800acf6:	4b91      	ldr	r3, [pc, #580]	; (800af3c <_dtoa_r+0x2d4>)
 800acf8:	e022      	b.n	800ad40 <_dtoa_r+0xd8>
 800acfa:	4b91      	ldr	r3, [pc, #580]	; (800af40 <_dtoa_r+0x2d8>)
 800acfc:	9303      	str	r3, [sp, #12]
 800acfe:	3308      	adds	r3, #8
 800ad00:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800ad02:	6013      	str	r3, [r2, #0]
 800ad04:	9803      	ldr	r0, [sp, #12]
 800ad06:	b019      	add	sp, #100	; 0x64
 800ad08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad0c:	4b8b      	ldr	r3, [pc, #556]	; (800af3c <_dtoa_r+0x2d4>)
 800ad0e:	9303      	str	r3, [sp, #12]
 800ad10:	3303      	adds	r3, #3
 800ad12:	e7f5      	b.n	800ad00 <_dtoa_r+0x98>
 800ad14:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800ad18:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800ad1c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ad20:	2200      	movs	r2, #0
 800ad22:	2300      	movs	r3, #0
 800ad24:	f7f5 fe40 	bl	80009a8 <__aeabi_dcmpeq>
 800ad28:	4680      	mov	r8, r0
 800ad2a:	b158      	cbz	r0, 800ad44 <_dtoa_r+0xdc>
 800ad2c:	2301      	movs	r3, #1
 800ad2e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800ad30:	6013      	str	r3, [r2, #0]
 800ad32:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	f000 8558 	beq.w	800b7ea <_dtoa_r+0xb82>
 800ad3a:	4882      	ldr	r0, [pc, #520]	; (800af44 <_dtoa_r+0x2dc>)
 800ad3c:	6018      	str	r0, [r3, #0]
 800ad3e:	1e43      	subs	r3, r0, #1
 800ad40:	9303      	str	r3, [sp, #12]
 800ad42:	e7df      	b.n	800ad04 <_dtoa_r+0x9c>
 800ad44:	ab16      	add	r3, sp, #88	; 0x58
 800ad46:	9301      	str	r3, [sp, #4]
 800ad48:	ab17      	add	r3, sp, #92	; 0x5c
 800ad4a:	9300      	str	r3, [sp, #0]
 800ad4c:	4628      	mov	r0, r5
 800ad4e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ad52:	f001 f8c5 	bl	800bee0 <__d2b>
 800ad56:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800ad5a:	4683      	mov	fp, r0
 800ad5c:	2c00      	cmp	r4, #0
 800ad5e:	d07f      	beq.n	800ae60 <_dtoa_r+0x1f8>
 800ad60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ad64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ad66:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800ad6a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ad6e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800ad72:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800ad76:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	4b72      	ldr	r3, [pc, #456]	; (800af48 <_dtoa_r+0x2e0>)
 800ad7e:	f7f5 f9f3 	bl	8000168 <__aeabi_dsub>
 800ad82:	a365      	add	r3, pc, #404	; (adr r3, 800af18 <_dtoa_r+0x2b0>)
 800ad84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad88:	f7f5 fba6 	bl	80004d8 <__aeabi_dmul>
 800ad8c:	a364      	add	r3, pc, #400	; (adr r3, 800af20 <_dtoa_r+0x2b8>)
 800ad8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad92:	f7f5 f9eb 	bl	800016c <__adddf3>
 800ad96:	4606      	mov	r6, r0
 800ad98:	4620      	mov	r0, r4
 800ad9a:	460f      	mov	r7, r1
 800ad9c:	f7f5 fb32 	bl	8000404 <__aeabi_i2d>
 800ada0:	a361      	add	r3, pc, #388	; (adr r3, 800af28 <_dtoa_r+0x2c0>)
 800ada2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ada6:	f7f5 fb97 	bl	80004d8 <__aeabi_dmul>
 800adaa:	4602      	mov	r2, r0
 800adac:	460b      	mov	r3, r1
 800adae:	4630      	mov	r0, r6
 800adb0:	4639      	mov	r1, r7
 800adb2:	f7f5 f9db 	bl	800016c <__adddf3>
 800adb6:	4606      	mov	r6, r0
 800adb8:	460f      	mov	r7, r1
 800adba:	f7f5 fe3d 	bl	8000a38 <__aeabi_d2iz>
 800adbe:	2200      	movs	r2, #0
 800adc0:	4682      	mov	sl, r0
 800adc2:	2300      	movs	r3, #0
 800adc4:	4630      	mov	r0, r6
 800adc6:	4639      	mov	r1, r7
 800adc8:	f7f5 fdf8 	bl	80009bc <__aeabi_dcmplt>
 800adcc:	b148      	cbz	r0, 800ade2 <_dtoa_r+0x17a>
 800adce:	4650      	mov	r0, sl
 800add0:	f7f5 fb18 	bl	8000404 <__aeabi_i2d>
 800add4:	4632      	mov	r2, r6
 800add6:	463b      	mov	r3, r7
 800add8:	f7f5 fde6 	bl	80009a8 <__aeabi_dcmpeq>
 800addc:	b908      	cbnz	r0, 800ade2 <_dtoa_r+0x17a>
 800adde:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ade2:	f1ba 0f16 	cmp.w	sl, #22
 800ade6:	d858      	bhi.n	800ae9a <_dtoa_r+0x232>
 800ade8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800adec:	4b57      	ldr	r3, [pc, #348]	; (800af4c <_dtoa_r+0x2e4>)
 800adee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800adf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adf6:	f7f5 fde1 	bl	80009bc <__aeabi_dcmplt>
 800adfa:	2800      	cmp	r0, #0
 800adfc:	d04f      	beq.n	800ae9e <_dtoa_r+0x236>
 800adfe:	2300      	movs	r3, #0
 800ae00:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ae04:	930f      	str	r3, [sp, #60]	; 0x3c
 800ae06:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ae08:	1b1c      	subs	r4, r3, r4
 800ae0a:	1e63      	subs	r3, r4, #1
 800ae0c:	9309      	str	r3, [sp, #36]	; 0x24
 800ae0e:	bf49      	itett	mi
 800ae10:	f1c4 0301 	rsbmi	r3, r4, #1
 800ae14:	2300      	movpl	r3, #0
 800ae16:	9306      	strmi	r3, [sp, #24]
 800ae18:	2300      	movmi	r3, #0
 800ae1a:	bf54      	ite	pl
 800ae1c:	9306      	strpl	r3, [sp, #24]
 800ae1e:	9309      	strmi	r3, [sp, #36]	; 0x24
 800ae20:	f1ba 0f00 	cmp.w	sl, #0
 800ae24:	db3d      	blt.n	800aea2 <_dtoa_r+0x23a>
 800ae26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae28:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800ae2c:	4453      	add	r3, sl
 800ae2e:	9309      	str	r3, [sp, #36]	; 0x24
 800ae30:	2300      	movs	r3, #0
 800ae32:	930a      	str	r3, [sp, #40]	; 0x28
 800ae34:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ae36:	2b09      	cmp	r3, #9
 800ae38:	f200 808c 	bhi.w	800af54 <_dtoa_r+0x2ec>
 800ae3c:	2b05      	cmp	r3, #5
 800ae3e:	bfc4      	itt	gt
 800ae40:	3b04      	subgt	r3, #4
 800ae42:	9322      	strgt	r3, [sp, #136]	; 0x88
 800ae44:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ae46:	bfc8      	it	gt
 800ae48:	2400      	movgt	r4, #0
 800ae4a:	f1a3 0302 	sub.w	r3, r3, #2
 800ae4e:	bfd8      	it	le
 800ae50:	2401      	movle	r4, #1
 800ae52:	2b03      	cmp	r3, #3
 800ae54:	f200 808a 	bhi.w	800af6c <_dtoa_r+0x304>
 800ae58:	e8df f003 	tbb	[pc, r3]
 800ae5c:	5b4d4f2d 	.word	0x5b4d4f2d
 800ae60:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800ae64:	441c      	add	r4, r3
 800ae66:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800ae6a:	2b20      	cmp	r3, #32
 800ae6c:	bfc3      	ittte	gt
 800ae6e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ae72:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800ae76:	fa09 f303 	lslgt.w	r3, r9, r3
 800ae7a:	f1c3 0320 	rsble	r3, r3, #32
 800ae7e:	bfc6      	itte	gt
 800ae80:	fa26 f000 	lsrgt.w	r0, r6, r0
 800ae84:	4318      	orrgt	r0, r3
 800ae86:	fa06 f003 	lslle.w	r0, r6, r3
 800ae8a:	f7f5 faab 	bl	80003e4 <__aeabi_ui2d>
 800ae8e:	2301      	movs	r3, #1
 800ae90:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800ae94:	3c01      	subs	r4, #1
 800ae96:	9313      	str	r3, [sp, #76]	; 0x4c
 800ae98:	e76f      	b.n	800ad7a <_dtoa_r+0x112>
 800ae9a:	2301      	movs	r3, #1
 800ae9c:	e7b2      	b.n	800ae04 <_dtoa_r+0x19c>
 800ae9e:	900f      	str	r0, [sp, #60]	; 0x3c
 800aea0:	e7b1      	b.n	800ae06 <_dtoa_r+0x19e>
 800aea2:	9b06      	ldr	r3, [sp, #24]
 800aea4:	eba3 030a 	sub.w	r3, r3, sl
 800aea8:	9306      	str	r3, [sp, #24]
 800aeaa:	f1ca 0300 	rsb	r3, sl, #0
 800aeae:	930a      	str	r3, [sp, #40]	; 0x28
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	930e      	str	r3, [sp, #56]	; 0x38
 800aeb4:	e7be      	b.n	800ae34 <_dtoa_r+0x1cc>
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	930b      	str	r3, [sp, #44]	; 0x2c
 800aeba:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	dc58      	bgt.n	800af72 <_dtoa_r+0x30a>
 800aec0:	f04f 0901 	mov.w	r9, #1
 800aec4:	464b      	mov	r3, r9
 800aec6:	f8cd 9020 	str.w	r9, [sp, #32]
 800aeca:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800aece:	2200      	movs	r2, #0
 800aed0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800aed2:	6042      	str	r2, [r0, #4]
 800aed4:	2204      	movs	r2, #4
 800aed6:	f102 0614 	add.w	r6, r2, #20
 800aeda:	429e      	cmp	r6, r3
 800aedc:	6841      	ldr	r1, [r0, #4]
 800aede:	d94e      	bls.n	800af7e <_dtoa_r+0x316>
 800aee0:	4628      	mov	r0, r5
 800aee2:	f000 fcd7 	bl	800b894 <_Balloc>
 800aee6:	9003      	str	r0, [sp, #12]
 800aee8:	2800      	cmp	r0, #0
 800aeea:	d14c      	bne.n	800af86 <_dtoa_r+0x31e>
 800aeec:	4602      	mov	r2, r0
 800aeee:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800aef2:	4b17      	ldr	r3, [pc, #92]	; (800af50 <_dtoa_r+0x2e8>)
 800aef4:	e6cc      	b.n	800ac90 <_dtoa_r+0x28>
 800aef6:	2301      	movs	r3, #1
 800aef8:	e7de      	b.n	800aeb8 <_dtoa_r+0x250>
 800aefa:	2300      	movs	r3, #0
 800aefc:	930b      	str	r3, [sp, #44]	; 0x2c
 800aefe:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800af00:	eb0a 0903 	add.w	r9, sl, r3
 800af04:	f109 0301 	add.w	r3, r9, #1
 800af08:	2b01      	cmp	r3, #1
 800af0a:	9308      	str	r3, [sp, #32]
 800af0c:	bfb8      	it	lt
 800af0e:	2301      	movlt	r3, #1
 800af10:	e7dd      	b.n	800aece <_dtoa_r+0x266>
 800af12:	2301      	movs	r3, #1
 800af14:	e7f2      	b.n	800aefc <_dtoa_r+0x294>
 800af16:	bf00      	nop
 800af18:	636f4361 	.word	0x636f4361
 800af1c:	3fd287a7 	.word	0x3fd287a7
 800af20:	8b60c8b3 	.word	0x8b60c8b3
 800af24:	3fc68a28 	.word	0x3fc68a28
 800af28:	509f79fb 	.word	0x509f79fb
 800af2c:	3fd34413 	.word	0x3fd34413
 800af30:	0800d0cd 	.word	0x0800d0cd
 800af34:	0800d0e4 	.word	0x0800d0e4
 800af38:	7ff00000 	.word	0x7ff00000
 800af3c:	0800d0c9 	.word	0x0800d0c9
 800af40:	0800d0c0 	.word	0x0800d0c0
 800af44:	0800d09d 	.word	0x0800d09d
 800af48:	3ff80000 	.word	0x3ff80000
 800af4c:	0800d1d8 	.word	0x0800d1d8
 800af50:	0800d13f 	.word	0x0800d13f
 800af54:	2401      	movs	r4, #1
 800af56:	2300      	movs	r3, #0
 800af58:	940b      	str	r4, [sp, #44]	; 0x2c
 800af5a:	9322      	str	r3, [sp, #136]	; 0x88
 800af5c:	f04f 39ff 	mov.w	r9, #4294967295
 800af60:	2200      	movs	r2, #0
 800af62:	2312      	movs	r3, #18
 800af64:	f8cd 9020 	str.w	r9, [sp, #32]
 800af68:	9223      	str	r2, [sp, #140]	; 0x8c
 800af6a:	e7b0      	b.n	800aece <_dtoa_r+0x266>
 800af6c:	2301      	movs	r3, #1
 800af6e:	930b      	str	r3, [sp, #44]	; 0x2c
 800af70:	e7f4      	b.n	800af5c <_dtoa_r+0x2f4>
 800af72:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800af76:	464b      	mov	r3, r9
 800af78:	f8cd 9020 	str.w	r9, [sp, #32]
 800af7c:	e7a7      	b.n	800aece <_dtoa_r+0x266>
 800af7e:	3101      	adds	r1, #1
 800af80:	6041      	str	r1, [r0, #4]
 800af82:	0052      	lsls	r2, r2, #1
 800af84:	e7a7      	b.n	800aed6 <_dtoa_r+0x26e>
 800af86:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800af88:	9a03      	ldr	r2, [sp, #12]
 800af8a:	601a      	str	r2, [r3, #0]
 800af8c:	9b08      	ldr	r3, [sp, #32]
 800af8e:	2b0e      	cmp	r3, #14
 800af90:	f200 80a8 	bhi.w	800b0e4 <_dtoa_r+0x47c>
 800af94:	2c00      	cmp	r4, #0
 800af96:	f000 80a5 	beq.w	800b0e4 <_dtoa_r+0x47c>
 800af9a:	f1ba 0f00 	cmp.w	sl, #0
 800af9e:	dd34      	ble.n	800b00a <_dtoa_r+0x3a2>
 800afa0:	4a9a      	ldr	r2, [pc, #616]	; (800b20c <_dtoa_r+0x5a4>)
 800afa2:	f00a 030f 	and.w	r3, sl, #15
 800afa6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800afaa:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800afae:	e9d3 3400 	ldrd	r3, r4, [r3]
 800afb2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800afb6:	ea4f 142a 	mov.w	r4, sl, asr #4
 800afba:	d016      	beq.n	800afea <_dtoa_r+0x382>
 800afbc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800afc0:	4b93      	ldr	r3, [pc, #588]	; (800b210 <_dtoa_r+0x5a8>)
 800afc2:	2703      	movs	r7, #3
 800afc4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800afc8:	f7f5 fbb0 	bl	800072c <__aeabi_ddiv>
 800afcc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800afd0:	f004 040f 	and.w	r4, r4, #15
 800afd4:	4e8e      	ldr	r6, [pc, #568]	; (800b210 <_dtoa_r+0x5a8>)
 800afd6:	b954      	cbnz	r4, 800afee <_dtoa_r+0x386>
 800afd8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800afdc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800afe0:	f7f5 fba4 	bl	800072c <__aeabi_ddiv>
 800afe4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800afe8:	e029      	b.n	800b03e <_dtoa_r+0x3d6>
 800afea:	2702      	movs	r7, #2
 800afec:	e7f2      	b.n	800afd4 <_dtoa_r+0x36c>
 800afee:	07e1      	lsls	r1, r4, #31
 800aff0:	d508      	bpl.n	800b004 <_dtoa_r+0x39c>
 800aff2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800aff6:	e9d6 2300 	ldrd	r2, r3, [r6]
 800affa:	f7f5 fa6d 	bl	80004d8 <__aeabi_dmul>
 800affe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b002:	3701      	adds	r7, #1
 800b004:	1064      	asrs	r4, r4, #1
 800b006:	3608      	adds	r6, #8
 800b008:	e7e5      	b.n	800afd6 <_dtoa_r+0x36e>
 800b00a:	f000 80a5 	beq.w	800b158 <_dtoa_r+0x4f0>
 800b00e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b012:	f1ca 0400 	rsb	r4, sl, #0
 800b016:	4b7d      	ldr	r3, [pc, #500]	; (800b20c <_dtoa_r+0x5a4>)
 800b018:	f004 020f 	and.w	r2, r4, #15
 800b01c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b020:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b024:	f7f5 fa58 	bl	80004d8 <__aeabi_dmul>
 800b028:	2702      	movs	r7, #2
 800b02a:	2300      	movs	r3, #0
 800b02c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b030:	4e77      	ldr	r6, [pc, #476]	; (800b210 <_dtoa_r+0x5a8>)
 800b032:	1124      	asrs	r4, r4, #4
 800b034:	2c00      	cmp	r4, #0
 800b036:	f040 8084 	bne.w	800b142 <_dtoa_r+0x4da>
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d1d2      	bne.n	800afe4 <_dtoa_r+0x37c>
 800b03e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b040:	2b00      	cmp	r3, #0
 800b042:	f000 808b 	beq.w	800b15c <_dtoa_r+0x4f4>
 800b046:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800b04a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800b04e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b052:	2200      	movs	r2, #0
 800b054:	4b6f      	ldr	r3, [pc, #444]	; (800b214 <_dtoa_r+0x5ac>)
 800b056:	f7f5 fcb1 	bl	80009bc <__aeabi_dcmplt>
 800b05a:	2800      	cmp	r0, #0
 800b05c:	d07e      	beq.n	800b15c <_dtoa_r+0x4f4>
 800b05e:	9b08      	ldr	r3, [sp, #32]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d07b      	beq.n	800b15c <_dtoa_r+0x4f4>
 800b064:	f1b9 0f00 	cmp.w	r9, #0
 800b068:	dd38      	ble.n	800b0dc <_dtoa_r+0x474>
 800b06a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b06e:	2200      	movs	r2, #0
 800b070:	4b69      	ldr	r3, [pc, #420]	; (800b218 <_dtoa_r+0x5b0>)
 800b072:	f7f5 fa31 	bl	80004d8 <__aeabi_dmul>
 800b076:	464c      	mov	r4, r9
 800b078:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b07c:	f10a 38ff 	add.w	r8, sl, #4294967295
 800b080:	3701      	adds	r7, #1
 800b082:	4638      	mov	r0, r7
 800b084:	f7f5 f9be 	bl	8000404 <__aeabi_i2d>
 800b088:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b08c:	f7f5 fa24 	bl	80004d8 <__aeabi_dmul>
 800b090:	2200      	movs	r2, #0
 800b092:	4b62      	ldr	r3, [pc, #392]	; (800b21c <_dtoa_r+0x5b4>)
 800b094:	f7f5 f86a 	bl	800016c <__adddf3>
 800b098:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800b09c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b0a0:	9611      	str	r6, [sp, #68]	; 0x44
 800b0a2:	2c00      	cmp	r4, #0
 800b0a4:	d15d      	bne.n	800b162 <_dtoa_r+0x4fa>
 800b0a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	4b5c      	ldr	r3, [pc, #368]	; (800b220 <_dtoa_r+0x5b8>)
 800b0ae:	f7f5 f85b 	bl	8000168 <__aeabi_dsub>
 800b0b2:	4602      	mov	r2, r0
 800b0b4:	460b      	mov	r3, r1
 800b0b6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b0ba:	4633      	mov	r3, r6
 800b0bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b0be:	f7f5 fc9b 	bl	80009f8 <__aeabi_dcmpgt>
 800b0c2:	2800      	cmp	r0, #0
 800b0c4:	f040 829c 	bne.w	800b600 <_dtoa_r+0x998>
 800b0c8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b0cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b0ce:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800b0d2:	f7f5 fc73 	bl	80009bc <__aeabi_dcmplt>
 800b0d6:	2800      	cmp	r0, #0
 800b0d8:	f040 8290 	bne.w	800b5fc <_dtoa_r+0x994>
 800b0dc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800b0e0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b0e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	f2c0 8152 	blt.w	800b390 <_dtoa_r+0x728>
 800b0ec:	f1ba 0f0e 	cmp.w	sl, #14
 800b0f0:	f300 814e 	bgt.w	800b390 <_dtoa_r+0x728>
 800b0f4:	4b45      	ldr	r3, [pc, #276]	; (800b20c <_dtoa_r+0x5a4>)
 800b0f6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b0fa:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b0fe:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800b102:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b104:	2b00      	cmp	r3, #0
 800b106:	f280 80db 	bge.w	800b2c0 <_dtoa_r+0x658>
 800b10a:	9b08      	ldr	r3, [sp, #32]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	f300 80d7 	bgt.w	800b2c0 <_dtoa_r+0x658>
 800b112:	f040 8272 	bne.w	800b5fa <_dtoa_r+0x992>
 800b116:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b11a:	2200      	movs	r2, #0
 800b11c:	4b40      	ldr	r3, [pc, #256]	; (800b220 <_dtoa_r+0x5b8>)
 800b11e:	f7f5 f9db 	bl	80004d8 <__aeabi_dmul>
 800b122:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b126:	f7f5 fc5d 	bl	80009e4 <__aeabi_dcmpge>
 800b12a:	9c08      	ldr	r4, [sp, #32]
 800b12c:	4626      	mov	r6, r4
 800b12e:	2800      	cmp	r0, #0
 800b130:	f040 8248 	bne.w	800b5c4 <_dtoa_r+0x95c>
 800b134:	2331      	movs	r3, #49	; 0x31
 800b136:	9f03      	ldr	r7, [sp, #12]
 800b138:	f10a 0a01 	add.w	sl, sl, #1
 800b13c:	f807 3b01 	strb.w	r3, [r7], #1
 800b140:	e244      	b.n	800b5cc <_dtoa_r+0x964>
 800b142:	07e2      	lsls	r2, r4, #31
 800b144:	d505      	bpl.n	800b152 <_dtoa_r+0x4ea>
 800b146:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b14a:	f7f5 f9c5 	bl	80004d8 <__aeabi_dmul>
 800b14e:	2301      	movs	r3, #1
 800b150:	3701      	adds	r7, #1
 800b152:	1064      	asrs	r4, r4, #1
 800b154:	3608      	adds	r6, #8
 800b156:	e76d      	b.n	800b034 <_dtoa_r+0x3cc>
 800b158:	2702      	movs	r7, #2
 800b15a:	e770      	b.n	800b03e <_dtoa_r+0x3d6>
 800b15c:	46d0      	mov	r8, sl
 800b15e:	9c08      	ldr	r4, [sp, #32]
 800b160:	e78f      	b.n	800b082 <_dtoa_r+0x41a>
 800b162:	9903      	ldr	r1, [sp, #12]
 800b164:	4b29      	ldr	r3, [pc, #164]	; (800b20c <_dtoa_r+0x5a4>)
 800b166:	4421      	add	r1, r4
 800b168:	9112      	str	r1, [sp, #72]	; 0x48
 800b16a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b16c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b170:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800b174:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b178:	2900      	cmp	r1, #0
 800b17a:	d055      	beq.n	800b228 <_dtoa_r+0x5c0>
 800b17c:	2000      	movs	r0, #0
 800b17e:	4929      	ldr	r1, [pc, #164]	; (800b224 <_dtoa_r+0x5bc>)
 800b180:	f7f5 fad4 	bl	800072c <__aeabi_ddiv>
 800b184:	463b      	mov	r3, r7
 800b186:	4632      	mov	r2, r6
 800b188:	f7f4 ffee 	bl	8000168 <__aeabi_dsub>
 800b18c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b190:	9f03      	ldr	r7, [sp, #12]
 800b192:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b196:	f7f5 fc4f 	bl	8000a38 <__aeabi_d2iz>
 800b19a:	4604      	mov	r4, r0
 800b19c:	f7f5 f932 	bl	8000404 <__aeabi_i2d>
 800b1a0:	4602      	mov	r2, r0
 800b1a2:	460b      	mov	r3, r1
 800b1a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b1a8:	f7f4 ffde 	bl	8000168 <__aeabi_dsub>
 800b1ac:	4602      	mov	r2, r0
 800b1ae:	460b      	mov	r3, r1
 800b1b0:	3430      	adds	r4, #48	; 0x30
 800b1b2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b1b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b1ba:	f807 4b01 	strb.w	r4, [r7], #1
 800b1be:	f7f5 fbfd 	bl	80009bc <__aeabi_dcmplt>
 800b1c2:	2800      	cmp	r0, #0
 800b1c4:	d174      	bne.n	800b2b0 <_dtoa_r+0x648>
 800b1c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b1ca:	2000      	movs	r0, #0
 800b1cc:	4911      	ldr	r1, [pc, #68]	; (800b214 <_dtoa_r+0x5ac>)
 800b1ce:	f7f4 ffcb 	bl	8000168 <__aeabi_dsub>
 800b1d2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b1d6:	f7f5 fbf1 	bl	80009bc <__aeabi_dcmplt>
 800b1da:	2800      	cmp	r0, #0
 800b1dc:	f040 80b7 	bne.w	800b34e <_dtoa_r+0x6e6>
 800b1e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b1e2:	429f      	cmp	r7, r3
 800b1e4:	f43f af7a 	beq.w	800b0dc <_dtoa_r+0x474>
 800b1e8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b1ec:	2200      	movs	r2, #0
 800b1ee:	4b0a      	ldr	r3, [pc, #40]	; (800b218 <_dtoa_r+0x5b0>)
 800b1f0:	f7f5 f972 	bl	80004d8 <__aeabi_dmul>
 800b1f4:	2200      	movs	r2, #0
 800b1f6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b1fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b1fe:	4b06      	ldr	r3, [pc, #24]	; (800b218 <_dtoa_r+0x5b0>)
 800b200:	f7f5 f96a 	bl	80004d8 <__aeabi_dmul>
 800b204:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b208:	e7c3      	b.n	800b192 <_dtoa_r+0x52a>
 800b20a:	bf00      	nop
 800b20c:	0800d1d8 	.word	0x0800d1d8
 800b210:	0800d1b0 	.word	0x0800d1b0
 800b214:	3ff00000 	.word	0x3ff00000
 800b218:	40240000 	.word	0x40240000
 800b21c:	401c0000 	.word	0x401c0000
 800b220:	40140000 	.word	0x40140000
 800b224:	3fe00000 	.word	0x3fe00000
 800b228:	4630      	mov	r0, r6
 800b22a:	4639      	mov	r1, r7
 800b22c:	f7f5 f954 	bl	80004d8 <__aeabi_dmul>
 800b230:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b232:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b236:	9c03      	ldr	r4, [sp, #12]
 800b238:	9314      	str	r3, [sp, #80]	; 0x50
 800b23a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b23e:	f7f5 fbfb 	bl	8000a38 <__aeabi_d2iz>
 800b242:	9015      	str	r0, [sp, #84]	; 0x54
 800b244:	f7f5 f8de 	bl	8000404 <__aeabi_i2d>
 800b248:	4602      	mov	r2, r0
 800b24a:	460b      	mov	r3, r1
 800b24c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b250:	f7f4 ff8a 	bl	8000168 <__aeabi_dsub>
 800b254:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b256:	4606      	mov	r6, r0
 800b258:	3330      	adds	r3, #48	; 0x30
 800b25a:	f804 3b01 	strb.w	r3, [r4], #1
 800b25e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b260:	460f      	mov	r7, r1
 800b262:	429c      	cmp	r4, r3
 800b264:	f04f 0200 	mov.w	r2, #0
 800b268:	d124      	bne.n	800b2b4 <_dtoa_r+0x64c>
 800b26a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b26e:	4bb0      	ldr	r3, [pc, #704]	; (800b530 <_dtoa_r+0x8c8>)
 800b270:	f7f4 ff7c 	bl	800016c <__adddf3>
 800b274:	4602      	mov	r2, r0
 800b276:	460b      	mov	r3, r1
 800b278:	4630      	mov	r0, r6
 800b27a:	4639      	mov	r1, r7
 800b27c:	f7f5 fbbc 	bl	80009f8 <__aeabi_dcmpgt>
 800b280:	2800      	cmp	r0, #0
 800b282:	d163      	bne.n	800b34c <_dtoa_r+0x6e4>
 800b284:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b288:	2000      	movs	r0, #0
 800b28a:	49a9      	ldr	r1, [pc, #676]	; (800b530 <_dtoa_r+0x8c8>)
 800b28c:	f7f4 ff6c 	bl	8000168 <__aeabi_dsub>
 800b290:	4602      	mov	r2, r0
 800b292:	460b      	mov	r3, r1
 800b294:	4630      	mov	r0, r6
 800b296:	4639      	mov	r1, r7
 800b298:	f7f5 fb90 	bl	80009bc <__aeabi_dcmplt>
 800b29c:	2800      	cmp	r0, #0
 800b29e:	f43f af1d 	beq.w	800b0dc <_dtoa_r+0x474>
 800b2a2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800b2a4:	1e7b      	subs	r3, r7, #1
 800b2a6:	9314      	str	r3, [sp, #80]	; 0x50
 800b2a8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800b2ac:	2b30      	cmp	r3, #48	; 0x30
 800b2ae:	d0f8      	beq.n	800b2a2 <_dtoa_r+0x63a>
 800b2b0:	46c2      	mov	sl, r8
 800b2b2:	e03b      	b.n	800b32c <_dtoa_r+0x6c4>
 800b2b4:	4b9f      	ldr	r3, [pc, #636]	; (800b534 <_dtoa_r+0x8cc>)
 800b2b6:	f7f5 f90f 	bl	80004d8 <__aeabi_dmul>
 800b2ba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b2be:	e7bc      	b.n	800b23a <_dtoa_r+0x5d2>
 800b2c0:	9f03      	ldr	r7, [sp, #12]
 800b2c2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800b2c6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b2ca:	4640      	mov	r0, r8
 800b2cc:	4649      	mov	r1, r9
 800b2ce:	f7f5 fa2d 	bl	800072c <__aeabi_ddiv>
 800b2d2:	f7f5 fbb1 	bl	8000a38 <__aeabi_d2iz>
 800b2d6:	4604      	mov	r4, r0
 800b2d8:	f7f5 f894 	bl	8000404 <__aeabi_i2d>
 800b2dc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b2e0:	f7f5 f8fa 	bl	80004d8 <__aeabi_dmul>
 800b2e4:	4602      	mov	r2, r0
 800b2e6:	460b      	mov	r3, r1
 800b2e8:	4640      	mov	r0, r8
 800b2ea:	4649      	mov	r1, r9
 800b2ec:	f7f4 ff3c 	bl	8000168 <__aeabi_dsub>
 800b2f0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800b2f4:	f807 6b01 	strb.w	r6, [r7], #1
 800b2f8:	9e03      	ldr	r6, [sp, #12]
 800b2fa:	f8dd c020 	ldr.w	ip, [sp, #32]
 800b2fe:	1bbe      	subs	r6, r7, r6
 800b300:	45b4      	cmp	ip, r6
 800b302:	4602      	mov	r2, r0
 800b304:	460b      	mov	r3, r1
 800b306:	d136      	bne.n	800b376 <_dtoa_r+0x70e>
 800b308:	f7f4 ff30 	bl	800016c <__adddf3>
 800b30c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b310:	4680      	mov	r8, r0
 800b312:	4689      	mov	r9, r1
 800b314:	f7f5 fb70 	bl	80009f8 <__aeabi_dcmpgt>
 800b318:	bb58      	cbnz	r0, 800b372 <_dtoa_r+0x70a>
 800b31a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b31e:	4640      	mov	r0, r8
 800b320:	4649      	mov	r1, r9
 800b322:	f7f5 fb41 	bl	80009a8 <__aeabi_dcmpeq>
 800b326:	b108      	cbz	r0, 800b32c <_dtoa_r+0x6c4>
 800b328:	07e1      	lsls	r1, r4, #31
 800b32a:	d422      	bmi.n	800b372 <_dtoa_r+0x70a>
 800b32c:	4628      	mov	r0, r5
 800b32e:	4659      	mov	r1, fp
 800b330:	f000 faf0 	bl	800b914 <_Bfree>
 800b334:	2300      	movs	r3, #0
 800b336:	703b      	strb	r3, [r7, #0]
 800b338:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b33a:	f10a 0001 	add.w	r0, sl, #1
 800b33e:	6018      	str	r0, [r3, #0]
 800b340:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b342:	2b00      	cmp	r3, #0
 800b344:	f43f acde 	beq.w	800ad04 <_dtoa_r+0x9c>
 800b348:	601f      	str	r7, [r3, #0]
 800b34a:	e4db      	b.n	800ad04 <_dtoa_r+0x9c>
 800b34c:	4627      	mov	r7, r4
 800b34e:	463b      	mov	r3, r7
 800b350:	461f      	mov	r7, r3
 800b352:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b356:	2a39      	cmp	r2, #57	; 0x39
 800b358:	d107      	bne.n	800b36a <_dtoa_r+0x702>
 800b35a:	9a03      	ldr	r2, [sp, #12]
 800b35c:	429a      	cmp	r2, r3
 800b35e:	d1f7      	bne.n	800b350 <_dtoa_r+0x6e8>
 800b360:	2230      	movs	r2, #48	; 0x30
 800b362:	9903      	ldr	r1, [sp, #12]
 800b364:	f108 0801 	add.w	r8, r8, #1
 800b368:	700a      	strb	r2, [r1, #0]
 800b36a:	781a      	ldrb	r2, [r3, #0]
 800b36c:	3201      	adds	r2, #1
 800b36e:	701a      	strb	r2, [r3, #0]
 800b370:	e79e      	b.n	800b2b0 <_dtoa_r+0x648>
 800b372:	46d0      	mov	r8, sl
 800b374:	e7eb      	b.n	800b34e <_dtoa_r+0x6e6>
 800b376:	2200      	movs	r2, #0
 800b378:	4b6e      	ldr	r3, [pc, #440]	; (800b534 <_dtoa_r+0x8cc>)
 800b37a:	f7f5 f8ad 	bl	80004d8 <__aeabi_dmul>
 800b37e:	2200      	movs	r2, #0
 800b380:	2300      	movs	r3, #0
 800b382:	4680      	mov	r8, r0
 800b384:	4689      	mov	r9, r1
 800b386:	f7f5 fb0f 	bl	80009a8 <__aeabi_dcmpeq>
 800b38a:	2800      	cmp	r0, #0
 800b38c:	d09b      	beq.n	800b2c6 <_dtoa_r+0x65e>
 800b38e:	e7cd      	b.n	800b32c <_dtoa_r+0x6c4>
 800b390:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b392:	2a00      	cmp	r2, #0
 800b394:	f000 80d0 	beq.w	800b538 <_dtoa_r+0x8d0>
 800b398:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b39a:	2a01      	cmp	r2, #1
 800b39c:	f300 80ae 	bgt.w	800b4fc <_dtoa_r+0x894>
 800b3a0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b3a2:	2a00      	cmp	r2, #0
 800b3a4:	f000 80a6 	beq.w	800b4f4 <_dtoa_r+0x88c>
 800b3a8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b3ac:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b3ae:	9f06      	ldr	r7, [sp, #24]
 800b3b0:	9a06      	ldr	r2, [sp, #24]
 800b3b2:	2101      	movs	r1, #1
 800b3b4:	441a      	add	r2, r3
 800b3b6:	9206      	str	r2, [sp, #24]
 800b3b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b3ba:	4628      	mov	r0, r5
 800b3bc:	441a      	add	r2, r3
 800b3be:	9209      	str	r2, [sp, #36]	; 0x24
 800b3c0:	f000 fb5e 	bl	800ba80 <__i2b>
 800b3c4:	4606      	mov	r6, r0
 800b3c6:	2f00      	cmp	r7, #0
 800b3c8:	dd0c      	ble.n	800b3e4 <_dtoa_r+0x77c>
 800b3ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	dd09      	ble.n	800b3e4 <_dtoa_r+0x77c>
 800b3d0:	42bb      	cmp	r3, r7
 800b3d2:	bfa8      	it	ge
 800b3d4:	463b      	movge	r3, r7
 800b3d6:	9a06      	ldr	r2, [sp, #24]
 800b3d8:	1aff      	subs	r7, r7, r3
 800b3da:	1ad2      	subs	r2, r2, r3
 800b3dc:	9206      	str	r2, [sp, #24]
 800b3de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b3e0:	1ad3      	subs	r3, r2, r3
 800b3e2:	9309      	str	r3, [sp, #36]	; 0x24
 800b3e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b3e6:	b1f3      	cbz	r3, 800b426 <_dtoa_r+0x7be>
 800b3e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	f000 80a8 	beq.w	800b540 <_dtoa_r+0x8d8>
 800b3f0:	2c00      	cmp	r4, #0
 800b3f2:	dd10      	ble.n	800b416 <_dtoa_r+0x7ae>
 800b3f4:	4631      	mov	r1, r6
 800b3f6:	4622      	mov	r2, r4
 800b3f8:	4628      	mov	r0, r5
 800b3fa:	f000 fbff 	bl	800bbfc <__pow5mult>
 800b3fe:	465a      	mov	r2, fp
 800b400:	4601      	mov	r1, r0
 800b402:	4606      	mov	r6, r0
 800b404:	4628      	mov	r0, r5
 800b406:	f000 fb51 	bl	800baac <__multiply>
 800b40a:	4680      	mov	r8, r0
 800b40c:	4659      	mov	r1, fp
 800b40e:	4628      	mov	r0, r5
 800b410:	f000 fa80 	bl	800b914 <_Bfree>
 800b414:	46c3      	mov	fp, r8
 800b416:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b418:	1b1a      	subs	r2, r3, r4
 800b41a:	d004      	beq.n	800b426 <_dtoa_r+0x7be>
 800b41c:	4659      	mov	r1, fp
 800b41e:	4628      	mov	r0, r5
 800b420:	f000 fbec 	bl	800bbfc <__pow5mult>
 800b424:	4683      	mov	fp, r0
 800b426:	2101      	movs	r1, #1
 800b428:	4628      	mov	r0, r5
 800b42a:	f000 fb29 	bl	800ba80 <__i2b>
 800b42e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b430:	4604      	mov	r4, r0
 800b432:	2b00      	cmp	r3, #0
 800b434:	f340 8086 	ble.w	800b544 <_dtoa_r+0x8dc>
 800b438:	461a      	mov	r2, r3
 800b43a:	4601      	mov	r1, r0
 800b43c:	4628      	mov	r0, r5
 800b43e:	f000 fbdd 	bl	800bbfc <__pow5mult>
 800b442:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b444:	4604      	mov	r4, r0
 800b446:	2b01      	cmp	r3, #1
 800b448:	dd7f      	ble.n	800b54a <_dtoa_r+0x8e2>
 800b44a:	f04f 0800 	mov.w	r8, #0
 800b44e:	6923      	ldr	r3, [r4, #16]
 800b450:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b454:	6918      	ldr	r0, [r3, #16]
 800b456:	f000 fac5 	bl	800b9e4 <__hi0bits>
 800b45a:	f1c0 0020 	rsb	r0, r0, #32
 800b45e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b460:	4418      	add	r0, r3
 800b462:	f010 001f 	ands.w	r0, r0, #31
 800b466:	f000 8092 	beq.w	800b58e <_dtoa_r+0x926>
 800b46a:	f1c0 0320 	rsb	r3, r0, #32
 800b46e:	2b04      	cmp	r3, #4
 800b470:	f340 808a 	ble.w	800b588 <_dtoa_r+0x920>
 800b474:	f1c0 001c 	rsb	r0, r0, #28
 800b478:	9b06      	ldr	r3, [sp, #24]
 800b47a:	4407      	add	r7, r0
 800b47c:	4403      	add	r3, r0
 800b47e:	9306      	str	r3, [sp, #24]
 800b480:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b482:	4403      	add	r3, r0
 800b484:	9309      	str	r3, [sp, #36]	; 0x24
 800b486:	9b06      	ldr	r3, [sp, #24]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	dd05      	ble.n	800b498 <_dtoa_r+0x830>
 800b48c:	4659      	mov	r1, fp
 800b48e:	461a      	mov	r2, r3
 800b490:	4628      	mov	r0, r5
 800b492:	f000 fc0d 	bl	800bcb0 <__lshift>
 800b496:	4683      	mov	fp, r0
 800b498:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	dd05      	ble.n	800b4aa <_dtoa_r+0x842>
 800b49e:	4621      	mov	r1, r4
 800b4a0:	461a      	mov	r2, r3
 800b4a2:	4628      	mov	r0, r5
 800b4a4:	f000 fc04 	bl	800bcb0 <__lshift>
 800b4a8:	4604      	mov	r4, r0
 800b4aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d070      	beq.n	800b592 <_dtoa_r+0x92a>
 800b4b0:	4621      	mov	r1, r4
 800b4b2:	4658      	mov	r0, fp
 800b4b4:	f000 fc6c 	bl	800bd90 <__mcmp>
 800b4b8:	2800      	cmp	r0, #0
 800b4ba:	da6a      	bge.n	800b592 <_dtoa_r+0x92a>
 800b4bc:	2300      	movs	r3, #0
 800b4be:	4659      	mov	r1, fp
 800b4c0:	220a      	movs	r2, #10
 800b4c2:	4628      	mov	r0, r5
 800b4c4:	f000 fa48 	bl	800b958 <__multadd>
 800b4c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b4ca:	4683      	mov	fp, r0
 800b4cc:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	f000 8194 	beq.w	800b7fe <_dtoa_r+0xb96>
 800b4d6:	4631      	mov	r1, r6
 800b4d8:	2300      	movs	r3, #0
 800b4da:	220a      	movs	r2, #10
 800b4dc:	4628      	mov	r0, r5
 800b4de:	f000 fa3b 	bl	800b958 <__multadd>
 800b4e2:	f1b9 0f00 	cmp.w	r9, #0
 800b4e6:	4606      	mov	r6, r0
 800b4e8:	f300 8093 	bgt.w	800b612 <_dtoa_r+0x9aa>
 800b4ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b4ee:	2b02      	cmp	r3, #2
 800b4f0:	dc57      	bgt.n	800b5a2 <_dtoa_r+0x93a>
 800b4f2:	e08e      	b.n	800b612 <_dtoa_r+0x9aa>
 800b4f4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b4f6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b4fa:	e757      	b.n	800b3ac <_dtoa_r+0x744>
 800b4fc:	9b08      	ldr	r3, [sp, #32]
 800b4fe:	1e5c      	subs	r4, r3, #1
 800b500:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b502:	42a3      	cmp	r3, r4
 800b504:	bfb7      	itett	lt
 800b506:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b508:	1b1c      	subge	r4, r3, r4
 800b50a:	1ae2      	sublt	r2, r4, r3
 800b50c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800b50e:	bfbe      	ittt	lt
 800b510:	940a      	strlt	r4, [sp, #40]	; 0x28
 800b512:	189b      	addlt	r3, r3, r2
 800b514:	930e      	strlt	r3, [sp, #56]	; 0x38
 800b516:	9b08      	ldr	r3, [sp, #32]
 800b518:	bfb8      	it	lt
 800b51a:	2400      	movlt	r4, #0
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	bfbb      	ittet	lt
 800b520:	9b06      	ldrlt	r3, [sp, #24]
 800b522:	9a08      	ldrlt	r2, [sp, #32]
 800b524:	9f06      	ldrge	r7, [sp, #24]
 800b526:	1a9f      	sublt	r7, r3, r2
 800b528:	bfac      	ite	ge
 800b52a:	9b08      	ldrge	r3, [sp, #32]
 800b52c:	2300      	movlt	r3, #0
 800b52e:	e73f      	b.n	800b3b0 <_dtoa_r+0x748>
 800b530:	3fe00000 	.word	0x3fe00000
 800b534:	40240000 	.word	0x40240000
 800b538:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b53a:	9f06      	ldr	r7, [sp, #24]
 800b53c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800b53e:	e742      	b.n	800b3c6 <_dtoa_r+0x75e>
 800b540:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b542:	e76b      	b.n	800b41c <_dtoa_r+0x7b4>
 800b544:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b546:	2b01      	cmp	r3, #1
 800b548:	dc19      	bgt.n	800b57e <_dtoa_r+0x916>
 800b54a:	9b04      	ldr	r3, [sp, #16]
 800b54c:	b9bb      	cbnz	r3, 800b57e <_dtoa_r+0x916>
 800b54e:	9b05      	ldr	r3, [sp, #20]
 800b550:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b554:	b99b      	cbnz	r3, 800b57e <_dtoa_r+0x916>
 800b556:	9b05      	ldr	r3, [sp, #20]
 800b558:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b55c:	0d1b      	lsrs	r3, r3, #20
 800b55e:	051b      	lsls	r3, r3, #20
 800b560:	b183      	cbz	r3, 800b584 <_dtoa_r+0x91c>
 800b562:	f04f 0801 	mov.w	r8, #1
 800b566:	9b06      	ldr	r3, [sp, #24]
 800b568:	3301      	adds	r3, #1
 800b56a:	9306      	str	r3, [sp, #24]
 800b56c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b56e:	3301      	adds	r3, #1
 800b570:	9309      	str	r3, [sp, #36]	; 0x24
 800b572:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b574:	2b00      	cmp	r3, #0
 800b576:	f47f af6a 	bne.w	800b44e <_dtoa_r+0x7e6>
 800b57a:	2001      	movs	r0, #1
 800b57c:	e76f      	b.n	800b45e <_dtoa_r+0x7f6>
 800b57e:	f04f 0800 	mov.w	r8, #0
 800b582:	e7f6      	b.n	800b572 <_dtoa_r+0x90a>
 800b584:	4698      	mov	r8, r3
 800b586:	e7f4      	b.n	800b572 <_dtoa_r+0x90a>
 800b588:	f43f af7d 	beq.w	800b486 <_dtoa_r+0x81e>
 800b58c:	4618      	mov	r0, r3
 800b58e:	301c      	adds	r0, #28
 800b590:	e772      	b.n	800b478 <_dtoa_r+0x810>
 800b592:	9b08      	ldr	r3, [sp, #32]
 800b594:	2b00      	cmp	r3, #0
 800b596:	dc36      	bgt.n	800b606 <_dtoa_r+0x99e>
 800b598:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b59a:	2b02      	cmp	r3, #2
 800b59c:	dd33      	ble.n	800b606 <_dtoa_r+0x99e>
 800b59e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b5a2:	f1b9 0f00 	cmp.w	r9, #0
 800b5a6:	d10d      	bne.n	800b5c4 <_dtoa_r+0x95c>
 800b5a8:	4621      	mov	r1, r4
 800b5aa:	464b      	mov	r3, r9
 800b5ac:	2205      	movs	r2, #5
 800b5ae:	4628      	mov	r0, r5
 800b5b0:	f000 f9d2 	bl	800b958 <__multadd>
 800b5b4:	4601      	mov	r1, r0
 800b5b6:	4604      	mov	r4, r0
 800b5b8:	4658      	mov	r0, fp
 800b5ba:	f000 fbe9 	bl	800bd90 <__mcmp>
 800b5be:	2800      	cmp	r0, #0
 800b5c0:	f73f adb8 	bgt.w	800b134 <_dtoa_r+0x4cc>
 800b5c4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b5c6:	9f03      	ldr	r7, [sp, #12]
 800b5c8:	ea6f 0a03 	mvn.w	sl, r3
 800b5cc:	f04f 0800 	mov.w	r8, #0
 800b5d0:	4621      	mov	r1, r4
 800b5d2:	4628      	mov	r0, r5
 800b5d4:	f000 f99e 	bl	800b914 <_Bfree>
 800b5d8:	2e00      	cmp	r6, #0
 800b5da:	f43f aea7 	beq.w	800b32c <_dtoa_r+0x6c4>
 800b5de:	f1b8 0f00 	cmp.w	r8, #0
 800b5e2:	d005      	beq.n	800b5f0 <_dtoa_r+0x988>
 800b5e4:	45b0      	cmp	r8, r6
 800b5e6:	d003      	beq.n	800b5f0 <_dtoa_r+0x988>
 800b5e8:	4641      	mov	r1, r8
 800b5ea:	4628      	mov	r0, r5
 800b5ec:	f000 f992 	bl	800b914 <_Bfree>
 800b5f0:	4631      	mov	r1, r6
 800b5f2:	4628      	mov	r0, r5
 800b5f4:	f000 f98e 	bl	800b914 <_Bfree>
 800b5f8:	e698      	b.n	800b32c <_dtoa_r+0x6c4>
 800b5fa:	2400      	movs	r4, #0
 800b5fc:	4626      	mov	r6, r4
 800b5fe:	e7e1      	b.n	800b5c4 <_dtoa_r+0x95c>
 800b600:	46c2      	mov	sl, r8
 800b602:	4626      	mov	r6, r4
 800b604:	e596      	b.n	800b134 <_dtoa_r+0x4cc>
 800b606:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b608:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	f000 80fd 	beq.w	800b80c <_dtoa_r+0xba4>
 800b612:	2f00      	cmp	r7, #0
 800b614:	dd05      	ble.n	800b622 <_dtoa_r+0x9ba>
 800b616:	4631      	mov	r1, r6
 800b618:	463a      	mov	r2, r7
 800b61a:	4628      	mov	r0, r5
 800b61c:	f000 fb48 	bl	800bcb0 <__lshift>
 800b620:	4606      	mov	r6, r0
 800b622:	f1b8 0f00 	cmp.w	r8, #0
 800b626:	d05c      	beq.n	800b6e2 <_dtoa_r+0xa7a>
 800b628:	4628      	mov	r0, r5
 800b62a:	6871      	ldr	r1, [r6, #4]
 800b62c:	f000 f932 	bl	800b894 <_Balloc>
 800b630:	4607      	mov	r7, r0
 800b632:	b928      	cbnz	r0, 800b640 <_dtoa_r+0x9d8>
 800b634:	4602      	mov	r2, r0
 800b636:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b63a:	4b7f      	ldr	r3, [pc, #508]	; (800b838 <_dtoa_r+0xbd0>)
 800b63c:	f7ff bb28 	b.w	800ac90 <_dtoa_r+0x28>
 800b640:	6932      	ldr	r2, [r6, #16]
 800b642:	f106 010c 	add.w	r1, r6, #12
 800b646:	3202      	adds	r2, #2
 800b648:	0092      	lsls	r2, r2, #2
 800b64a:	300c      	adds	r0, #12
 800b64c:	f000 f914 	bl	800b878 <memcpy>
 800b650:	2201      	movs	r2, #1
 800b652:	4639      	mov	r1, r7
 800b654:	4628      	mov	r0, r5
 800b656:	f000 fb2b 	bl	800bcb0 <__lshift>
 800b65a:	46b0      	mov	r8, r6
 800b65c:	4606      	mov	r6, r0
 800b65e:	9b03      	ldr	r3, [sp, #12]
 800b660:	3301      	adds	r3, #1
 800b662:	9308      	str	r3, [sp, #32]
 800b664:	9b03      	ldr	r3, [sp, #12]
 800b666:	444b      	add	r3, r9
 800b668:	930a      	str	r3, [sp, #40]	; 0x28
 800b66a:	9b04      	ldr	r3, [sp, #16]
 800b66c:	f003 0301 	and.w	r3, r3, #1
 800b670:	9309      	str	r3, [sp, #36]	; 0x24
 800b672:	9b08      	ldr	r3, [sp, #32]
 800b674:	4621      	mov	r1, r4
 800b676:	3b01      	subs	r3, #1
 800b678:	4658      	mov	r0, fp
 800b67a:	9304      	str	r3, [sp, #16]
 800b67c:	f7ff fa68 	bl	800ab50 <quorem>
 800b680:	4603      	mov	r3, r0
 800b682:	4641      	mov	r1, r8
 800b684:	3330      	adds	r3, #48	; 0x30
 800b686:	9006      	str	r0, [sp, #24]
 800b688:	4658      	mov	r0, fp
 800b68a:	930b      	str	r3, [sp, #44]	; 0x2c
 800b68c:	f000 fb80 	bl	800bd90 <__mcmp>
 800b690:	4632      	mov	r2, r6
 800b692:	4681      	mov	r9, r0
 800b694:	4621      	mov	r1, r4
 800b696:	4628      	mov	r0, r5
 800b698:	f000 fb96 	bl	800bdc8 <__mdiff>
 800b69c:	68c2      	ldr	r2, [r0, #12]
 800b69e:	4607      	mov	r7, r0
 800b6a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b6a2:	bb02      	cbnz	r2, 800b6e6 <_dtoa_r+0xa7e>
 800b6a4:	4601      	mov	r1, r0
 800b6a6:	4658      	mov	r0, fp
 800b6a8:	f000 fb72 	bl	800bd90 <__mcmp>
 800b6ac:	4602      	mov	r2, r0
 800b6ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b6b0:	4639      	mov	r1, r7
 800b6b2:	4628      	mov	r0, r5
 800b6b4:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800b6b8:	f000 f92c 	bl	800b914 <_Bfree>
 800b6bc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b6be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b6c0:	9f08      	ldr	r7, [sp, #32]
 800b6c2:	ea43 0102 	orr.w	r1, r3, r2
 800b6c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6c8:	430b      	orrs	r3, r1
 800b6ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b6cc:	d10d      	bne.n	800b6ea <_dtoa_r+0xa82>
 800b6ce:	2b39      	cmp	r3, #57	; 0x39
 800b6d0:	d029      	beq.n	800b726 <_dtoa_r+0xabe>
 800b6d2:	f1b9 0f00 	cmp.w	r9, #0
 800b6d6:	dd01      	ble.n	800b6dc <_dtoa_r+0xa74>
 800b6d8:	9b06      	ldr	r3, [sp, #24]
 800b6da:	3331      	adds	r3, #49	; 0x31
 800b6dc:	9a04      	ldr	r2, [sp, #16]
 800b6de:	7013      	strb	r3, [r2, #0]
 800b6e0:	e776      	b.n	800b5d0 <_dtoa_r+0x968>
 800b6e2:	4630      	mov	r0, r6
 800b6e4:	e7b9      	b.n	800b65a <_dtoa_r+0x9f2>
 800b6e6:	2201      	movs	r2, #1
 800b6e8:	e7e2      	b.n	800b6b0 <_dtoa_r+0xa48>
 800b6ea:	f1b9 0f00 	cmp.w	r9, #0
 800b6ee:	db06      	blt.n	800b6fe <_dtoa_r+0xa96>
 800b6f0:	9922      	ldr	r1, [sp, #136]	; 0x88
 800b6f2:	ea41 0909 	orr.w	r9, r1, r9
 800b6f6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b6f8:	ea59 0101 	orrs.w	r1, r9, r1
 800b6fc:	d120      	bne.n	800b740 <_dtoa_r+0xad8>
 800b6fe:	2a00      	cmp	r2, #0
 800b700:	ddec      	ble.n	800b6dc <_dtoa_r+0xa74>
 800b702:	4659      	mov	r1, fp
 800b704:	2201      	movs	r2, #1
 800b706:	4628      	mov	r0, r5
 800b708:	9308      	str	r3, [sp, #32]
 800b70a:	f000 fad1 	bl	800bcb0 <__lshift>
 800b70e:	4621      	mov	r1, r4
 800b710:	4683      	mov	fp, r0
 800b712:	f000 fb3d 	bl	800bd90 <__mcmp>
 800b716:	2800      	cmp	r0, #0
 800b718:	9b08      	ldr	r3, [sp, #32]
 800b71a:	dc02      	bgt.n	800b722 <_dtoa_r+0xaba>
 800b71c:	d1de      	bne.n	800b6dc <_dtoa_r+0xa74>
 800b71e:	07da      	lsls	r2, r3, #31
 800b720:	d5dc      	bpl.n	800b6dc <_dtoa_r+0xa74>
 800b722:	2b39      	cmp	r3, #57	; 0x39
 800b724:	d1d8      	bne.n	800b6d8 <_dtoa_r+0xa70>
 800b726:	2339      	movs	r3, #57	; 0x39
 800b728:	9a04      	ldr	r2, [sp, #16]
 800b72a:	7013      	strb	r3, [r2, #0]
 800b72c:	463b      	mov	r3, r7
 800b72e:	461f      	mov	r7, r3
 800b730:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800b734:	3b01      	subs	r3, #1
 800b736:	2a39      	cmp	r2, #57	; 0x39
 800b738:	d050      	beq.n	800b7dc <_dtoa_r+0xb74>
 800b73a:	3201      	adds	r2, #1
 800b73c:	701a      	strb	r2, [r3, #0]
 800b73e:	e747      	b.n	800b5d0 <_dtoa_r+0x968>
 800b740:	2a00      	cmp	r2, #0
 800b742:	dd03      	ble.n	800b74c <_dtoa_r+0xae4>
 800b744:	2b39      	cmp	r3, #57	; 0x39
 800b746:	d0ee      	beq.n	800b726 <_dtoa_r+0xabe>
 800b748:	3301      	adds	r3, #1
 800b74a:	e7c7      	b.n	800b6dc <_dtoa_r+0xa74>
 800b74c:	9a08      	ldr	r2, [sp, #32]
 800b74e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b750:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b754:	428a      	cmp	r2, r1
 800b756:	d02a      	beq.n	800b7ae <_dtoa_r+0xb46>
 800b758:	4659      	mov	r1, fp
 800b75a:	2300      	movs	r3, #0
 800b75c:	220a      	movs	r2, #10
 800b75e:	4628      	mov	r0, r5
 800b760:	f000 f8fa 	bl	800b958 <__multadd>
 800b764:	45b0      	cmp	r8, r6
 800b766:	4683      	mov	fp, r0
 800b768:	f04f 0300 	mov.w	r3, #0
 800b76c:	f04f 020a 	mov.w	r2, #10
 800b770:	4641      	mov	r1, r8
 800b772:	4628      	mov	r0, r5
 800b774:	d107      	bne.n	800b786 <_dtoa_r+0xb1e>
 800b776:	f000 f8ef 	bl	800b958 <__multadd>
 800b77a:	4680      	mov	r8, r0
 800b77c:	4606      	mov	r6, r0
 800b77e:	9b08      	ldr	r3, [sp, #32]
 800b780:	3301      	adds	r3, #1
 800b782:	9308      	str	r3, [sp, #32]
 800b784:	e775      	b.n	800b672 <_dtoa_r+0xa0a>
 800b786:	f000 f8e7 	bl	800b958 <__multadd>
 800b78a:	4631      	mov	r1, r6
 800b78c:	4680      	mov	r8, r0
 800b78e:	2300      	movs	r3, #0
 800b790:	220a      	movs	r2, #10
 800b792:	4628      	mov	r0, r5
 800b794:	f000 f8e0 	bl	800b958 <__multadd>
 800b798:	4606      	mov	r6, r0
 800b79a:	e7f0      	b.n	800b77e <_dtoa_r+0xb16>
 800b79c:	f1b9 0f00 	cmp.w	r9, #0
 800b7a0:	bfcc      	ite	gt
 800b7a2:	464f      	movgt	r7, r9
 800b7a4:	2701      	movle	r7, #1
 800b7a6:	f04f 0800 	mov.w	r8, #0
 800b7aa:	9a03      	ldr	r2, [sp, #12]
 800b7ac:	4417      	add	r7, r2
 800b7ae:	4659      	mov	r1, fp
 800b7b0:	2201      	movs	r2, #1
 800b7b2:	4628      	mov	r0, r5
 800b7b4:	9308      	str	r3, [sp, #32]
 800b7b6:	f000 fa7b 	bl	800bcb0 <__lshift>
 800b7ba:	4621      	mov	r1, r4
 800b7bc:	4683      	mov	fp, r0
 800b7be:	f000 fae7 	bl	800bd90 <__mcmp>
 800b7c2:	2800      	cmp	r0, #0
 800b7c4:	dcb2      	bgt.n	800b72c <_dtoa_r+0xac4>
 800b7c6:	d102      	bne.n	800b7ce <_dtoa_r+0xb66>
 800b7c8:	9b08      	ldr	r3, [sp, #32]
 800b7ca:	07db      	lsls	r3, r3, #31
 800b7cc:	d4ae      	bmi.n	800b72c <_dtoa_r+0xac4>
 800b7ce:	463b      	mov	r3, r7
 800b7d0:	461f      	mov	r7, r3
 800b7d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b7d6:	2a30      	cmp	r2, #48	; 0x30
 800b7d8:	d0fa      	beq.n	800b7d0 <_dtoa_r+0xb68>
 800b7da:	e6f9      	b.n	800b5d0 <_dtoa_r+0x968>
 800b7dc:	9a03      	ldr	r2, [sp, #12]
 800b7de:	429a      	cmp	r2, r3
 800b7e0:	d1a5      	bne.n	800b72e <_dtoa_r+0xac6>
 800b7e2:	2331      	movs	r3, #49	; 0x31
 800b7e4:	f10a 0a01 	add.w	sl, sl, #1
 800b7e8:	e779      	b.n	800b6de <_dtoa_r+0xa76>
 800b7ea:	4b14      	ldr	r3, [pc, #80]	; (800b83c <_dtoa_r+0xbd4>)
 800b7ec:	f7ff baa8 	b.w	800ad40 <_dtoa_r+0xd8>
 800b7f0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	f47f aa81 	bne.w	800acfa <_dtoa_r+0x92>
 800b7f8:	4b11      	ldr	r3, [pc, #68]	; (800b840 <_dtoa_r+0xbd8>)
 800b7fa:	f7ff baa1 	b.w	800ad40 <_dtoa_r+0xd8>
 800b7fe:	f1b9 0f00 	cmp.w	r9, #0
 800b802:	dc03      	bgt.n	800b80c <_dtoa_r+0xba4>
 800b804:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b806:	2b02      	cmp	r3, #2
 800b808:	f73f aecb 	bgt.w	800b5a2 <_dtoa_r+0x93a>
 800b80c:	9f03      	ldr	r7, [sp, #12]
 800b80e:	4621      	mov	r1, r4
 800b810:	4658      	mov	r0, fp
 800b812:	f7ff f99d 	bl	800ab50 <quorem>
 800b816:	9a03      	ldr	r2, [sp, #12]
 800b818:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800b81c:	f807 3b01 	strb.w	r3, [r7], #1
 800b820:	1aba      	subs	r2, r7, r2
 800b822:	4591      	cmp	r9, r2
 800b824:	ddba      	ble.n	800b79c <_dtoa_r+0xb34>
 800b826:	4659      	mov	r1, fp
 800b828:	2300      	movs	r3, #0
 800b82a:	220a      	movs	r2, #10
 800b82c:	4628      	mov	r0, r5
 800b82e:	f000 f893 	bl	800b958 <__multadd>
 800b832:	4683      	mov	fp, r0
 800b834:	e7eb      	b.n	800b80e <_dtoa_r+0xba6>
 800b836:	bf00      	nop
 800b838:	0800d13f 	.word	0x0800d13f
 800b83c:	0800d09c 	.word	0x0800d09c
 800b840:	0800d0c0 	.word	0x0800d0c0

0800b844 <_localeconv_r>:
 800b844:	4800      	ldr	r0, [pc, #0]	; (800b848 <_localeconv_r+0x4>)
 800b846:	4770      	bx	lr
 800b848:	200002d0 	.word	0x200002d0

0800b84c <malloc>:
 800b84c:	4b02      	ldr	r3, [pc, #8]	; (800b858 <malloc+0xc>)
 800b84e:	4601      	mov	r1, r0
 800b850:	6818      	ldr	r0, [r3, #0]
 800b852:	f000 bc1d 	b.w	800c090 <_malloc_r>
 800b856:	bf00      	nop
 800b858:	2000017c 	.word	0x2000017c

0800b85c <memchr>:
 800b85c:	4603      	mov	r3, r0
 800b85e:	b510      	push	{r4, lr}
 800b860:	b2c9      	uxtb	r1, r1
 800b862:	4402      	add	r2, r0
 800b864:	4293      	cmp	r3, r2
 800b866:	4618      	mov	r0, r3
 800b868:	d101      	bne.n	800b86e <memchr+0x12>
 800b86a:	2000      	movs	r0, #0
 800b86c:	e003      	b.n	800b876 <memchr+0x1a>
 800b86e:	7804      	ldrb	r4, [r0, #0]
 800b870:	3301      	adds	r3, #1
 800b872:	428c      	cmp	r4, r1
 800b874:	d1f6      	bne.n	800b864 <memchr+0x8>
 800b876:	bd10      	pop	{r4, pc}

0800b878 <memcpy>:
 800b878:	440a      	add	r2, r1
 800b87a:	4291      	cmp	r1, r2
 800b87c:	f100 33ff 	add.w	r3, r0, #4294967295
 800b880:	d100      	bne.n	800b884 <memcpy+0xc>
 800b882:	4770      	bx	lr
 800b884:	b510      	push	{r4, lr}
 800b886:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b88a:	4291      	cmp	r1, r2
 800b88c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b890:	d1f9      	bne.n	800b886 <memcpy+0xe>
 800b892:	bd10      	pop	{r4, pc}

0800b894 <_Balloc>:
 800b894:	b570      	push	{r4, r5, r6, lr}
 800b896:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b898:	4604      	mov	r4, r0
 800b89a:	460d      	mov	r5, r1
 800b89c:	b976      	cbnz	r6, 800b8bc <_Balloc+0x28>
 800b89e:	2010      	movs	r0, #16
 800b8a0:	f7ff ffd4 	bl	800b84c <malloc>
 800b8a4:	4602      	mov	r2, r0
 800b8a6:	6260      	str	r0, [r4, #36]	; 0x24
 800b8a8:	b920      	cbnz	r0, 800b8b4 <_Balloc+0x20>
 800b8aa:	2166      	movs	r1, #102	; 0x66
 800b8ac:	4b17      	ldr	r3, [pc, #92]	; (800b90c <_Balloc+0x78>)
 800b8ae:	4818      	ldr	r0, [pc, #96]	; (800b910 <_Balloc+0x7c>)
 800b8b0:	f000 fdce 	bl	800c450 <__assert_func>
 800b8b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b8b8:	6006      	str	r6, [r0, #0]
 800b8ba:	60c6      	str	r6, [r0, #12]
 800b8bc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b8be:	68f3      	ldr	r3, [r6, #12]
 800b8c0:	b183      	cbz	r3, 800b8e4 <_Balloc+0x50>
 800b8c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b8c4:	68db      	ldr	r3, [r3, #12]
 800b8c6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b8ca:	b9b8      	cbnz	r0, 800b8fc <_Balloc+0x68>
 800b8cc:	2101      	movs	r1, #1
 800b8ce:	fa01 f605 	lsl.w	r6, r1, r5
 800b8d2:	1d72      	adds	r2, r6, #5
 800b8d4:	4620      	mov	r0, r4
 800b8d6:	0092      	lsls	r2, r2, #2
 800b8d8:	f000 fb5e 	bl	800bf98 <_calloc_r>
 800b8dc:	b160      	cbz	r0, 800b8f8 <_Balloc+0x64>
 800b8de:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b8e2:	e00e      	b.n	800b902 <_Balloc+0x6e>
 800b8e4:	2221      	movs	r2, #33	; 0x21
 800b8e6:	2104      	movs	r1, #4
 800b8e8:	4620      	mov	r0, r4
 800b8ea:	f000 fb55 	bl	800bf98 <_calloc_r>
 800b8ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b8f0:	60f0      	str	r0, [r6, #12]
 800b8f2:	68db      	ldr	r3, [r3, #12]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d1e4      	bne.n	800b8c2 <_Balloc+0x2e>
 800b8f8:	2000      	movs	r0, #0
 800b8fa:	bd70      	pop	{r4, r5, r6, pc}
 800b8fc:	6802      	ldr	r2, [r0, #0]
 800b8fe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b902:	2300      	movs	r3, #0
 800b904:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b908:	e7f7      	b.n	800b8fa <_Balloc+0x66>
 800b90a:	bf00      	nop
 800b90c:	0800d0cd 	.word	0x0800d0cd
 800b910:	0800d150 	.word	0x0800d150

0800b914 <_Bfree>:
 800b914:	b570      	push	{r4, r5, r6, lr}
 800b916:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b918:	4605      	mov	r5, r0
 800b91a:	460c      	mov	r4, r1
 800b91c:	b976      	cbnz	r6, 800b93c <_Bfree+0x28>
 800b91e:	2010      	movs	r0, #16
 800b920:	f7ff ff94 	bl	800b84c <malloc>
 800b924:	4602      	mov	r2, r0
 800b926:	6268      	str	r0, [r5, #36]	; 0x24
 800b928:	b920      	cbnz	r0, 800b934 <_Bfree+0x20>
 800b92a:	218a      	movs	r1, #138	; 0x8a
 800b92c:	4b08      	ldr	r3, [pc, #32]	; (800b950 <_Bfree+0x3c>)
 800b92e:	4809      	ldr	r0, [pc, #36]	; (800b954 <_Bfree+0x40>)
 800b930:	f000 fd8e 	bl	800c450 <__assert_func>
 800b934:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b938:	6006      	str	r6, [r0, #0]
 800b93a:	60c6      	str	r6, [r0, #12]
 800b93c:	b13c      	cbz	r4, 800b94e <_Bfree+0x3a>
 800b93e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b940:	6862      	ldr	r2, [r4, #4]
 800b942:	68db      	ldr	r3, [r3, #12]
 800b944:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b948:	6021      	str	r1, [r4, #0]
 800b94a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b94e:	bd70      	pop	{r4, r5, r6, pc}
 800b950:	0800d0cd 	.word	0x0800d0cd
 800b954:	0800d150 	.word	0x0800d150

0800b958 <__multadd>:
 800b958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b95c:	4607      	mov	r7, r0
 800b95e:	460c      	mov	r4, r1
 800b960:	461e      	mov	r6, r3
 800b962:	2000      	movs	r0, #0
 800b964:	690d      	ldr	r5, [r1, #16]
 800b966:	f101 0c14 	add.w	ip, r1, #20
 800b96a:	f8dc 3000 	ldr.w	r3, [ip]
 800b96e:	3001      	adds	r0, #1
 800b970:	b299      	uxth	r1, r3
 800b972:	fb02 6101 	mla	r1, r2, r1, r6
 800b976:	0c1e      	lsrs	r6, r3, #16
 800b978:	0c0b      	lsrs	r3, r1, #16
 800b97a:	fb02 3306 	mla	r3, r2, r6, r3
 800b97e:	b289      	uxth	r1, r1
 800b980:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b984:	4285      	cmp	r5, r0
 800b986:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b98a:	f84c 1b04 	str.w	r1, [ip], #4
 800b98e:	dcec      	bgt.n	800b96a <__multadd+0x12>
 800b990:	b30e      	cbz	r6, 800b9d6 <__multadd+0x7e>
 800b992:	68a3      	ldr	r3, [r4, #8]
 800b994:	42ab      	cmp	r3, r5
 800b996:	dc19      	bgt.n	800b9cc <__multadd+0x74>
 800b998:	6861      	ldr	r1, [r4, #4]
 800b99a:	4638      	mov	r0, r7
 800b99c:	3101      	adds	r1, #1
 800b99e:	f7ff ff79 	bl	800b894 <_Balloc>
 800b9a2:	4680      	mov	r8, r0
 800b9a4:	b928      	cbnz	r0, 800b9b2 <__multadd+0x5a>
 800b9a6:	4602      	mov	r2, r0
 800b9a8:	21b5      	movs	r1, #181	; 0xb5
 800b9aa:	4b0c      	ldr	r3, [pc, #48]	; (800b9dc <__multadd+0x84>)
 800b9ac:	480c      	ldr	r0, [pc, #48]	; (800b9e0 <__multadd+0x88>)
 800b9ae:	f000 fd4f 	bl	800c450 <__assert_func>
 800b9b2:	6922      	ldr	r2, [r4, #16]
 800b9b4:	f104 010c 	add.w	r1, r4, #12
 800b9b8:	3202      	adds	r2, #2
 800b9ba:	0092      	lsls	r2, r2, #2
 800b9bc:	300c      	adds	r0, #12
 800b9be:	f7ff ff5b 	bl	800b878 <memcpy>
 800b9c2:	4621      	mov	r1, r4
 800b9c4:	4638      	mov	r0, r7
 800b9c6:	f7ff ffa5 	bl	800b914 <_Bfree>
 800b9ca:	4644      	mov	r4, r8
 800b9cc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b9d0:	3501      	adds	r5, #1
 800b9d2:	615e      	str	r6, [r3, #20]
 800b9d4:	6125      	str	r5, [r4, #16]
 800b9d6:	4620      	mov	r0, r4
 800b9d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9dc:	0800d13f 	.word	0x0800d13f
 800b9e0:	0800d150 	.word	0x0800d150

0800b9e4 <__hi0bits>:
 800b9e4:	0c02      	lsrs	r2, r0, #16
 800b9e6:	0412      	lsls	r2, r2, #16
 800b9e8:	4603      	mov	r3, r0
 800b9ea:	b9ca      	cbnz	r2, 800ba20 <__hi0bits+0x3c>
 800b9ec:	0403      	lsls	r3, r0, #16
 800b9ee:	2010      	movs	r0, #16
 800b9f0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b9f4:	bf04      	itt	eq
 800b9f6:	021b      	lsleq	r3, r3, #8
 800b9f8:	3008      	addeq	r0, #8
 800b9fa:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b9fe:	bf04      	itt	eq
 800ba00:	011b      	lsleq	r3, r3, #4
 800ba02:	3004      	addeq	r0, #4
 800ba04:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800ba08:	bf04      	itt	eq
 800ba0a:	009b      	lsleq	r3, r3, #2
 800ba0c:	3002      	addeq	r0, #2
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	db05      	blt.n	800ba1e <__hi0bits+0x3a>
 800ba12:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800ba16:	f100 0001 	add.w	r0, r0, #1
 800ba1a:	bf08      	it	eq
 800ba1c:	2020      	moveq	r0, #32
 800ba1e:	4770      	bx	lr
 800ba20:	2000      	movs	r0, #0
 800ba22:	e7e5      	b.n	800b9f0 <__hi0bits+0xc>

0800ba24 <__lo0bits>:
 800ba24:	6803      	ldr	r3, [r0, #0]
 800ba26:	4602      	mov	r2, r0
 800ba28:	f013 0007 	ands.w	r0, r3, #7
 800ba2c:	d00b      	beq.n	800ba46 <__lo0bits+0x22>
 800ba2e:	07d9      	lsls	r1, r3, #31
 800ba30:	d421      	bmi.n	800ba76 <__lo0bits+0x52>
 800ba32:	0798      	lsls	r0, r3, #30
 800ba34:	bf49      	itett	mi
 800ba36:	085b      	lsrmi	r3, r3, #1
 800ba38:	089b      	lsrpl	r3, r3, #2
 800ba3a:	2001      	movmi	r0, #1
 800ba3c:	6013      	strmi	r3, [r2, #0]
 800ba3e:	bf5c      	itt	pl
 800ba40:	2002      	movpl	r0, #2
 800ba42:	6013      	strpl	r3, [r2, #0]
 800ba44:	4770      	bx	lr
 800ba46:	b299      	uxth	r1, r3
 800ba48:	b909      	cbnz	r1, 800ba4e <__lo0bits+0x2a>
 800ba4a:	2010      	movs	r0, #16
 800ba4c:	0c1b      	lsrs	r3, r3, #16
 800ba4e:	b2d9      	uxtb	r1, r3
 800ba50:	b909      	cbnz	r1, 800ba56 <__lo0bits+0x32>
 800ba52:	3008      	adds	r0, #8
 800ba54:	0a1b      	lsrs	r3, r3, #8
 800ba56:	0719      	lsls	r1, r3, #28
 800ba58:	bf04      	itt	eq
 800ba5a:	091b      	lsreq	r3, r3, #4
 800ba5c:	3004      	addeq	r0, #4
 800ba5e:	0799      	lsls	r1, r3, #30
 800ba60:	bf04      	itt	eq
 800ba62:	089b      	lsreq	r3, r3, #2
 800ba64:	3002      	addeq	r0, #2
 800ba66:	07d9      	lsls	r1, r3, #31
 800ba68:	d403      	bmi.n	800ba72 <__lo0bits+0x4e>
 800ba6a:	085b      	lsrs	r3, r3, #1
 800ba6c:	f100 0001 	add.w	r0, r0, #1
 800ba70:	d003      	beq.n	800ba7a <__lo0bits+0x56>
 800ba72:	6013      	str	r3, [r2, #0]
 800ba74:	4770      	bx	lr
 800ba76:	2000      	movs	r0, #0
 800ba78:	4770      	bx	lr
 800ba7a:	2020      	movs	r0, #32
 800ba7c:	4770      	bx	lr
	...

0800ba80 <__i2b>:
 800ba80:	b510      	push	{r4, lr}
 800ba82:	460c      	mov	r4, r1
 800ba84:	2101      	movs	r1, #1
 800ba86:	f7ff ff05 	bl	800b894 <_Balloc>
 800ba8a:	4602      	mov	r2, r0
 800ba8c:	b928      	cbnz	r0, 800ba9a <__i2b+0x1a>
 800ba8e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ba92:	4b04      	ldr	r3, [pc, #16]	; (800baa4 <__i2b+0x24>)
 800ba94:	4804      	ldr	r0, [pc, #16]	; (800baa8 <__i2b+0x28>)
 800ba96:	f000 fcdb 	bl	800c450 <__assert_func>
 800ba9a:	2301      	movs	r3, #1
 800ba9c:	6144      	str	r4, [r0, #20]
 800ba9e:	6103      	str	r3, [r0, #16]
 800baa0:	bd10      	pop	{r4, pc}
 800baa2:	bf00      	nop
 800baa4:	0800d13f 	.word	0x0800d13f
 800baa8:	0800d150 	.word	0x0800d150

0800baac <__multiply>:
 800baac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bab0:	4691      	mov	r9, r2
 800bab2:	690a      	ldr	r2, [r1, #16]
 800bab4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bab8:	460c      	mov	r4, r1
 800baba:	429a      	cmp	r2, r3
 800babc:	bfbe      	ittt	lt
 800babe:	460b      	movlt	r3, r1
 800bac0:	464c      	movlt	r4, r9
 800bac2:	4699      	movlt	r9, r3
 800bac4:	6927      	ldr	r7, [r4, #16]
 800bac6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800baca:	68a3      	ldr	r3, [r4, #8]
 800bacc:	6861      	ldr	r1, [r4, #4]
 800bace:	eb07 060a 	add.w	r6, r7, sl
 800bad2:	42b3      	cmp	r3, r6
 800bad4:	b085      	sub	sp, #20
 800bad6:	bfb8      	it	lt
 800bad8:	3101      	addlt	r1, #1
 800bada:	f7ff fedb 	bl	800b894 <_Balloc>
 800bade:	b930      	cbnz	r0, 800baee <__multiply+0x42>
 800bae0:	4602      	mov	r2, r0
 800bae2:	f240 115d 	movw	r1, #349	; 0x15d
 800bae6:	4b43      	ldr	r3, [pc, #268]	; (800bbf4 <__multiply+0x148>)
 800bae8:	4843      	ldr	r0, [pc, #268]	; (800bbf8 <__multiply+0x14c>)
 800baea:	f000 fcb1 	bl	800c450 <__assert_func>
 800baee:	f100 0514 	add.w	r5, r0, #20
 800baf2:	462b      	mov	r3, r5
 800baf4:	2200      	movs	r2, #0
 800baf6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bafa:	4543      	cmp	r3, r8
 800bafc:	d321      	bcc.n	800bb42 <__multiply+0x96>
 800bafe:	f104 0314 	add.w	r3, r4, #20
 800bb02:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800bb06:	f109 0314 	add.w	r3, r9, #20
 800bb0a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800bb0e:	9202      	str	r2, [sp, #8]
 800bb10:	1b3a      	subs	r2, r7, r4
 800bb12:	3a15      	subs	r2, #21
 800bb14:	f022 0203 	bic.w	r2, r2, #3
 800bb18:	3204      	adds	r2, #4
 800bb1a:	f104 0115 	add.w	r1, r4, #21
 800bb1e:	428f      	cmp	r7, r1
 800bb20:	bf38      	it	cc
 800bb22:	2204      	movcc	r2, #4
 800bb24:	9201      	str	r2, [sp, #4]
 800bb26:	9a02      	ldr	r2, [sp, #8]
 800bb28:	9303      	str	r3, [sp, #12]
 800bb2a:	429a      	cmp	r2, r3
 800bb2c:	d80c      	bhi.n	800bb48 <__multiply+0x9c>
 800bb2e:	2e00      	cmp	r6, #0
 800bb30:	dd03      	ble.n	800bb3a <__multiply+0x8e>
 800bb32:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d059      	beq.n	800bbee <__multiply+0x142>
 800bb3a:	6106      	str	r6, [r0, #16]
 800bb3c:	b005      	add	sp, #20
 800bb3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb42:	f843 2b04 	str.w	r2, [r3], #4
 800bb46:	e7d8      	b.n	800bafa <__multiply+0x4e>
 800bb48:	f8b3 a000 	ldrh.w	sl, [r3]
 800bb4c:	f1ba 0f00 	cmp.w	sl, #0
 800bb50:	d023      	beq.n	800bb9a <__multiply+0xee>
 800bb52:	46a9      	mov	r9, r5
 800bb54:	f04f 0c00 	mov.w	ip, #0
 800bb58:	f104 0e14 	add.w	lr, r4, #20
 800bb5c:	f85e 2b04 	ldr.w	r2, [lr], #4
 800bb60:	f8d9 1000 	ldr.w	r1, [r9]
 800bb64:	fa1f fb82 	uxth.w	fp, r2
 800bb68:	b289      	uxth	r1, r1
 800bb6a:	fb0a 110b 	mla	r1, sl, fp, r1
 800bb6e:	4461      	add	r1, ip
 800bb70:	f8d9 c000 	ldr.w	ip, [r9]
 800bb74:	0c12      	lsrs	r2, r2, #16
 800bb76:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800bb7a:	fb0a c202 	mla	r2, sl, r2, ip
 800bb7e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bb82:	b289      	uxth	r1, r1
 800bb84:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bb88:	4577      	cmp	r7, lr
 800bb8a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bb8e:	f849 1b04 	str.w	r1, [r9], #4
 800bb92:	d8e3      	bhi.n	800bb5c <__multiply+0xb0>
 800bb94:	9a01      	ldr	r2, [sp, #4]
 800bb96:	f845 c002 	str.w	ip, [r5, r2]
 800bb9a:	9a03      	ldr	r2, [sp, #12]
 800bb9c:	3304      	adds	r3, #4
 800bb9e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bba2:	f1b9 0f00 	cmp.w	r9, #0
 800bba6:	d020      	beq.n	800bbea <__multiply+0x13e>
 800bba8:	46ae      	mov	lr, r5
 800bbaa:	f04f 0a00 	mov.w	sl, #0
 800bbae:	6829      	ldr	r1, [r5, #0]
 800bbb0:	f104 0c14 	add.w	ip, r4, #20
 800bbb4:	f8bc b000 	ldrh.w	fp, [ip]
 800bbb8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800bbbc:	b289      	uxth	r1, r1
 800bbbe:	fb09 220b 	mla	r2, r9, fp, r2
 800bbc2:	4492      	add	sl, r2
 800bbc4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800bbc8:	f84e 1b04 	str.w	r1, [lr], #4
 800bbcc:	f85c 2b04 	ldr.w	r2, [ip], #4
 800bbd0:	f8be 1000 	ldrh.w	r1, [lr]
 800bbd4:	0c12      	lsrs	r2, r2, #16
 800bbd6:	fb09 1102 	mla	r1, r9, r2, r1
 800bbda:	4567      	cmp	r7, ip
 800bbdc:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800bbe0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bbe4:	d8e6      	bhi.n	800bbb4 <__multiply+0x108>
 800bbe6:	9a01      	ldr	r2, [sp, #4]
 800bbe8:	50a9      	str	r1, [r5, r2]
 800bbea:	3504      	adds	r5, #4
 800bbec:	e79b      	b.n	800bb26 <__multiply+0x7a>
 800bbee:	3e01      	subs	r6, #1
 800bbf0:	e79d      	b.n	800bb2e <__multiply+0x82>
 800bbf2:	bf00      	nop
 800bbf4:	0800d13f 	.word	0x0800d13f
 800bbf8:	0800d150 	.word	0x0800d150

0800bbfc <__pow5mult>:
 800bbfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc00:	4615      	mov	r5, r2
 800bc02:	f012 0203 	ands.w	r2, r2, #3
 800bc06:	4606      	mov	r6, r0
 800bc08:	460f      	mov	r7, r1
 800bc0a:	d007      	beq.n	800bc1c <__pow5mult+0x20>
 800bc0c:	4c25      	ldr	r4, [pc, #148]	; (800bca4 <__pow5mult+0xa8>)
 800bc0e:	3a01      	subs	r2, #1
 800bc10:	2300      	movs	r3, #0
 800bc12:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bc16:	f7ff fe9f 	bl	800b958 <__multadd>
 800bc1a:	4607      	mov	r7, r0
 800bc1c:	10ad      	asrs	r5, r5, #2
 800bc1e:	d03d      	beq.n	800bc9c <__pow5mult+0xa0>
 800bc20:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800bc22:	b97c      	cbnz	r4, 800bc44 <__pow5mult+0x48>
 800bc24:	2010      	movs	r0, #16
 800bc26:	f7ff fe11 	bl	800b84c <malloc>
 800bc2a:	4602      	mov	r2, r0
 800bc2c:	6270      	str	r0, [r6, #36]	; 0x24
 800bc2e:	b928      	cbnz	r0, 800bc3c <__pow5mult+0x40>
 800bc30:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800bc34:	4b1c      	ldr	r3, [pc, #112]	; (800bca8 <__pow5mult+0xac>)
 800bc36:	481d      	ldr	r0, [pc, #116]	; (800bcac <__pow5mult+0xb0>)
 800bc38:	f000 fc0a 	bl	800c450 <__assert_func>
 800bc3c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bc40:	6004      	str	r4, [r0, #0]
 800bc42:	60c4      	str	r4, [r0, #12]
 800bc44:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800bc48:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bc4c:	b94c      	cbnz	r4, 800bc62 <__pow5mult+0x66>
 800bc4e:	f240 2171 	movw	r1, #625	; 0x271
 800bc52:	4630      	mov	r0, r6
 800bc54:	f7ff ff14 	bl	800ba80 <__i2b>
 800bc58:	2300      	movs	r3, #0
 800bc5a:	4604      	mov	r4, r0
 800bc5c:	f8c8 0008 	str.w	r0, [r8, #8]
 800bc60:	6003      	str	r3, [r0, #0]
 800bc62:	f04f 0900 	mov.w	r9, #0
 800bc66:	07eb      	lsls	r3, r5, #31
 800bc68:	d50a      	bpl.n	800bc80 <__pow5mult+0x84>
 800bc6a:	4639      	mov	r1, r7
 800bc6c:	4622      	mov	r2, r4
 800bc6e:	4630      	mov	r0, r6
 800bc70:	f7ff ff1c 	bl	800baac <__multiply>
 800bc74:	4680      	mov	r8, r0
 800bc76:	4639      	mov	r1, r7
 800bc78:	4630      	mov	r0, r6
 800bc7a:	f7ff fe4b 	bl	800b914 <_Bfree>
 800bc7e:	4647      	mov	r7, r8
 800bc80:	106d      	asrs	r5, r5, #1
 800bc82:	d00b      	beq.n	800bc9c <__pow5mult+0xa0>
 800bc84:	6820      	ldr	r0, [r4, #0]
 800bc86:	b938      	cbnz	r0, 800bc98 <__pow5mult+0x9c>
 800bc88:	4622      	mov	r2, r4
 800bc8a:	4621      	mov	r1, r4
 800bc8c:	4630      	mov	r0, r6
 800bc8e:	f7ff ff0d 	bl	800baac <__multiply>
 800bc92:	6020      	str	r0, [r4, #0]
 800bc94:	f8c0 9000 	str.w	r9, [r0]
 800bc98:	4604      	mov	r4, r0
 800bc9a:	e7e4      	b.n	800bc66 <__pow5mult+0x6a>
 800bc9c:	4638      	mov	r0, r7
 800bc9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bca2:	bf00      	nop
 800bca4:	0800d2a0 	.word	0x0800d2a0
 800bca8:	0800d0cd 	.word	0x0800d0cd
 800bcac:	0800d150 	.word	0x0800d150

0800bcb0 <__lshift>:
 800bcb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bcb4:	460c      	mov	r4, r1
 800bcb6:	4607      	mov	r7, r0
 800bcb8:	4691      	mov	r9, r2
 800bcba:	6923      	ldr	r3, [r4, #16]
 800bcbc:	6849      	ldr	r1, [r1, #4]
 800bcbe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bcc2:	68a3      	ldr	r3, [r4, #8]
 800bcc4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bcc8:	f108 0601 	add.w	r6, r8, #1
 800bccc:	42b3      	cmp	r3, r6
 800bcce:	db0b      	blt.n	800bce8 <__lshift+0x38>
 800bcd0:	4638      	mov	r0, r7
 800bcd2:	f7ff fddf 	bl	800b894 <_Balloc>
 800bcd6:	4605      	mov	r5, r0
 800bcd8:	b948      	cbnz	r0, 800bcee <__lshift+0x3e>
 800bcda:	4602      	mov	r2, r0
 800bcdc:	f240 11d9 	movw	r1, #473	; 0x1d9
 800bce0:	4b29      	ldr	r3, [pc, #164]	; (800bd88 <__lshift+0xd8>)
 800bce2:	482a      	ldr	r0, [pc, #168]	; (800bd8c <__lshift+0xdc>)
 800bce4:	f000 fbb4 	bl	800c450 <__assert_func>
 800bce8:	3101      	adds	r1, #1
 800bcea:	005b      	lsls	r3, r3, #1
 800bcec:	e7ee      	b.n	800bccc <__lshift+0x1c>
 800bcee:	2300      	movs	r3, #0
 800bcf0:	f100 0114 	add.w	r1, r0, #20
 800bcf4:	f100 0210 	add.w	r2, r0, #16
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	4553      	cmp	r3, sl
 800bcfc:	db37      	blt.n	800bd6e <__lshift+0xbe>
 800bcfe:	6920      	ldr	r0, [r4, #16]
 800bd00:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bd04:	f104 0314 	add.w	r3, r4, #20
 800bd08:	f019 091f 	ands.w	r9, r9, #31
 800bd0c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bd10:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800bd14:	d02f      	beq.n	800bd76 <__lshift+0xc6>
 800bd16:	468a      	mov	sl, r1
 800bd18:	f04f 0c00 	mov.w	ip, #0
 800bd1c:	f1c9 0e20 	rsb	lr, r9, #32
 800bd20:	681a      	ldr	r2, [r3, #0]
 800bd22:	fa02 f209 	lsl.w	r2, r2, r9
 800bd26:	ea42 020c 	orr.w	r2, r2, ip
 800bd2a:	f84a 2b04 	str.w	r2, [sl], #4
 800bd2e:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd32:	4298      	cmp	r0, r3
 800bd34:	fa22 fc0e 	lsr.w	ip, r2, lr
 800bd38:	d8f2      	bhi.n	800bd20 <__lshift+0x70>
 800bd3a:	1b03      	subs	r3, r0, r4
 800bd3c:	3b15      	subs	r3, #21
 800bd3e:	f023 0303 	bic.w	r3, r3, #3
 800bd42:	3304      	adds	r3, #4
 800bd44:	f104 0215 	add.w	r2, r4, #21
 800bd48:	4290      	cmp	r0, r2
 800bd4a:	bf38      	it	cc
 800bd4c:	2304      	movcc	r3, #4
 800bd4e:	f841 c003 	str.w	ip, [r1, r3]
 800bd52:	f1bc 0f00 	cmp.w	ip, #0
 800bd56:	d001      	beq.n	800bd5c <__lshift+0xac>
 800bd58:	f108 0602 	add.w	r6, r8, #2
 800bd5c:	3e01      	subs	r6, #1
 800bd5e:	4638      	mov	r0, r7
 800bd60:	4621      	mov	r1, r4
 800bd62:	612e      	str	r6, [r5, #16]
 800bd64:	f7ff fdd6 	bl	800b914 <_Bfree>
 800bd68:	4628      	mov	r0, r5
 800bd6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd6e:	f842 0f04 	str.w	r0, [r2, #4]!
 800bd72:	3301      	adds	r3, #1
 800bd74:	e7c1      	b.n	800bcfa <__lshift+0x4a>
 800bd76:	3904      	subs	r1, #4
 800bd78:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd7c:	4298      	cmp	r0, r3
 800bd7e:	f841 2f04 	str.w	r2, [r1, #4]!
 800bd82:	d8f9      	bhi.n	800bd78 <__lshift+0xc8>
 800bd84:	e7ea      	b.n	800bd5c <__lshift+0xac>
 800bd86:	bf00      	nop
 800bd88:	0800d13f 	.word	0x0800d13f
 800bd8c:	0800d150 	.word	0x0800d150

0800bd90 <__mcmp>:
 800bd90:	4603      	mov	r3, r0
 800bd92:	690a      	ldr	r2, [r1, #16]
 800bd94:	6900      	ldr	r0, [r0, #16]
 800bd96:	b530      	push	{r4, r5, lr}
 800bd98:	1a80      	subs	r0, r0, r2
 800bd9a:	d10d      	bne.n	800bdb8 <__mcmp+0x28>
 800bd9c:	3314      	adds	r3, #20
 800bd9e:	3114      	adds	r1, #20
 800bda0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800bda4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800bda8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bdac:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bdb0:	4295      	cmp	r5, r2
 800bdb2:	d002      	beq.n	800bdba <__mcmp+0x2a>
 800bdb4:	d304      	bcc.n	800bdc0 <__mcmp+0x30>
 800bdb6:	2001      	movs	r0, #1
 800bdb8:	bd30      	pop	{r4, r5, pc}
 800bdba:	42a3      	cmp	r3, r4
 800bdbc:	d3f4      	bcc.n	800bda8 <__mcmp+0x18>
 800bdbe:	e7fb      	b.n	800bdb8 <__mcmp+0x28>
 800bdc0:	f04f 30ff 	mov.w	r0, #4294967295
 800bdc4:	e7f8      	b.n	800bdb8 <__mcmp+0x28>
	...

0800bdc8 <__mdiff>:
 800bdc8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdcc:	460d      	mov	r5, r1
 800bdce:	4607      	mov	r7, r0
 800bdd0:	4611      	mov	r1, r2
 800bdd2:	4628      	mov	r0, r5
 800bdd4:	4614      	mov	r4, r2
 800bdd6:	f7ff ffdb 	bl	800bd90 <__mcmp>
 800bdda:	1e06      	subs	r6, r0, #0
 800bddc:	d111      	bne.n	800be02 <__mdiff+0x3a>
 800bdde:	4631      	mov	r1, r6
 800bde0:	4638      	mov	r0, r7
 800bde2:	f7ff fd57 	bl	800b894 <_Balloc>
 800bde6:	4602      	mov	r2, r0
 800bde8:	b928      	cbnz	r0, 800bdf6 <__mdiff+0x2e>
 800bdea:	f240 2132 	movw	r1, #562	; 0x232
 800bdee:	4b3a      	ldr	r3, [pc, #232]	; (800bed8 <__mdiff+0x110>)
 800bdf0:	483a      	ldr	r0, [pc, #232]	; (800bedc <__mdiff+0x114>)
 800bdf2:	f000 fb2d 	bl	800c450 <__assert_func>
 800bdf6:	2301      	movs	r3, #1
 800bdf8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800bdfc:	4610      	mov	r0, r2
 800bdfe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be02:	bfa4      	itt	ge
 800be04:	4623      	movge	r3, r4
 800be06:	462c      	movge	r4, r5
 800be08:	4638      	mov	r0, r7
 800be0a:	6861      	ldr	r1, [r4, #4]
 800be0c:	bfa6      	itte	ge
 800be0e:	461d      	movge	r5, r3
 800be10:	2600      	movge	r6, #0
 800be12:	2601      	movlt	r6, #1
 800be14:	f7ff fd3e 	bl	800b894 <_Balloc>
 800be18:	4602      	mov	r2, r0
 800be1a:	b918      	cbnz	r0, 800be24 <__mdiff+0x5c>
 800be1c:	f44f 7110 	mov.w	r1, #576	; 0x240
 800be20:	4b2d      	ldr	r3, [pc, #180]	; (800bed8 <__mdiff+0x110>)
 800be22:	e7e5      	b.n	800bdf0 <__mdiff+0x28>
 800be24:	f102 0814 	add.w	r8, r2, #20
 800be28:	46c2      	mov	sl, r8
 800be2a:	f04f 0c00 	mov.w	ip, #0
 800be2e:	6927      	ldr	r7, [r4, #16]
 800be30:	60c6      	str	r6, [r0, #12]
 800be32:	692e      	ldr	r6, [r5, #16]
 800be34:	f104 0014 	add.w	r0, r4, #20
 800be38:	f105 0914 	add.w	r9, r5, #20
 800be3c:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800be40:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800be44:	3410      	adds	r4, #16
 800be46:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800be4a:	f859 3b04 	ldr.w	r3, [r9], #4
 800be4e:	fa1f f18b 	uxth.w	r1, fp
 800be52:	448c      	add	ip, r1
 800be54:	b299      	uxth	r1, r3
 800be56:	0c1b      	lsrs	r3, r3, #16
 800be58:	ebac 0101 	sub.w	r1, ip, r1
 800be5c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800be60:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800be64:	b289      	uxth	r1, r1
 800be66:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800be6a:	454e      	cmp	r6, r9
 800be6c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800be70:	f84a 3b04 	str.w	r3, [sl], #4
 800be74:	d8e7      	bhi.n	800be46 <__mdiff+0x7e>
 800be76:	1b73      	subs	r3, r6, r5
 800be78:	3b15      	subs	r3, #21
 800be7a:	f023 0303 	bic.w	r3, r3, #3
 800be7e:	3515      	adds	r5, #21
 800be80:	3304      	adds	r3, #4
 800be82:	42ae      	cmp	r6, r5
 800be84:	bf38      	it	cc
 800be86:	2304      	movcc	r3, #4
 800be88:	4418      	add	r0, r3
 800be8a:	4443      	add	r3, r8
 800be8c:	461e      	mov	r6, r3
 800be8e:	4605      	mov	r5, r0
 800be90:	4575      	cmp	r5, lr
 800be92:	d30e      	bcc.n	800beb2 <__mdiff+0xea>
 800be94:	f10e 0103 	add.w	r1, lr, #3
 800be98:	1a09      	subs	r1, r1, r0
 800be9a:	f021 0103 	bic.w	r1, r1, #3
 800be9e:	3803      	subs	r0, #3
 800bea0:	4586      	cmp	lr, r0
 800bea2:	bf38      	it	cc
 800bea4:	2100      	movcc	r1, #0
 800bea6:	4419      	add	r1, r3
 800bea8:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800beac:	b18b      	cbz	r3, 800bed2 <__mdiff+0x10a>
 800beae:	6117      	str	r7, [r2, #16]
 800beb0:	e7a4      	b.n	800bdfc <__mdiff+0x34>
 800beb2:	f855 8b04 	ldr.w	r8, [r5], #4
 800beb6:	fa1f f188 	uxth.w	r1, r8
 800beba:	4461      	add	r1, ip
 800bebc:	140c      	asrs	r4, r1, #16
 800bebe:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800bec2:	b289      	uxth	r1, r1
 800bec4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800bec8:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800becc:	f846 1b04 	str.w	r1, [r6], #4
 800bed0:	e7de      	b.n	800be90 <__mdiff+0xc8>
 800bed2:	3f01      	subs	r7, #1
 800bed4:	e7e8      	b.n	800bea8 <__mdiff+0xe0>
 800bed6:	bf00      	nop
 800bed8:	0800d13f 	.word	0x0800d13f
 800bedc:	0800d150 	.word	0x0800d150

0800bee0 <__d2b>:
 800bee0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800bee4:	2101      	movs	r1, #1
 800bee6:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800beea:	4690      	mov	r8, r2
 800beec:	461d      	mov	r5, r3
 800beee:	f7ff fcd1 	bl	800b894 <_Balloc>
 800bef2:	4604      	mov	r4, r0
 800bef4:	b930      	cbnz	r0, 800bf04 <__d2b+0x24>
 800bef6:	4602      	mov	r2, r0
 800bef8:	f240 310a 	movw	r1, #778	; 0x30a
 800befc:	4b24      	ldr	r3, [pc, #144]	; (800bf90 <__d2b+0xb0>)
 800befe:	4825      	ldr	r0, [pc, #148]	; (800bf94 <__d2b+0xb4>)
 800bf00:	f000 faa6 	bl	800c450 <__assert_func>
 800bf04:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800bf08:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800bf0c:	bb2d      	cbnz	r5, 800bf5a <__d2b+0x7a>
 800bf0e:	9301      	str	r3, [sp, #4]
 800bf10:	f1b8 0300 	subs.w	r3, r8, #0
 800bf14:	d026      	beq.n	800bf64 <__d2b+0x84>
 800bf16:	4668      	mov	r0, sp
 800bf18:	9300      	str	r3, [sp, #0]
 800bf1a:	f7ff fd83 	bl	800ba24 <__lo0bits>
 800bf1e:	9900      	ldr	r1, [sp, #0]
 800bf20:	b1f0      	cbz	r0, 800bf60 <__d2b+0x80>
 800bf22:	9a01      	ldr	r2, [sp, #4]
 800bf24:	f1c0 0320 	rsb	r3, r0, #32
 800bf28:	fa02 f303 	lsl.w	r3, r2, r3
 800bf2c:	430b      	orrs	r3, r1
 800bf2e:	40c2      	lsrs	r2, r0
 800bf30:	6163      	str	r3, [r4, #20]
 800bf32:	9201      	str	r2, [sp, #4]
 800bf34:	9b01      	ldr	r3, [sp, #4]
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	bf14      	ite	ne
 800bf3a:	2102      	movne	r1, #2
 800bf3c:	2101      	moveq	r1, #1
 800bf3e:	61a3      	str	r3, [r4, #24]
 800bf40:	6121      	str	r1, [r4, #16]
 800bf42:	b1c5      	cbz	r5, 800bf76 <__d2b+0x96>
 800bf44:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bf48:	4405      	add	r5, r0
 800bf4a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bf4e:	603d      	str	r5, [r7, #0]
 800bf50:	6030      	str	r0, [r6, #0]
 800bf52:	4620      	mov	r0, r4
 800bf54:	b002      	add	sp, #8
 800bf56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bf5e:	e7d6      	b.n	800bf0e <__d2b+0x2e>
 800bf60:	6161      	str	r1, [r4, #20]
 800bf62:	e7e7      	b.n	800bf34 <__d2b+0x54>
 800bf64:	a801      	add	r0, sp, #4
 800bf66:	f7ff fd5d 	bl	800ba24 <__lo0bits>
 800bf6a:	2101      	movs	r1, #1
 800bf6c:	9b01      	ldr	r3, [sp, #4]
 800bf6e:	6121      	str	r1, [r4, #16]
 800bf70:	6163      	str	r3, [r4, #20]
 800bf72:	3020      	adds	r0, #32
 800bf74:	e7e5      	b.n	800bf42 <__d2b+0x62>
 800bf76:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800bf7a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bf7e:	6038      	str	r0, [r7, #0]
 800bf80:	6918      	ldr	r0, [r3, #16]
 800bf82:	f7ff fd2f 	bl	800b9e4 <__hi0bits>
 800bf86:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800bf8a:	6031      	str	r1, [r6, #0]
 800bf8c:	e7e1      	b.n	800bf52 <__d2b+0x72>
 800bf8e:	bf00      	nop
 800bf90:	0800d13f 	.word	0x0800d13f
 800bf94:	0800d150 	.word	0x0800d150

0800bf98 <_calloc_r>:
 800bf98:	b570      	push	{r4, r5, r6, lr}
 800bf9a:	fba1 5402 	umull	r5, r4, r1, r2
 800bf9e:	b934      	cbnz	r4, 800bfae <_calloc_r+0x16>
 800bfa0:	4629      	mov	r1, r5
 800bfa2:	f000 f875 	bl	800c090 <_malloc_r>
 800bfa6:	4606      	mov	r6, r0
 800bfa8:	b928      	cbnz	r0, 800bfb6 <_calloc_r+0x1e>
 800bfaa:	4630      	mov	r0, r6
 800bfac:	bd70      	pop	{r4, r5, r6, pc}
 800bfae:	220c      	movs	r2, #12
 800bfb0:	2600      	movs	r6, #0
 800bfb2:	6002      	str	r2, [r0, #0]
 800bfb4:	e7f9      	b.n	800bfaa <_calloc_r+0x12>
 800bfb6:	462a      	mov	r2, r5
 800bfb8:	4621      	mov	r1, r4
 800bfba:	f7fe f941 	bl	800a240 <memset>
 800bfbe:	e7f4      	b.n	800bfaa <_calloc_r+0x12>

0800bfc0 <_free_r>:
 800bfc0:	b538      	push	{r3, r4, r5, lr}
 800bfc2:	4605      	mov	r5, r0
 800bfc4:	2900      	cmp	r1, #0
 800bfc6:	d040      	beq.n	800c04a <_free_r+0x8a>
 800bfc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bfcc:	1f0c      	subs	r4, r1, #4
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	bfb8      	it	lt
 800bfd2:	18e4      	addlt	r4, r4, r3
 800bfd4:	f000 fa98 	bl	800c508 <__malloc_lock>
 800bfd8:	4a1c      	ldr	r2, [pc, #112]	; (800c04c <_free_r+0x8c>)
 800bfda:	6813      	ldr	r3, [r2, #0]
 800bfdc:	b933      	cbnz	r3, 800bfec <_free_r+0x2c>
 800bfde:	6063      	str	r3, [r4, #4]
 800bfe0:	6014      	str	r4, [r2, #0]
 800bfe2:	4628      	mov	r0, r5
 800bfe4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bfe8:	f000 ba94 	b.w	800c514 <__malloc_unlock>
 800bfec:	42a3      	cmp	r3, r4
 800bfee:	d908      	bls.n	800c002 <_free_r+0x42>
 800bff0:	6820      	ldr	r0, [r4, #0]
 800bff2:	1821      	adds	r1, r4, r0
 800bff4:	428b      	cmp	r3, r1
 800bff6:	bf01      	itttt	eq
 800bff8:	6819      	ldreq	r1, [r3, #0]
 800bffa:	685b      	ldreq	r3, [r3, #4]
 800bffc:	1809      	addeq	r1, r1, r0
 800bffe:	6021      	streq	r1, [r4, #0]
 800c000:	e7ed      	b.n	800bfde <_free_r+0x1e>
 800c002:	461a      	mov	r2, r3
 800c004:	685b      	ldr	r3, [r3, #4]
 800c006:	b10b      	cbz	r3, 800c00c <_free_r+0x4c>
 800c008:	42a3      	cmp	r3, r4
 800c00a:	d9fa      	bls.n	800c002 <_free_r+0x42>
 800c00c:	6811      	ldr	r1, [r2, #0]
 800c00e:	1850      	adds	r0, r2, r1
 800c010:	42a0      	cmp	r0, r4
 800c012:	d10b      	bne.n	800c02c <_free_r+0x6c>
 800c014:	6820      	ldr	r0, [r4, #0]
 800c016:	4401      	add	r1, r0
 800c018:	1850      	adds	r0, r2, r1
 800c01a:	4283      	cmp	r3, r0
 800c01c:	6011      	str	r1, [r2, #0]
 800c01e:	d1e0      	bne.n	800bfe2 <_free_r+0x22>
 800c020:	6818      	ldr	r0, [r3, #0]
 800c022:	685b      	ldr	r3, [r3, #4]
 800c024:	4401      	add	r1, r0
 800c026:	6011      	str	r1, [r2, #0]
 800c028:	6053      	str	r3, [r2, #4]
 800c02a:	e7da      	b.n	800bfe2 <_free_r+0x22>
 800c02c:	d902      	bls.n	800c034 <_free_r+0x74>
 800c02e:	230c      	movs	r3, #12
 800c030:	602b      	str	r3, [r5, #0]
 800c032:	e7d6      	b.n	800bfe2 <_free_r+0x22>
 800c034:	6820      	ldr	r0, [r4, #0]
 800c036:	1821      	adds	r1, r4, r0
 800c038:	428b      	cmp	r3, r1
 800c03a:	bf01      	itttt	eq
 800c03c:	6819      	ldreq	r1, [r3, #0]
 800c03e:	685b      	ldreq	r3, [r3, #4]
 800c040:	1809      	addeq	r1, r1, r0
 800c042:	6021      	streq	r1, [r4, #0]
 800c044:	6063      	str	r3, [r4, #4]
 800c046:	6054      	str	r4, [r2, #4]
 800c048:	e7cb      	b.n	800bfe2 <_free_r+0x22>
 800c04a:	bd38      	pop	{r3, r4, r5, pc}
 800c04c:	200015bc 	.word	0x200015bc

0800c050 <sbrk_aligned>:
 800c050:	b570      	push	{r4, r5, r6, lr}
 800c052:	4e0e      	ldr	r6, [pc, #56]	; (800c08c <sbrk_aligned+0x3c>)
 800c054:	460c      	mov	r4, r1
 800c056:	6831      	ldr	r1, [r6, #0]
 800c058:	4605      	mov	r5, r0
 800c05a:	b911      	cbnz	r1, 800c062 <sbrk_aligned+0x12>
 800c05c:	f000 f9e8 	bl	800c430 <_sbrk_r>
 800c060:	6030      	str	r0, [r6, #0]
 800c062:	4621      	mov	r1, r4
 800c064:	4628      	mov	r0, r5
 800c066:	f000 f9e3 	bl	800c430 <_sbrk_r>
 800c06a:	1c43      	adds	r3, r0, #1
 800c06c:	d00a      	beq.n	800c084 <sbrk_aligned+0x34>
 800c06e:	1cc4      	adds	r4, r0, #3
 800c070:	f024 0403 	bic.w	r4, r4, #3
 800c074:	42a0      	cmp	r0, r4
 800c076:	d007      	beq.n	800c088 <sbrk_aligned+0x38>
 800c078:	1a21      	subs	r1, r4, r0
 800c07a:	4628      	mov	r0, r5
 800c07c:	f000 f9d8 	bl	800c430 <_sbrk_r>
 800c080:	3001      	adds	r0, #1
 800c082:	d101      	bne.n	800c088 <sbrk_aligned+0x38>
 800c084:	f04f 34ff 	mov.w	r4, #4294967295
 800c088:	4620      	mov	r0, r4
 800c08a:	bd70      	pop	{r4, r5, r6, pc}
 800c08c:	200015c0 	.word	0x200015c0

0800c090 <_malloc_r>:
 800c090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c094:	1ccd      	adds	r5, r1, #3
 800c096:	f025 0503 	bic.w	r5, r5, #3
 800c09a:	3508      	adds	r5, #8
 800c09c:	2d0c      	cmp	r5, #12
 800c09e:	bf38      	it	cc
 800c0a0:	250c      	movcc	r5, #12
 800c0a2:	2d00      	cmp	r5, #0
 800c0a4:	4607      	mov	r7, r0
 800c0a6:	db01      	blt.n	800c0ac <_malloc_r+0x1c>
 800c0a8:	42a9      	cmp	r1, r5
 800c0aa:	d905      	bls.n	800c0b8 <_malloc_r+0x28>
 800c0ac:	230c      	movs	r3, #12
 800c0ae:	2600      	movs	r6, #0
 800c0b0:	603b      	str	r3, [r7, #0]
 800c0b2:	4630      	mov	r0, r6
 800c0b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0b8:	4e2e      	ldr	r6, [pc, #184]	; (800c174 <_malloc_r+0xe4>)
 800c0ba:	f000 fa25 	bl	800c508 <__malloc_lock>
 800c0be:	6833      	ldr	r3, [r6, #0]
 800c0c0:	461c      	mov	r4, r3
 800c0c2:	bb34      	cbnz	r4, 800c112 <_malloc_r+0x82>
 800c0c4:	4629      	mov	r1, r5
 800c0c6:	4638      	mov	r0, r7
 800c0c8:	f7ff ffc2 	bl	800c050 <sbrk_aligned>
 800c0cc:	1c43      	adds	r3, r0, #1
 800c0ce:	4604      	mov	r4, r0
 800c0d0:	d14d      	bne.n	800c16e <_malloc_r+0xde>
 800c0d2:	6834      	ldr	r4, [r6, #0]
 800c0d4:	4626      	mov	r6, r4
 800c0d6:	2e00      	cmp	r6, #0
 800c0d8:	d140      	bne.n	800c15c <_malloc_r+0xcc>
 800c0da:	6823      	ldr	r3, [r4, #0]
 800c0dc:	4631      	mov	r1, r6
 800c0de:	4638      	mov	r0, r7
 800c0e0:	eb04 0803 	add.w	r8, r4, r3
 800c0e4:	f000 f9a4 	bl	800c430 <_sbrk_r>
 800c0e8:	4580      	cmp	r8, r0
 800c0ea:	d13a      	bne.n	800c162 <_malloc_r+0xd2>
 800c0ec:	6821      	ldr	r1, [r4, #0]
 800c0ee:	3503      	adds	r5, #3
 800c0f0:	1a6d      	subs	r5, r5, r1
 800c0f2:	f025 0503 	bic.w	r5, r5, #3
 800c0f6:	3508      	adds	r5, #8
 800c0f8:	2d0c      	cmp	r5, #12
 800c0fa:	bf38      	it	cc
 800c0fc:	250c      	movcc	r5, #12
 800c0fe:	4638      	mov	r0, r7
 800c100:	4629      	mov	r1, r5
 800c102:	f7ff ffa5 	bl	800c050 <sbrk_aligned>
 800c106:	3001      	adds	r0, #1
 800c108:	d02b      	beq.n	800c162 <_malloc_r+0xd2>
 800c10a:	6823      	ldr	r3, [r4, #0]
 800c10c:	442b      	add	r3, r5
 800c10e:	6023      	str	r3, [r4, #0]
 800c110:	e00e      	b.n	800c130 <_malloc_r+0xa0>
 800c112:	6822      	ldr	r2, [r4, #0]
 800c114:	1b52      	subs	r2, r2, r5
 800c116:	d41e      	bmi.n	800c156 <_malloc_r+0xc6>
 800c118:	2a0b      	cmp	r2, #11
 800c11a:	d916      	bls.n	800c14a <_malloc_r+0xba>
 800c11c:	1961      	adds	r1, r4, r5
 800c11e:	42a3      	cmp	r3, r4
 800c120:	6025      	str	r5, [r4, #0]
 800c122:	bf18      	it	ne
 800c124:	6059      	strne	r1, [r3, #4]
 800c126:	6863      	ldr	r3, [r4, #4]
 800c128:	bf08      	it	eq
 800c12a:	6031      	streq	r1, [r6, #0]
 800c12c:	5162      	str	r2, [r4, r5]
 800c12e:	604b      	str	r3, [r1, #4]
 800c130:	4638      	mov	r0, r7
 800c132:	f104 060b 	add.w	r6, r4, #11
 800c136:	f000 f9ed 	bl	800c514 <__malloc_unlock>
 800c13a:	f026 0607 	bic.w	r6, r6, #7
 800c13e:	1d23      	adds	r3, r4, #4
 800c140:	1af2      	subs	r2, r6, r3
 800c142:	d0b6      	beq.n	800c0b2 <_malloc_r+0x22>
 800c144:	1b9b      	subs	r3, r3, r6
 800c146:	50a3      	str	r3, [r4, r2]
 800c148:	e7b3      	b.n	800c0b2 <_malloc_r+0x22>
 800c14a:	6862      	ldr	r2, [r4, #4]
 800c14c:	42a3      	cmp	r3, r4
 800c14e:	bf0c      	ite	eq
 800c150:	6032      	streq	r2, [r6, #0]
 800c152:	605a      	strne	r2, [r3, #4]
 800c154:	e7ec      	b.n	800c130 <_malloc_r+0xa0>
 800c156:	4623      	mov	r3, r4
 800c158:	6864      	ldr	r4, [r4, #4]
 800c15a:	e7b2      	b.n	800c0c2 <_malloc_r+0x32>
 800c15c:	4634      	mov	r4, r6
 800c15e:	6876      	ldr	r6, [r6, #4]
 800c160:	e7b9      	b.n	800c0d6 <_malloc_r+0x46>
 800c162:	230c      	movs	r3, #12
 800c164:	4638      	mov	r0, r7
 800c166:	603b      	str	r3, [r7, #0]
 800c168:	f000 f9d4 	bl	800c514 <__malloc_unlock>
 800c16c:	e7a1      	b.n	800c0b2 <_malloc_r+0x22>
 800c16e:	6025      	str	r5, [r4, #0]
 800c170:	e7de      	b.n	800c130 <_malloc_r+0xa0>
 800c172:	bf00      	nop
 800c174:	200015bc 	.word	0x200015bc

0800c178 <__ssputs_r>:
 800c178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c17c:	688e      	ldr	r6, [r1, #8]
 800c17e:	4682      	mov	sl, r0
 800c180:	429e      	cmp	r6, r3
 800c182:	460c      	mov	r4, r1
 800c184:	4690      	mov	r8, r2
 800c186:	461f      	mov	r7, r3
 800c188:	d838      	bhi.n	800c1fc <__ssputs_r+0x84>
 800c18a:	898a      	ldrh	r2, [r1, #12]
 800c18c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c190:	d032      	beq.n	800c1f8 <__ssputs_r+0x80>
 800c192:	6825      	ldr	r5, [r4, #0]
 800c194:	6909      	ldr	r1, [r1, #16]
 800c196:	3301      	adds	r3, #1
 800c198:	eba5 0901 	sub.w	r9, r5, r1
 800c19c:	6965      	ldr	r5, [r4, #20]
 800c19e:	444b      	add	r3, r9
 800c1a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c1a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c1a8:	106d      	asrs	r5, r5, #1
 800c1aa:	429d      	cmp	r5, r3
 800c1ac:	bf38      	it	cc
 800c1ae:	461d      	movcc	r5, r3
 800c1b0:	0553      	lsls	r3, r2, #21
 800c1b2:	d531      	bpl.n	800c218 <__ssputs_r+0xa0>
 800c1b4:	4629      	mov	r1, r5
 800c1b6:	f7ff ff6b 	bl	800c090 <_malloc_r>
 800c1ba:	4606      	mov	r6, r0
 800c1bc:	b950      	cbnz	r0, 800c1d4 <__ssputs_r+0x5c>
 800c1be:	230c      	movs	r3, #12
 800c1c0:	f04f 30ff 	mov.w	r0, #4294967295
 800c1c4:	f8ca 3000 	str.w	r3, [sl]
 800c1c8:	89a3      	ldrh	r3, [r4, #12]
 800c1ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c1ce:	81a3      	strh	r3, [r4, #12]
 800c1d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1d4:	464a      	mov	r2, r9
 800c1d6:	6921      	ldr	r1, [r4, #16]
 800c1d8:	f7ff fb4e 	bl	800b878 <memcpy>
 800c1dc:	89a3      	ldrh	r3, [r4, #12]
 800c1de:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c1e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c1e6:	81a3      	strh	r3, [r4, #12]
 800c1e8:	6126      	str	r6, [r4, #16]
 800c1ea:	444e      	add	r6, r9
 800c1ec:	6026      	str	r6, [r4, #0]
 800c1ee:	463e      	mov	r6, r7
 800c1f0:	6165      	str	r5, [r4, #20]
 800c1f2:	eba5 0509 	sub.w	r5, r5, r9
 800c1f6:	60a5      	str	r5, [r4, #8]
 800c1f8:	42be      	cmp	r6, r7
 800c1fa:	d900      	bls.n	800c1fe <__ssputs_r+0x86>
 800c1fc:	463e      	mov	r6, r7
 800c1fe:	4632      	mov	r2, r6
 800c200:	4641      	mov	r1, r8
 800c202:	6820      	ldr	r0, [r4, #0]
 800c204:	f000 f966 	bl	800c4d4 <memmove>
 800c208:	68a3      	ldr	r3, [r4, #8]
 800c20a:	2000      	movs	r0, #0
 800c20c:	1b9b      	subs	r3, r3, r6
 800c20e:	60a3      	str	r3, [r4, #8]
 800c210:	6823      	ldr	r3, [r4, #0]
 800c212:	4433      	add	r3, r6
 800c214:	6023      	str	r3, [r4, #0]
 800c216:	e7db      	b.n	800c1d0 <__ssputs_r+0x58>
 800c218:	462a      	mov	r2, r5
 800c21a:	f000 f981 	bl	800c520 <_realloc_r>
 800c21e:	4606      	mov	r6, r0
 800c220:	2800      	cmp	r0, #0
 800c222:	d1e1      	bne.n	800c1e8 <__ssputs_r+0x70>
 800c224:	4650      	mov	r0, sl
 800c226:	6921      	ldr	r1, [r4, #16]
 800c228:	f7ff feca 	bl	800bfc0 <_free_r>
 800c22c:	e7c7      	b.n	800c1be <__ssputs_r+0x46>
	...

0800c230 <_svfiprintf_r>:
 800c230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c234:	4698      	mov	r8, r3
 800c236:	898b      	ldrh	r3, [r1, #12]
 800c238:	4607      	mov	r7, r0
 800c23a:	061b      	lsls	r3, r3, #24
 800c23c:	460d      	mov	r5, r1
 800c23e:	4614      	mov	r4, r2
 800c240:	b09d      	sub	sp, #116	; 0x74
 800c242:	d50e      	bpl.n	800c262 <_svfiprintf_r+0x32>
 800c244:	690b      	ldr	r3, [r1, #16]
 800c246:	b963      	cbnz	r3, 800c262 <_svfiprintf_r+0x32>
 800c248:	2140      	movs	r1, #64	; 0x40
 800c24a:	f7ff ff21 	bl	800c090 <_malloc_r>
 800c24e:	6028      	str	r0, [r5, #0]
 800c250:	6128      	str	r0, [r5, #16]
 800c252:	b920      	cbnz	r0, 800c25e <_svfiprintf_r+0x2e>
 800c254:	230c      	movs	r3, #12
 800c256:	603b      	str	r3, [r7, #0]
 800c258:	f04f 30ff 	mov.w	r0, #4294967295
 800c25c:	e0d1      	b.n	800c402 <_svfiprintf_r+0x1d2>
 800c25e:	2340      	movs	r3, #64	; 0x40
 800c260:	616b      	str	r3, [r5, #20]
 800c262:	2300      	movs	r3, #0
 800c264:	9309      	str	r3, [sp, #36]	; 0x24
 800c266:	2320      	movs	r3, #32
 800c268:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c26c:	2330      	movs	r3, #48	; 0x30
 800c26e:	f04f 0901 	mov.w	r9, #1
 800c272:	f8cd 800c 	str.w	r8, [sp, #12]
 800c276:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c41c <_svfiprintf_r+0x1ec>
 800c27a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c27e:	4623      	mov	r3, r4
 800c280:	469a      	mov	sl, r3
 800c282:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c286:	b10a      	cbz	r2, 800c28c <_svfiprintf_r+0x5c>
 800c288:	2a25      	cmp	r2, #37	; 0x25
 800c28a:	d1f9      	bne.n	800c280 <_svfiprintf_r+0x50>
 800c28c:	ebba 0b04 	subs.w	fp, sl, r4
 800c290:	d00b      	beq.n	800c2aa <_svfiprintf_r+0x7a>
 800c292:	465b      	mov	r3, fp
 800c294:	4622      	mov	r2, r4
 800c296:	4629      	mov	r1, r5
 800c298:	4638      	mov	r0, r7
 800c29a:	f7ff ff6d 	bl	800c178 <__ssputs_r>
 800c29e:	3001      	adds	r0, #1
 800c2a0:	f000 80aa 	beq.w	800c3f8 <_svfiprintf_r+0x1c8>
 800c2a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c2a6:	445a      	add	r2, fp
 800c2a8:	9209      	str	r2, [sp, #36]	; 0x24
 800c2aa:	f89a 3000 	ldrb.w	r3, [sl]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	f000 80a2 	beq.w	800c3f8 <_svfiprintf_r+0x1c8>
 800c2b4:	2300      	movs	r3, #0
 800c2b6:	f04f 32ff 	mov.w	r2, #4294967295
 800c2ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c2be:	f10a 0a01 	add.w	sl, sl, #1
 800c2c2:	9304      	str	r3, [sp, #16]
 800c2c4:	9307      	str	r3, [sp, #28]
 800c2c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c2ca:	931a      	str	r3, [sp, #104]	; 0x68
 800c2cc:	4654      	mov	r4, sl
 800c2ce:	2205      	movs	r2, #5
 800c2d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2d4:	4851      	ldr	r0, [pc, #324]	; (800c41c <_svfiprintf_r+0x1ec>)
 800c2d6:	f7ff fac1 	bl	800b85c <memchr>
 800c2da:	9a04      	ldr	r2, [sp, #16]
 800c2dc:	b9d8      	cbnz	r0, 800c316 <_svfiprintf_r+0xe6>
 800c2de:	06d0      	lsls	r0, r2, #27
 800c2e0:	bf44      	itt	mi
 800c2e2:	2320      	movmi	r3, #32
 800c2e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c2e8:	0711      	lsls	r1, r2, #28
 800c2ea:	bf44      	itt	mi
 800c2ec:	232b      	movmi	r3, #43	; 0x2b
 800c2ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c2f2:	f89a 3000 	ldrb.w	r3, [sl]
 800c2f6:	2b2a      	cmp	r3, #42	; 0x2a
 800c2f8:	d015      	beq.n	800c326 <_svfiprintf_r+0xf6>
 800c2fa:	4654      	mov	r4, sl
 800c2fc:	2000      	movs	r0, #0
 800c2fe:	f04f 0c0a 	mov.w	ip, #10
 800c302:	9a07      	ldr	r2, [sp, #28]
 800c304:	4621      	mov	r1, r4
 800c306:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c30a:	3b30      	subs	r3, #48	; 0x30
 800c30c:	2b09      	cmp	r3, #9
 800c30e:	d94e      	bls.n	800c3ae <_svfiprintf_r+0x17e>
 800c310:	b1b0      	cbz	r0, 800c340 <_svfiprintf_r+0x110>
 800c312:	9207      	str	r2, [sp, #28]
 800c314:	e014      	b.n	800c340 <_svfiprintf_r+0x110>
 800c316:	eba0 0308 	sub.w	r3, r0, r8
 800c31a:	fa09 f303 	lsl.w	r3, r9, r3
 800c31e:	4313      	orrs	r3, r2
 800c320:	46a2      	mov	sl, r4
 800c322:	9304      	str	r3, [sp, #16]
 800c324:	e7d2      	b.n	800c2cc <_svfiprintf_r+0x9c>
 800c326:	9b03      	ldr	r3, [sp, #12]
 800c328:	1d19      	adds	r1, r3, #4
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	9103      	str	r1, [sp, #12]
 800c32e:	2b00      	cmp	r3, #0
 800c330:	bfbb      	ittet	lt
 800c332:	425b      	neglt	r3, r3
 800c334:	f042 0202 	orrlt.w	r2, r2, #2
 800c338:	9307      	strge	r3, [sp, #28]
 800c33a:	9307      	strlt	r3, [sp, #28]
 800c33c:	bfb8      	it	lt
 800c33e:	9204      	strlt	r2, [sp, #16]
 800c340:	7823      	ldrb	r3, [r4, #0]
 800c342:	2b2e      	cmp	r3, #46	; 0x2e
 800c344:	d10c      	bne.n	800c360 <_svfiprintf_r+0x130>
 800c346:	7863      	ldrb	r3, [r4, #1]
 800c348:	2b2a      	cmp	r3, #42	; 0x2a
 800c34a:	d135      	bne.n	800c3b8 <_svfiprintf_r+0x188>
 800c34c:	9b03      	ldr	r3, [sp, #12]
 800c34e:	3402      	adds	r4, #2
 800c350:	1d1a      	adds	r2, r3, #4
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	9203      	str	r2, [sp, #12]
 800c356:	2b00      	cmp	r3, #0
 800c358:	bfb8      	it	lt
 800c35a:	f04f 33ff 	movlt.w	r3, #4294967295
 800c35e:	9305      	str	r3, [sp, #20]
 800c360:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800c420 <_svfiprintf_r+0x1f0>
 800c364:	2203      	movs	r2, #3
 800c366:	4650      	mov	r0, sl
 800c368:	7821      	ldrb	r1, [r4, #0]
 800c36a:	f7ff fa77 	bl	800b85c <memchr>
 800c36e:	b140      	cbz	r0, 800c382 <_svfiprintf_r+0x152>
 800c370:	2340      	movs	r3, #64	; 0x40
 800c372:	eba0 000a 	sub.w	r0, r0, sl
 800c376:	fa03 f000 	lsl.w	r0, r3, r0
 800c37a:	9b04      	ldr	r3, [sp, #16]
 800c37c:	3401      	adds	r4, #1
 800c37e:	4303      	orrs	r3, r0
 800c380:	9304      	str	r3, [sp, #16]
 800c382:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c386:	2206      	movs	r2, #6
 800c388:	4826      	ldr	r0, [pc, #152]	; (800c424 <_svfiprintf_r+0x1f4>)
 800c38a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c38e:	f7ff fa65 	bl	800b85c <memchr>
 800c392:	2800      	cmp	r0, #0
 800c394:	d038      	beq.n	800c408 <_svfiprintf_r+0x1d8>
 800c396:	4b24      	ldr	r3, [pc, #144]	; (800c428 <_svfiprintf_r+0x1f8>)
 800c398:	bb1b      	cbnz	r3, 800c3e2 <_svfiprintf_r+0x1b2>
 800c39a:	9b03      	ldr	r3, [sp, #12]
 800c39c:	3307      	adds	r3, #7
 800c39e:	f023 0307 	bic.w	r3, r3, #7
 800c3a2:	3308      	adds	r3, #8
 800c3a4:	9303      	str	r3, [sp, #12]
 800c3a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3a8:	4433      	add	r3, r6
 800c3aa:	9309      	str	r3, [sp, #36]	; 0x24
 800c3ac:	e767      	b.n	800c27e <_svfiprintf_r+0x4e>
 800c3ae:	460c      	mov	r4, r1
 800c3b0:	2001      	movs	r0, #1
 800c3b2:	fb0c 3202 	mla	r2, ip, r2, r3
 800c3b6:	e7a5      	b.n	800c304 <_svfiprintf_r+0xd4>
 800c3b8:	2300      	movs	r3, #0
 800c3ba:	f04f 0c0a 	mov.w	ip, #10
 800c3be:	4619      	mov	r1, r3
 800c3c0:	3401      	adds	r4, #1
 800c3c2:	9305      	str	r3, [sp, #20]
 800c3c4:	4620      	mov	r0, r4
 800c3c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c3ca:	3a30      	subs	r2, #48	; 0x30
 800c3cc:	2a09      	cmp	r2, #9
 800c3ce:	d903      	bls.n	800c3d8 <_svfiprintf_r+0x1a8>
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d0c5      	beq.n	800c360 <_svfiprintf_r+0x130>
 800c3d4:	9105      	str	r1, [sp, #20]
 800c3d6:	e7c3      	b.n	800c360 <_svfiprintf_r+0x130>
 800c3d8:	4604      	mov	r4, r0
 800c3da:	2301      	movs	r3, #1
 800c3dc:	fb0c 2101 	mla	r1, ip, r1, r2
 800c3e0:	e7f0      	b.n	800c3c4 <_svfiprintf_r+0x194>
 800c3e2:	ab03      	add	r3, sp, #12
 800c3e4:	9300      	str	r3, [sp, #0]
 800c3e6:	462a      	mov	r2, r5
 800c3e8:	4638      	mov	r0, r7
 800c3ea:	4b10      	ldr	r3, [pc, #64]	; (800c42c <_svfiprintf_r+0x1fc>)
 800c3ec:	a904      	add	r1, sp, #16
 800c3ee:	f7fd ffcd 	bl	800a38c <_printf_float>
 800c3f2:	1c42      	adds	r2, r0, #1
 800c3f4:	4606      	mov	r6, r0
 800c3f6:	d1d6      	bne.n	800c3a6 <_svfiprintf_r+0x176>
 800c3f8:	89ab      	ldrh	r3, [r5, #12]
 800c3fa:	065b      	lsls	r3, r3, #25
 800c3fc:	f53f af2c 	bmi.w	800c258 <_svfiprintf_r+0x28>
 800c400:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c402:	b01d      	add	sp, #116	; 0x74
 800c404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c408:	ab03      	add	r3, sp, #12
 800c40a:	9300      	str	r3, [sp, #0]
 800c40c:	462a      	mov	r2, r5
 800c40e:	4638      	mov	r0, r7
 800c410:	4b06      	ldr	r3, [pc, #24]	; (800c42c <_svfiprintf_r+0x1fc>)
 800c412:	a904      	add	r1, sp, #16
 800c414:	f7fe fa56 	bl	800a8c4 <_printf_i>
 800c418:	e7eb      	b.n	800c3f2 <_svfiprintf_r+0x1c2>
 800c41a:	bf00      	nop
 800c41c:	0800d2ac 	.word	0x0800d2ac
 800c420:	0800d2b2 	.word	0x0800d2b2
 800c424:	0800d2b6 	.word	0x0800d2b6
 800c428:	0800a38d 	.word	0x0800a38d
 800c42c:	0800c179 	.word	0x0800c179

0800c430 <_sbrk_r>:
 800c430:	b538      	push	{r3, r4, r5, lr}
 800c432:	2300      	movs	r3, #0
 800c434:	4d05      	ldr	r5, [pc, #20]	; (800c44c <_sbrk_r+0x1c>)
 800c436:	4604      	mov	r4, r0
 800c438:	4608      	mov	r0, r1
 800c43a:	602b      	str	r3, [r5, #0]
 800c43c:	f7f5 faa4 	bl	8001988 <_sbrk>
 800c440:	1c43      	adds	r3, r0, #1
 800c442:	d102      	bne.n	800c44a <_sbrk_r+0x1a>
 800c444:	682b      	ldr	r3, [r5, #0]
 800c446:	b103      	cbz	r3, 800c44a <_sbrk_r+0x1a>
 800c448:	6023      	str	r3, [r4, #0]
 800c44a:	bd38      	pop	{r3, r4, r5, pc}
 800c44c:	200015c4 	.word	0x200015c4

0800c450 <__assert_func>:
 800c450:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c452:	4614      	mov	r4, r2
 800c454:	461a      	mov	r2, r3
 800c456:	4b09      	ldr	r3, [pc, #36]	; (800c47c <__assert_func+0x2c>)
 800c458:	4605      	mov	r5, r0
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	68d8      	ldr	r0, [r3, #12]
 800c45e:	b14c      	cbz	r4, 800c474 <__assert_func+0x24>
 800c460:	4b07      	ldr	r3, [pc, #28]	; (800c480 <__assert_func+0x30>)
 800c462:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c466:	9100      	str	r1, [sp, #0]
 800c468:	462b      	mov	r3, r5
 800c46a:	4906      	ldr	r1, [pc, #24]	; (800c484 <__assert_func+0x34>)
 800c46c:	f000 f80e 	bl	800c48c <fiprintf>
 800c470:	f000 faaa 	bl	800c9c8 <abort>
 800c474:	4b04      	ldr	r3, [pc, #16]	; (800c488 <__assert_func+0x38>)
 800c476:	461c      	mov	r4, r3
 800c478:	e7f3      	b.n	800c462 <__assert_func+0x12>
 800c47a:	bf00      	nop
 800c47c:	2000017c 	.word	0x2000017c
 800c480:	0800d2bd 	.word	0x0800d2bd
 800c484:	0800d2ca 	.word	0x0800d2ca
 800c488:	0800d2f8 	.word	0x0800d2f8

0800c48c <fiprintf>:
 800c48c:	b40e      	push	{r1, r2, r3}
 800c48e:	b503      	push	{r0, r1, lr}
 800c490:	4601      	mov	r1, r0
 800c492:	ab03      	add	r3, sp, #12
 800c494:	4805      	ldr	r0, [pc, #20]	; (800c4ac <fiprintf+0x20>)
 800c496:	f853 2b04 	ldr.w	r2, [r3], #4
 800c49a:	6800      	ldr	r0, [r0, #0]
 800c49c:	9301      	str	r3, [sp, #4]
 800c49e:	f000 f895 	bl	800c5cc <_vfiprintf_r>
 800c4a2:	b002      	add	sp, #8
 800c4a4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c4a8:	b003      	add	sp, #12
 800c4aa:	4770      	bx	lr
 800c4ac:	2000017c 	.word	0x2000017c

0800c4b0 <__ascii_mbtowc>:
 800c4b0:	b082      	sub	sp, #8
 800c4b2:	b901      	cbnz	r1, 800c4b6 <__ascii_mbtowc+0x6>
 800c4b4:	a901      	add	r1, sp, #4
 800c4b6:	b142      	cbz	r2, 800c4ca <__ascii_mbtowc+0x1a>
 800c4b8:	b14b      	cbz	r3, 800c4ce <__ascii_mbtowc+0x1e>
 800c4ba:	7813      	ldrb	r3, [r2, #0]
 800c4bc:	600b      	str	r3, [r1, #0]
 800c4be:	7812      	ldrb	r2, [r2, #0]
 800c4c0:	1e10      	subs	r0, r2, #0
 800c4c2:	bf18      	it	ne
 800c4c4:	2001      	movne	r0, #1
 800c4c6:	b002      	add	sp, #8
 800c4c8:	4770      	bx	lr
 800c4ca:	4610      	mov	r0, r2
 800c4cc:	e7fb      	b.n	800c4c6 <__ascii_mbtowc+0x16>
 800c4ce:	f06f 0001 	mvn.w	r0, #1
 800c4d2:	e7f8      	b.n	800c4c6 <__ascii_mbtowc+0x16>

0800c4d4 <memmove>:
 800c4d4:	4288      	cmp	r0, r1
 800c4d6:	b510      	push	{r4, lr}
 800c4d8:	eb01 0402 	add.w	r4, r1, r2
 800c4dc:	d902      	bls.n	800c4e4 <memmove+0x10>
 800c4de:	4284      	cmp	r4, r0
 800c4e0:	4623      	mov	r3, r4
 800c4e2:	d807      	bhi.n	800c4f4 <memmove+0x20>
 800c4e4:	1e43      	subs	r3, r0, #1
 800c4e6:	42a1      	cmp	r1, r4
 800c4e8:	d008      	beq.n	800c4fc <memmove+0x28>
 800c4ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c4ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c4f2:	e7f8      	b.n	800c4e6 <memmove+0x12>
 800c4f4:	4601      	mov	r1, r0
 800c4f6:	4402      	add	r2, r0
 800c4f8:	428a      	cmp	r2, r1
 800c4fa:	d100      	bne.n	800c4fe <memmove+0x2a>
 800c4fc:	bd10      	pop	{r4, pc}
 800c4fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c502:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c506:	e7f7      	b.n	800c4f8 <memmove+0x24>

0800c508 <__malloc_lock>:
 800c508:	4801      	ldr	r0, [pc, #4]	; (800c510 <__malloc_lock+0x8>)
 800c50a:	f000 bc19 	b.w	800cd40 <__retarget_lock_acquire_recursive>
 800c50e:	bf00      	nop
 800c510:	200015c8 	.word	0x200015c8

0800c514 <__malloc_unlock>:
 800c514:	4801      	ldr	r0, [pc, #4]	; (800c51c <__malloc_unlock+0x8>)
 800c516:	f000 bc14 	b.w	800cd42 <__retarget_lock_release_recursive>
 800c51a:	bf00      	nop
 800c51c:	200015c8 	.word	0x200015c8

0800c520 <_realloc_r>:
 800c520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c524:	4680      	mov	r8, r0
 800c526:	4614      	mov	r4, r2
 800c528:	460e      	mov	r6, r1
 800c52a:	b921      	cbnz	r1, 800c536 <_realloc_r+0x16>
 800c52c:	4611      	mov	r1, r2
 800c52e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c532:	f7ff bdad 	b.w	800c090 <_malloc_r>
 800c536:	b92a      	cbnz	r2, 800c544 <_realloc_r+0x24>
 800c538:	f7ff fd42 	bl	800bfc0 <_free_r>
 800c53c:	4625      	mov	r5, r4
 800c53e:	4628      	mov	r0, r5
 800c540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c544:	f000 fc64 	bl	800ce10 <_malloc_usable_size_r>
 800c548:	4284      	cmp	r4, r0
 800c54a:	4607      	mov	r7, r0
 800c54c:	d802      	bhi.n	800c554 <_realloc_r+0x34>
 800c54e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c552:	d812      	bhi.n	800c57a <_realloc_r+0x5a>
 800c554:	4621      	mov	r1, r4
 800c556:	4640      	mov	r0, r8
 800c558:	f7ff fd9a 	bl	800c090 <_malloc_r>
 800c55c:	4605      	mov	r5, r0
 800c55e:	2800      	cmp	r0, #0
 800c560:	d0ed      	beq.n	800c53e <_realloc_r+0x1e>
 800c562:	42bc      	cmp	r4, r7
 800c564:	4622      	mov	r2, r4
 800c566:	4631      	mov	r1, r6
 800c568:	bf28      	it	cs
 800c56a:	463a      	movcs	r2, r7
 800c56c:	f7ff f984 	bl	800b878 <memcpy>
 800c570:	4631      	mov	r1, r6
 800c572:	4640      	mov	r0, r8
 800c574:	f7ff fd24 	bl	800bfc0 <_free_r>
 800c578:	e7e1      	b.n	800c53e <_realloc_r+0x1e>
 800c57a:	4635      	mov	r5, r6
 800c57c:	e7df      	b.n	800c53e <_realloc_r+0x1e>

0800c57e <__sfputc_r>:
 800c57e:	6893      	ldr	r3, [r2, #8]
 800c580:	b410      	push	{r4}
 800c582:	3b01      	subs	r3, #1
 800c584:	2b00      	cmp	r3, #0
 800c586:	6093      	str	r3, [r2, #8]
 800c588:	da07      	bge.n	800c59a <__sfputc_r+0x1c>
 800c58a:	6994      	ldr	r4, [r2, #24]
 800c58c:	42a3      	cmp	r3, r4
 800c58e:	db01      	blt.n	800c594 <__sfputc_r+0x16>
 800c590:	290a      	cmp	r1, #10
 800c592:	d102      	bne.n	800c59a <__sfputc_r+0x1c>
 800c594:	bc10      	pop	{r4}
 800c596:	f000 b949 	b.w	800c82c <__swbuf_r>
 800c59a:	6813      	ldr	r3, [r2, #0]
 800c59c:	1c58      	adds	r0, r3, #1
 800c59e:	6010      	str	r0, [r2, #0]
 800c5a0:	7019      	strb	r1, [r3, #0]
 800c5a2:	4608      	mov	r0, r1
 800c5a4:	bc10      	pop	{r4}
 800c5a6:	4770      	bx	lr

0800c5a8 <__sfputs_r>:
 800c5a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5aa:	4606      	mov	r6, r0
 800c5ac:	460f      	mov	r7, r1
 800c5ae:	4614      	mov	r4, r2
 800c5b0:	18d5      	adds	r5, r2, r3
 800c5b2:	42ac      	cmp	r4, r5
 800c5b4:	d101      	bne.n	800c5ba <__sfputs_r+0x12>
 800c5b6:	2000      	movs	r0, #0
 800c5b8:	e007      	b.n	800c5ca <__sfputs_r+0x22>
 800c5ba:	463a      	mov	r2, r7
 800c5bc:	4630      	mov	r0, r6
 800c5be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5c2:	f7ff ffdc 	bl	800c57e <__sfputc_r>
 800c5c6:	1c43      	adds	r3, r0, #1
 800c5c8:	d1f3      	bne.n	800c5b2 <__sfputs_r+0xa>
 800c5ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c5cc <_vfiprintf_r>:
 800c5cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5d0:	460d      	mov	r5, r1
 800c5d2:	4614      	mov	r4, r2
 800c5d4:	4698      	mov	r8, r3
 800c5d6:	4606      	mov	r6, r0
 800c5d8:	b09d      	sub	sp, #116	; 0x74
 800c5da:	b118      	cbz	r0, 800c5e4 <_vfiprintf_r+0x18>
 800c5dc:	6983      	ldr	r3, [r0, #24]
 800c5de:	b90b      	cbnz	r3, 800c5e4 <_vfiprintf_r+0x18>
 800c5e0:	f000 fb10 	bl	800cc04 <__sinit>
 800c5e4:	4b89      	ldr	r3, [pc, #548]	; (800c80c <_vfiprintf_r+0x240>)
 800c5e6:	429d      	cmp	r5, r3
 800c5e8:	d11b      	bne.n	800c622 <_vfiprintf_r+0x56>
 800c5ea:	6875      	ldr	r5, [r6, #4]
 800c5ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c5ee:	07d9      	lsls	r1, r3, #31
 800c5f0:	d405      	bmi.n	800c5fe <_vfiprintf_r+0x32>
 800c5f2:	89ab      	ldrh	r3, [r5, #12]
 800c5f4:	059a      	lsls	r2, r3, #22
 800c5f6:	d402      	bmi.n	800c5fe <_vfiprintf_r+0x32>
 800c5f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c5fa:	f000 fba1 	bl	800cd40 <__retarget_lock_acquire_recursive>
 800c5fe:	89ab      	ldrh	r3, [r5, #12]
 800c600:	071b      	lsls	r3, r3, #28
 800c602:	d501      	bpl.n	800c608 <_vfiprintf_r+0x3c>
 800c604:	692b      	ldr	r3, [r5, #16]
 800c606:	b9eb      	cbnz	r3, 800c644 <_vfiprintf_r+0x78>
 800c608:	4629      	mov	r1, r5
 800c60a:	4630      	mov	r0, r6
 800c60c:	f000 f96e 	bl	800c8ec <__swsetup_r>
 800c610:	b1c0      	cbz	r0, 800c644 <_vfiprintf_r+0x78>
 800c612:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c614:	07dc      	lsls	r4, r3, #31
 800c616:	d50e      	bpl.n	800c636 <_vfiprintf_r+0x6a>
 800c618:	f04f 30ff 	mov.w	r0, #4294967295
 800c61c:	b01d      	add	sp, #116	; 0x74
 800c61e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c622:	4b7b      	ldr	r3, [pc, #492]	; (800c810 <_vfiprintf_r+0x244>)
 800c624:	429d      	cmp	r5, r3
 800c626:	d101      	bne.n	800c62c <_vfiprintf_r+0x60>
 800c628:	68b5      	ldr	r5, [r6, #8]
 800c62a:	e7df      	b.n	800c5ec <_vfiprintf_r+0x20>
 800c62c:	4b79      	ldr	r3, [pc, #484]	; (800c814 <_vfiprintf_r+0x248>)
 800c62e:	429d      	cmp	r5, r3
 800c630:	bf08      	it	eq
 800c632:	68f5      	ldreq	r5, [r6, #12]
 800c634:	e7da      	b.n	800c5ec <_vfiprintf_r+0x20>
 800c636:	89ab      	ldrh	r3, [r5, #12]
 800c638:	0598      	lsls	r0, r3, #22
 800c63a:	d4ed      	bmi.n	800c618 <_vfiprintf_r+0x4c>
 800c63c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c63e:	f000 fb80 	bl	800cd42 <__retarget_lock_release_recursive>
 800c642:	e7e9      	b.n	800c618 <_vfiprintf_r+0x4c>
 800c644:	2300      	movs	r3, #0
 800c646:	9309      	str	r3, [sp, #36]	; 0x24
 800c648:	2320      	movs	r3, #32
 800c64a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c64e:	2330      	movs	r3, #48	; 0x30
 800c650:	f04f 0901 	mov.w	r9, #1
 800c654:	f8cd 800c 	str.w	r8, [sp, #12]
 800c658:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800c818 <_vfiprintf_r+0x24c>
 800c65c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c660:	4623      	mov	r3, r4
 800c662:	469a      	mov	sl, r3
 800c664:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c668:	b10a      	cbz	r2, 800c66e <_vfiprintf_r+0xa2>
 800c66a:	2a25      	cmp	r2, #37	; 0x25
 800c66c:	d1f9      	bne.n	800c662 <_vfiprintf_r+0x96>
 800c66e:	ebba 0b04 	subs.w	fp, sl, r4
 800c672:	d00b      	beq.n	800c68c <_vfiprintf_r+0xc0>
 800c674:	465b      	mov	r3, fp
 800c676:	4622      	mov	r2, r4
 800c678:	4629      	mov	r1, r5
 800c67a:	4630      	mov	r0, r6
 800c67c:	f7ff ff94 	bl	800c5a8 <__sfputs_r>
 800c680:	3001      	adds	r0, #1
 800c682:	f000 80aa 	beq.w	800c7da <_vfiprintf_r+0x20e>
 800c686:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c688:	445a      	add	r2, fp
 800c68a:	9209      	str	r2, [sp, #36]	; 0x24
 800c68c:	f89a 3000 	ldrb.w	r3, [sl]
 800c690:	2b00      	cmp	r3, #0
 800c692:	f000 80a2 	beq.w	800c7da <_vfiprintf_r+0x20e>
 800c696:	2300      	movs	r3, #0
 800c698:	f04f 32ff 	mov.w	r2, #4294967295
 800c69c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c6a0:	f10a 0a01 	add.w	sl, sl, #1
 800c6a4:	9304      	str	r3, [sp, #16]
 800c6a6:	9307      	str	r3, [sp, #28]
 800c6a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c6ac:	931a      	str	r3, [sp, #104]	; 0x68
 800c6ae:	4654      	mov	r4, sl
 800c6b0:	2205      	movs	r2, #5
 800c6b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6b6:	4858      	ldr	r0, [pc, #352]	; (800c818 <_vfiprintf_r+0x24c>)
 800c6b8:	f7ff f8d0 	bl	800b85c <memchr>
 800c6bc:	9a04      	ldr	r2, [sp, #16]
 800c6be:	b9d8      	cbnz	r0, 800c6f8 <_vfiprintf_r+0x12c>
 800c6c0:	06d1      	lsls	r1, r2, #27
 800c6c2:	bf44      	itt	mi
 800c6c4:	2320      	movmi	r3, #32
 800c6c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c6ca:	0713      	lsls	r3, r2, #28
 800c6cc:	bf44      	itt	mi
 800c6ce:	232b      	movmi	r3, #43	; 0x2b
 800c6d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c6d4:	f89a 3000 	ldrb.w	r3, [sl]
 800c6d8:	2b2a      	cmp	r3, #42	; 0x2a
 800c6da:	d015      	beq.n	800c708 <_vfiprintf_r+0x13c>
 800c6dc:	4654      	mov	r4, sl
 800c6de:	2000      	movs	r0, #0
 800c6e0:	f04f 0c0a 	mov.w	ip, #10
 800c6e4:	9a07      	ldr	r2, [sp, #28]
 800c6e6:	4621      	mov	r1, r4
 800c6e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c6ec:	3b30      	subs	r3, #48	; 0x30
 800c6ee:	2b09      	cmp	r3, #9
 800c6f0:	d94e      	bls.n	800c790 <_vfiprintf_r+0x1c4>
 800c6f2:	b1b0      	cbz	r0, 800c722 <_vfiprintf_r+0x156>
 800c6f4:	9207      	str	r2, [sp, #28]
 800c6f6:	e014      	b.n	800c722 <_vfiprintf_r+0x156>
 800c6f8:	eba0 0308 	sub.w	r3, r0, r8
 800c6fc:	fa09 f303 	lsl.w	r3, r9, r3
 800c700:	4313      	orrs	r3, r2
 800c702:	46a2      	mov	sl, r4
 800c704:	9304      	str	r3, [sp, #16]
 800c706:	e7d2      	b.n	800c6ae <_vfiprintf_r+0xe2>
 800c708:	9b03      	ldr	r3, [sp, #12]
 800c70a:	1d19      	adds	r1, r3, #4
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	9103      	str	r1, [sp, #12]
 800c710:	2b00      	cmp	r3, #0
 800c712:	bfbb      	ittet	lt
 800c714:	425b      	neglt	r3, r3
 800c716:	f042 0202 	orrlt.w	r2, r2, #2
 800c71a:	9307      	strge	r3, [sp, #28]
 800c71c:	9307      	strlt	r3, [sp, #28]
 800c71e:	bfb8      	it	lt
 800c720:	9204      	strlt	r2, [sp, #16]
 800c722:	7823      	ldrb	r3, [r4, #0]
 800c724:	2b2e      	cmp	r3, #46	; 0x2e
 800c726:	d10c      	bne.n	800c742 <_vfiprintf_r+0x176>
 800c728:	7863      	ldrb	r3, [r4, #1]
 800c72a:	2b2a      	cmp	r3, #42	; 0x2a
 800c72c:	d135      	bne.n	800c79a <_vfiprintf_r+0x1ce>
 800c72e:	9b03      	ldr	r3, [sp, #12]
 800c730:	3402      	adds	r4, #2
 800c732:	1d1a      	adds	r2, r3, #4
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	9203      	str	r2, [sp, #12]
 800c738:	2b00      	cmp	r3, #0
 800c73a:	bfb8      	it	lt
 800c73c:	f04f 33ff 	movlt.w	r3, #4294967295
 800c740:	9305      	str	r3, [sp, #20]
 800c742:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800c81c <_vfiprintf_r+0x250>
 800c746:	2203      	movs	r2, #3
 800c748:	4650      	mov	r0, sl
 800c74a:	7821      	ldrb	r1, [r4, #0]
 800c74c:	f7ff f886 	bl	800b85c <memchr>
 800c750:	b140      	cbz	r0, 800c764 <_vfiprintf_r+0x198>
 800c752:	2340      	movs	r3, #64	; 0x40
 800c754:	eba0 000a 	sub.w	r0, r0, sl
 800c758:	fa03 f000 	lsl.w	r0, r3, r0
 800c75c:	9b04      	ldr	r3, [sp, #16]
 800c75e:	3401      	adds	r4, #1
 800c760:	4303      	orrs	r3, r0
 800c762:	9304      	str	r3, [sp, #16]
 800c764:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c768:	2206      	movs	r2, #6
 800c76a:	482d      	ldr	r0, [pc, #180]	; (800c820 <_vfiprintf_r+0x254>)
 800c76c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c770:	f7ff f874 	bl	800b85c <memchr>
 800c774:	2800      	cmp	r0, #0
 800c776:	d03f      	beq.n	800c7f8 <_vfiprintf_r+0x22c>
 800c778:	4b2a      	ldr	r3, [pc, #168]	; (800c824 <_vfiprintf_r+0x258>)
 800c77a:	bb1b      	cbnz	r3, 800c7c4 <_vfiprintf_r+0x1f8>
 800c77c:	9b03      	ldr	r3, [sp, #12]
 800c77e:	3307      	adds	r3, #7
 800c780:	f023 0307 	bic.w	r3, r3, #7
 800c784:	3308      	adds	r3, #8
 800c786:	9303      	str	r3, [sp, #12]
 800c788:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c78a:	443b      	add	r3, r7
 800c78c:	9309      	str	r3, [sp, #36]	; 0x24
 800c78e:	e767      	b.n	800c660 <_vfiprintf_r+0x94>
 800c790:	460c      	mov	r4, r1
 800c792:	2001      	movs	r0, #1
 800c794:	fb0c 3202 	mla	r2, ip, r2, r3
 800c798:	e7a5      	b.n	800c6e6 <_vfiprintf_r+0x11a>
 800c79a:	2300      	movs	r3, #0
 800c79c:	f04f 0c0a 	mov.w	ip, #10
 800c7a0:	4619      	mov	r1, r3
 800c7a2:	3401      	adds	r4, #1
 800c7a4:	9305      	str	r3, [sp, #20]
 800c7a6:	4620      	mov	r0, r4
 800c7a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c7ac:	3a30      	subs	r2, #48	; 0x30
 800c7ae:	2a09      	cmp	r2, #9
 800c7b0:	d903      	bls.n	800c7ba <_vfiprintf_r+0x1ee>
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d0c5      	beq.n	800c742 <_vfiprintf_r+0x176>
 800c7b6:	9105      	str	r1, [sp, #20]
 800c7b8:	e7c3      	b.n	800c742 <_vfiprintf_r+0x176>
 800c7ba:	4604      	mov	r4, r0
 800c7bc:	2301      	movs	r3, #1
 800c7be:	fb0c 2101 	mla	r1, ip, r1, r2
 800c7c2:	e7f0      	b.n	800c7a6 <_vfiprintf_r+0x1da>
 800c7c4:	ab03      	add	r3, sp, #12
 800c7c6:	9300      	str	r3, [sp, #0]
 800c7c8:	462a      	mov	r2, r5
 800c7ca:	4630      	mov	r0, r6
 800c7cc:	4b16      	ldr	r3, [pc, #88]	; (800c828 <_vfiprintf_r+0x25c>)
 800c7ce:	a904      	add	r1, sp, #16
 800c7d0:	f7fd fddc 	bl	800a38c <_printf_float>
 800c7d4:	4607      	mov	r7, r0
 800c7d6:	1c78      	adds	r0, r7, #1
 800c7d8:	d1d6      	bne.n	800c788 <_vfiprintf_r+0x1bc>
 800c7da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c7dc:	07d9      	lsls	r1, r3, #31
 800c7de:	d405      	bmi.n	800c7ec <_vfiprintf_r+0x220>
 800c7e0:	89ab      	ldrh	r3, [r5, #12]
 800c7e2:	059a      	lsls	r2, r3, #22
 800c7e4:	d402      	bmi.n	800c7ec <_vfiprintf_r+0x220>
 800c7e6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c7e8:	f000 faab 	bl	800cd42 <__retarget_lock_release_recursive>
 800c7ec:	89ab      	ldrh	r3, [r5, #12]
 800c7ee:	065b      	lsls	r3, r3, #25
 800c7f0:	f53f af12 	bmi.w	800c618 <_vfiprintf_r+0x4c>
 800c7f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c7f6:	e711      	b.n	800c61c <_vfiprintf_r+0x50>
 800c7f8:	ab03      	add	r3, sp, #12
 800c7fa:	9300      	str	r3, [sp, #0]
 800c7fc:	462a      	mov	r2, r5
 800c7fe:	4630      	mov	r0, r6
 800c800:	4b09      	ldr	r3, [pc, #36]	; (800c828 <_vfiprintf_r+0x25c>)
 800c802:	a904      	add	r1, sp, #16
 800c804:	f7fe f85e 	bl	800a8c4 <_printf_i>
 800c808:	e7e4      	b.n	800c7d4 <_vfiprintf_r+0x208>
 800c80a:	bf00      	nop
 800c80c:	0800d424 	.word	0x0800d424
 800c810:	0800d444 	.word	0x0800d444
 800c814:	0800d404 	.word	0x0800d404
 800c818:	0800d2ac 	.word	0x0800d2ac
 800c81c:	0800d2b2 	.word	0x0800d2b2
 800c820:	0800d2b6 	.word	0x0800d2b6
 800c824:	0800a38d 	.word	0x0800a38d
 800c828:	0800c5a9 	.word	0x0800c5a9

0800c82c <__swbuf_r>:
 800c82c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c82e:	460e      	mov	r6, r1
 800c830:	4614      	mov	r4, r2
 800c832:	4605      	mov	r5, r0
 800c834:	b118      	cbz	r0, 800c83e <__swbuf_r+0x12>
 800c836:	6983      	ldr	r3, [r0, #24]
 800c838:	b90b      	cbnz	r3, 800c83e <__swbuf_r+0x12>
 800c83a:	f000 f9e3 	bl	800cc04 <__sinit>
 800c83e:	4b21      	ldr	r3, [pc, #132]	; (800c8c4 <__swbuf_r+0x98>)
 800c840:	429c      	cmp	r4, r3
 800c842:	d12b      	bne.n	800c89c <__swbuf_r+0x70>
 800c844:	686c      	ldr	r4, [r5, #4]
 800c846:	69a3      	ldr	r3, [r4, #24]
 800c848:	60a3      	str	r3, [r4, #8]
 800c84a:	89a3      	ldrh	r3, [r4, #12]
 800c84c:	071a      	lsls	r2, r3, #28
 800c84e:	d52f      	bpl.n	800c8b0 <__swbuf_r+0x84>
 800c850:	6923      	ldr	r3, [r4, #16]
 800c852:	b36b      	cbz	r3, 800c8b0 <__swbuf_r+0x84>
 800c854:	6923      	ldr	r3, [r4, #16]
 800c856:	6820      	ldr	r0, [r4, #0]
 800c858:	b2f6      	uxtb	r6, r6
 800c85a:	1ac0      	subs	r0, r0, r3
 800c85c:	6963      	ldr	r3, [r4, #20]
 800c85e:	4637      	mov	r7, r6
 800c860:	4283      	cmp	r3, r0
 800c862:	dc04      	bgt.n	800c86e <__swbuf_r+0x42>
 800c864:	4621      	mov	r1, r4
 800c866:	4628      	mov	r0, r5
 800c868:	f000 f938 	bl	800cadc <_fflush_r>
 800c86c:	bb30      	cbnz	r0, 800c8bc <__swbuf_r+0x90>
 800c86e:	68a3      	ldr	r3, [r4, #8]
 800c870:	3001      	adds	r0, #1
 800c872:	3b01      	subs	r3, #1
 800c874:	60a3      	str	r3, [r4, #8]
 800c876:	6823      	ldr	r3, [r4, #0]
 800c878:	1c5a      	adds	r2, r3, #1
 800c87a:	6022      	str	r2, [r4, #0]
 800c87c:	701e      	strb	r6, [r3, #0]
 800c87e:	6963      	ldr	r3, [r4, #20]
 800c880:	4283      	cmp	r3, r0
 800c882:	d004      	beq.n	800c88e <__swbuf_r+0x62>
 800c884:	89a3      	ldrh	r3, [r4, #12]
 800c886:	07db      	lsls	r3, r3, #31
 800c888:	d506      	bpl.n	800c898 <__swbuf_r+0x6c>
 800c88a:	2e0a      	cmp	r6, #10
 800c88c:	d104      	bne.n	800c898 <__swbuf_r+0x6c>
 800c88e:	4621      	mov	r1, r4
 800c890:	4628      	mov	r0, r5
 800c892:	f000 f923 	bl	800cadc <_fflush_r>
 800c896:	b988      	cbnz	r0, 800c8bc <__swbuf_r+0x90>
 800c898:	4638      	mov	r0, r7
 800c89a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c89c:	4b0a      	ldr	r3, [pc, #40]	; (800c8c8 <__swbuf_r+0x9c>)
 800c89e:	429c      	cmp	r4, r3
 800c8a0:	d101      	bne.n	800c8a6 <__swbuf_r+0x7a>
 800c8a2:	68ac      	ldr	r4, [r5, #8]
 800c8a4:	e7cf      	b.n	800c846 <__swbuf_r+0x1a>
 800c8a6:	4b09      	ldr	r3, [pc, #36]	; (800c8cc <__swbuf_r+0xa0>)
 800c8a8:	429c      	cmp	r4, r3
 800c8aa:	bf08      	it	eq
 800c8ac:	68ec      	ldreq	r4, [r5, #12]
 800c8ae:	e7ca      	b.n	800c846 <__swbuf_r+0x1a>
 800c8b0:	4621      	mov	r1, r4
 800c8b2:	4628      	mov	r0, r5
 800c8b4:	f000 f81a 	bl	800c8ec <__swsetup_r>
 800c8b8:	2800      	cmp	r0, #0
 800c8ba:	d0cb      	beq.n	800c854 <__swbuf_r+0x28>
 800c8bc:	f04f 37ff 	mov.w	r7, #4294967295
 800c8c0:	e7ea      	b.n	800c898 <__swbuf_r+0x6c>
 800c8c2:	bf00      	nop
 800c8c4:	0800d424 	.word	0x0800d424
 800c8c8:	0800d444 	.word	0x0800d444
 800c8cc:	0800d404 	.word	0x0800d404

0800c8d0 <__ascii_wctomb>:
 800c8d0:	4603      	mov	r3, r0
 800c8d2:	4608      	mov	r0, r1
 800c8d4:	b141      	cbz	r1, 800c8e8 <__ascii_wctomb+0x18>
 800c8d6:	2aff      	cmp	r2, #255	; 0xff
 800c8d8:	d904      	bls.n	800c8e4 <__ascii_wctomb+0x14>
 800c8da:	228a      	movs	r2, #138	; 0x8a
 800c8dc:	f04f 30ff 	mov.w	r0, #4294967295
 800c8e0:	601a      	str	r2, [r3, #0]
 800c8e2:	4770      	bx	lr
 800c8e4:	2001      	movs	r0, #1
 800c8e6:	700a      	strb	r2, [r1, #0]
 800c8e8:	4770      	bx	lr
	...

0800c8ec <__swsetup_r>:
 800c8ec:	4b32      	ldr	r3, [pc, #200]	; (800c9b8 <__swsetup_r+0xcc>)
 800c8ee:	b570      	push	{r4, r5, r6, lr}
 800c8f0:	681d      	ldr	r5, [r3, #0]
 800c8f2:	4606      	mov	r6, r0
 800c8f4:	460c      	mov	r4, r1
 800c8f6:	b125      	cbz	r5, 800c902 <__swsetup_r+0x16>
 800c8f8:	69ab      	ldr	r3, [r5, #24]
 800c8fa:	b913      	cbnz	r3, 800c902 <__swsetup_r+0x16>
 800c8fc:	4628      	mov	r0, r5
 800c8fe:	f000 f981 	bl	800cc04 <__sinit>
 800c902:	4b2e      	ldr	r3, [pc, #184]	; (800c9bc <__swsetup_r+0xd0>)
 800c904:	429c      	cmp	r4, r3
 800c906:	d10f      	bne.n	800c928 <__swsetup_r+0x3c>
 800c908:	686c      	ldr	r4, [r5, #4]
 800c90a:	89a3      	ldrh	r3, [r4, #12]
 800c90c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c910:	0719      	lsls	r1, r3, #28
 800c912:	d42c      	bmi.n	800c96e <__swsetup_r+0x82>
 800c914:	06dd      	lsls	r5, r3, #27
 800c916:	d411      	bmi.n	800c93c <__swsetup_r+0x50>
 800c918:	2309      	movs	r3, #9
 800c91a:	6033      	str	r3, [r6, #0]
 800c91c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c920:	f04f 30ff 	mov.w	r0, #4294967295
 800c924:	81a3      	strh	r3, [r4, #12]
 800c926:	e03e      	b.n	800c9a6 <__swsetup_r+0xba>
 800c928:	4b25      	ldr	r3, [pc, #148]	; (800c9c0 <__swsetup_r+0xd4>)
 800c92a:	429c      	cmp	r4, r3
 800c92c:	d101      	bne.n	800c932 <__swsetup_r+0x46>
 800c92e:	68ac      	ldr	r4, [r5, #8]
 800c930:	e7eb      	b.n	800c90a <__swsetup_r+0x1e>
 800c932:	4b24      	ldr	r3, [pc, #144]	; (800c9c4 <__swsetup_r+0xd8>)
 800c934:	429c      	cmp	r4, r3
 800c936:	bf08      	it	eq
 800c938:	68ec      	ldreq	r4, [r5, #12]
 800c93a:	e7e6      	b.n	800c90a <__swsetup_r+0x1e>
 800c93c:	0758      	lsls	r0, r3, #29
 800c93e:	d512      	bpl.n	800c966 <__swsetup_r+0x7a>
 800c940:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c942:	b141      	cbz	r1, 800c956 <__swsetup_r+0x6a>
 800c944:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c948:	4299      	cmp	r1, r3
 800c94a:	d002      	beq.n	800c952 <__swsetup_r+0x66>
 800c94c:	4630      	mov	r0, r6
 800c94e:	f7ff fb37 	bl	800bfc0 <_free_r>
 800c952:	2300      	movs	r3, #0
 800c954:	6363      	str	r3, [r4, #52]	; 0x34
 800c956:	89a3      	ldrh	r3, [r4, #12]
 800c958:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c95c:	81a3      	strh	r3, [r4, #12]
 800c95e:	2300      	movs	r3, #0
 800c960:	6063      	str	r3, [r4, #4]
 800c962:	6923      	ldr	r3, [r4, #16]
 800c964:	6023      	str	r3, [r4, #0]
 800c966:	89a3      	ldrh	r3, [r4, #12]
 800c968:	f043 0308 	orr.w	r3, r3, #8
 800c96c:	81a3      	strh	r3, [r4, #12]
 800c96e:	6923      	ldr	r3, [r4, #16]
 800c970:	b94b      	cbnz	r3, 800c986 <__swsetup_r+0x9a>
 800c972:	89a3      	ldrh	r3, [r4, #12]
 800c974:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c978:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c97c:	d003      	beq.n	800c986 <__swsetup_r+0x9a>
 800c97e:	4621      	mov	r1, r4
 800c980:	4630      	mov	r0, r6
 800c982:	f000 fa05 	bl	800cd90 <__smakebuf_r>
 800c986:	89a0      	ldrh	r0, [r4, #12]
 800c988:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c98c:	f010 0301 	ands.w	r3, r0, #1
 800c990:	d00a      	beq.n	800c9a8 <__swsetup_r+0xbc>
 800c992:	2300      	movs	r3, #0
 800c994:	60a3      	str	r3, [r4, #8]
 800c996:	6963      	ldr	r3, [r4, #20]
 800c998:	425b      	negs	r3, r3
 800c99a:	61a3      	str	r3, [r4, #24]
 800c99c:	6923      	ldr	r3, [r4, #16]
 800c99e:	b943      	cbnz	r3, 800c9b2 <__swsetup_r+0xc6>
 800c9a0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c9a4:	d1ba      	bne.n	800c91c <__swsetup_r+0x30>
 800c9a6:	bd70      	pop	{r4, r5, r6, pc}
 800c9a8:	0781      	lsls	r1, r0, #30
 800c9aa:	bf58      	it	pl
 800c9ac:	6963      	ldrpl	r3, [r4, #20]
 800c9ae:	60a3      	str	r3, [r4, #8]
 800c9b0:	e7f4      	b.n	800c99c <__swsetup_r+0xb0>
 800c9b2:	2000      	movs	r0, #0
 800c9b4:	e7f7      	b.n	800c9a6 <__swsetup_r+0xba>
 800c9b6:	bf00      	nop
 800c9b8:	2000017c 	.word	0x2000017c
 800c9bc:	0800d424 	.word	0x0800d424
 800c9c0:	0800d444 	.word	0x0800d444
 800c9c4:	0800d404 	.word	0x0800d404

0800c9c8 <abort>:
 800c9c8:	2006      	movs	r0, #6
 800c9ca:	b508      	push	{r3, lr}
 800c9cc:	f000 fa50 	bl	800ce70 <raise>
 800c9d0:	2001      	movs	r0, #1
 800c9d2:	f7f4 ff66 	bl	80018a2 <_exit>
	...

0800c9d8 <__sflush_r>:
 800c9d8:	898a      	ldrh	r2, [r1, #12]
 800c9da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9dc:	4605      	mov	r5, r0
 800c9de:	0710      	lsls	r0, r2, #28
 800c9e0:	460c      	mov	r4, r1
 800c9e2:	d457      	bmi.n	800ca94 <__sflush_r+0xbc>
 800c9e4:	684b      	ldr	r3, [r1, #4]
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	dc04      	bgt.n	800c9f4 <__sflush_r+0x1c>
 800c9ea:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	dc01      	bgt.n	800c9f4 <__sflush_r+0x1c>
 800c9f0:	2000      	movs	r0, #0
 800c9f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c9f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c9f6:	2e00      	cmp	r6, #0
 800c9f8:	d0fa      	beq.n	800c9f0 <__sflush_r+0x18>
 800c9fa:	2300      	movs	r3, #0
 800c9fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ca00:	682f      	ldr	r7, [r5, #0]
 800ca02:	602b      	str	r3, [r5, #0]
 800ca04:	d032      	beq.n	800ca6c <__sflush_r+0x94>
 800ca06:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ca08:	89a3      	ldrh	r3, [r4, #12]
 800ca0a:	075a      	lsls	r2, r3, #29
 800ca0c:	d505      	bpl.n	800ca1a <__sflush_r+0x42>
 800ca0e:	6863      	ldr	r3, [r4, #4]
 800ca10:	1ac0      	subs	r0, r0, r3
 800ca12:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ca14:	b10b      	cbz	r3, 800ca1a <__sflush_r+0x42>
 800ca16:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ca18:	1ac0      	subs	r0, r0, r3
 800ca1a:	2300      	movs	r3, #0
 800ca1c:	4602      	mov	r2, r0
 800ca1e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ca20:	4628      	mov	r0, r5
 800ca22:	6a21      	ldr	r1, [r4, #32]
 800ca24:	47b0      	blx	r6
 800ca26:	1c43      	adds	r3, r0, #1
 800ca28:	89a3      	ldrh	r3, [r4, #12]
 800ca2a:	d106      	bne.n	800ca3a <__sflush_r+0x62>
 800ca2c:	6829      	ldr	r1, [r5, #0]
 800ca2e:	291d      	cmp	r1, #29
 800ca30:	d82c      	bhi.n	800ca8c <__sflush_r+0xb4>
 800ca32:	4a29      	ldr	r2, [pc, #164]	; (800cad8 <__sflush_r+0x100>)
 800ca34:	40ca      	lsrs	r2, r1
 800ca36:	07d6      	lsls	r6, r2, #31
 800ca38:	d528      	bpl.n	800ca8c <__sflush_r+0xb4>
 800ca3a:	2200      	movs	r2, #0
 800ca3c:	6062      	str	r2, [r4, #4]
 800ca3e:	6922      	ldr	r2, [r4, #16]
 800ca40:	04d9      	lsls	r1, r3, #19
 800ca42:	6022      	str	r2, [r4, #0]
 800ca44:	d504      	bpl.n	800ca50 <__sflush_r+0x78>
 800ca46:	1c42      	adds	r2, r0, #1
 800ca48:	d101      	bne.n	800ca4e <__sflush_r+0x76>
 800ca4a:	682b      	ldr	r3, [r5, #0]
 800ca4c:	b903      	cbnz	r3, 800ca50 <__sflush_r+0x78>
 800ca4e:	6560      	str	r0, [r4, #84]	; 0x54
 800ca50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ca52:	602f      	str	r7, [r5, #0]
 800ca54:	2900      	cmp	r1, #0
 800ca56:	d0cb      	beq.n	800c9f0 <__sflush_r+0x18>
 800ca58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ca5c:	4299      	cmp	r1, r3
 800ca5e:	d002      	beq.n	800ca66 <__sflush_r+0x8e>
 800ca60:	4628      	mov	r0, r5
 800ca62:	f7ff faad 	bl	800bfc0 <_free_r>
 800ca66:	2000      	movs	r0, #0
 800ca68:	6360      	str	r0, [r4, #52]	; 0x34
 800ca6a:	e7c2      	b.n	800c9f2 <__sflush_r+0x1a>
 800ca6c:	6a21      	ldr	r1, [r4, #32]
 800ca6e:	2301      	movs	r3, #1
 800ca70:	4628      	mov	r0, r5
 800ca72:	47b0      	blx	r6
 800ca74:	1c41      	adds	r1, r0, #1
 800ca76:	d1c7      	bne.n	800ca08 <__sflush_r+0x30>
 800ca78:	682b      	ldr	r3, [r5, #0]
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d0c4      	beq.n	800ca08 <__sflush_r+0x30>
 800ca7e:	2b1d      	cmp	r3, #29
 800ca80:	d001      	beq.n	800ca86 <__sflush_r+0xae>
 800ca82:	2b16      	cmp	r3, #22
 800ca84:	d101      	bne.n	800ca8a <__sflush_r+0xb2>
 800ca86:	602f      	str	r7, [r5, #0]
 800ca88:	e7b2      	b.n	800c9f0 <__sflush_r+0x18>
 800ca8a:	89a3      	ldrh	r3, [r4, #12]
 800ca8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca90:	81a3      	strh	r3, [r4, #12]
 800ca92:	e7ae      	b.n	800c9f2 <__sflush_r+0x1a>
 800ca94:	690f      	ldr	r7, [r1, #16]
 800ca96:	2f00      	cmp	r7, #0
 800ca98:	d0aa      	beq.n	800c9f0 <__sflush_r+0x18>
 800ca9a:	0793      	lsls	r3, r2, #30
 800ca9c:	bf18      	it	ne
 800ca9e:	2300      	movne	r3, #0
 800caa0:	680e      	ldr	r6, [r1, #0]
 800caa2:	bf08      	it	eq
 800caa4:	694b      	ldreq	r3, [r1, #20]
 800caa6:	1bf6      	subs	r6, r6, r7
 800caa8:	600f      	str	r7, [r1, #0]
 800caaa:	608b      	str	r3, [r1, #8]
 800caac:	2e00      	cmp	r6, #0
 800caae:	dd9f      	ble.n	800c9f0 <__sflush_r+0x18>
 800cab0:	4633      	mov	r3, r6
 800cab2:	463a      	mov	r2, r7
 800cab4:	4628      	mov	r0, r5
 800cab6:	6a21      	ldr	r1, [r4, #32]
 800cab8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800cabc:	47e0      	blx	ip
 800cabe:	2800      	cmp	r0, #0
 800cac0:	dc06      	bgt.n	800cad0 <__sflush_r+0xf8>
 800cac2:	89a3      	ldrh	r3, [r4, #12]
 800cac4:	f04f 30ff 	mov.w	r0, #4294967295
 800cac8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cacc:	81a3      	strh	r3, [r4, #12]
 800cace:	e790      	b.n	800c9f2 <__sflush_r+0x1a>
 800cad0:	4407      	add	r7, r0
 800cad2:	1a36      	subs	r6, r6, r0
 800cad4:	e7ea      	b.n	800caac <__sflush_r+0xd4>
 800cad6:	bf00      	nop
 800cad8:	20400001 	.word	0x20400001

0800cadc <_fflush_r>:
 800cadc:	b538      	push	{r3, r4, r5, lr}
 800cade:	690b      	ldr	r3, [r1, #16]
 800cae0:	4605      	mov	r5, r0
 800cae2:	460c      	mov	r4, r1
 800cae4:	b913      	cbnz	r3, 800caec <_fflush_r+0x10>
 800cae6:	2500      	movs	r5, #0
 800cae8:	4628      	mov	r0, r5
 800caea:	bd38      	pop	{r3, r4, r5, pc}
 800caec:	b118      	cbz	r0, 800caf6 <_fflush_r+0x1a>
 800caee:	6983      	ldr	r3, [r0, #24]
 800caf0:	b90b      	cbnz	r3, 800caf6 <_fflush_r+0x1a>
 800caf2:	f000 f887 	bl	800cc04 <__sinit>
 800caf6:	4b14      	ldr	r3, [pc, #80]	; (800cb48 <_fflush_r+0x6c>)
 800caf8:	429c      	cmp	r4, r3
 800cafa:	d11b      	bne.n	800cb34 <_fflush_r+0x58>
 800cafc:	686c      	ldr	r4, [r5, #4]
 800cafe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d0ef      	beq.n	800cae6 <_fflush_r+0xa>
 800cb06:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cb08:	07d0      	lsls	r0, r2, #31
 800cb0a:	d404      	bmi.n	800cb16 <_fflush_r+0x3a>
 800cb0c:	0599      	lsls	r1, r3, #22
 800cb0e:	d402      	bmi.n	800cb16 <_fflush_r+0x3a>
 800cb10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cb12:	f000 f915 	bl	800cd40 <__retarget_lock_acquire_recursive>
 800cb16:	4628      	mov	r0, r5
 800cb18:	4621      	mov	r1, r4
 800cb1a:	f7ff ff5d 	bl	800c9d8 <__sflush_r>
 800cb1e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cb20:	4605      	mov	r5, r0
 800cb22:	07da      	lsls	r2, r3, #31
 800cb24:	d4e0      	bmi.n	800cae8 <_fflush_r+0xc>
 800cb26:	89a3      	ldrh	r3, [r4, #12]
 800cb28:	059b      	lsls	r3, r3, #22
 800cb2a:	d4dd      	bmi.n	800cae8 <_fflush_r+0xc>
 800cb2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cb2e:	f000 f908 	bl	800cd42 <__retarget_lock_release_recursive>
 800cb32:	e7d9      	b.n	800cae8 <_fflush_r+0xc>
 800cb34:	4b05      	ldr	r3, [pc, #20]	; (800cb4c <_fflush_r+0x70>)
 800cb36:	429c      	cmp	r4, r3
 800cb38:	d101      	bne.n	800cb3e <_fflush_r+0x62>
 800cb3a:	68ac      	ldr	r4, [r5, #8]
 800cb3c:	e7df      	b.n	800cafe <_fflush_r+0x22>
 800cb3e:	4b04      	ldr	r3, [pc, #16]	; (800cb50 <_fflush_r+0x74>)
 800cb40:	429c      	cmp	r4, r3
 800cb42:	bf08      	it	eq
 800cb44:	68ec      	ldreq	r4, [r5, #12]
 800cb46:	e7da      	b.n	800cafe <_fflush_r+0x22>
 800cb48:	0800d424 	.word	0x0800d424
 800cb4c:	0800d444 	.word	0x0800d444
 800cb50:	0800d404 	.word	0x0800d404

0800cb54 <std>:
 800cb54:	2300      	movs	r3, #0
 800cb56:	b510      	push	{r4, lr}
 800cb58:	4604      	mov	r4, r0
 800cb5a:	e9c0 3300 	strd	r3, r3, [r0]
 800cb5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cb62:	6083      	str	r3, [r0, #8]
 800cb64:	8181      	strh	r1, [r0, #12]
 800cb66:	6643      	str	r3, [r0, #100]	; 0x64
 800cb68:	81c2      	strh	r2, [r0, #14]
 800cb6a:	6183      	str	r3, [r0, #24]
 800cb6c:	4619      	mov	r1, r3
 800cb6e:	2208      	movs	r2, #8
 800cb70:	305c      	adds	r0, #92	; 0x5c
 800cb72:	f7fd fb65 	bl	800a240 <memset>
 800cb76:	4b05      	ldr	r3, [pc, #20]	; (800cb8c <std+0x38>)
 800cb78:	6224      	str	r4, [r4, #32]
 800cb7a:	6263      	str	r3, [r4, #36]	; 0x24
 800cb7c:	4b04      	ldr	r3, [pc, #16]	; (800cb90 <std+0x3c>)
 800cb7e:	62a3      	str	r3, [r4, #40]	; 0x28
 800cb80:	4b04      	ldr	r3, [pc, #16]	; (800cb94 <std+0x40>)
 800cb82:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cb84:	4b04      	ldr	r3, [pc, #16]	; (800cb98 <std+0x44>)
 800cb86:	6323      	str	r3, [r4, #48]	; 0x30
 800cb88:	bd10      	pop	{r4, pc}
 800cb8a:	bf00      	nop
 800cb8c:	0800cea9 	.word	0x0800cea9
 800cb90:	0800cecb 	.word	0x0800cecb
 800cb94:	0800cf03 	.word	0x0800cf03
 800cb98:	0800cf27 	.word	0x0800cf27

0800cb9c <_cleanup_r>:
 800cb9c:	4901      	ldr	r1, [pc, #4]	; (800cba4 <_cleanup_r+0x8>)
 800cb9e:	f000 b8af 	b.w	800cd00 <_fwalk_reent>
 800cba2:	bf00      	nop
 800cba4:	0800cadd 	.word	0x0800cadd

0800cba8 <__sfmoreglue>:
 800cba8:	2268      	movs	r2, #104	; 0x68
 800cbaa:	b570      	push	{r4, r5, r6, lr}
 800cbac:	1e4d      	subs	r5, r1, #1
 800cbae:	4355      	muls	r5, r2
 800cbb0:	460e      	mov	r6, r1
 800cbb2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cbb6:	f7ff fa6b 	bl	800c090 <_malloc_r>
 800cbba:	4604      	mov	r4, r0
 800cbbc:	b140      	cbz	r0, 800cbd0 <__sfmoreglue+0x28>
 800cbbe:	2100      	movs	r1, #0
 800cbc0:	e9c0 1600 	strd	r1, r6, [r0]
 800cbc4:	300c      	adds	r0, #12
 800cbc6:	60a0      	str	r0, [r4, #8]
 800cbc8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cbcc:	f7fd fb38 	bl	800a240 <memset>
 800cbd0:	4620      	mov	r0, r4
 800cbd2:	bd70      	pop	{r4, r5, r6, pc}

0800cbd4 <__sfp_lock_acquire>:
 800cbd4:	4801      	ldr	r0, [pc, #4]	; (800cbdc <__sfp_lock_acquire+0x8>)
 800cbd6:	f000 b8b3 	b.w	800cd40 <__retarget_lock_acquire_recursive>
 800cbda:	bf00      	nop
 800cbdc:	200015c9 	.word	0x200015c9

0800cbe0 <__sfp_lock_release>:
 800cbe0:	4801      	ldr	r0, [pc, #4]	; (800cbe8 <__sfp_lock_release+0x8>)
 800cbe2:	f000 b8ae 	b.w	800cd42 <__retarget_lock_release_recursive>
 800cbe6:	bf00      	nop
 800cbe8:	200015c9 	.word	0x200015c9

0800cbec <__sinit_lock_acquire>:
 800cbec:	4801      	ldr	r0, [pc, #4]	; (800cbf4 <__sinit_lock_acquire+0x8>)
 800cbee:	f000 b8a7 	b.w	800cd40 <__retarget_lock_acquire_recursive>
 800cbf2:	bf00      	nop
 800cbf4:	200015ca 	.word	0x200015ca

0800cbf8 <__sinit_lock_release>:
 800cbf8:	4801      	ldr	r0, [pc, #4]	; (800cc00 <__sinit_lock_release+0x8>)
 800cbfa:	f000 b8a2 	b.w	800cd42 <__retarget_lock_release_recursive>
 800cbfe:	bf00      	nop
 800cc00:	200015ca 	.word	0x200015ca

0800cc04 <__sinit>:
 800cc04:	b510      	push	{r4, lr}
 800cc06:	4604      	mov	r4, r0
 800cc08:	f7ff fff0 	bl	800cbec <__sinit_lock_acquire>
 800cc0c:	69a3      	ldr	r3, [r4, #24]
 800cc0e:	b11b      	cbz	r3, 800cc18 <__sinit+0x14>
 800cc10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cc14:	f7ff bff0 	b.w	800cbf8 <__sinit_lock_release>
 800cc18:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800cc1c:	6523      	str	r3, [r4, #80]	; 0x50
 800cc1e:	4b13      	ldr	r3, [pc, #76]	; (800cc6c <__sinit+0x68>)
 800cc20:	4a13      	ldr	r2, [pc, #76]	; (800cc70 <__sinit+0x6c>)
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	62a2      	str	r2, [r4, #40]	; 0x28
 800cc26:	42a3      	cmp	r3, r4
 800cc28:	bf08      	it	eq
 800cc2a:	2301      	moveq	r3, #1
 800cc2c:	4620      	mov	r0, r4
 800cc2e:	bf08      	it	eq
 800cc30:	61a3      	streq	r3, [r4, #24]
 800cc32:	f000 f81f 	bl	800cc74 <__sfp>
 800cc36:	6060      	str	r0, [r4, #4]
 800cc38:	4620      	mov	r0, r4
 800cc3a:	f000 f81b 	bl	800cc74 <__sfp>
 800cc3e:	60a0      	str	r0, [r4, #8]
 800cc40:	4620      	mov	r0, r4
 800cc42:	f000 f817 	bl	800cc74 <__sfp>
 800cc46:	2200      	movs	r2, #0
 800cc48:	2104      	movs	r1, #4
 800cc4a:	60e0      	str	r0, [r4, #12]
 800cc4c:	6860      	ldr	r0, [r4, #4]
 800cc4e:	f7ff ff81 	bl	800cb54 <std>
 800cc52:	2201      	movs	r2, #1
 800cc54:	2109      	movs	r1, #9
 800cc56:	68a0      	ldr	r0, [r4, #8]
 800cc58:	f7ff ff7c 	bl	800cb54 <std>
 800cc5c:	2202      	movs	r2, #2
 800cc5e:	2112      	movs	r1, #18
 800cc60:	68e0      	ldr	r0, [r4, #12]
 800cc62:	f7ff ff77 	bl	800cb54 <std>
 800cc66:	2301      	movs	r3, #1
 800cc68:	61a3      	str	r3, [r4, #24]
 800cc6a:	e7d1      	b.n	800cc10 <__sinit+0xc>
 800cc6c:	0800d088 	.word	0x0800d088
 800cc70:	0800cb9d 	.word	0x0800cb9d

0800cc74 <__sfp>:
 800cc74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc76:	4607      	mov	r7, r0
 800cc78:	f7ff ffac 	bl	800cbd4 <__sfp_lock_acquire>
 800cc7c:	4b1e      	ldr	r3, [pc, #120]	; (800ccf8 <__sfp+0x84>)
 800cc7e:	681e      	ldr	r6, [r3, #0]
 800cc80:	69b3      	ldr	r3, [r6, #24]
 800cc82:	b913      	cbnz	r3, 800cc8a <__sfp+0x16>
 800cc84:	4630      	mov	r0, r6
 800cc86:	f7ff ffbd 	bl	800cc04 <__sinit>
 800cc8a:	3648      	adds	r6, #72	; 0x48
 800cc8c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cc90:	3b01      	subs	r3, #1
 800cc92:	d503      	bpl.n	800cc9c <__sfp+0x28>
 800cc94:	6833      	ldr	r3, [r6, #0]
 800cc96:	b30b      	cbz	r3, 800ccdc <__sfp+0x68>
 800cc98:	6836      	ldr	r6, [r6, #0]
 800cc9a:	e7f7      	b.n	800cc8c <__sfp+0x18>
 800cc9c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cca0:	b9d5      	cbnz	r5, 800ccd8 <__sfp+0x64>
 800cca2:	4b16      	ldr	r3, [pc, #88]	; (800ccfc <__sfp+0x88>)
 800cca4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cca8:	60e3      	str	r3, [r4, #12]
 800ccaa:	6665      	str	r5, [r4, #100]	; 0x64
 800ccac:	f000 f847 	bl	800cd3e <__retarget_lock_init_recursive>
 800ccb0:	f7ff ff96 	bl	800cbe0 <__sfp_lock_release>
 800ccb4:	2208      	movs	r2, #8
 800ccb6:	4629      	mov	r1, r5
 800ccb8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ccbc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ccc0:	6025      	str	r5, [r4, #0]
 800ccc2:	61a5      	str	r5, [r4, #24]
 800ccc4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ccc8:	f7fd faba 	bl	800a240 <memset>
 800cccc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ccd0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ccd4:	4620      	mov	r0, r4
 800ccd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ccd8:	3468      	adds	r4, #104	; 0x68
 800ccda:	e7d9      	b.n	800cc90 <__sfp+0x1c>
 800ccdc:	2104      	movs	r1, #4
 800ccde:	4638      	mov	r0, r7
 800cce0:	f7ff ff62 	bl	800cba8 <__sfmoreglue>
 800cce4:	4604      	mov	r4, r0
 800cce6:	6030      	str	r0, [r6, #0]
 800cce8:	2800      	cmp	r0, #0
 800ccea:	d1d5      	bne.n	800cc98 <__sfp+0x24>
 800ccec:	f7ff ff78 	bl	800cbe0 <__sfp_lock_release>
 800ccf0:	230c      	movs	r3, #12
 800ccf2:	603b      	str	r3, [r7, #0]
 800ccf4:	e7ee      	b.n	800ccd4 <__sfp+0x60>
 800ccf6:	bf00      	nop
 800ccf8:	0800d088 	.word	0x0800d088
 800ccfc:	ffff0001 	.word	0xffff0001

0800cd00 <_fwalk_reent>:
 800cd00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd04:	4606      	mov	r6, r0
 800cd06:	4688      	mov	r8, r1
 800cd08:	2700      	movs	r7, #0
 800cd0a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cd0e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cd12:	f1b9 0901 	subs.w	r9, r9, #1
 800cd16:	d505      	bpl.n	800cd24 <_fwalk_reent+0x24>
 800cd18:	6824      	ldr	r4, [r4, #0]
 800cd1a:	2c00      	cmp	r4, #0
 800cd1c:	d1f7      	bne.n	800cd0e <_fwalk_reent+0xe>
 800cd1e:	4638      	mov	r0, r7
 800cd20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd24:	89ab      	ldrh	r3, [r5, #12]
 800cd26:	2b01      	cmp	r3, #1
 800cd28:	d907      	bls.n	800cd3a <_fwalk_reent+0x3a>
 800cd2a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cd2e:	3301      	adds	r3, #1
 800cd30:	d003      	beq.n	800cd3a <_fwalk_reent+0x3a>
 800cd32:	4629      	mov	r1, r5
 800cd34:	4630      	mov	r0, r6
 800cd36:	47c0      	blx	r8
 800cd38:	4307      	orrs	r7, r0
 800cd3a:	3568      	adds	r5, #104	; 0x68
 800cd3c:	e7e9      	b.n	800cd12 <_fwalk_reent+0x12>

0800cd3e <__retarget_lock_init_recursive>:
 800cd3e:	4770      	bx	lr

0800cd40 <__retarget_lock_acquire_recursive>:
 800cd40:	4770      	bx	lr

0800cd42 <__retarget_lock_release_recursive>:
 800cd42:	4770      	bx	lr

0800cd44 <__swhatbuf_r>:
 800cd44:	b570      	push	{r4, r5, r6, lr}
 800cd46:	460e      	mov	r6, r1
 800cd48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd4c:	4614      	mov	r4, r2
 800cd4e:	2900      	cmp	r1, #0
 800cd50:	461d      	mov	r5, r3
 800cd52:	b096      	sub	sp, #88	; 0x58
 800cd54:	da08      	bge.n	800cd68 <__swhatbuf_r+0x24>
 800cd56:	2200      	movs	r2, #0
 800cd58:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800cd5c:	602a      	str	r2, [r5, #0]
 800cd5e:	061a      	lsls	r2, r3, #24
 800cd60:	d410      	bmi.n	800cd84 <__swhatbuf_r+0x40>
 800cd62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cd66:	e00e      	b.n	800cd86 <__swhatbuf_r+0x42>
 800cd68:	466a      	mov	r2, sp
 800cd6a:	f000 f903 	bl	800cf74 <_fstat_r>
 800cd6e:	2800      	cmp	r0, #0
 800cd70:	dbf1      	blt.n	800cd56 <__swhatbuf_r+0x12>
 800cd72:	9a01      	ldr	r2, [sp, #4]
 800cd74:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cd78:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cd7c:	425a      	negs	r2, r3
 800cd7e:	415a      	adcs	r2, r3
 800cd80:	602a      	str	r2, [r5, #0]
 800cd82:	e7ee      	b.n	800cd62 <__swhatbuf_r+0x1e>
 800cd84:	2340      	movs	r3, #64	; 0x40
 800cd86:	2000      	movs	r0, #0
 800cd88:	6023      	str	r3, [r4, #0]
 800cd8a:	b016      	add	sp, #88	; 0x58
 800cd8c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800cd90 <__smakebuf_r>:
 800cd90:	898b      	ldrh	r3, [r1, #12]
 800cd92:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cd94:	079d      	lsls	r5, r3, #30
 800cd96:	4606      	mov	r6, r0
 800cd98:	460c      	mov	r4, r1
 800cd9a:	d507      	bpl.n	800cdac <__smakebuf_r+0x1c>
 800cd9c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cda0:	6023      	str	r3, [r4, #0]
 800cda2:	6123      	str	r3, [r4, #16]
 800cda4:	2301      	movs	r3, #1
 800cda6:	6163      	str	r3, [r4, #20]
 800cda8:	b002      	add	sp, #8
 800cdaa:	bd70      	pop	{r4, r5, r6, pc}
 800cdac:	466a      	mov	r2, sp
 800cdae:	ab01      	add	r3, sp, #4
 800cdb0:	f7ff ffc8 	bl	800cd44 <__swhatbuf_r>
 800cdb4:	9900      	ldr	r1, [sp, #0]
 800cdb6:	4605      	mov	r5, r0
 800cdb8:	4630      	mov	r0, r6
 800cdba:	f7ff f969 	bl	800c090 <_malloc_r>
 800cdbe:	b948      	cbnz	r0, 800cdd4 <__smakebuf_r+0x44>
 800cdc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cdc4:	059a      	lsls	r2, r3, #22
 800cdc6:	d4ef      	bmi.n	800cda8 <__smakebuf_r+0x18>
 800cdc8:	f023 0303 	bic.w	r3, r3, #3
 800cdcc:	f043 0302 	orr.w	r3, r3, #2
 800cdd0:	81a3      	strh	r3, [r4, #12]
 800cdd2:	e7e3      	b.n	800cd9c <__smakebuf_r+0xc>
 800cdd4:	4b0d      	ldr	r3, [pc, #52]	; (800ce0c <__smakebuf_r+0x7c>)
 800cdd6:	62b3      	str	r3, [r6, #40]	; 0x28
 800cdd8:	89a3      	ldrh	r3, [r4, #12]
 800cdda:	6020      	str	r0, [r4, #0]
 800cddc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cde0:	81a3      	strh	r3, [r4, #12]
 800cde2:	9b00      	ldr	r3, [sp, #0]
 800cde4:	6120      	str	r0, [r4, #16]
 800cde6:	6163      	str	r3, [r4, #20]
 800cde8:	9b01      	ldr	r3, [sp, #4]
 800cdea:	b15b      	cbz	r3, 800ce04 <__smakebuf_r+0x74>
 800cdec:	4630      	mov	r0, r6
 800cdee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cdf2:	f000 f8d1 	bl	800cf98 <_isatty_r>
 800cdf6:	b128      	cbz	r0, 800ce04 <__smakebuf_r+0x74>
 800cdf8:	89a3      	ldrh	r3, [r4, #12]
 800cdfa:	f023 0303 	bic.w	r3, r3, #3
 800cdfe:	f043 0301 	orr.w	r3, r3, #1
 800ce02:	81a3      	strh	r3, [r4, #12]
 800ce04:	89a0      	ldrh	r0, [r4, #12]
 800ce06:	4305      	orrs	r5, r0
 800ce08:	81a5      	strh	r5, [r4, #12]
 800ce0a:	e7cd      	b.n	800cda8 <__smakebuf_r+0x18>
 800ce0c:	0800cb9d 	.word	0x0800cb9d

0800ce10 <_malloc_usable_size_r>:
 800ce10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ce14:	1f18      	subs	r0, r3, #4
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	bfbc      	itt	lt
 800ce1a:	580b      	ldrlt	r3, [r1, r0]
 800ce1c:	18c0      	addlt	r0, r0, r3
 800ce1e:	4770      	bx	lr

0800ce20 <_raise_r>:
 800ce20:	291f      	cmp	r1, #31
 800ce22:	b538      	push	{r3, r4, r5, lr}
 800ce24:	4604      	mov	r4, r0
 800ce26:	460d      	mov	r5, r1
 800ce28:	d904      	bls.n	800ce34 <_raise_r+0x14>
 800ce2a:	2316      	movs	r3, #22
 800ce2c:	6003      	str	r3, [r0, #0]
 800ce2e:	f04f 30ff 	mov.w	r0, #4294967295
 800ce32:	bd38      	pop	{r3, r4, r5, pc}
 800ce34:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ce36:	b112      	cbz	r2, 800ce3e <_raise_r+0x1e>
 800ce38:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ce3c:	b94b      	cbnz	r3, 800ce52 <_raise_r+0x32>
 800ce3e:	4620      	mov	r0, r4
 800ce40:	f000 f830 	bl	800cea4 <_getpid_r>
 800ce44:	462a      	mov	r2, r5
 800ce46:	4601      	mov	r1, r0
 800ce48:	4620      	mov	r0, r4
 800ce4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ce4e:	f000 b817 	b.w	800ce80 <_kill_r>
 800ce52:	2b01      	cmp	r3, #1
 800ce54:	d00a      	beq.n	800ce6c <_raise_r+0x4c>
 800ce56:	1c59      	adds	r1, r3, #1
 800ce58:	d103      	bne.n	800ce62 <_raise_r+0x42>
 800ce5a:	2316      	movs	r3, #22
 800ce5c:	6003      	str	r3, [r0, #0]
 800ce5e:	2001      	movs	r0, #1
 800ce60:	e7e7      	b.n	800ce32 <_raise_r+0x12>
 800ce62:	2400      	movs	r4, #0
 800ce64:	4628      	mov	r0, r5
 800ce66:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ce6a:	4798      	blx	r3
 800ce6c:	2000      	movs	r0, #0
 800ce6e:	e7e0      	b.n	800ce32 <_raise_r+0x12>

0800ce70 <raise>:
 800ce70:	4b02      	ldr	r3, [pc, #8]	; (800ce7c <raise+0xc>)
 800ce72:	4601      	mov	r1, r0
 800ce74:	6818      	ldr	r0, [r3, #0]
 800ce76:	f7ff bfd3 	b.w	800ce20 <_raise_r>
 800ce7a:	bf00      	nop
 800ce7c:	2000017c 	.word	0x2000017c

0800ce80 <_kill_r>:
 800ce80:	b538      	push	{r3, r4, r5, lr}
 800ce82:	2300      	movs	r3, #0
 800ce84:	4d06      	ldr	r5, [pc, #24]	; (800cea0 <_kill_r+0x20>)
 800ce86:	4604      	mov	r4, r0
 800ce88:	4608      	mov	r0, r1
 800ce8a:	4611      	mov	r1, r2
 800ce8c:	602b      	str	r3, [r5, #0]
 800ce8e:	f7f4 fcf8 	bl	8001882 <_kill>
 800ce92:	1c43      	adds	r3, r0, #1
 800ce94:	d102      	bne.n	800ce9c <_kill_r+0x1c>
 800ce96:	682b      	ldr	r3, [r5, #0]
 800ce98:	b103      	cbz	r3, 800ce9c <_kill_r+0x1c>
 800ce9a:	6023      	str	r3, [r4, #0]
 800ce9c:	bd38      	pop	{r3, r4, r5, pc}
 800ce9e:	bf00      	nop
 800cea0:	200015c4 	.word	0x200015c4

0800cea4 <_getpid_r>:
 800cea4:	f7f4 bce6 	b.w	8001874 <_getpid>

0800cea8 <__sread>:
 800cea8:	b510      	push	{r4, lr}
 800ceaa:	460c      	mov	r4, r1
 800ceac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ceb0:	f000 f894 	bl	800cfdc <_read_r>
 800ceb4:	2800      	cmp	r0, #0
 800ceb6:	bfab      	itete	ge
 800ceb8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ceba:	89a3      	ldrhlt	r3, [r4, #12]
 800cebc:	181b      	addge	r3, r3, r0
 800cebe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cec2:	bfac      	ite	ge
 800cec4:	6563      	strge	r3, [r4, #84]	; 0x54
 800cec6:	81a3      	strhlt	r3, [r4, #12]
 800cec8:	bd10      	pop	{r4, pc}

0800ceca <__swrite>:
 800ceca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cece:	461f      	mov	r7, r3
 800ced0:	898b      	ldrh	r3, [r1, #12]
 800ced2:	4605      	mov	r5, r0
 800ced4:	05db      	lsls	r3, r3, #23
 800ced6:	460c      	mov	r4, r1
 800ced8:	4616      	mov	r6, r2
 800ceda:	d505      	bpl.n	800cee8 <__swrite+0x1e>
 800cedc:	2302      	movs	r3, #2
 800cede:	2200      	movs	r2, #0
 800cee0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cee4:	f000 f868 	bl	800cfb8 <_lseek_r>
 800cee8:	89a3      	ldrh	r3, [r4, #12]
 800ceea:	4632      	mov	r2, r6
 800ceec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cef0:	81a3      	strh	r3, [r4, #12]
 800cef2:	4628      	mov	r0, r5
 800cef4:	463b      	mov	r3, r7
 800cef6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cefa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cefe:	f000 b817 	b.w	800cf30 <_write_r>

0800cf02 <__sseek>:
 800cf02:	b510      	push	{r4, lr}
 800cf04:	460c      	mov	r4, r1
 800cf06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf0a:	f000 f855 	bl	800cfb8 <_lseek_r>
 800cf0e:	1c43      	adds	r3, r0, #1
 800cf10:	89a3      	ldrh	r3, [r4, #12]
 800cf12:	bf15      	itete	ne
 800cf14:	6560      	strne	r0, [r4, #84]	; 0x54
 800cf16:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cf1a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cf1e:	81a3      	strheq	r3, [r4, #12]
 800cf20:	bf18      	it	ne
 800cf22:	81a3      	strhne	r3, [r4, #12]
 800cf24:	bd10      	pop	{r4, pc}

0800cf26 <__sclose>:
 800cf26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf2a:	f000 b813 	b.w	800cf54 <_close_r>
	...

0800cf30 <_write_r>:
 800cf30:	b538      	push	{r3, r4, r5, lr}
 800cf32:	4604      	mov	r4, r0
 800cf34:	4608      	mov	r0, r1
 800cf36:	4611      	mov	r1, r2
 800cf38:	2200      	movs	r2, #0
 800cf3a:	4d05      	ldr	r5, [pc, #20]	; (800cf50 <_write_r+0x20>)
 800cf3c:	602a      	str	r2, [r5, #0]
 800cf3e:	461a      	mov	r2, r3
 800cf40:	f7f4 fcd6 	bl	80018f0 <_write>
 800cf44:	1c43      	adds	r3, r0, #1
 800cf46:	d102      	bne.n	800cf4e <_write_r+0x1e>
 800cf48:	682b      	ldr	r3, [r5, #0]
 800cf4a:	b103      	cbz	r3, 800cf4e <_write_r+0x1e>
 800cf4c:	6023      	str	r3, [r4, #0]
 800cf4e:	bd38      	pop	{r3, r4, r5, pc}
 800cf50:	200015c4 	.word	0x200015c4

0800cf54 <_close_r>:
 800cf54:	b538      	push	{r3, r4, r5, lr}
 800cf56:	2300      	movs	r3, #0
 800cf58:	4d05      	ldr	r5, [pc, #20]	; (800cf70 <_close_r+0x1c>)
 800cf5a:	4604      	mov	r4, r0
 800cf5c:	4608      	mov	r0, r1
 800cf5e:	602b      	str	r3, [r5, #0]
 800cf60:	f7f4 fce2 	bl	8001928 <_close>
 800cf64:	1c43      	adds	r3, r0, #1
 800cf66:	d102      	bne.n	800cf6e <_close_r+0x1a>
 800cf68:	682b      	ldr	r3, [r5, #0]
 800cf6a:	b103      	cbz	r3, 800cf6e <_close_r+0x1a>
 800cf6c:	6023      	str	r3, [r4, #0]
 800cf6e:	bd38      	pop	{r3, r4, r5, pc}
 800cf70:	200015c4 	.word	0x200015c4

0800cf74 <_fstat_r>:
 800cf74:	b538      	push	{r3, r4, r5, lr}
 800cf76:	2300      	movs	r3, #0
 800cf78:	4d06      	ldr	r5, [pc, #24]	; (800cf94 <_fstat_r+0x20>)
 800cf7a:	4604      	mov	r4, r0
 800cf7c:	4608      	mov	r0, r1
 800cf7e:	4611      	mov	r1, r2
 800cf80:	602b      	str	r3, [r5, #0]
 800cf82:	f7f4 fcdc 	bl	800193e <_fstat>
 800cf86:	1c43      	adds	r3, r0, #1
 800cf88:	d102      	bne.n	800cf90 <_fstat_r+0x1c>
 800cf8a:	682b      	ldr	r3, [r5, #0]
 800cf8c:	b103      	cbz	r3, 800cf90 <_fstat_r+0x1c>
 800cf8e:	6023      	str	r3, [r4, #0]
 800cf90:	bd38      	pop	{r3, r4, r5, pc}
 800cf92:	bf00      	nop
 800cf94:	200015c4 	.word	0x200015c4

0800cf98 <_isatty_r>:
 800cf98:	b538      	push	{r3, r4, r5, lr}
 800cf9a:	2300      	movs	r3, #0
 800cf9c:	4d05      	ldr	r5, [pc, #20]	; (800cfb4 <_isatty_r+0x1c>)
 800cf9e:	4604      	mov	r4, r0
 800cfa0:	4608      	mov	r0, r1
 800cfa2:	602b      	str	r3, [r5, #0]
 800cfa4:	f7f4 fcda 	bl	800195c <_isatty>
 800cfa8:	1c43      	adds	r3, r0, #1
 800cfaa:	d102      	bne.n	800cfb2 <_isatty_r+0x1a>
 800cfac:	682b      	ldr	r3, [r5, #0]
 800cfae:	b103      	cbz	r3, 800cfb2 <_isatty_r+0x1a>
 800cfb0:	6023      	str	r3, [r4, #0]
 800cfb2:	bd38      	pop	{r3, r4, r5, pc}
 800cfb4:	200015c4 	.word	0x200015c4

0800cfb8 <_lseek_r>:
 800cfb8:	b538      	push	{r3, r4, r5, lr}
 800cfba:	4604      	mov	r4, r0
 800cfbc:	4608      	mov	r0, r1
 800cfbe:	4611      	mov	r1, r2
 800cfc0:	2200      	movs	r2, #0
 800cfc2:	4d05      	ldr	r5, [pc, #20]	; (800cfd8 <_lseek_r+0x20>)
 800cfc4:	602a      	str	r2, [r5, #0]
 800cfc6:	461a      	mov	r2, r3
 800cfc8:	f7f4 fcd2 	bl	8001970 <_lseek>
 800cfcc:	1c43      	adds	r3, r0, #1
 800cfce:	d102      	bne.n	800cfd6 <_lseek_r+0x1e>
 800cfd0:	682b      	ldr	r3, [r5, #0]
 800cfd2:	b103      	cbz	r3, 800cfd6 <_lseek_r+0x1e>
 800cfd4:	6023      	str	r3, [r4, #0]
 800cfd6:	bd38      	pop	{r3, r4, r5, pc}
 800cfd8:	200015c4 	.word	0x200015c4

0800cfdc <_read_r>:
 800cfdc:	b538      	push	{r3, r4, r5, lr}
 800cfde:	4604      	mov	r4, r0
 800cfe0:	4608      	mov	r0, r1
 800cfe2:	4611      	mov	r1, r2
 800cfe4:	2200      	movs	r2, #0
 800cfe6:	4d05      	ldr	r5, [pc, #20]	; (800cffc <_read_r+0x20>)
 800cfe8:	602a      	str	r2, [r5, #0]
 800cfea:	461a      	mov	r2, r3
 800cfec:	f7f4 fc63 	bl	80018b6 <_read>
 800cff0:	1c43      	adds	r3, r0, #1
 800cff2:	d102      	bne.n	800cffa <_read_r+0x1e>
 800cff4:	682b      	ldr	r3, [r5, #0]
 800cff6:	b103      	cbz	r3, 800cffa <_read_r+0x1e>
 800cff8:	6023      	str	r3, [r4, #0]
 800cffa:	bd38      	pop	{r3, r4, r5, pc}
 800cffc:	200015c4 	.word	0x200015c4

0800d000 <_init>:
 800d000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d002:	bf00      	nop
 800d004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d006:	bc08      	pop	{r3}
 800d008:	469e      	mov	lr, r3
 800d00a:	4770      	bx	lr

0800d00c <_fini>:
 800d00c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d00e:	bf00      	nop
 800d010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d012:	bc08      	pop	{r3}
 800d014:	469e      	mov	lr, r3
 800d016:	4770      	bx	lr
