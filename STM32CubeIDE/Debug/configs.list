
configs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d994  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000060c  0800daa8  0800daa8  0001daa8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e0b4  0800e0b4  00020358  2**0
                  CONTENTS
  4 .ARM          00000000  0800e0b4  0800e0b4  00020358  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e0b4  0800e0b4  00020358  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e0b4  0800e0b4  0001e0b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e0b8  0800e0b8  0001e0b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000358  20000000  0800e0bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000130c  20000358  0800e414  00020358  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001664  0800e414  00021664  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020358  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012a6c  00000000  00000000  00020381  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003216  00000000  00000000  00032ded  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001118  00000000  00000000  00036008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f90  00000000  00000000  00037120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b1c5  00000000  00000000  000380b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000143bb  00000000  00000000  00053275  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008eab9  00000000  00000000  00067630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f60e9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000058f4  00000000  00000000  000f613c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000358 	.word	0x20000358
 800012c:	00000000 	.word	0x00000000
 8000130:	0800da8c 	.word	0x0800da8c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000035c 	.word	0x2000035c
 800014c:	0800da8c 	.word	0x0800da8c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__aeabi_f2iz>:
 8000f44:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f48:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f4c:	d30f      	bcc.n	8000f6e <__aeabi_f2iz+0x2a>
 8000f4e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f52:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f56:	d90d      	bls.n	8000f74 <__aeabi_f2iz+0x30>
 8000f58:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f60:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000f64:	fa23 f002 	lsr.w	r0, r3, r2
 8000f68:	bf18      	it	ne
 8000f6a:	4240      	negne	r0, r0
 8000f6c:	4770      	bx	lr
 8000f6e:	f04f 0000 	mov.w	r0, #0
 8000f72:	4770      	bx	lr
 8000f74:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f78:	d101      	bne.n	8000f7e <__aeabi_f2iz+0x3a>
 8000f7a:	0242      	lsls	r2, r0, #9
 8000f7c:	d105      	bne.n	8000f8a <__aeabi_f2iz+0x46>
 8000f7e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000f82:	bf08      	it	eq
 8000f84:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000f88:	4770      	bx	lr
 8000f8a:	f04f 0000 	mov.w	r0, #0
 8000f8e:	4770      	bx	lr

08000f90 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000f94:	f001 fdaa 	bl	8002aec <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000f98:	f000 f884 	bl	80010a4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000f9c:	f000 fb1a 	bl	80015d4 <MX_GPIO_Init>
	MX_TIM2_Init();
 8000fa0:	f000 f94e 	bl	8001240 <MX_TIM2_Init>
	MX_TIM1_Init();
 8000fa4:	f000 f8d8 	bl	8001158 <MX_TIM1_Init>
	MX_USB_DEVICE_Init();
 8000fa8:	f001 f8f6 	bl	8002198 <MX_USB_DEVICE_Init>
	MX_TIM3_Init();
 8000fac:	f000 f9e0 	bl	8001370 <MX_TIM3_Init>
	MX_TIM4_Init();
 8000fb0:	f000 fa78 	bl	80014a4 <MX_TIM4_Init>
	/* USER CODE BEGIN 2 */

	TIM1->CCR1 = 50;
 8000fb4:	4b35      	ldr	r3, [pc, #212]	; (800108c <main+0xfc>)
 8000fb6:	2232      	movs	r2, #50	; 0x32
 8000fb8:	635a      	str	r2, [r3, #52]	; 0x34
	//Frequency measurement on TIM1_CHANNEL_1
	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000fba:	2100      	movs	r1, #0
 8000fbc:	4834      	ldr	r0, [pc, #208]	; (8001090 <main+0x100>)
 8000fbe:	f004 fbdf 	bl	8005780 <HAL_TIM_IC_Start_IT>

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	4833      	ldr	r0, [pc, #204]	; (8001094 <main+0x104>)
 8000fc6:	f004 fae1 	bl	800558c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000fca:	2104      	movs	r1, #4
 8000fcc:	4831      	ldr	r0, [pc, #196]	; (8001094 <main+0x104>)
 8000fce:	f004 fadd 	bl	800558c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000fd2:	2108      	movs	r1, #8
 8000fd4:	482f      	ldr	r0, [pc, #188]	; (8001094 <main+0x104>)
 8000fd6:	f004 fad9 	bl	800558c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000fda:	210c      	movs	r1, #12
 8000fdc:	482d      	ldr	r0, [pc, #180]	; (8001094 <main+0x104>)
 8000fde:	f004 fad5 	bl	800558c <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	482c      	ldr	r0, [pc, #176]	; (8001098 <main+0x108>)
 8000fe6:	f004 fad1 	bl	800558c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000fea:	2104      	movs	r1, #4
 8000fec:	482a      	ldr	r0, [pc, #168]	; (8001098 <main+0x108>)
 8000fee:	f004 facd 	bl	800558c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000ff2:	2108      	movs	r1, #8
 8000ff4:	4828      	ldr	r0, [pc, #160]	; (8001098 <main+0x108>)
 8000ff6:	f004 fac9 	bl	800558c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8000ffa:	210c      	movs	r1, #12
 8000ffc:	4826      	ldr	r0, [pc, #152]	; (8001098 <main+0x108>)
 8000ffe:	f004 fac5 	bl	800558c <HAL_TIM_PWM_Start>
	//HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001002:	2100      	movs	r1, #0
 8001004:	4824      	ldr	r0, [pc, #144]	; (8001098 <main+0x108>)
 8001006:	f004 fac1 	bl	800558c <HAL_TIM_PWM_Start>

	//Initialize ALL servo-motor positions to closed
	htim3.Instance->CCR1 = CLOSE_POS;
 800100a:	4b22      	ldr	r3, [pc, #136]	; (8001094 <main+0x104>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	2228      	movs	r2, #40	; 0x28
 8001010:	635a      	str	r2, [r3, #52]	; 0x34
	htim3.Instance->CCR2 = CLOSE_POS;
 8001012:	4b20      	ldr	r3, [pc, #128]	; (8001094 <main+0x104>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	2228      	movs	r2, #40	; 0x28
 8001018:	639a      	str	r2, [r3, #56]	; 0x38
	htim3.Instance->CCR3 = CLOSE_POS;
 800101a:	4b1e      	ldr	r3, [pc, #120]	; (8001094 <main+0x104>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	2228      	movs	r2, #40	; 0x28
 8001020:	63da      	str	r2, [r3, #60]	; 0x3c
	htim3.Instance->CCR4 = CLOSE_POS;
 8001022:	4b1c      	ldr	r3, [pc, #112]	; (8001094 <main+0x104>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	2228      	movs	r2, #40	; 0x28
 8001028:	641a      	str	r2, [r3, #64]	; 0x40

	htim4.Instance->CCR1 = CLOSE_POS;
 800102a:	4b1b      	ldr	r3, [pc, #108]	; (8001098 <main+0x108>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	2228      	movs	r2, #40	; 0x28
 8001030:	635a      	str	r2, [r3, #52]	; 0x34
	htim4.Instance->CCR2 = CLOSE_POS;
 8001032:	4b19      	ldr	r3, [pc, #100]	; (8001098 <main+0x108>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	2228      	movs	r2, #40	; 0x28
 8001038:	639a      	str	r2, [r3, #56]	; 0x38
	htim4.Instance->CCR3 = CLOSE_POS;
 800103a:	4b17      	ldr	r3, [pc, #92]	; (8001098 <main+0x108>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	2228      	movs	r2, #40	; 0x28
 8001040:	63da      	str	r2, [r3, #60]	; 0x3c
	htim4.Instance->CCR4 = CLOSE_POS;
 8001042:	4b15      	ldr	r3, [pc, #84]	; (8001098 <main+0x108>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	2228      	movs	r2, #40	; 0x28
 8001048:	641a      	str	r2, [r3, #64]	; 0x40
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		//If switch is in calibrating position, then calibrate antenna.
		if (HAL_GPIO_ReadPin(B12_SWITCH_GPIO_Port, B12_SWITCH_Pin)
 800104a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800104e:	4813      	ldr	r0, [pc, #76]	; (800109c <main+0x10c>)
 8001050:	f002 f864 	bl	800311c <HAL_GPIO_ReadPin>
 8001054:	4603      	mov	r3, r0
 8001056:	2b01      	cmp	r3, #1
 8001058:	d104      	bne.n	8001064 <main+0xd4>
				== GPIO_PIN_SET) {
			calibrate_antenna();
 800105a:	f000 fb23 	bl	80016a4 <calibrate_antenna>
			print_to_com_port();
 800105e:	f000 fcf3 	bl	8001a48 <print_to_com_port>
 8001062:	e7f2      	b.n	800104a <main+0xba>
		}
		//Play instrument
		else {
			HAL_GPIO_WritePin(GPIOB, B14_GREEN_PITCH_LED_Pin, GPIO_PIN_RESET);
 8001064:	2200      	movs	r2, #0
 8001066:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800106a:	480c      	ldr	r0, [pc, #48]	; (800109c <main+0x10c>)
 800106c:	f002 f86d 	bl	800314a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, B13_RED_PITCH_LED_Pin, GPIO_PIN_RESET);
 8001070:	2200      	movs	r2, #0
 8001072:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001076:	4809      	ldr	r0, [pc, #36]	; (800109c <main+0x10c>)
 8001078:	f002 f867 	bl	800314a <HAL_GPIO_WritePin>
			if (finished_one_measurement == 1) {
 800107c:	4b08      	ldr	r3, [pc, #32]	; (80010a0 <main+0x110>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	2b01      	cmp	r3, #1
 8001082:	d1e2      	bne.n	800104a <main+0xba>
				play_music();
 8001084:	f000 fbd4 	bl	8001830 <play_music>
		if (HAL_GPIO_ReadPin(B12_SWITCH_GPIO_Port, B12_SWITCH_Pin)
 8001088:	e7df      	b.n	800104a <main+0xba>
 800108a:	bf00      	nop
 800108c:	40012c00 	.word	0x40012c00
 8001090:	20000374 	.word	0x20000374
 8001094:	20000404 	.word	0x20000404
 8001098:	2000044c 	.word	0x2000044c
 800109c:	40010c00 	.word	0x40010c00
 80010a0:	200004a8 	.word	0x200004a8

080010a4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b094      	sub	sp, #80	; 0x50
 80010a8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80010aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010ae:	2228      	movs	r2, #40	; 0x28
 80010b0:	2100      	movs	r1, #0
 80010b2:	4618      	mov	r0, r3
 80010b4:	f009 fd92 	bl	800abdc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80010b8:	f107 0314 	add.w	r3, r7, #20
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	605a      	str	r2, [r3, #4]
 80010c2:	609a      	str	r2, [r3, #8]
 80010c4:	60da      	str	r2, [r3, #12]
 80010c6:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80010c8:	1d3b      	adds	r3, r7, #4
 80010ca:	2200      	movs	r2, #0
 80010cc:	601a      	str	r2, [r3, #0]
 80010ce:	605a      	str	r2, [r3, #4]
 80010d0:	609a      	str	r2, [r3, #8]
 80010d2:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010d4:	2301      	movs	r3, #1
 80010d6:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010dc:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80010de:	2300      	movs	r3, #0
 80010e0:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010e2:	2301      	movs	r3, #1
 80010e4:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010e6:	2302      	movs	r3, #2
 80010e8:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010ee:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80010f0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80010f4:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80010f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010fa:	4618      	mov	r0, r3
 80010fc:	f003 fd00 	bl	8004b00 <HAL_RCC_OscConfig>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <SystemClock_Config+0x66>
		Error_Handler();
 8001106:	f000 fd53 	bl	8001bb0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800110a:	230f      	movs	r3, #15
 800110c:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800110e:	2302      	movs	r3, #2
 8001110:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001112:	2300      	movs	r3, #0
 8001114:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001116:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800111a:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800111c:	2300      	movs	r3, #0
 800111e:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001120:	f107 0314 	add.w	r3, r7, #20
 8001124:	2102      	movs	r1, #2
 8001126:	4618      	mov	r0, r3
 8001128:	f003 ff6c 	bl	8005004 <HAL_RCC_ClockConfig>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <SystemClock_Config+0x92>
		Error_Handler();
 8001132:	f000 fd3d 	bl	8001bb0 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001136:	2310      	movs	r3, #16
 8001138:	607b      	str	r3, [r7, #4]
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800113a:	2300      	movs	r3, #0
 800113c:	613b      	str	r3, [r7, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 800113e:	1d3b      	adds	r3, r7, #4
 8001140:	4618      	mov	r0, r3
 8001142:	f004 f8c5 	bl	80052d0 <HAL_RCCEx_PeriphCLKConfig>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <SystemClock_Config+0xac>
		Error_Handler();
 800114c:	f000 fd30 	bl	8001bb0 <Error_Handler>
	}
}
 8001150:	bf00      	nop
 8001152:	3750      	adds	r7, #80	; 0x50
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}

08001158 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8001158:	b580      	push	{r7, lr}
 800115a:	b08a      	sub	sp, #40	; 0x28
 800115c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800115e:	f107 0318 	add.w	r3, r7, #24
 8001162:	2200      	movs	r2, #0
 8001164:	601a      	str	r2, [r3, #0]
 8001166:	605a      	str	r2, [r3, #4]
 8001168:	609a      	str	r2, [r3, #8]
 800116a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800116c:	f107 0310 	add.w	r3, r7, #16
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 8001176:	463b      	mov	r3, r7
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	609a      	str	r2, [r3, #8]
 8001180:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8001182:	4b2d      	ldr	r3, [pc, #180]	; (8001238 <MX_TIM1_Init+0xe0>)
 8001184:	4a2d      	ldr	r2, [pc, #180]	; (800123c <MX_TIM1_Init+0xe4>)
 8001186:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8001188:	4b2b      	ldr	r3, [pc, #172]	; (8001238 <MX_TIM1_Init+0xe0>)
 800118a:	2200      	movs	r2, #0
 800118c:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800118e:	4b2a      	ldr	r3, [pc, #168]	; (8001238 <MX_TIM1_Init+0xe0>)
 8001190:	2200      	movs	r2, #0
 8001192:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65536 - 1;
 8001194:	4b28      	ldr	r3, [pc, #160]	; (8001238 <MX_TIM1_Init+0xe0>)
 8001196:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800119a:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800119c:	4b26      	ldr	r3, [pc, #152]	; (8001238 <MX_TIM1_Init+0xe0>)
 800119e:	2200      	movs	r2, #0
 80011a0:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80011a2:	4b25      	ldr	r3, [pc, #148]	; (8001238 <MX_TIM1_Init+0xe0>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011a8:	4b23      	ldr	r3, [pc, #140]	; (8001238 <MX_TIM1_Init+0xe0>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 80011ae:	4822      	ldr	r0, [pc, #136]	; (8001238 <MX_TIM1_Init+0xe0>)
 80011b0:	f004 f944 	bl	800543c <HAL_TIM_Base_Init>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_TIM1_Init+0x66>
		Error_Handler();
 80011ba:	f000 fcf9 	bl	8001bb0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011c2:	61bb      	str	r3, [r7, #24]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 80011c4:	f107 0318 	add.w	r3, r7, #24
 80011c8:	4619      	mov	r1, r3
 80011ca:	481b      	ldr	r0, [pc, #108]	; (8001238 <MX_TIM1_Init+0xe0>)
 80011cc:	f004 fe38 	bl	8005e40 <HAL_TIM_ConfigClockSource>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_TIM1_Init+0x82>
		Error_Handler();
 80011d6:	f000 fceb 	bl	8001bb0 <Error_Handler>
	}
	if (HAL_TIM_IC_Init(&htim1) != HAL_OK) {
 80011da:	4817      	ldr	r0, [pc, #92]	; (8001238 <MX_TIM1_Init+0xe0>)
 80011dc:	f004 fa78 	bl	80056d0 <HAL_TIM_IC_Init>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <MX_TIM1_Init+0x92>
		Error_Handler();
 80011e6:	f000 fce3 	bl	8001bb0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011ea:	2300      	movs	r3, #0
 80011ec:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011ee:	2300      	movs	r3, #0
 80011f0:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 80011f2:	f107 0310 	add.w	r3, r7, #16
 80011f6:	4619      	mov	r1, r3
 80011f8:	480f      	ldr	r0, [pc, #60]	; (8001238 <MX_TIM1_Init+0xe0>)
 80011fa:	f005 faff 	bl	80067fc <HAL_TIMEx_MasterConfigSynchronization>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_TIM1_Init+0xb0>
			!= HAL_OK) {
		Error_Handler();
 8001204:	f000 fcd4 	bl	8001bb0 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001208:	2300      	movs	r3, #0
 800120a:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800120c:	2301      	movs	r3, #1
 800120e:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001210:	2300      	movs	r3, #0
 8001212:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 0;
 8001214:	2300      	movs	r3, #0
 8001216:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 8001218:	463b      	mov	r3, r7
 800121a:	2200      	movs	r2, #0
 800121c:	4619      	mov	r1, r3
 800121e:	4806      	ldr	r0, [pc, #24]	; (8001238 <MX_TIM1_Init+0xe0>)
 8001220:	f004 fcbc 	bl	8005b9c <HAL_TIM_IC_ConfigChannel>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <MX_TIM1_Init+0xd6>
		Error_Handler();
 800122a:	f000 fcc1 	bl	8001bb0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 800122e:	bf00      	nop
 8001230:	3728      	adds	r7, #40	; 0x28
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	20000374 	.word	0x20000374
 800123c:	40012c00 	.word	0x40012c00

08001240 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8001240:	b580      	push	{r7, lr}
 8001242:	b08e      	sub	sp, #56	; 0x38
 8001244:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001246:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800124a:	2200      	movs	r2, #0
 800124c:	601a      	str	r2, [r3, #0]
 800124e:	605a      	str	r2, [r3, #4]
 8001250:	609a      	str	r2, [r3, #8]
 8001252:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001254:	f107 0320 	add.w	r3, r7, #32
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800125e:	1d3b      	adds	r3, r7, #4
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	605a      	str	r2, [r3, #4]
 8001266:	609a      	str	r2, [r3, #8]
 8001268:	60da      	str	r2, [r3, #12]
 800126a:	611a      	str	r2, [r3, #16]
 800126c:	615a      	str	r2, [r3, #20]
 800126e:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001270:	4b3e      	ldr	r3, [pc, #248]	; (800136c <MX_TIM2_Init+0x12c>)
 8001272:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001276:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 1440 - 1;
 8001278:	4b3c      	ldr	r3, [pc, #240]	; (800136c <MX_TIM2_Init+0x12c>)
 800127a:	f240 529f 	movw	r2, #1439	; 0x59f
 800127e:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001280:	4b3a      	ldr	r3, [pc, #232]	; (800136c <MX_TIM2_Init+0x12c>)
 8001282:	2200      	movs	r2, #0
 8001284:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 1000 - 1;
 8001286:	4b39      	ldr	r3, [pc, #228]	; (800136c <MX_TIM2_Init+0x12c>)
 8001288:	f240 32e7 	movw	r2, #999	; 0x3e7
 800128c:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800128e:	4b37      	ldr	r3, [pc, #220]	; (800136c <MX_TIM2_Init+0x12c>)
 8001290:	2200      	movs	r2, #0
 8001292:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001294:	4b35      	ldr	r3, [pc, #212]	; (800136c <MX_TIM2_Init+0x12c>)
 8001296:	2200      	movs	r2, #0
 8001298:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 800129a:	4834      	ldr	r0, [pc, #208]	; (800136c <MX_TIM2_Init+0x12c>)
 800129c:	f004 f8ce 	bl	800543c <HAL_TIM_Base_Init>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <MX_TIM2_Init+0x6a>
		Error_Handler();
 80012a6:	f000 fc83 	bl	8001bb0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012ae:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 80012b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012b4:	4619      	mov	r1, r3
 80012b6:	482d      	ldr	r0, [pc, #180]	; (800136c <MX_TIM2_Init+0x12c>)
 80012b8:	f004 fdc2 	bl	8005e40 <HAL_TIM_ConfigClockSource>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_TIM2_Init+0x86>
		Error_Handler();
 80012c2:	f000 fc75 	bl	8001bb0 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 80012c6:	4829      	ldr	r0, [pc, #164]	; (800136c <MX_TIM2_Init+0x12c>)
 80012c8:	f004 f907 	bl	80054da <HAL_TIM_PWM_Init>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_TIM2_Init+0x96>
		Error_Handler();
 80012d2:	f000 fc6d 	bl	8001bb0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012d6:	2300      	movs	r3, #0
 80012d8:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012da:	2300      	movs	r3, #0
 80012dc:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80012de:	f107 0320 	add.w	r3, r7, #32
 80012e2:	4619      	mov	r1, r3
 80012e4:	4821      	ldr	r0, [pc, #132]	; (800136c <MX_TIM2_Init+0x12c>)
 80012e6:	f005 fa89 	bl	80067fc <HAL_TIMEx_MasterConfigSynchronization>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_TIM2_Init+0xb4>
			!= HAL_OK) {
		Error_Handler();
 80012f0:	f000 fc5e 	bl	8001bb0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012f4:	2360      	movs	r3, #96	; 0x60
 80012f6:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 80012f8:	2300      	movs	r3, #0
 80012fa:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012fc:	2300      	movs	r3, #0
 80012fe:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001300:	2300      	movs	r3, #0
 8001302:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 8001304:	1d3b      	adds	r3, r7, #4
 8001306:	2200      	movs	r2, #0
 8001308:	4619      	mov	r1, r3
 800130a:	4818      	ldr	r0, [pc, #96]	; (800136c <MX_TIM2_Init+0x12c>)
 800130c:	f004 fcda 	bl	8005cc4 <HAL_TIM_PWM_ConfigChannel>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <MX_TIM2_Init+0xda>
			!= HAL_OK) {
		Error_Handler();
 8001316:	f000 fc4b 	bl	8001bb0 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2)
 800131a:	1d3b      	adds	r3, r7, #4
 800131c:	2204      	movs	r2, #4
 800131e:	4619      	mov	r1, r3
 8001320:	4812      	ldr	r0, [pc, #72]	; (800136c <MX_TIM2_Init+0x12c>)
 8001322:	f004 fccf 	bl	8005cc4 <HAL_TIM_PWM_ConfigChannel>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_TIM2_Init+0xf0>
			!= HAL_OK) {
		Error_Handler();
 800132c:	f000 fc40 	bl	8001bb0 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3)
 8001330:	1d3b      	adds	r3, r7, #4
 8001332:	2208      	movs	r2, #8
 8001334:	4619      	mov	r1, r3
 8001336:	480d      	ldr	r0, [pc, #52]	; (800136c <MX_TIM2_Init+0x12c>)
 8001338:	f004 fcc4 	bl	8005cc4 <HAL_TIM_PWM_ConfigChannel>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <MX_TIM2_Init+0x106>
			!= HAL_OK) {
		Error_Handler();
 8001342:	f000 fc35 	bl	8001bb0 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4)
 8001346:	1d3b      	adds	r3, r7, #4
 8001348:	220c      	movs	r2, #12
 800134a:	4619      	mov	r1, r3
 800134c:	4807      	ldr	r0, [pc, #28]	; (800136c <MX_TIM2_Init+0x12c>)
 800134e:	f004 fcb9 	bl	8005cc4 <HAL_TIM_PWM_ConfigChannel>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_TIM2_Init+0x11c>
			!= HAL_OK) {
		Error_Handler();
 8001358:	f000 fc2a 	bl	8001bb0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 800135c:	4803      	ldr	r0, [pc, #12]	; (800136c <MX_TIM2_Init+0x12c>)
 800135e:	f000 fd21 	bl	8001da4 <HAL_TIM_MspPostInit>

}
 8001362:	bf00      	nop
 8001364:	3738      	adds	r7, #56	; 0x38
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	200003bc 	.word	0x200003bc

08001370 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8001370:	b580      	push	{r7, lr}
 8001372:	b08e      	sub	sp, #56	; 0x38
 8001374:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001376:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800137a:	2200      	movs	r2, #0
 800137c:	601a      	str	r2, [r3, #0]
 800137e:	605a      	str	r2, [r3, #4]
 8001380:	609a      	str	r2, [r3, #8]
 8001382:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001384:	f107 0320 	add.w	r3, r7, #32
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800138e:	1d3b      	adds	r3, r7, #4
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]
 8001394:	605a      	str	r2, [r3, #4]
 8001396:	609a      	str	r2, [r3, #8]
 8001398:	60da      	str	r2, [r3, #12]
 800139a:	611a      	str	r2, [r3, #16]
 800139c:	615a      	str	r2, [r3, #20]
 800139e:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80013a0:	4b3e      	ldr	r3, [pc, #248]	; (800149c <MX_TIM3_Init+0x12c>)
 80013a2:	4a3f      	ldr	r2, [pc, #252]	; (80014a0 <MX_TIM3_Init+0x130>)
 80013a4:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 1440 - 1;
 80013a6:	4b3d      	ldr	r3, [pc, #244]	; (800149c <MX_TIM3_Init+0x12c>)
 80013a8:	f240 529f 	movw	r2, #1439	; 0x59f
 80013ac:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ae:	4b3b      	ldr	r3, [pc, #236]	; (800149c <MX_TIM3_Init+0x12c>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 1000 - 1;
 80013b4:	4b39      	ldr	r3, [pc, #228]	; (800149c <MX_TIM3_Init+0x12c>)
 80013b6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013ba:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013bc:	4b37      	ldr	r3, [pc, #220]	; (800149c <MX_TIM3_Init+0x12c>)
 80013be:	2200      	movs	r2, #0
 80013c0:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013c2:	4b36      	ldr	r3, [pc, #216]	; (800149c <MX_TIM3_Init+0x12c>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 80013c8:	4834      	ldr	r0, [pc, #208]	; (800149c <MX_TIM3_Init+0x12c>)
 80013ca:	f004 f837 	bl	800543c <HAL_TIM_Base_Init>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <MX_TIM3_Init+0x68>
		Error_Handler();
 80013d4:	f000 fbec 	bl	8001bb0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013dc:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 80013de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013e2:	4619      	mov	r1, r3
 80013e4:	482d      	ldr	r0, [pc, #180]	; (800149c <MX_TIM3_Init+0x12c>)
 80013e6:	f004 fd2b 	bl	8005e40 <HAL_TIM_ConfigClockSource>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <MX_TIM3_Init+0x84>
		Error_Handler();
 80013f0:	f000 fbde 	bl	8001bb0 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 80013f4:	4829      	ldr	r0, [pc, #164]	; (800149c <MX_TIM3_Init+0x12c>)
 80013f6:	f004 f870 	bl	80054da <HAL_TIM_PWM_Init>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MX_TIM3_Init+0x94>
		Error_Handler();
 8001400:	f000 fbd6 	bl	8001bb0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001404:	2300      	movs	r3, #0
 8001406:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001408:	2300      	movs	r3, #0
 800140a:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 800140c:	f107 0320 	add.w	r3, r7, #32
 8001410:	4619      	mov	r1, r3
 8001412:	4822      	ldr	r0, [pc, #136]	; (800149c <MX_TIM3_Init+0x12c>)
 8001414:	f005 f9f2 	bl	80067fc <HAL_TIMEx_MasterConfigSynchronization>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <MX_TIM3_Init+0xb2>
			!= HAL_OK) {
		Error_Handler();
 800141e:	f000 fbc7 	bl	8001bb0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001422:	2360      	movs	r3, #96	; 0x60
 8001424:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 75;
 8001426:	234b      	movs	r3, #75	; 0x4b
 8001428:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800142a:	2300      	movs	r3, #0
 800142c:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800142e:	2300      	movs	r3, #0
 8001430:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)
 8001432:	1d3b      	adds	r3, r7, #4
 8001434:	2200      	movs	r2, #0
 8001436:	4619      	mov	r1, r3
 8001438:	4818      	ldr	r0, [pc, #96]	; (800149c <MX_TIM3_Init+0x12c>)
 800143a:	f004 fc43 	bl	8005cc4 <HAL_TIM_PWM_ConfigChannel>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <MX_TIM3_Init+0xd8>
			!= HAL_OK) {
		Error_Handler();
 8001444:	f000 fbb4 	bl	8001bb0 <Error_Handler>
	}
	sConfigOC.Pulse = 0;
 8001448:	2300      	movs	r3, #0
 800144a:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2)
 800144c:	1d3b      	adds	r3, r7, #4
 800144e:	2204      	movs	r2, #4
 8001450:	4619      	mov	r1, r3
 8001452:	4812      	ldr	r0, [pc, #72]	; (800149c <MX_TIM3_Init+0x12c>)
 8001454:	f004 fc36 	bl	8005cc4 <HAL_TIM_PWM_ConfigChannel>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <MX_TIM3_Init+0xf2>
			!= HAL_OK) {
		Error_Handler();
 800145e:	f000 fba7 	bl	8001bb0 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3)
 8001462:	1d3b      	adds	r3, r7, #4
 8001464:	2208      	movs	r2, #8
 8001466:	4619      	mov	r1, r3
 8001468:	480c      	ldr	r0, [pc, #48]	; (800149c <MX_TIM3_Init+0x12c>)
 800146a:	f004 fc2b 	bl	8005cc4 <HAL_TIM_PWM_ConfigChannel>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <MX_TIM3_Init+0x108>
			!= HAL_OK) {
		Error_Handler();
 8001474:	f000 fb9c 	bl	8001bb0 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4)
 8001478:	1d3b      	adds	r3, r7, #4
 800147a:	220c      	movs	r2, #12
 800147c:	4619      	mov	r1, r3
 800147e:	4807      	ldr	r0, [pc, #28]	; (800149c <MX_TIM3_Init+0x12c>)
 8001480:	f004 fc20 	bl	8005cc4 <HAL_TIM_PWM_ConfigChannel>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_TIM3_Init+0x11e>
			!= HAL_OK) {
		Error_Handler();
 800148a:	f000 fb91 	bl	8001bb0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 800148e:	4803      	ldr	r0, [pc, #12]	; (800149c <MX_TIM3_Init+0x12c>)
 8001490:	f000 fc88 	bl	8001da4 <HAL_TIM_MspPostInit>

}
 8001494:	bf00      	nop
 8001496:	3738      	adds	r7, #56	; 0x38
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	20000404 	.word	0x20000404
 80014a0:	40000400 	.word	0x40000400

080014a4 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b08e      	sub	sp, #56	; 0x38
 80014a8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80014aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014ae:	2200      	movs	r2, #0
 80014b0:	601a      	str	r2, [r3, #0]
 80014b2:	605a      	str	r2, [r3, #4]
 80014b4:	609a      	str	r2, [r3, #8]
 80014b6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80014b8:	f107 0320 	add.w	r3, r7, #32
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80014c2:	1d3b      	adds	r3, r7, #4
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	605a      	str	r2, [r3, #4]
 80014ca:	609a      	str	r2, [r3, #8]
 80014cc:	60da      	str	r2, [r3, #12]
 80014ce:	611a      	str	r2, [r3, #16]
 80014d0:	615a      	str	r2, [r3, #20]
 80014d2:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 80014d4:	4b3d      	ldr	r3, [pc, #244]	; (80015cc <MX_TIM4_Init+0x128>)
 80014d6:	4a3e      	ldr	r2, [pc, #248]	; (80015d0 <MX_TIM4_Init+0x12c>)
 80014d8:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 80014da:	4b3c      	ldr	r3, [pc, #240]	; (80015cc <MX_TIM4_Init+0x128>)
 80014dc:	2200      	movs	r2, #0
 80014de:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014e0:	4b3a      	ldr	r3, [pc, #232]	; (80015cc <MX_TIM4_Init+0x128>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 80014e6:	4b39      	ldr	r3, [pc, #228]	; (80015cc <MX_TIM4_Init+0x128>)
 80014e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014ec:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014ee:	4b37      	ldr	r3, [pc, #220]	; (80015cc <MX_TIM4_Init+0x128>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014f4:	4b35      	ldr	r3, [pc, #212]	; (80015cc <MX_TIM4_Init+0x128>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 80014fa:	4834      	ldr	r0, [pc, #208]	; (80015cc <MX_TIM4_Init+0x128>)
 80014fc:	f003 ff9e 	bl	800543c <HAL_TIM_Base_Init>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <MX_TIM4_Init+0x66>
		Error_Handler();
 8001506:	f000 fb53 	bl	8001bb0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800150a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800150e:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 8001510:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001514:	4619      	mov	r1, r3
 8001516:	482d      	ldr	r0, [pc, #180]	; (80015cc <MX_TIM4_Init+0x128>)
 8001518:	f004 fc92 	bl	8005e40 <HAL_TIM_ConfigClockSource>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <MX_TIM4_Init+0x82>
		Error_Handler();
 8001522:	f000 fb45 	bl	8001bb0 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK) {
 8001526:	4829      	ldr	r0, [pc, #164]	; (80015cc <MX_TIM4_Init+0x128>)
 8001528:	f003 ffd7 	bl	80054da <HAL_TIM_PWM_Init>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <MX_TIM4_Init+0x92>
		Error_Handler();
 8001532:	f000 fb3d 	bl	8001bb0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001536:	2300      	movs	r3, #0
 8001538:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800153a:	2300      	movs	r3, #0
 800153c:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 800153e:	f107 0320 	add.w	r3, r7, #32
 8001542:	4619      	mov	r1, r3
 8001544:	4821      	ldr	r0, [pc, #132]	; (80015cc <MX_TIM4_Init+0x128>)
 8001546:	f005 f959 	bl	80067fc <HAL_TIMEx_MasterConfigSynchronization>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <MX_TIM4_Init+0xb0>
			!= HAL_OK) {
		Error_Handler();
 8001550:	f000 fb2e 	bl	8001bb0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001554:	2360      	movs	r3, #96	; 0x60
 8001556:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8001558:	2300      	movs	r3, #0
 800155a:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800155c:	2300      	movs	r3, #0
 800155e:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001560:	2300      	movs	r3, #0
 8001562:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1)
 8001564:	1d3b      	adds	r3, r7, #4
 8001566:	2200      	movs	r2, #0
 8001568:	4619      	mov	r1, r3
 800156a:	4818      	ldr	r0, [pc, #96]	; (80015cc <MX_TIM4_Init+0x128>)
 800156c:	f004 fbaa 	bl	8005cc4 <HAL_TIM_PWM_ConfigChannel>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <MX_TIM4_Init+0xd6>
			!= HAL_OK) {
		Error_Handler();
 8001576:	f000 fb1b 	bl	8001bb0 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2)
 800157a:	1d3b      	adds	r3, r7, #4
 800157c:	2204      	movs	r2, #4
 800157e:	4619      	mov	r1, r3
 8001580:	4812      	ldr	r0, [pc, #72]	; (80015cc <MX_TIM4_Init+0x128>)
 8001582:	f004 fb9f 	bl	8005cc4 <HAL_TIM_PWM_ConfigChannel>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <MX_TIM4_Init+0xec>
			!= HAL_OK) {
		Error_Handler();
 800158c:	f000 fb10 	bl	8001bb0 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3)
 8001590:	1d3b      	adds	r3, r7, #4
 8001592:	2208      	movs	r2, #8
 8001594:	4619      	mov	r1, r3
 8001596:	480d      	ldr	r0, [pc, #52]	; (80015cc <MX_TIM4_Init+0x128>)
 8001598:	f004 fb94 	bl	8005cc4 <HAL_TIM_PWM_ConfigChannel>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_TIM4_Init+0x102>
			!= HAL_OK) {
		Error_Handler();
 80015a2:	f000 fb05 	bl	8001bb0 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4)
 80015a6:	1d3b      	adds	r3, r7, #4
 80015a8:	220c      	movs	r2, #12
 80015aa:	4619      	mov	r1, r3
 80015ac:	4807      	ldr	r0, [pc, #28]	; (80015cc <MX_TIM4_Init+0x128>)
 80015ae:	f004 fb89 	bl	8005cc4 <HAL_TIM_PWM_ConfigChannel>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <MX_TIM4_Init+0x118>
			!= HAL_OK) {
		Error_Handler();
 80015b8:	f000 fafa 	bl	8001bb0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */
	HAL_TIM_MspPostInit(&htim4);
 80015bc:	4803      	ldr	r0, [pc, #12]	; (80015cc <MX_TIM4_Init+0x128>)
 80015be:	f000 fbf1 	bl	8001da4 <HAL_TIM_MspPostInit>

}
 80015c2:	bf00      	nop
 80015c4:	3738      	adds	r7, #56	; 0x38
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	2000044c 	.word	0x2000044c
 80015d0:	40000800 	.word	0x40000800

080015d4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b088      	sub	sp, #32
 80015d8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80015da:	f107 0310 	add.w	r3, r7, #16
 80015de:	2200      	movs	r2, #0
 80015e0:	601a      	str	r2, [r3, #0]
 80015e2:	605a      	str	r2, [r3, #4]
 80015e4:	609a      	str	r2, [r3, #8]
 80015e6:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80015e8:	4b2b      	ldr	r3, [pc, #172]	; (8001698 <MX_GPIO_Init+0xc4>)
 80015ea:	699b      	ldr	r3, [r3, #24]
 80015ec:	4a2a      	ldr	r2, [pc, #168]	; (8001698 <MX_GPIO_Init+0xc4>)
 80015ee:	f043 0320 	orr.w	r3, r3, #32
 80015f2:	6193      	str	r3, [r2, #24]
 80015f4:	4b28      	ldr	r3, [pc, #160]	; (8001698 <MX_GPIO_Init+0xc4>)
 80015f6:	699b      	ldr	r3, [r3, #24]
 80015f8:	f003 0320 	and.w	r3, r3, #32
 80015fc:	60fb      	str	r3, [r7, #12]
 80015fe:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001600:	4b25      	ldr	r3, [pc, #148]	; (8001698 <MX_GPIO_Init+0xc4>)
 8001602:	699b      	ldr	r3, [r3, #24]
 8001604:	4a24      	ldr	r2, [pc, #144]	; (8001698 <MX_GPIO_Init+0xc4>)
 8001606:	f043 0304 	orr.w	r3, r3, #4
 800160a:	6193      	str	r3, [r2, #24]
 800160c:	4b22      	ldr	r3, [pc, #136]	; (8001698 <MX_GPIO_Init+0xc4>)
 800160e:	699b      	ldr	r3, [r3, #24]
 8001610:	f003 0304 	and.w	r3, r3, #4
 8001614:	60bb      	str	r3, [r7, #8]
 8001616:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001618:	4b1f      	ldr	r3, [pc, #124]	; (8001698 <MX_GPIO_Init+0xc4>)
 800161a:	699b      	ldr	r3, [r3, #24]
 800161c:	4a1e      	ldr	r2, [pc, #120]	; (8001698 <MX_GPIO_Init+0xc4>)
 800161e:	f043 0308 	orr.w	r3, r3, #8
 8001622:	6193      	str	r3, [r2, #24]
 8001624:	4b1c      	ldr	r3, [pc, #112]	; (8001698 <MX_GPIO_Init+0xc4>)
 8001626:	699b      	ldr	r3, [r3, #24]
 8001628:	f003 0308 	and.w	r3, r3, #8
 800162c:	607b      	str	r3, [r7, #4]
 800162e:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, B13_RED_PITCH_LED_Pin | B14_GREEN_PITCH_LED_Pin,
 8001630:	2200      	movs	r2, #0
 8001632:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001636:	4819      	ldr	r0, [pc, #100]	; (800169c <MX_GPIO_Init+0xc8>)
 8001638:	f001 fd87 	bl	800314a <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : B12_SWITCH_Pin */
	GPIO_InitStruct.Pin = B12_SWITCH_Pin;
 800163c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001640:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001642:	2300      	movs	r3, #0
 8001644:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001646:	2301      	movs	r3, #1
 8001648:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(B12_SWITCH_GPIO_Port, &GPIO_InitStruct);
 800164a:	f107 0310 	add.w	r3, r7, #16
 800164e:	4619      	mov	r1, r3
 8001650:	4812      	ldr	r0, [pc, #72]	; (800169c <MX_GPIO_Init+0xc8>)
 8001652:	f001 fbdf 	bl	8002e14 <HAL_GPIO_Init>

	/*Configure GPIO pins : B13_RED_PITCH_LED_Pin B14_GREEN_PITCH_LED_Pin */
	GPIO_InitStruct.Pin = B13_RED_PITCH_LED_Pin | B14_GREEN_PITCH_LED_Pin;
 8001656:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800165a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800165c:	2301      	movs	r3, #1
 800165e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001660:	2300      	movs	r3, #0
 8001662:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001664:	2302      	movs	r3, #2
 8001666:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001668:	f107 0310 	add.w	r3, r7, #16
 800166c:	4619      	mov	r1, r3
 800166e:	480b      	ldr	r0, [pc, #44]	; (800169c <MX_GPIO_Init+0xc8>)
 8001670:	f001 fbd0 	bl	8002e14 <HAL_GPIO_Init>

	/*Configure GPIO pin : TIM1_CH1_PA9_INPUT_CAPTURE_Pin */
	GPIO_InitStruct.Pin = TIM1_CH1_PA9_INPUT_CAPTURE_Pin;
 8001674:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001678:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800167a:	2300      	movs	r3, #0
 800167c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167e:	2300      	movs	r3, #0
 8001680:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(TIM1_CH1_PA9_INPUT_CAPTURE_GPIO_Port, &GPIO_InitStruct);
 8001682:	f107 0310 	add.w	r3, r7, #16
 8001686:	4619      	mov	r1, r3
 8001688:	4805      	ldr	r0, [pc, #20]	; (80016a0 <MX_GPIO_Init+0xcc>)
 800168a:	f001 fbc3 	bl	8002e14 <HAL_GPIO_Init>

}
 800168e:	bf00      	nop
 8001690:	3720      	adds	r7, #32
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	40021000 	.word	0x40021000
 800169c:	40010c00 	.word	0x40010c00
 80016a0:	40010800 	.word	0x40010800

080016a4 <calibrate_antenna>:

/* USER CODE BEGIN 4 */

void calibrate_antenna() {
 80016a4:	b5b0      	push	{r4, r5, r7, lr}
 80016a6:	af00      	add	r7, sp, #0
	if (is_in_range(PITCH_LOWEST_FREQUENCY, PITCH_LOWEST_FREQUENCY + 300,
 80016a8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80016ac:	461c      	mov	r4, r3
 80016ae:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80016b2:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 80016b6:	461d      	mov	r5, r3
 80016b8:	4b1c      	ldr	r3, [pc, #112]	; (800172c <calibrate_antenna+0x88>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4618      	mov	r0, r3
 80016be:	f7ff fc41 	bl	8000f44 <__aeabi_f2iz>
 80016c2:	4603      	mov	r3, r0
 80016c4:	461a      	mov	r2, r3
 80016c6:	4629      	mov	r1, r5
 80016c8:	4620      	mov	r0, r4
 80016ca:	f000 f833 	bl	8001734 <is_in_range>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d014      	beq.n	80016fe <calibrate_antenna+0x5a>
			frequency)) {
		HAL_GPIO_WritePin(GPIOB, B14_GREEN_PITCH_LED_Pin, GPIO_PIN_SET);
 80016d4:	2201      	movs	r2, #1
 80016d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016da:	4815      	ldr	r0, [pc, #84]	; (8001730 <calibrate_antenna+0x8c>)
 80016dc:	f001 fd35 	bl	800314a <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 80016e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016e4:	f001 fa64 	bl	8002bb0 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, B13_RED_PITCH_LED_Pin, GPIO_PIN_RESET);
 80016e8:	2200      	movs	r2, #0
 80016ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016ee:	4810      	ldr	r0, [pc, #64]	; (8001730 <calibrate_antenna+0x8c>)
 80016f0:	f001 fd2b 	bl	800314a <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 80016f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016f8:	f001 fa5a 	bl	8002bb0 <HAL_Delay>
		HAL_Delay(1000);
		HAL_GPIO_WritePin(GPIOB, B13_RED_PITCH_LED_Pin, GPIO_PIN_SET);
		HAL_Delay(1000);
	}

}
 80016fc:	e013      	b.n	8001726 <calibrate_antenna+0x82>
		HAL_GPIO_WritePin(GPIOB, B14_GREEN_PITCH_LED_Pin, GPIO_PIN_RESET);
 80016fe:	2200      	movs	r2, #0
 8001700:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001704:	480a      	ldr	r0, [pc, #40]	; (8001730 <calibrate_antenna+0x8c>)
 8001706:	f001 fd20 	bl	800314a <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 800170a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800170e:	f001 fa4f 	bl	8002bb0 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, B13_RED_PITCH_LED_Pin, GPIO_PIN_SET);
 8001712:	2201      	movs	r2, #1
 8001714:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001718:	4805      	ldr	r0, [pc, #20]	; (8001730 <calibrate_antenna+0x8c>)
 800171a:	f001 fd16 	bl	800314a <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 800171e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001722:	f001 fa45 	bl	8002bb0 <HAL_Delay>
}
 8001726:	bf00      	nop
 8001728:	bdb0      	pop	{r4, r5, r7, pc}
 800172a:	bf00      	nop
 800172c:	200004a4 	.word	0x200004a4
 8001730:	40010c00 	.word	0x40010c00

08001734 <is_in_range>:
bool is_in_range(int lower_limit, int upper_limit, int number) {
 8001734:	b480      	push	{r7}
 8001736:	b085      	sub	sp, #20
 8001738:	af00      	add	r7, sp, #0
 800173a:	60f8      	str	r0, [r7, #12]
 800173c:	60b9      	str	r1, [r7, #8]
 800173e:	607a      	str	r2, [r7, #4]
	return (lower_limit <= number && number <= upper_limit);
 8001740:	68fa      	ldr	r2, [r7, #12]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	429a      	cmp	r2, r3
 8001746:	dc05      	bgt.n	8001754 <is_in_range+0x20>
 8001748:	687a      	ldr	r2, [r7, #4]
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	429a      	cmp	r2, r3
 800174e:	dc01      	bgt.n	8001754 <is_in_range+0x20>
 8001750:	2301      	movs	r3, #1
 8001752:	e000      	b.n	8001756 <is_in_range+0x22>
 8001754:	2300      	movs	r3, #0
}
 8001756:	4618      	mov	r0, r3
 8001758:	3714      	adds	r7, #20
 800175a:	46bd      	mov	sp, r7
 800175c:	bc80      	pop	{r7}
 800175e:	4770      	bx	lr

08001760 <play_note>:
void play_note(NOTE_NAME note_to_play) {
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	4603      	mov	r3, r0
 8001768:	71fb      	strb	r3, [r7, #7]
	htim3.Instance->CCR1 = all_notes[note_to_play].holes_to_play[0];
 800176a:	79fb      	ldrb	r3, [r7, #7]
 800176c:	4a2d      	ldr	r2, [pc, #180]	; (8001824 <play_note+0xc4>)
 800176e:	212c      	movs	r1, #44	; 0x2c
 8001770:	fb01 f303 	mul.w	r3, r1, r3
 8001774:	4413      	add	r3, r2
 8001776:	3308      	adds	r3, #8
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	4b2b      	ldr	r3, [pc, #172]	; (8001828 <play_note+0xc8>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	635a      	str	r2, [r3, #52]	; 0x34
	htim3.Instance->CCR2 = all_notes[note_to_play].holes_to_play[1];
 8001780:	79fb      	ldrb	r3, [r7, #7]
 8001782:	4a28      	ldr	r2, [pc, #160]	; (8001824 <play_note+0xc4>)
 8001784:	212c      	movs	r1, #44	; 0x2c
 8001786:	fb01 f303 	mul.w	r3, r1, r3
 800178a:	4413      	add	r3, r2
 800178c:	330c      	adds	r3, #12
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	4b25      	ldr	r3, [pc, #148]	; (8001828 <play_note+0xc8>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	639a      	str	r2, [r3, #56]	; 0x38
	htim3.Instance->CCR3 = all_notes[note_to_play].holes_to_play[2];
 8001796:	79fb      	ldrb	r3, [r7, #7]
 8001798:	4a22      	ldr	r2, [pc, #136]	; (8001824 <play_note+0xc4>)
 800179a:	212c      	movs	r1, #44	; 0x2c
 800179c:	fb01 f303 	mul.w	r3, r1, r3
 80017a0:	4413      	add	r3, r2
 80017a2:	3310      	adds	r3, #16
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	4b20      	ldr	r3, [pc, #128]	; (8001828 <play_note+0xc8>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	63da      	str	r2, [r3, #60]	; 0x3c
	htim3.Instance->CCR4 = all_notes[note_to_play].holes_to_play[3];
 80017ac:	79fb      	ldrb	r3, [r7, #7]
 80017ae:	4a1d      	ldr	r2, [pc, #116]	; (8001824 <play_note+0xc4>)
 80017b0:	212c      	movs	r1, #44	; 0x2c
 80017b2:	fb01 f303 	mul.w	r3, r1, r3
 80017b6:	4413      	add	r3, r2
 80017b8:	3314      	adds	r3, #20
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	4b1a      	ldr	r3, [pc, #104]	; (8001828 <play_note+0xc8>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	641a      	str	r2, [r3, #64]	; 0x40

	htim4.Instance->CCR1 = all_notes[note_to_play].holes_to_play[4];
 80017c2:	79fb      	ldrb	r3, [r7, #7]
 80017c4:	4a17      	ldr	r2, [pc, #92]	; (8001824 <play_note+0xc4>)
 80017c6:	212c      	movs	r1, #44	; 0x2c
 80017c8:	fb01 f303 	mul.w	r3, r1, r3
 80017cc:	4413      	add	r3, r2
 80017ce:	3318      	adds	r3, #24
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	4b16      	ldr	r3, [pc, #88]	; (800182c <play_note+0xcc>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	635a      	str	r2, [r3, #52]	; 0x34
	htim4.Instance->CCR2 = all_notes[note_to_play].holes_to_play[5];
 80017d8:	79fb      	ldrb	r3, [r7, #7]
 80017da:	4a12      	ldr	r2, [pc, #72]	; (8001824 <play_note+0xc4>)
 80017dc:	212c      	movs	r1, #44	; 0x2c
 80017de:	fb01 f303 	mul.w	r3, r1, r3
 80017e2:	4413      	add	r3, r2
 80017e4:	331c      	adds	r3, #28
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	4b10      	ldr	r3, [pc, #64]	; (800182c <play_note+0xcc>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	639a      	str	r2, [r3, #56]	; 0x38
	htim4.Instance->CCR3 = all_notes[note_to_play].holes_to_play[6];
 80017ee:	79fb      	ldrb	r3, [r7, #7]
 80017f0:	4a0c      	ldr	r2, [pc, #48]	; (8001824 <play_note+0xc4>)
 80017f2:	212c      	movs	r1, #44	; 0x2c
 80017f4:	fb01 f303 	mul.w	r3, r1, r3
 80017f8:	4413      	add	r3, r2
 80017fa:	3320      	adds	r3, #32
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	4b0b      	ldr	r3, [pc, #44]	; (800182c <play_note+0xcc>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	63da      	str	r2, [r3, #60]	; 0x3c
	htim4.Instance->CCR4 = all_notes[note_to_play].holes_to_play[7];
 8001804:	79fb      	ldrb	r3, [r7, #7]
 8001806:	4a07      	ldr	r2, [pc, #28]	; (8001824 <play_note+0xc4>)
 8001808:	212c      	movs	r1, #44	; 0x2c
 800180a:	fb01 f303 	mul.w	r3, r1, r3
 800180e:	4413      	add	r3, r2
 8001810:	3324      	adds	r3, #36	; 0x24
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	4b05      	ldr	r3, [pc, #20]	; (800182c <play_note+0xcc>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	641a      	str	r2, [r3, #64]	; 0x40
}
 800181a:	bf00      	nop
 800181c:	370c      	adds	r7, #12
 800181e:	46bd      	mov	sp, r7
 8001820:	bc80      	pop	{r7}
 8001822:	4770      	bx	lr
 8001824:	0800db68 	.word	0x0800db68
 8001828:	20000404 	.word	0x20000404
 800182c:	2000044c 	.word	0x2000044c

08001830 <play_music>:
void play_music() {
 8001830:	b5b0      	push	{r4, r5, r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
	const uint32_t DWN = 50;
 8001836:	2332      	movs	r3, #50	; 0x32
 8001838:	607b      	str	r3, [r7, #4]
	const uint32_t UP = 50;
 800183a:	2332      	movs	r3, #50	; 0x32
 800183c:	603b      	str	r3, [r7, #0]

	/*== NOTE C ==*/
	if (is_in_range(CTR_FREQ[0] - DWN, CTR_FREQ[0] + UP, frequency) == true) {
 800183e:	f640 0266 	movw	r2, #2150	; 0x866
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	461c      	mov	r4, r3
 8001848:	f640 0266 	movw	r2, #2150	; 0x866
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	4413      	add	r3, r2
 8001850:	461d      	mov	r5, r3
 8001852:	4b7b      	ldr	r3, [pc, #492]	; (8001a40 <play_music+0x210>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4618      	mov	r0, r3
 8001858:	f7ff fb74 	bl	8000f44 <__aeabi_f2iz>
 800185c:	4603      	mov	r3, r0
 800185e:	461a      	mov	r2, r3
 8001860:	4629      	mov	r1, r5
 8001862:	4620      	mov	r0, r4
 8001864:	f7ff ff66 	bl	8001734 <is_in_range>
 8001868:	4603      	mov	r3, r0
 800186a:	2b01      	cmp	r3, #1
 800186c:	d106      	bne.n	800187c <play_music+0x4c>
		current_note = NOTE_C;
 800186e:	4b75      	ldr	r3, [pc, #468]	; (8001a44 <play_music+0x214>)
 8001870:	2200      	movs	r2, #0
 8001872:	701a      	strb	r2, [r3, #0]
		play_note(NOTE_C);
 8001874:	2000      	movs	r0, #0
 8001876:	f7ff ff73 	bl	8001760 <play_note>
		play_note(NOTE_BB);
	} else {

		play_note(current_note);
	}
}
 800187a:	e0dd      	b.n	8001a38 <play_music+0x208>
	else if (is_in_range(CTR_FREQ[1] - DWN, CTR_FREQ[1] + UP, frequency) == true) {
 800187c:	f640 1292 	movw	r2, #2450	; 0x992
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	461c      	mov	r4, r3
 8001886:	f640 1292 	movw	r2, #2450	; 0x992
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	4413      	add	r3, r2
 800188e:	461d      	mov	r5, r3
 8001890:	4b6b      	ldr	r3, [pc, #428]	; (8001a40 <play_music+0x210>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff fb55 	bl	8000f44 <__aeabi_f2iz>
 800189a:	4603      	mov	r3, r0
 800189c:	461a      	mov	r2, r3
 800189e:	4629      	mov	r1, r5
 80018a0:	4620      	mov	r0, r4
 80018a2:	f7ff ff47 	bl	8001734 <is_in_range>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d106      	bne.n	80018ba <play_music+0x8a>
		current_note = NOTE_D;
 80018ac:	4b65      	ldr	r3, [pc, #404]	; (8001a44 <play_music+0x214>)
 80018ae:	2201      	movs	r2, #1
 80018b0:	701a      	strb	r2, [r3, #0]
		play_note(NOTE_D);
 80018b2:	2001      	movs	r0, #1
 80018b4:	f7ff ff54 	bl	8001760 <play_note>
}
 80018b8:	e0be      	b.n	8001a38 <play_music+0x208>
	else if (is_in_range(CTR_FREQ[2] - DWN, CTR_FREQ[2] + UP, frequency) == true) {
 80018ba:	f640 22be 	movw	r2, #2750	; 0xabe
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	461c      	mov	r4, r3
 80018c4:	f640 22be 	movw	r2, #2750	; 0xabe
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	4413      	add	r3, r2
 80018cc:	461d      	mov	r5, r3
 80018ce:	4b5c      	ldr	r3, [pc, #368]	; (8001a40 <play_music+0x210>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7ff fb36 	bl	8000f44 <__aeabi_f2iz>
 80018d8:	4603      	mov	r3, r0
 80018da:	461a      	mov	r2, r3
 80018dc:	4629      	mov	r1, r5
 80018de:	4620      	mov	r0, r4
 80018e0:	f7ff ff28 	bl	8001734 <is_in_range>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d106      	bne.n	80018f8 <play_music+0xc8>
		current_note = NOTE_E;
 80018ea:	4b56      	ldr	r3, [pc, #344]	; (8001a44 <play_music+0x214>)
 80018ec:	2202      	movs	r2, #2
 80018ee:	701a      	strb	r2, [r3, #0]
		play_note(NOTE_E);
 80018f0:	2002      	movs	r0, #2
 80018f2:	f7ff ff35 	bl	8001760 <play_note>
}
 80018f6:	e09f      	b.n	8001a38 <play_music+0x208>
	else if (is_in_range(CTR_FREQ[3] - DWN, CTR_FREQ[3] + UP, frequency) == true) {
 80018f8:	f640 32ea 	movw	r2, #3050	; 0xbea
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	1ad3      	subs	r3, r2, r3
 8001900:	461c      	mov	r4, r3
 8001902:	f640 32ea 	movw	r2, #3050	; 0xbea
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	4413      	add	r3, r2
 800190a:	461d      	mov	r5, r3
 800190c:	4b4c      	ldr	r3, [pc, #304]	; (8001a40 <play_music+0x210>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4618      	mov	r0, r3
 8001912:	f7ff fb17 	bl	8000f44 <__aeabi_f2iz>
 8001916:	4603      	mov	r3, r0
 8001918:	461a      	mov	r2, r3
 800191a:	4629      	mov	r1, r5
 800191c:	4620      	mov	r0, r4
 800191e:	f7ff ff09 	bl	8001734 <is_in_range>
 8001922:	4603      	mov	r3, r0
 8001924:	2b01      	cmp	r3, #1
 8001926:	d106      	bne.n	8001936 <play_music+0x106>
		current_note = NOTE_F;
 8001928:	4b46      	ldr	r3, [pc, #280]	; (8001a44 <play_music+0x214>)
 800192a:	2203      	movs	r2, #3
 800192c:	701a      	strb	r2, [r3, #0]
		play_note(NOTE_F);
 800192e:	2003      	movs	r0, #3
 8001930:	f7ff ff16 	bl	8001760 <play_note>
}
 8001934:	e080      	b.n	8001a38 <play_music+0x208>
	else if (is_in_range(CTR_FREQ[4] - DWN, CTR_FREQ[4] + UP, frequency) == true) {
 8001936:	f640 5216 	movw	r2, #3350	; 0xd16
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	461c      	mov	r4, r3
 8001940:	f640 5216 	movw	r2, #3350	; 0xd16
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	4413      	add	r3, r2
 8001948:	461d      	mov	r5, r3
 800194a:	4b3d      	ldr	r3, [pc, #244]	; (8001a40 <play_music+0x210>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4618      	mov	r0, r3
 8001950:	f7ff faf8 	bl	8000f44 <__aeabi_f2iz>
 8001954:	4603      	mov	r3, r0
 8001956:	461a      	mov	r2, r3
 8001958:	4629      	mov	r1, r5
 800195a:	4620      	mov	r0, r4
 800195c:	f7ff feea 	bl	8001734 <is_in_range>
 8001960:	4603      	mov	r3, r0
 8001962:	2b01      	cmp	r3, #1
 8001964:	d106      	bne.n	8001974 <play_music+0x144>
		current_note = NOTE_G;
 8001966:	4b37      	ldr	r3, [pc, #220]	; (8001a44 <play_music+0x214>)
 8001968:	2204      	movs	r2, #4
 800196a:	701a      	strb	r2, [r3, #0]
		play_note(NOTE_G);
 800196c:	2004      	movs	r0, #4
 800196e:	f7ff fef7 	bl	8001760 <play_note>
}
 8001972:	e061      	b.n	8001a38 <play_music+0x208>
	else if (is_in_range(CTR_FREQ[5] - DWN, CTR_FREQ[5] + UP, frequency) == true) {
 8001974:	f640 6242 	movw	r2, #3650	; 0xe42
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	461c      	mov	r4, r3
 800197e:	f640 6242 	movw	r2, #3650	; 0xe42
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	4413      	add	r3, r2
 8001986:	461d      	mov	r5, r3
 8001988:	4b2d      	ldr	r3, [pc, #180]	; (8001a40 <play_music+0x210>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4618      	mov	r0, r3
 800198e:	f7ff fad9 	bl	8000f44 <__aeabi_f2iz>
 8001992:	4603      	mov	r3, r0
 8001994:	461a      	mov	r2, r3
 8001996:	4629      	mov	r1, r5
 8001998:	4620      	mov	r0, r4
 800199a:	f7ff fecb 	bl	8001734 <is_in_range>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d106      	bne.n	80019b2 <play_music+0x182>
		current_note = NOTE_A;
 80019a4:	4b27      	ldr	r3, [pc, #156]	; (8001a44 <play_music+0x214>)
 80019a6:	2205      	movs	r2, #5
 80019a8:	701a      	strb	r2, [r3, #0]
		play_note(NOTE_A);
 80019aa:	2005      	movs	r0, #5
 80019ac:	f7ff fed8 	bl	8001760 <play_note>
}
 80019b0:	e042      	b.n	8001a38 <play_music+0x208>
	else if (is_in_range(CTR_FREQ[6] - DWN, CTR_FREQ[6] + UP, frequency) == true) {
 80019b2:	f640 726e 	movw	r2, #3950	; 0xf6e
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	461c      	mov	r4, r3
 80019bc:	f640 726e 	movw	r2, #3950	; 0xf6e
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	4413      	add	r3, r2
 80019c4:	461d      	mov	r5, r3
 80019c6:	4b1e      	ldr	r3, [pc, #120]	; (8001a40 <play_music+0x210>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7ff faba 	bl	8000f44 <__aeabi_f2iz>
 80019d0:	4603      	mov	r3, r0
 80019d2:	461a      	mov	r2, r3
 80019d4:	4629      	mov	r1, r5
 80019d6:	4620      	mov	r0, r4
 80019d8:	f7ff feac 	bl	8001734 <is_in_range>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d106      	bne.n	80019f0 <play_music+0x1c0>
		current_note = NOTE_C2;
 80019e2:	4b18      	ldr	r3, [pc, #96]	; (8001a44 <play_music+0x214>)
 80019e4:	2206      	movs	r2, #6
 80019e6:	701a      	strb	r2, [r3, #0]
		play_note(NOTE_C2);
 80019e8:	2006      	movs	r0, #6
 80019ea:	f7ff feb9 	bl	8001760 <play_note>
}
 80019ee:	e023      	b.n	8001a38 <play_music+0x208>
	else if (is_in_range(CTR_FREQ[7] - DWN, CTR_FREQ[7] + UP, frequency) == true) {
 80019f0:	f241 029a 	movw	r2, #4250	; 0x109a
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	461c      	mov	r4, r3
 80019fa:	f241 029a 	movw	r2, #4250	; 0x109a
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	4413      	add	r3, r2
 8001a02:	461d      	mov	r5, r3
 8001a04:	4b0e      	ldr	r3, [pc, #56]	; (8001a40 <play_music+0x210>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7ff fa9b 	bl	8000f44 <__aeabi_f2iz>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	461a      	mov	r2, r3
 8001a12:	4629      	mov	r1, r5
 8001a14:	4620      	mov	r0, r4
 8001a16:	f7ff fe8d 	bl	8001734 <is_in_range>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d106      	bne.n	8001a2e <play_music+0x1fe>
		current_note = NOTE_BB;
 8001a20:	4b08      	ldr	r3, [pc, #32]	; (8001a44 <play_music+0x214>)
 8001a22:	2207      	movs	r2, #7
 8001a24:	701a      	strb	r2, [r3, #0]
		play_note(NOTE_BB);
 8001a26:	2007      	movs	r0, #7
 8001a28:	f7ff fe9a 	bl	8001760 <play_note>
}
 8001a2c:	e004      	b.n	8001a38 <play_music+0x208>
		play_note(current_note);
 8001a2e:	4b05      	ldr	r3, [pc, #20]	; (8001a44 <play_music+0x214>)
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7ff fe94 	bl	8001760 <play_note>
}
 8001a38:	bf00      	nop
 8001a3a:	3708      	adds	r7, #8
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bdb0      	pop	{r4, r5, r7, pc}
 8001a40:	200004a4 	.word	0x200004a4
 8001a44:	200004aa 	.word	0x200004aa

08001a48 <print_to_com_port>:
void print_to_com_port() {
 8001a48:	b590      	push	{r4, r7, lr}
 8001a4a:	b09d      	sub	sp, #116	; 0x74
 8001a4c:	af02      	add	r7, sp, #8
	char buffer[100];
	sprintf(buffer, "%f;%lu;%s \r\n", frequency, period_ticks,
 8001a4e:	4b12      	ldr	r3, [pc, #72]	; (8001a98 <print_to_com_port+0x50>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7fe fce8 	bl	8000428 <__aeabi_f2d>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	490f      	ldr	r1, [pc, #60]	; (8001a9c <print_to_com_port+0x54>)
 8001a5e:	6809      	ldr	r1, [r1, #0]
 8001a60:	480f      	ldr	r0, [pc, #60]	; (8001aa0 <print_to_com_port+0x58>)
 8001a62:	7800      	ldrb	r0, [r0, #0]
 8001a64:	4604      	mov	r4, r0
 8001a66:	480f      	ldr	r0, [pc, #60]	; (8001aa4 <print_to_com_port+0x5c>)
 8001a68:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8001a6c:	1d3c      	adds	r4, r7, #4
 8001a6e:	9001      	str	r0, [sp, #4]
 8001a70:	9100      	str	r1, [sp, #0]
 8001a72:	490d      	ldr	r1, [pc, #52]	; (8001aa8 <print_to_com_port+0x60>)
 8001a74:	4620      	mov	r0, r4
 8001a76:	f009 fd45 	bl	800b504 <siprintf>
			timers[current_timer]);
	CDC_Transmit_FS((uint8_t*) buffer, strlen(buffer));
 8001a7a:	1d3b      	adds	r3, r7, #4
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7fe fb67 	bl	8000150 <strlen>
 8001a82:	4602      	mov	r2, r0
 8001a84:	1d3b      	adds	r3, r7, #4
 8001a86:	4611      	mov	r1, r2
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f000 fc43 	bl	8002314 <CDC_Transmit_FS>

}
 8001a8e:	bf00      	nop
 8001a90:	376c      	adds	r7, #108	; 0x6c
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd90      	pop	{r4, r7, pc}
 8001a96:	bf00      	nop
 8001a98:	200004a4 	.word	0x200004a4
 8001a9c:	2000049c 	.word	0x2000049c
 8001aa0:	200004a9 	.word	0x200004a9
 8001aa4:	20000000 	.word	0x20000000
 8001aa8:	0800dac0 	.word	0x0800dac0

08001aac <HAL_TIM_IC_CaptureCallback>:
void print_note_to_com_port(){
	char buffer[50];
		sprintf(buffer, "%%lu \r\n", all_notes[current_note]);
		CDC_Transmit_FS((uint8_t*) buffer, strlen(buffer));
}
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b084      	sub	sp, #16
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
	if (htim == &htim1) {
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	4a34      	ldr	r2, [pc, #208]	; (8001b88 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d103      	bne.n	8001ac4 <HAL_TIM_IC_CaptureCallback+0x18>
		current_timer = 0;
 8001abc:	4b33      	ldr	r3, [pc, #204]	; (8001b8c <HAL_TIM_IC_CaptureCallback+0xe0>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	701a      	strb	r2, [r3, #0]
 8001ac2:	e00a      	b.n	8001ada <HAL_TIM_IC_CaptureCallback+0x2e>
	} else if (htim == &htim2) {
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	4a32      	ldr	r2, [pc, #200]	; (8001b90 <HAL_TIM_IC_CaptureCallback+0xe4>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d103      	bne.n	8001ad4 <HAL_TIM_IC_CaptureCallback+0x28>
		current_timer = 1;
 8001acc:	4b2f      	ldr	r3, [pc, #188]	; (8001b8c <HAL_TIM_IC_CaptureCallback+0xe0>)
 8001ace:	2201      	movs	r2, #1
 8001ad0:	701a      	strb	r2, [r3, #0]
 8001ad2:	e002      	b.n	8001ada <HAL_TIM_IC_CaptureCallback+0x2e>
	} else {
		current_timer = 2;
 8001ad4:	4b2d      	ldr	r3, [pc, #180]	; (8001b8c <HAL_TIM_IC_CaptureCallback+0xe0>)
 8001ad6:	2202      	movs	r2, #2
 8001ad8:	701a      	strb	r2, [r3, #0]
	}
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	7f1b      	ldrb	r3, [r3, #28]
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d14e      	bne.n	8001b80 <HAL_TIM_IC_CaptureCallback+0xd4>

		if (is_first_captured == 0) // if the first rising edge is not captured
 8001ae2:	4b2c      	ldr	r3, [pc, #176]	; (8001b94 <HAL_TIM_IC_CaptureCallback+0xe8>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d10d      	bne.n	8001b06 <HAL_TIM_IC_CaptureCallback+0x5a>
				{
			finished_one_measurement = 0;
 8001aea:	4b2b      	ldr	r3, [pc, #172]	; (8001b98 <HAL_TIM_IC_CaptureCallback+0xec>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	701a      	strb	r2, [r3, #0]
			IC_val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8001af0:	2100      	movs	r1, #0
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f004 fa68 	bl	8005fc8 <HAL_TIM_ReadCapturedValue>
 8001af8:	4603      	mov	r3, r0
 8001afa:	4a28      	ldr	r2, [pc, #160]	; (8001b9c <HAL_TIM_IC_CaptureCallback+0xf0>)
 8001afc:	6013      	str	r3, [r2, #0]
			is_first_captured = 1;  // set the first captured as true
 8001afe:	4b25      	ldr	r3, [pc, #148]	; (8001b94 <HAL_TIM_IC_CaptureCallback+0xe8>)
 8001b00:	2201      	movs	r2, #1
 8001b02:	601a      	str	r2, [r3, #0]
			is_first_captured = 0; // set it back to false

			finished_one_measurement = 1;
		}
	}
}
 8001b04:	e03c      	b.n	8001b80 <HAL_TIM_IC_CaptureCallback+0xd4>
			IC_val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read second value
 8001b06:	2100      	movs	r1, #0
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f004 fa5d 	bl	8005fc8 <HAL_TIM_ReadCapturedValue>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	4a23      	ldr	r2, [pc, #140]	; (8001ba0 <HAL_TIM_IC_CaptureCallback+0xf4>)
 8001b12:	6013      	str	r3, [r2, #0]
			if (IC_val2 > IC_val1) {
 8001b14:	4b22      	ldr	r3, [pc, #136]	; (8001ba0 <HAL_TIM_IC_CaptureCallback+0xf4>)
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	4b20      	ldr	r3, [pc, #128]	; (8001b9c <HAL_TIM_IC_CaptureCallback+0xf0>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d907      	bls.n	8001b30 <HAL_TIM_IC_CaptureCallback+0x84>
				period_ticks = IC_val2 - IC_val1;
 8001b20:	4b1f      	ldr	r3, [pc, #124]	; (8001ba0 <HAL_TIM_IC_CaptureCallback+0xf4>)
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	4b1d      	ldr	r3, [pc, #116]	; (8001b9c <HAL_TIM_IC_CaptureCallback+0xf0>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	4a1e      	ldr	r2, [pc, #120]	; (8001ba4 <HAL_TIM_IC_CaptureCallback+0xf8>)
 8001b2c:	6013      	str	r3, [r2, #0]
 8001b2e:	e00d      	b.n	8001b4c <HAL_TIM_IC_CaptureCallback+0xa0>
			else if (IC_val1 > IC_val2) {
 8001b30:	4b1a      	ldr	r3, [pc, #104]	; (8001b9c <HAL_TIM_IC_CaptureCallback+0xf0>)
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	4b1a      	ldr	r3, [pc, #104]	; (8001ba0 <HAL_TIM_IC_CaptureCallback+0xf4>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d907      	bls.n	8001b4c <HAL_TIM_IC_CaptureCallback+0xa0>
				period_ticks = (0xffffffff - IC_val1) + IC_val2; //0xffffffff = 4 294 967 295
 8001b3c:	4b18      	ldr	r3, [pc, #96]	; (8001ba0 <HAL_TIM_IC_CaptureCallback+0xf4>)
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	4b16      	ldr	r3, [pc, #88]	; (8001b9c <HAL_TIM_IC_CaptureCallback+0xf0>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	3b01      	subs	r3, #1
 8001b48:	4a16      	ldr	r2, [pc, #88]	; (8001ba4 <HAL_TIM_IC_CaptureCallback+0xf8>)
 8001b4a:	6013      	str	r3, [r2, #0]
			float refClock = TIMCLOCK / (PRESCALAR);
 8001b4c:	4b16      	ldr	r3, [pc, #88]	; (8001ba8 <HAL_TIM_IC_CaptureCallback+0xfc>)
 8001b4e:	60fb      	str	r3, [r7, #12]
			frequency = refClock / period_ticks;
 8001b50:	4b14      	ldr	r3, [pc, #80]	; (8001ba4 <HAL_TIM_IC_CaptureCallback+0xf8>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7ff f84d 	bl	8000bf4 <__aeabi_ui2f>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	68f8      	ldr	r0, [r7, #12]
 8001b60:	f7ff f954 	bl	8000e0c <__aeabi_fdiv>
 8001b64:	4603      	mov	r3, r0
 8001b66:	461a      	mov	r2, r3
 8001b68:	4b10      	ldr	r3, [pc, #64]	; (8001bac <HAL_TIM_IC_CaptureCallback+0x100>)
 8001b6a:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2200      	movs	r2, #0
 8001b72:	625a      	str	r2, [r3, #36]	; 0x24
			is_first_captured = 0; // set it back to false
 8001b74:	4b07      	ldr	r3, [pc, #28]	; (8001b94 <HAL_TIM_IC_CaptureCallback+0xe8>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	601a      	str	r2, [r3, #0]
			finished_one_measurement = 1;
 8001b7a:	4b07      	ldr	r3, [pc, #28]	; (8001b98 <HAL_TIM_IC_CaptureCallback+0xec>)
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	701a      	strb	r2, [r3, #0]
}
 8001b80:	bf00      	nop
 8001b82:	3710      	adds	r7, #16
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	20000374 	.word	0x20000374
 8001b8c:	200004a9 	.word	0x200004a9
 8001b90:	200003bc 	.word	0x200003bc
 8001b94:	200004a0 	.word	0x200004a0
 8001b98:	200004a8 	.word	0x200004a8
 8001b9c:	20000494 	.word	0x20000494
 8001ba0:	20000498 	.word	0x20000498
 8001ba4:	2000049c 	.word	0x2000049c
 8001ba8:	4c895440 	.word	0x4c895440
 8001bac:	200004a4 	.word	0x200004a4

08001bb0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bb4:	b672      	cpsid	i
}
 8001bb6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001bb8:	e7fe      	b.n	8001bb8 <Error_Handler+0x8>
	...

08001bbc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001bc2:	4b1d      	ldr	r3, [pc, #116]	; (8001c38 <HAL_MspInit+0x7c>)
 8001bc4:	699b      	ldr	r3, [r3, #24]
 8001bc6:	4a1c      	ldr	r2, [pc, #112]	; (8001c38 <HAL_MspInit+0x7c>)
 8001bc8:	f043 0301 	orr.w	r3, r3, #1
 8001bcc:	6193      	str	r3, [r2, #24]
 8001bce:	4b1a      	ldr	r3, [pc, #104]	; (8001c38 <HAL_MspInit+0x7c>)
 8001bd0:	699b      	ldr	r3, [r3, #24]
 8001bd2:	f003 0301 	and.w	r3, r3, #1
 8001bd6:	60bb      	str	r3, [r7, #8]
 8001bd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bda:	4b17      	ldr	r3, [pc, #92]	; (8001c38 <HAL_MspInit+0x7c>)
 8001bdc:	69db      	ldr	r3, [r3, #28]
 8001bde:	4a16      	ldr	r2, [pc, #88]	; (8001c38 <HAL_MspInit+0x7c>)
 8001be0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001be4:	61d3      	str	r3, [r2, #28]
 8001be6:	4b14      	ldr	r3, [pc, #80]	; (8001c38 <HAL_MspInit+0x7c>)
 8001be8:	69db      	ldr	r3, [r3, #28]
 8001bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bee:	607b      	str	r3, [r7, #4]
 8001bf0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	2100      	movs	r1, #0
 8001bf6:	2005      	movs	r0, #5
 8001bf8:	f001 f8d5 	bl	8002da6 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001bfc:	2005      	movs	r0, #5
 8001bfe:	f001 f8ee 	bl	8002dde <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001c02:	2200      	movs	r2, #0
 8001c04:	2100      	movs	r1, #0
 8001c06:	2005      	movs	r0, #5
 8001c08:	f001 f8cd 	bl	8002da6 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001c0c:	2005      	movs	r0, #5
 8001c0e:	f001 f8e6 	bl	8002dde <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001c12:	4b0a      	ldr	r3, [pc, #40]	; (8001c3c <HAL_MspInit+0x80>)
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	60fb      	str	r3, [r7, #12]
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001c1e:	60fb      	str	r3, [r7, #12]
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c26:	60fb      	str	r3, [r7, #12]
 8001c28:	4a04      	ldr	r2, [pc, #16]	; (8001c3c <HAL_MspInit+0x80>)
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c2e:	bf00      	nop
 8001c30:	3710      	adds	r7, #16
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	40021000 	.word	0x40021000
 8001c3c:	40010000 	.word	0x40010000

08001c40 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b08c      	sub	sp, #48	; 0x30
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c48:	f107 0320 	add.w	r3, r7, #32
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]
 8001c50:	605a      	str	r2, [r3, #4]
 8001c52:	609a      	str	r2, [r3, #8]
 8001c54:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a4d      	ldr	r2, [pc, #308]	; (8001d90 <HAL_TIM_Base_MspInit+0x150>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d145      	bne.n	8001cec <HAL_TIM_Base_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c60:	4b4c      	ldr	r3, [pc, #304]	; (8001d94 <HAL_TIM_Base_MspInit+0x154>)
 8001c62:	699b      	ldr	r3, [r3, #24]
 8001c64:	4a4b      	ldr	r2, [pc, #300]	; (8001d94 <HAL_TIM_Base_MspInit+0x154>)
 8001c66:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c6a:	6193      	str	r3, [r2, #24]
 8001c6c:	4b49      	ldr	r3, [pc, #292]	; (8001d94 <HAL_TIM_Base_MspInit+0x154>)
 8001c6e:	699b      	ldr	r3, [r3, #24]
 8001c70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c74:	61fb      	str	r3, [r7, #28]
 8001c76:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c78:	4b46      	ldr	r3, [pc, #280]	; (8001d94 <HAL_TIM_Base_MspInit+0x154>)
 8001c7a:	699b      	ldr	r3, [r3, #24]
 8001c7c:	4a45      	ldr	r2, [pc, #276]	; (8001d94 <HAL_TIM_Base_MspInit+0x154>)
 8001c7e:	f043 0304 	orr.w	r3, r3, #4
 8001c82:	6193      	str	r3, [r2, #24]
 8001c84:	4b43      	ldr	r3, [pc, #268]	; (8001d94 <HAL_TIM_Base_MspInit+0x154>)
 8001c86:	699b      	ldr	r3, [r3, #24]
 8001c88:	f003 0304 	and.w	r3, r3, #4
 8001c8c:	61bb      	str	r3, [r7, #24]
 8001c8e:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = A8_TRIG_IN_Pin;
 8001c90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c96:	2300      	movs	r3, #0
 8001c98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(A8_TRIG_IN_GPIO_Port, &GPIO_InitStruct);
 8001c9e:	f107 0320 	add.w	r3, r7, #32
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	483c      	ldr	r0, [pc, #240]	; (8001d98 <HAL_TIM_Base_MspInit+0x158>)
 8001ca6:	f001 f8b5 	bl	8002e14 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8001caa:	2200      	movs	r2, #0
 8001cac:	2100      	movs	r1, #0
 8001cae:	2018      	movs	r0, #24
 8001cb0:	f001 f879 	bl	8002da6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8001cb4:	2018      	movs	r0, #24
 8001cb6:	f001 f892 	bl	8002dde <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001cba:	2200      	movs	r2, #0
 8001cbc:	2100      	movs	r1, #0
 8001cbe:	2019      	movs	r0, #25
 8001cc0:	f001 f871 	bl	8002da6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001cc4:	2019      	movs	r0, #25
 8001cc6:	f001 f88a 	bl	8002dde <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8001cca:	2200      	movs	r2, #0
 8001ccc:	2100      	movs	r1, #0
 8001cce:	201a      	movs	r0, #26
 8001cd0:	f001 f869 	bl	8002da6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8001cd4:	201a      	movs	r0, #26
 8001cd6:	f001 f882 	bl	8002dde <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001cda:	2200      	movs	r2, #0
 8001cdc:	2100      	movs	r1, #0
 8001cde:	201b      	movs	r0, #27
 8001ce0:	f001 f861 	bl	8002da6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001ce4:	201b      	movs	r0, #27
 8001ce6:	f001 f87a 	bl	8002dde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001cea:	e04c      	b.n	8001d86 <HAL_TIM_Base_MspInit+0x146>
  else if(htim_base->Instance==TIM2)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cf4:	d114      	bne.n	8001d20 <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001cf6:	4b27      	ldr	r3, [pc, #156]	; (8001d94 <HAL_TIM_Base_MspInit+0x154>)
 8001cf8:	69db      	ldr	r3, [r3, #28]
 8001cfa:	4a26      	ldr	r2, [pc, #152]	; (8001d94 <HAL_TIM_Base_MspInit+0x154>)
 8001cfc:	f043 0301 	orr.w	r3, r3, #1
 8001d00:	61d3      	str	r3, [r2, #28]
 8001d02:	4b24      	ldr	r3, [pc, #144]	; (8001d94 <HAL_TIM_Base_MspInit+0x154>)
 8001d04:	69db      	ldr	r3, [r3, #28]
 8001d06:	f003 0301 	and.w	r3, r3, #1
 8001d0a:	617b      	str	r3, [r7, #20]
 8001d0c:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001d0e:	2200      	movs	r2, #0
 8001d10:	2100      	movs	r1, #0
 8001d12:	201c      	movs	r0, #28
 8001d14:	f001 f847 	bl	8002da6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001d18:	201c      	movs	r0, #28
 8001d1a:	f001 f860 	bl	8002dde <HAL_NVIC_EnableIRQ>
}
 8001d1e:	e032      	b.n	8001d86 <HAL_TIM_Base_MspInit+0x146>
  else if(htim_base->Instance==TIM3)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a1d      	ldr	r2, [pc, #116]	; (8001d9c <HAL_TIM_Base_MspInit+0x15c>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d114      	bne.n	8001d54 <HAL_TIM_Base_MspInit+0x114>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d2a:	4b1a      	ldr	r3, [pc, #104]	; (8001d94 <HAL_TIM_Base_MspInit+0x154>)
 8001d2c:	69db      	ldr	r3, [r3, #28]
 8001d2e:	4a19      	ldr	r2, [pc, #100]	; (8001d94 <HAL_TIM_Base_MspInit+0x154>)
 8001d30:	f043 0302 	orr.w	r3, r3, #2
 8001d34:	61d3      	str	r3, [r2, #28]
 8001d36:	4b17      	ldr	r3, [pc, #92]	; (8001d94 <HAL_TIM_Base_MspInit+0x154>)
 8001d38:	69db      	ldr	r3, [r3, #28]
 8001d3a:	f003 0302 	and.w	r3, r3, #2
 8001d3e:	613b      	str	r3, [r7, #16]
 8001d40:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001d42:	2200      	movs	r2, #0
 8001d44:	2100      	movs	r1, #0
 8001d46:	201d      	movs	r0, #29
 8001d48:	f001 f82d 	bl	8002da6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001d4c:	201d      	movs	r0, #29
 8001d4e:	f001 f846 	bl	8002dde <HAL_NVIC_EnableIRQ>
}
 8001d52:	e018      	b.n	8001d86 <HAL_TIM_Base_MspInit+0x146>
  else if(htim_base->Instance==TIM4)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a11      	ldr	r2, [pc, #68]	; (8001da0 <HAL_TIM_Base_MspInit+0x160>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d113      	bne.n	8001d86 <HAL_TIM_Base_MspInit+0x146>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001d5e:	4b0d      	ldr	r3, [pc, #52]	; (8001d94 <HAL_TIM_Base_MspInit+0x154>)
 8001d60:	69db      	ldr	r3, [r3, #28]
 8001d62:	4a0c      	ldr	r2, [pc, #48]	; (8001d94 <HAL_TIM_Base_MspInit+0x154>)
 8001d64:	f043 0304 	orr.w	r3, r3, #4
 8001d68:	61d3      	str	r3, [r2, #28]
 8001d6a:	4b0a      	ldr	r3, [pc, #40]	; (8001d94 <HAL_TIM_Base_MspInit+0x154>)
 8001d6c:	69db      	ldr	r3, [r3, #28]
 8001d6e:	f003 0304 	and.w	r3, r3, #4
 8001d72:	60fb      	str	r3, [r7, #12]
 8001d74:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001d76:	2200      	movs	r2, #0
 8001d78:	2100      	movs	r1, #0
 8001d7a:	201e      	movs	r0, #30
 8001d7c:	f001 f813 	bl	8002da6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001d80:	201e      	movs	r0, #30
 8001d82:	f001 f82c 	bl	8002dde <HAL_NVIC_EnableIRQ>
}
 8001d86:	bf00      	nop
 8001d88:	3730      	adds	r7, #48	; 0x30
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	40012c00 	.word	0x40012c00
 8001d94:	40021000 	.word	0x40021000
 8001d98:	40010800 	.word	0x40010800
 8001d9c:	40000400 	.word	0x40000400
 8001da0:	40000800 	.word	0x40000800

08001da4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b08a      	sub	sp, #40	; 0x28
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dac:	f107 0318 	add.w	r3, r7, #24
 8001db0:	2200      	movs	r2, #0
 8001db2:	601a      	str	r2, [r3, #0]
 8001db4:	605a      	str	r2, [r3, #4]
 8001db6:	609a      	str	r2, [r3, #8]
 8001db8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dc2:	d118      	bne.n	8001df6 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dc4:	4b38      	ldr	r3, [pc, #224]	; (8001ea8 <HAL_TIM_MspPostInit+0x104>)
 8001dc6:	699b      	ldr	r3, [r3, #24]
 8001dc8:	4a37      	ldr	r2, [pc, #220]	; (8001ea8 <HAL_TIM_MspPostInit+0x104>)
 8001dca:	f043 0304 	orr.w	r3, r3, #4
 8001dce:	6193      	str	r3, [r2, #24]
 8001dd0:	4b35      	ldr	r3, [pc, #212]	; (8001ea8 <HAL_TIM_MspPostInit+0x104>)
 8001dd2:	699b      	ldr	r3, [r3, #24]
 8001dd4:	f003 0304 	and.w	r3, r3, #4
 8001dd8:	617b      	str	r3, [r7, #20]
 8001dda:	697b      	ldr	r3, [r7, #20]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = TIM2_CH1_PWM_Pin|TIM2_CH2_PA1_INPUT_CAPTURE_Pin|TIM2_CH1_PWM_PA2_Pin|GPIO_PIN_3;
 8001ddc:	230f      	movs	r3, #15
 8001dde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de0:	2302      	movs	r3, #2
 8001de2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de4:	2302      	movs	r3, #2
 8001de6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001de8:	f107 0318 	add.w	r3, r7, #24
 8001dec:	4619      	mov	r1, r3
 8001dee:	482f      	ldr	r0, [pc, #188]	; (8001eac <HAL_TIM_MspPostInit+0x108>)
 8001df0:	f001 f810 	bl	8002e14 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001df4:	e053      	b.n	8001e9e <HAL_TIM_MspPostInit+0xfa>
  else if(htim->Instance==TIM3)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a2d      	ldr	r2, [pc, #180]	; (8001eb0 <HAL_TIM_MspPostInit+0x10c>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d130      	bne.n	8001e62 <HAL_TIM_MspPostInit+0xbe>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e00:	4b29      	ldr	r3, [pc, #164]	; (8001ea8 <HAL_TIM_MspPostInit+0x104>)
 8001e02:	699b      	ldr	r3, [r3, #24]
 8001e04:	4a28      	ldr	r2, [pc, #160]	; (8001ea8 <HAL_TIM_MspPostInit+0x104>)
 8001e06:	f043 0304 	orr.w	r3, r3, #4
 8001e0a:	6193      	str	r3, [r2, #24]
 8001e0c:	4b26      	ldr	r3, [pc, #152]	; (8001ea8 <HAL_TIM_MspPostInit+0x104>)
 8001e0e:	699b      	ldr	r3, [r3, #24]
 8001e10:	f003 0304 	and.w	r3, r3, #4
 8001e14:	613b      	str	r3, [r7, #16]
 8001e16:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e18:	4b23      	ldr	r3, [pc, #140]	; (8001ea8 <HAL_TIM_MspPostInit+0x104>)
 8001e1a:	699b      	ldr	r3, [r3, #24]
 8001e1c:	4a22      	ldr	r2, [pc, #136]	; (8001ea8 <HAL_TIM_MspPostInit+0x104>)
 8001e1e:	f043 0308 	orr.w	r3, r3, #8
 8001e22:	6193      	str	r3, [r2, #24]
 8001e24:	4b20      	ldr	r3, [pc, #128]	; (8001ea8 <HAL_TIM_MspPostInit+0x104>)
 8001e26:	699b      	ldr	r3, [r3, #24]
 8001e28:	f003 0308 	and.w	r3, r3, #8
 8001e2c:	60fb      	str	r3, [r7, #12]
 8001e2e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e30:	23c0      	movs	r3, #192	; 0xc0
 8001e32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e34:	2302      	movs	r3, #2
 8001e36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e38:	2302      	movs	r3, #2
 8001e3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e3c:	f107 0318 	add.w	r3, r7, #24
 8001e40:	4619      	mov	r1, r3
 8001e42:	481a      	ldr	r0, [pc, #104]	; (8001eac <HAL_TIM_MspPostInit+0x108>)
 8001e44:	f000 ffe6 	bl	8002e14 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e50:	2302      	movs	r3, #2
 8001e52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e54:	f107 0318 	add.w	r3, r7, #24
 8001e58:	4619      	mov	r1, r3
 8001e5a:	4816      	ldr	r0, [pc, #88]	; (8001eb4 <HAL_TIM_MspPostInit+0x110>)
 8001e5c:	f000 ffda 	bl	8002e14 <HAL_GPIO_Init>
}
 8001e60:	e01d      	b.n	8001e9e <HAL_TIM_MspPostInit+0xfa>
  else if(htim->Instance==TIM4)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a14      	ldr	r2, [pc, #80]	; (8001eb8 <HAL_TIM_MspPostInit+0x114>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d118      	bne.n	8001e9e <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e6c:	4b0e      	ldr	r3, [pc, #56]	; (8001ea8 <HAL_TIM_MspPostInit+0x104>)
 8001e6e:	699b      	ldr	r3, [r3, #24]
 8001e70:	4a0d      	ldr	r2, [pc, #52]	; (8001ea8 <HAL_TIM_MspPostInit+0x104>)
 8001e72:	f043 0308 	orr.w	r3, r3, #8
 8001e76:	6193      	str	r3, [r2, #24]
 8001e78:	4b0b      	ldr	r3, [pc, #44]	; (8001ea8 <HAL_TIM_MspPostInit+0x104>)
 8001e7a:	699b      	ldr	r3, [r3, #24]
 8001e7c:	f003 0308 	and.w	r3, r3, #8
 8001e80:	60bb      	str	r3, [r7, #8]
 8001e82:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001e84:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001e88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e8e:	2302      	movs	r3, #2
 8001e90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e92:	f107 0318 	add.w	r3, r7, #24
 8001e96:	4619      	mov	r1, r3
 8001e98:	4806      	ldr	r0, [pc, #24]	; (8001eb4 <HAL_TIM_MspPostInit+0x110>)
 8001e9a:	f000 ffbb 	bl	8002e14 <HAL_GPIO_Init>
}
 8001e9e:	bf00      	nop
 8001ea0:	3728      	adds	r7, #40	; 0x28
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	40021000 	.word	0x40021000
 8001eac:	40010800 	.word	0x40010800
 8001eb0:	40000400 	.word	0x40000400
 8001eb4:	40010c00 	.word	0x40010c00
 8001eb8:	40000800 	.word	0x40000800

08001ebc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ec0:	e7fe      	b.n	8001ec0 <NMI_Handler+0x4>

08001ec2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ec2:	b480      	push	{r7}
 8001ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ec6:	e7fe      	b.n	8001ec6 <HardFault_Handler+0x4>

08001ec8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ecc:	e7fe      	b.n	8001ecc <MemManage_Handler+0x4>

08001ece <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ece:	b480      	push	{r7}
 8001ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ed2:	e7fe      	b.n	8001ed2 <BusFault_Handler+0x4>

08001ed4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ed8:	e7fe      	b.n	8001ed8 <UsageFault_Handler+0x4>

08001eda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001eda:	b480      	push	{r7}
 8001edc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ede:	bf00      	nop
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bc80      	pop	{r7}
 8001ee4:	4770      	bx	lr

08001ee6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001eea:	bf00      	nop
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bc80      	pop	{r7}
 8001ef0:	4770      	bx	lr

08001ef2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ef6:	bf00      	nop
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bc80      	pop	{r7}
 8001efc:	4770      	bx	lr

08001efe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001efe:	b580      	push	{r7, lr}
 8001f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f02:	f000 fe39 	bl	8002b78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f06:	bf00      	nop
 8001f08:	bd80      	pop	{r7, pc}

08001f0a <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001f0a:	b480      	push	{r7}
 8001f0c:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001f0e:	bf00      	nop
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bc80      	pop	{r7}
 8001f14:	4770      	bx	lr
	...

08001f18 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001f1c:	4802      	ldr	r0, [pc, #8]	; (8001f28 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8001f1e:	f001 fa5d 	bl	80033dc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8001f22:	bf00      	nop
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	20001144 	.word	0x20001144

08001f2c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001f30:	4802      	ldr	r0, [pc, #8]	; (8001f3c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001f32:	f001 fa53 	bl	80033dc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001f36:	bf00      	nop
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	20001144 	.word	0x20001144

08001f40 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001f44:	4802      	ldr	r0, [pc, #8]	; (8001f50 <TIM1_BRK_IRQHandler+0x10>)
 8001f46:	f003 fd21 	bl	800598c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8001f4a:	bf00      	nop
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	20000374 	.word	0x20000374

08001f54 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001f58:	4802      	ldr	r0, [pc, #8]	; (8001f64 <TIM1_UP_IRQHandler+0x10>)
 8001f5a:	f003 fd17 	bl	800598c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001f5e:	bf00      	nop
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	20000374 	.word	0x20000374

08001f68 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001f6c:	4802      	ldr	r0, [pc, #8]	; (8001f78 <TIM1_TRG_COM_IRQHandler+0x10>)
 8001f6e:	f003 fd0d 	bl	800598c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8001f72:	bf00      	nop
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	20000374 	.word	0x20000374

08001f7c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001f80:	4802      	ldr	r0, [pc, #8]	; (8001f8c <TIM1_CC_IRQHandler+0x10>)
 8001f82:	f003 fd03 	bl	800598c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001f86:	bf00      	nop
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	20000374 	.word	0x20000374

08001f90 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001f94:	4802      	ldr	r0, [pc, #8]	; (8001fa0 <TIM2_IRQHandler+0x10>)
 8001f96:	f003 fcf9 	bl	800598c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001f9a:	bf00      	nop
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	200003bc 	.word	0x200003bc

08001fa4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001fa8:	4802      	ldr	r0, [pc, #8]	; (8001fb4 <TIM3_IRQHandler+0x10>)
 8001faa:	f003 fcef 	bl	800598c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001fae:	bf00      	nop
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	20000404 	.word	0x20000404

08001fb8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001fbc:	4802      	ldr	r0, [pc, #8]	; (8001fc8 <TIM4_IRQHandler+0x10>)
 8001fbe:	f003 fce5 	bl	800598c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001fc2:	bf00      	nop
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	2000044c 	.word	0x2000044c

08001fcc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
	return 1;
 8001fd0:	2301      	movs	r3, #1
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bc80      	pop	{r7}
 8001fd8:	4770      	bx	lr

08001fda <_kill>:

int _kill(int pid, int sig)
{
 8001fda:	b580      	push	{r7, lr}
 8001fdc:	b082      	sub	sp, #8
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	6078      	str	r0, [r7, #4]
 8001fe2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001fe4:	f008 fdd0 	bl	800ab88 <__errno>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2216      	movs	r2, #22
 8001fec:	601a      	str	r2, [r3, #0]
	return -1;
 8001fee:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <_exit>:

void _exit (int status)
{
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	b082      	sub	sp, #8
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002002:	f04f 31ff 	mov.w	r1, #4294967295
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f7ff ffe7 	bl	8001fda <_kill>
	while (1) {}		/* Make sure we hang here */
 800200c:	e7fe      	b.n	800200c <_exit+0x12>

0800200e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800200e:	b580      	push	{r7, lr}
 8002010:	b086      	sub	sp, #24
 8002012:	af00      	add	r7, sp, #0
 8002014:	60f8      	str	r0, [r7, #12]
 8002016:	60b9      	str	r1, [r7, #8]
 8002018:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800201a:	2300      	movs	r3, #0
 800201c:	617b      	str	r3, [r7, #20]
 800201e:	e00a      	b.n	8002036 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002020:	f3af 8000 	nop.w
 8002024:	4601      	mov	r1, r0
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	1c5a      	adds	r2, r3, #1
 800202a:	60ba      	str	r2, [r7, #8]
 800202c:	b2ca      	uxtb	r2, r1
 800202e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	3301      	adds	r3, #1
 8002034:	617b      	str	r3, [r7, #20]
 8002036:	697a      	ldr	r2, [r7, #20]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	429a      	cmp	r2, r3
 800203c:	dbf0      	blt.n	8002020 <_read+0x12>
	}

return len;
 800203e:	687b      	ldr	r3, [r7, #4]
}
 8002040:	4618      	mov	r0, r3
 8002042:	3718      	adds	r7, #24
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}

08002048 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b086      	sub	sp, #24
 800204c:	af00      	add	r7, sp, #0
 800204e:	60f8      	str	r0, [r7, #12]
 8002050:	60b9      	str	r1, [r7, #8]
 8002052:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002054:	2300      	movs	r3, #0
 8002056:	617b      	str	r3, [r7, #20]
 8002058:	e009      	b.n	800206e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	1c5a      	adds	r2, r3, #1
 800205e:	60ba      	str	r2, [r7, #8]
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	4618      	mov	r0, r3
 8002064:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	3301      	adds	r3, #1
 800206c:	617b      	str	r3, [r7, #20]
 800206e:	697a      	ldr	r2, [r7, #20]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	429a      	cmp	r2, r3
 8002074:	dbf1      	blt.n	800205a <_write+0x12>
	}
	return len;
 8002076:	687b      	ldr	r3, [r7, #4]
}
 8002078:	4618      	mov	r0, r3
 800207a:	3718      	adds	r7, #24
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}

08002080 <_close>:

int _close(int file)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
	return -1;
 8002088:	f04f 33ff 	mov.w	r3, #4294967295
}
 800208c:	4618      	mov	r0, r3
 800208e:	370c      	adds	r7, #12
 8002090:	46bd      	mov	sp, r7
 8002092:	bc80      	pop	{r7}
 8002094:	4770      	bx	lr

08002096 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002096:	b480      	push	{r7}
 8002098:	b083      	sub	sp, #12
 800209a:	af00      	add	r7, sp, #0
 800209c:	6078      	str	r0, [r7, #4]
 800209e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020a6:	605a      	str	r2, [r3, #4]
	return 0;
 80020a8:	2300      	movs	r3, #0
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	370c      	adds	r7, #12
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bc80      	pop	{r7}
 80020b2:	4770      	bx	lr

080020b4 <_isatty>:

int _isatty(int file)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
	return 1;
 80020bc:	2301      	movs	r3, #1
}
 80020be:	4618      	mov	r0, r3
 80020c0:	370c      	adds	r7, #12
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bc80      	pop	{r7}
 80020c6:	4770      	bx	lr

080020c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b085      	sub	sp, #20
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	60f8      	str	r0, [r7, #12]
 80020d0:	60b9      	str	r1, [r7, #8]
 80020d2:	607a      	str	r2, [r7, #4]
	return 0;
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3714      	adds	r7, #20
 80020da:	46bd      	mov	sp, r7
 80020dc:	bc80      	pop	{r7}
 80020de:	4770      	bx	lr

080020e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b086      	sub	sp, #24
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020e8:	4a14      	ldr	r2, [pc, #80]	; (800213c <_sbrk+0x5c>)
 80020ea:	4b15      	ldr	r3, [pc, #84]	; (8002140 <_sbrk+0x60>)
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020f4:	4b13      	ldr	r3, [pc, #76]	; (8002144 <_sbrk+0x64>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d102      	bne.n	8002102 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020fc:	4b11      	ldr	r3, [pc, #68]	; (8002144 <_sbrk+0x64>)
 80020fe:	4a12      	ldr	r2, [pc, #72]	; (8002148 <_sbrk+0x68>)
 8002100:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002102:	4b10      	ldr	r3, [pc, #64]	; (8002144 <_sbrk+0x64>)
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4413      	add	r3, r2
 800210a:	693a      	ldr	r2, [r7, #16]
 800210c:	429a      	cmp	r2, r3
 800210e:	d207      	bcs.n	8002120 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002110:	f008 fd3a 	bl	800ab88 <__errno>
 8002114:	4603      	mov	r3, r0
 8002116:	220c      	movs	r2, #12
 8002118:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800211a:	f04f 33ff 	mov.w	r3, #4294967295
 800211e:	e009      	b.n	8002134 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002120:	4b08      	ldr	r3, [pc, #32]	; (8002144 <_sbrk+0x64>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002126:	4b07      	ldr	r3, [pc, #28]	; (8002144 <_sbrk+0x64>)
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4413      	add	r3, r2
 800212e:	4a05      	ldr	r2, [pc, #20]	; (8002144 <_sbrk+0x64>)
 8002130:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002132:	68fb      	ldr	r3, [r7, #12]
}
 8002134:	4618      	mov	r0, r3
 8002136:	3718      	adds	r7, #24
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}
 800213c:	20005000 	.word	0x20005000
 8002140:	00000400 	.word	0x00000400
 8002144:	200004ac 	.word	0x200004ac
 8002148:	20001668 	.word	0x20001668

0800214c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800214c:	480c      	ldr	r0, [pc, #48]	; (8002180 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800214e:	490d      	ldr	r1, [pc, #52]	; (8002184 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002150:	4a0d      	ldr	r2, [pc, #52]	; (8002188 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002152:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002154:	e002      	b.n	800215c <LoopCopyDataInit>

08002156 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002156:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002158:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800215a:	3304      	adds	r3, #4

0800215c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800215c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800215e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002160:	d3f9      	bcc.n	8002156 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002162:	4a0a      	ldr	r2, [pc, #40]	; (800218c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002164:	4c0a      	ldr	r4, [pc, #40]	; (8002190 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002166:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002168:	e001      	b.n	800216e <LoopFillZerobss>

0800216a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800216a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800216c:	3204      	adds	r2, #4

0800216e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800216e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002170:	d3fb      	bcc.n	800216a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002172:	f000 fcb5 	bl	8002ae0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002176:	f008 fd0d 	bl	800ab94 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800217a:	f7fe ff09 	bl	8000f90 <main>
  bx lr
 800217e:	4770      	bx	lr
  ldr r0, =_sdata
 8002180:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002184:	20000358 	.word	0x20000358
  ldr r2, =_sidata
 8002188:	0800e0bc 	.word	0x0800e0bc
  ldr r2, =_sbss
 800218c:	20000358 	.word	0x20000358
  ldr r4, =_ebss
 8002190:	20001664 	.word	0x20001664

08002194 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002194:	e7fe      	b.n	8002194 <ADC1_2_IRQHandler>
	...

08002198 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800219c:	2200      	movs	r2, #0
 800219e:	4912      	ldr	r1, [pc, #72]	; (80021e8 <MX_USB_DEVICE_Init+0x50>)
 80021a0:	4812      	ldr	r0, [pc, #72]	; (80021ec <MX_USB_DEVICE_Init+0x54>)
 80021a2:	f007 fc3d 	bl	8009a20 <USBD_Init>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d001      	beq.n	80021b0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80021ac:	f7ff fd00 	bl	8001bb0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80021b0:	490f      	ldr	r1, [pc, #60]	; (80021f0 <MX_USB_DEVICE_Init+0x58>)
 80021b2:	480e      	ldr	r0, [pc, #56]	; (80021ec <MX_USB_DEVICE_Init+0x54>)
 80021b4:	f007 fc6c 	bl	8009a90 <USBD_RegisterClass>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d001      	beq.n	80021c2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80021be:	f7ff fcf7 	bl	8001bb0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80021c2:	490c      	ldr	r1, [pc, #48]	; (80021f4 <MX_USB_DEVICE_Init+0x5c>)
 80021c4:	4809      	ldr	r0, [pc, #36]	; (80021ec <MX_USB_DEVICE_Init+0x54>)
 80021c6:	f007 fb8f 	bl	80098e8 <USBD_CDC_RegisterInterface>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d001      	beq.n	80021d4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80021d0:	f7ff fcee 	bl	8001bb0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80021d4:	4805      	ldr	r0, [pc, #20]	; (80021ec <MX_USB_DEVICE_Init+0x54>)
 80021d6:	f007 fc81 	bl	8009adc <USBD_Start>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d001      	beq.n	80021e4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80021e0:	f7ff fce6 	bl	8001bb0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80021e4:	bf00      	nop
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	2000001c 	.word	0x2000001c
 80021ec:	200004b0 	.word	0x200004b0
 80021f0:	20000084 	.word	0x20000084
 80021f4:	2000000c 	.word	0x2000000c

080021f8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80021fc:	2200      	movs	r2, #0
 80021fe:	4905      	ldr	r1, [pc, #20]	; (8002214 <CDC_Init_FS+0x1c>)
 8002200:	4805      	ldr	r0, [pc, #20]	; (8002218 <CDC_Init_FS+0x20>)
 8002202:	f007 fb87 	bl	8009914 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8002206:	4905      	ldr	r1, [pc, #20]	; (800221c <CDC_Init_FS+0x24>)
 8002208:	4803      	ldr	r0, [pc, #12]	; (8002218 <CDC_Init_FS+0x20>)
 800220a:	f007 fb9c 	bl	8009946 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800220e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8002210:	4618      	mov	r0, r3
 8002212:	bd80      	pop	{r7, pc}
 8002214:	20000b5c 	.word	0x20000b5c
 8002218:	200004b0 	.word	0x200004b0
 800221c:	20000774 	.word	0x20000774

08002220 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8002224:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8002226:	4618      	mov	r0, r3
 8002228:	46bd      	mov	sp, r7
 800222a:	bc80      	pop	{r7}
 800222c:	4770      	bx	lr
	...

08002230 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	4603      	mov	r3, r0
 8002238:	6039      	str	r1, [r7, #0]
 800223a:	71fb      	strb	r3, [r7, #7]
 800223c:	4613      	mov	r3, r2
 800223e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8002240:	79fb      	ldrb	r3, [r7, #7]
 8002242:	2b23      	cmp	r3, #35	; 0x23
 8002244:	d84a      	bhi.n	80022dc <CDC_Control_FS+0xac>
 8002246:	a201      	add	r2, pc, #4	; (adr r2, 800224c <CDC_Control_FS+0x1c>)
 8002248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800224c:	080022dd 	.word	0x080022dd
 8002250:	080022dd 	.word	0x080022dd
 8002254:	080022dd 	.word	0x080022dd
 8002258:	080022dd 	.word	0x080022dd
 800225c:	080022dd 	.word	0x080022dd
 8002260:	080022dd 	.word	0x080022dd
 8002264:	080022dd 	.word	0x080022dd
 8002268:	080022dd 	.word	0x080022dd
 800226c:	080022dd 	.word	0x080022dd
 8002270:	080022dd 	.word	0x080022dd
 8002274:	080022dd 	.word	0x080022dd
 8002278:	080022dd 	.word	0x080022dd
 800227c:	080022dd 	.word	0x080022dd
 8002280:	080022dd 	.word	0x080022dd
 8002284:	080022dd 	.word	0x080022dd
 8002288:	080022dd 	.word	0x080022dd
 800228c:	080022dd 	.word	0x080022dd
 8002290:	080022dd 	.word	0x080022dd
 8002294:	080022dd 	.word	0x080022dd
 8002298:	080022dd 	.word	0x080022dd
 800229c:	080022dd 	.word	0x080022dd
 80022a0:	080022dd 	.word	0x080022dd
 80022a4:	080022dd 	.word	0x080022dd
 80022a8:	080022dd 	.word	0x080022dd
 80022ac:	080022dd 	.word	0x080022dd
 80022b0:	080022dd 	.word	0x080022dd
 80022b4:	080022dd 	.word	0x080022dd
 80022b8:	080022dd 	.word	0x080022dd
 80022bc:	080022dd 	.word	0x080022dd
 80022c0:	080022dd 	.word	0x080022dd
 80022c4:	080022dd 	.word	0x080022dd
 80022c8:	080022dd 	.word	0x080022dd
 80022cc:	080022dd 	.word	0x080022dd
 80022d0:	080022dd 	.word	0x080022dd
 80022d4:	080022dd 	.word	0x080022dd
 80022d8:	080022dd 	.word	0x080022dd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80022dc:	bf00      	nop
  }

  return (USBD_OK);
 80022de:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	370c      	adds	r7, #12
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bc80      	pop	{r7}
 80022e8:	4770      	bx	lr
 80022ea:	bf00      	nop

080022ec <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80022f6:	6879      	ldr	r1, [r7, #4]
 80022f8:	4805      	ldr	r0, [pc, #20]	; (8002310 <CDC_Receive_FS+0x24>)
 80022fa:	f007 fb24 	bl	8009946 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80022fe:	4804      	ldr	r0, [pc, #16]	; (8002310 <CDC_Receive_FS+0x24>)
 8002300:	f007 fb63 	bl	80099ca <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8002304:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8002306:	4618      	mov	r0, r3
 8002308:	3708      	adds	r7, #8
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	200004b0 	.word	0x200004b0

08002314 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b084      	sub	sp, #16
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	460b      	mov	r3, r1
 800231e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8002320:	2300      	movs	r3, #0
 8002322:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8002324:	4b0d      	ldr	r3, [pc, #52]	; (800235c <CDC_Transmit_FS+0x48>)
 8002326:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800232a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8002332:	2b00      	cmp	r3, #0
 8002334:	d001      	beq.n	800233a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8002336:	2301      	movs	r3, #1
 8002338:	e00b      	b.n	8002352 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800233a:	887b      	ldrh	r3, [r7, #2]
 800233c:	461a      	mov	r2, r3
 800233e:	6879      	ldr	r1, [r7, #4]
 8002340:	4806      	ldr	r0, [pc, #24]	; (800235c <CDC_Transmit_FS+0x48>)
 8002342:	f007 fae7 	bl	8009914 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8002346:	4805      	ldr	r0, [pc, #20]	; (800235c <CDC_Transmit_FS+0x48>)
 8002348:	f007 fb10 	bl	800996c <USBD_CDC_TransmitPacket>
 800234c:	4603      	mov	r3, r0
 800234e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8002350:	7bfb      	ldrb	r3, [r7, #15]
}
 8002352:	4618      	mov	r0, r3
 8002354:	3710      	adds	r7, #16
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	200004b0 	.word	0x200004b0

08002360 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	4603      	mov	r3, r0
 8002368:	6039      	str	r1, [r7, #0]
 800236a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	2212      	movs	r2, #18
 8002370:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8002372:	4b03      	ldr	r3, [pc, #12]	; (8002380 <USBD_FS_DeviceDescriptor+0x20>)
}
 8002374:	4618      	mov	r0, r3
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	bc80      	pop	{r7}
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	20000038 	.word	0x20000038

08002384 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	4603      	mov	r3, r0
 800238c:	6039      	str	r1, [r7, #0]
 800238e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	2204      	movs	r2, #4
 8002394:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8002396:	4b03      	ldr	r3, [pc, #12]	; (80023a4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8002398:	4618      	mov	r0, r3
 800239a:	370c      	adds	r7, #12
 800239c:	46bd      	mov	sp, r7
 800239e:	bc80      	pop	{r7}
 80023a0:	4770      	bx	lr
 80023a2:	bf00      	nop
 80023a4:	2000004c 	.word	0x2000004c

080023a8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	4603      	mov	r3, r0
 80023b0:	6039      	str	r1, [r7, #0]
 80023b2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80023b4:	79fb      	ldrb	r3, [r7, #7]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d105      	bne.n	80023c6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80023ba:	683a      	ldr	r2, [r7, #0]
 80023bc:	4907      	ldr	r1, [pc, #28]	; (80023dc <USBD_FS_ProductStrDescriptor+0x34>)
 80023be:	4808      	ldr	r0, [pc, #32]	; (80023e0 <USBD_FS_ProductStrDescriptor+0x38>)
 80023c0:	f008 fb04 	bl	800a9cc <USBD_GetString>
 80023c4:	e004      	b.n	80023d0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80023c6:	683a      	ldr	r2, [r7, #0]
 80023c8:	4904      	ldr	r1, [pc, #16]	; (80023dc <USBD_FS_ProductStrDescriptor+0x34>)
 80023ca:	4805      	ldr	r0, [pc, #20]	; (80023e0 <USBD_FS_ProductStrDescriptor+0x38>)
 80023cc:	f008 fafe 	bl	800a9cc <USBD_GetString>
  }
  return USBD_StrDesc;
 80023d0:	4b02      	ldr	r3, [pc, #8]	; (80023dc <USBD_FS_ProductStrDescriptor+0x34>)
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3708      	adds	r7, #8
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	20000f44 	.word	0x20000f44
 80023e0:	0800dad8 	.word	0x0800dad8

080023e4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	4603      	mov	r3, r0
 80023ec:	6039      	str	r1, [r7, #0]
 80023ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80023f0:	683a      	ldr	r2, [r7, #0]
 80023f2:	4904      	ldr	r1, [pc, #16]	; (8002404 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80023f4:	4804      	ldr	r0, [pc, #16]	; (8002408 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80023f6:	f008 fae9 	bl	800a9cc <USBD_GetString>
  return USBD_StrDesc;
 80023fa:	4b02      	ldr	r3, [pc, #8]	; (8002404 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3708      	adds	r7, #8
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	20000f44 	.word	0x20000f44
 8002408:	0800daf0 	.word	0x0800daf0

0800240c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	4603      	mov	r3, r0
 8002414:	6039      	str	r1, [r7, #0]
 8002416:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	221a      	movs	r2, #26
 800241c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800241e:	f000 f843 	bl	80024a8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8002422:	4b02      	ldr	r3, [pc, #8]	; (800242c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8002424:	4618      	mov	r0, r3
 8002426:	3708      	adds	r7, #8
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}
 800242c:	20000050 	.word	0x20000050

08002430 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	4603      	mov	r3, r0
 8002438:	6039      	str	r1, [r7, #0]
 800243a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800243c:	79fb      	ldrb	r3, [r7, #7]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d105      	bne.n	800244e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8002442:	683a      	ldr	r2, [r7, #0]
 8002444:	4907      	ldr	r1, [pc, #28]	; (8002464 <USBD_FS_ConfigStrDescriptor+0x34>)
 8002446:	4808      	ldr	r0, [pc, #32]	; (8002468 <USBD_FS_ConfigStrDescriptor+0x38>)
 8002448:	f008 fac0 	bl	800a9cc <USBD_GetString>
 800244c:	e004      	b.n	8002458 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800244e:	683a      	ldr	r2, [r7, #0]
 8002450:	4904      	ldr	r1, [pc, #16]	; (8002464 <USBD_FS_ConfigStrDescriptor+0x34>)
 8002452:	4805      	ldr	r0, [pc, #20]	; (8002468 <USBD_FS_ConfigStrDescriptor+0x38>)
 8002454:	f008 faba 	bl	800a9cc <USBD_GetString>
  }
  return USBD_StrDesc;
 8002458:	4b02      	ldr	r3, [pc, #8]	; (8002464 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800245a:	4618      	mov	r0, r3
 800245c:	3708      	adds	r7, #8
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	20000f44 	.word	0x20000f44
 8002468:	0800db04 	.word	0x0800db04

0800246c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	4603      	mov	r3, r0
 8002474:	6039      	str	r1, [r7, #0]
 8002476:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8002478:	79fb      	ldrb	r3, [r7, #7]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d105      	bne.n	800248a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800247e:	683a      	ldr	r2, [r7, #0]
 8002480:	4907      	ldr	r1, [pc, #28]	; (80024a0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8002482:	4808      	ldr	r0, [pc, #32]	; (80024a4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8002484:	f008 faa2 	bl	800a9cc <USBD_GetString>
 8002488:	e004      	b.n	8002494 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800248a:	683a      	ldr	r2, [r7, #0]
 800248c:	4904      	ldr	r1, [pc, #16]	; (80024a0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800248e:	4805      	ldr	r0, [pc, #20]	; (80024a4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8002490:	f008 fa9c 	bl	800a9cc <USBD_GetString>
  }
  return USBD_StrDesc;
 8002494:	4b02      	ldr	r3, [pc, #8]	; (80024a0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8002496:	4618      	mov	r0, r3
 8002498:	3708      	adds	r7, #8
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	20000f44 	.word	0x20000f44
 80024a4:	0800db10 	.word	0x0800db10

080024a8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80024ae:	4b0f      	ldr	r3, [pc, #60]	; (80024ec <Get_SerialNum+0x44>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80024b4:	4b0e      	ldr	r3, [pc, #56]	; (80024f0 <Get_SerialNum+0x48>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80024ba:	4b0e      	ldr	r3, [pc, #56]	; (80024f4 <Get_SerialNum+0x4c>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80024c0:	68fa      	ldr	r2, [r7, #12]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4413      	add	r3, r2
 80024c6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d009      	beq.n	80024e2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80024ce:	2208      	movs	r2, #8
 80024d0:	4909      	ldr	r1, [pc, #36]	; (80024f8 <Get_SerialNum+0x50>)
 80024d2:	68f8      	ldr	r0, [r7, #12]
 80024d4:	f000 f814 	bl	8002500 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80024d8:	2204      	movs	r2, #4
 80024da:	4908      	ldr	r1, [pc, #32]	; (80024fc <Get_SerialNum+0x54>)
 80024dc:	68b8      	ldr	r0, [r7, #8]
 80024de:	f000 f80f 	bl	8002500 <IntToUnicode>
  }
}
 80024e2:	bf00      	nop
 80024e4:	3710      	adds	r7, #16
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	1ffff7e8 	.word	0x1ffff7e8
 80024f0:	1ffff7ec 	.word	0x1ffff7ec
 80024f4:	1ffff7f0 	.word	0x1ffff7f0
 80024f8:	20000052 	.word	0x20000052
 80024fc:	20000062 	.word	0x20000062

08002500 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8002500:	b480      	push	{r7}
 8002502:	b087      	sub	sp, #28
 8002504:	af00      	add	r7, sp, #0
 8002506:	60f8      	str	r0, [r7, #12]
 8002508:	60b9      	str	r1, [r7, #8]
 800250a:	4613      	mov	r3, r2
 800250c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800250e:	2300      	movs	r3, #0
 8002510:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8002512:	2300      	movs	r3, #0
 8002514:	75fb      	strb	r3, [r7, #23]
 8002516:	e027      	b.n	8002568 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	0f1b      	lsrs	r3, r3, #28
 800251c:	2b09      	cmp	r3, #9
 800251e:	d80b      	bhi.n	8002538 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	0f1b      	lsrs	r3, r3, #28
 8002524:	b2da      	uxtb	r2, r3
 8002526:	7dfb      	ldrb	r3, [r7, #23]
 8002528:	005b      	lsls	r3, r3, #1
 800252a:	4619      	mov	r1, r3
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	440b      	add	r3, r1
 8002530:	3230      	adds	r2, #48	; 0x30
 8002532:	b2d2      	uxtb	r2, r2
 8002534:	701a      	strb	r2, [r3, #0]
 8002536:	e00a      	b.n	800254e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	0f1b      	lsrs	r3, r3, #28
 800253c:	b2da      	uxtb	r2, r3
 800253e:	7dfb      	ldrb	r3, [r7, #23]
 8002540:	005b      	lsls	r3, r3, #1
 8002542:	4619      	mov	r1, r3
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	440b      	add	r3, r1
 8002548:	3237      	adds	r2, #55	; 0x37
 800254a:	b2d2      	uxtb	r2, r2
 800254c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	011b      	lsls	r3, r3, #4
 8002552:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8002554:	7dfb      	ldrb	r3, [r7, #23]
 8002556:	005b      	lsls	r3, r3, #1
 8002558:	3301      	adds	r3, #1
 800255a:	68ba      	ldr	r2, [r7, #8]
 800255c:	4413      	add	r3, r2
 800255e:	2200      	movs	r2, #0
 8002560:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8002562:	7dfb      	ldrb	r3, [r7, #23]
 8002564:	3301      	adds	r3, #1
 8002566:	75fb      	strb	r3, [r7, #23]
 8002568:	7dfa      	ldrb	r2, [r7, #23]
 800256a:	79fb      	ldrb	r3, [r7, #7]
 800256c:	429a      	cmp	r2, r3
 800256e:	d3d3      	bcc.n	8002518 <IntToUnicode+0x18>
  }
}
 8002570:	bf00      	nop
 8002572:	bf00      	nop
 8002574:	371c      	adds	r7, #28
 8002576:	46bd      	mov	sp, r7
 8002578:	bc80      	pop	{r7}
 800257a:	4770      	bx	lr

0800257c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a11      	ldr	r2, [pc, #68]	; (80025d0 <HAL_PCD_MspInit+0x54>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d11b      	bne.n	80025c6 <HAL_PCD_MspInit+0x4a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800258e:	4b11      	ldr	r3, [pc, #68]	; (80025d4 <HAL_PCD_MspInit+0x58>)
 8002590:	69db      	ldr	r3, [r3, #28]
 8002592:	4a10      	ldr	r2, [pc, #64]	; (80025d4 <HAL_PCD_MspInit+0x58>)
 8002594:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002598:	61d3      	str	r3, [r2, #28]
 800259a:	4b0e      	ldr	r3, [pc, #56]	; (80025d4 <HAL_PCD_MspInit+0x58>)
 800259c:	69db      	ldr	r3, [r3, #28]
 800259e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80025a2:	60fb      	str	r3, [r7, #12]
 80025a4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 80025a6:	2200      	movs	r2, #0
 80025a8:	2100      	movs	r1, #0
 80025aa:	2013      	movs	r0, #19
 80025ac:	f000 fbfb 	bl	8002da6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 80025b0:	2013      	movs	r0, #19
 80025b2:	f000 fc14 	bl	8002dde <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80025b6:	2200      	movs	r2, #0
 80025b8:	2100      	movs	r1, #0
 80025ba:	2014      	movs	r0, #20
 80025bc:	f000 fbf3 	bl	8002da6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80025c0:	2014      	movs	r0, #20
 80025c2:	f000 fc0c 	bl	8002dde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80025c6:	bf00      	nop
 80025c8:	3710      	adds	r7, #16
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	40005c00 	.word	0x40005c00
 80025d4:	40021000 	.word	0x40021000

080025d8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80025ec:	4619      	mov	r1, r3
 80025ee:	4610      	mov	r0, r2
 80025f0:	f007 fabc 	bl	8009b6c <USBD_LL_SetupStage>
}
 80025f4:	bf00      	nop
 80025f6:	3708      	adds	r7, #8
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}

080025fc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	460b      	mov	r3, r1
 8002606:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800260e:	78fa      	ldrb	r2, [r7, #3]
 8002610:	6879      	ldr	r1, [r7, #4]
 8002612:	4613      	mov	r3, r2
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	4413      	add	r3, r2
 8002618:	00db      	lsls	r3, r3, #3
 800261a:	440b      	add	r3, r1
 800261c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	78fb      	ldrb	r3, [r7, #3]
 8002624:	4619      	mov	r1, r3
 8002626:	f007 faee 	bl	8009c06 <USBD_LL_DataOutStage>
}
 800262a:	bf00      	nop
 800262c:	3708      	adds	r7, #8
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}

08002632 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8002632:	b580      	push	{r7, lr}
 8002634:	b082      	sub	sp, #8
 8002636:	af00      	add	r7, sp, #0
 8002638:	6078      	str	r0, [r7, #4]
 800263a:	460b      	mov	r3, r1
 800263c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8002644:	78fa      	ldrb	r2, [r7, #3]
 8002646:	6879      	ldr	r1, [r7, #4]
 8002648:	4613      	mov	r3, r2
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	4413      	add	r3, r2
 800264e:	00db      	lsls	r3, r3, #3
 8002650:	440b      	add	r3, r1
 8002652:	333c      	adds	r3, #60	; 0x3c
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	78fb      	ldrb	r3, [r7, #3]
 8002658:	4619      	mov	r1, r3
 800265a:	f007 fb45 	bl	8009ce8 <USBD_LL_DataInStage>
}
 800265e:	bf00      	nop
 8002660:	3708      	adds	r7, #8
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}

08002666 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8002666:	b580      	push	{r7, lr}
 8002668:	b082      	sub	sp, #8
 800266a:	af00      	add	r7, sp, #0
 800266c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8002674:	4618      	mov	r0, r3
 8002676:	f007 fc55 	bl	8009f24 <USBD_LL_SOF>
}
 800267a:	bf00      	nop
 800267c:	3708      	adds	r7, #8
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}

08002682 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8002682:	b580      	push	{r7, lr}
 8002684:	b084      	sub	sp, #16
 8002686:	af00      	add	r7, sp, #0
 8002688:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800268a:	2301      	movs	r3, #1
 800268c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	2b02      	cmp	r3, #2
 8002694:	d001      	beq.n	800269a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8002696:	f7ff fa8b 	bl	8001bb0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80026a0:	7bfa      	ldrb	r2, [r7, #15]
 80026a2:	4611      	mov	r1, r2
 80026a4:	4618      	mov	r0, r3
 80026a6:	f007 fc05 	bl	8009eb4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80026b0:	4618      	mov	r0, r3
 80026b2:	f007 fbbe 	bl	8009e32 <USBD_LL_Reset>
}
 80026b6:	bf00      	nop
 80026b8:	3710      	adds	r7, #16
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
	...

080026c0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80026ce:	4618      	mov	r0, r3
 80026d0:	f007 fbff 	bl	8009ed2 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	699b      	ldr	r3, [r3, #24]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d005      	beq.n	80026e8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80026dc:	4b04      	ldr	r3, [pc, #16]	; (80026f0 <HAL_PCD_SuspendCallback+0x30>)
 80026de:	691b      	ldr	r3, [r3, #16]
 80026e0:	4a03      	ldr	r2, [pc, #12]	; (80026f0 <HAL_PCD_SuspendCallback+0x30>)
 80026e2:	f043 0306 	orr.w	r3, r3, #6
 80026e6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80026e8:	bf00      	nop
 80026ea:	3708      	adds	r7, #8
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	e000ed00 	.word	0xe000ed00

080026f4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8002702:	4618      	mov	r0, r3
 8002704:	f007 fbf9 	bl	8009efa <USBD_LL_Resume>
}
 8002708:	bf00      	nop
 800270a:	3708      	adds	r7, #8
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}

08002710 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8002718:	4a28      	ldr	r2, [pc, #160]	; (80027bc <USBD_LL_Init+0xac>)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	4a26      	ldr	r2, [pc, #152]	; (80027bc <USBD_LL_Init+0xac>)
 8002724:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8002728:	4b24      	ldr	r3, [pc, #144]	; (80027bc <USBD_LL_Init+0xac>)
 800272a:	4a25      	ldr	r2, [pc, #148]	; (80027c0 <USBD_LL_Init+0xb0>)
 800272c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800272e:	4b23      	ldr	r3, [pc, #140]	; (80027bc <USBD_LL_Init+0xac>)
 8002730:	2208      	movs	r2, #8
 8002732:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8002734:	4b21      	ldr	r3, [pc, #132]	; (80027bc <USBD_LL_Init+0xac>)
 8002736:	2202      	movs	r2, #2
 8002738:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800273a:	4b20      	ldr	r3, [pc, #128]	; (80027bc <USBD_LL_Init+0xac>)
 800273c:	2200      	movs	r2, #0
 800273e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8002740:	4b1e      	ldr	r3, [pc, #120]	; (80027bc <USBD_LL_Init+0xac>)
 8002742:	2200      	movs	r2, #0
 8002744:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8002746:	4b1d      	ldr	r3, [pc, #116]	; (80027bc <USBD_LL_Init+0xac>)
 8002748:	2200      	movs	r2, #0
 800274a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800274c:	481b      	ldr	r0, [pc, #108]	; (80027bc <USBD_LL_Init+0xac>)
 800274e:	f000 fd14 	bl	800317a <HAL_PCD_Init>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d001      	beq.n	800275c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8002758:	f7ff fa2a 	bl	8001bb0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8002762:	2318      	movs	r3, #24
 8002764:	2200      	movs	r2, #0
 8002766:	2100      	movs	r1, #0
 8002768:	f002 f988 	bl	8004a7c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8002772:	2358      	movs	r3, #88	; 0x58
 8002774:	2200      	movs	r2, #0
 8002776:	2180      	movs	r1, #128	; 0x80
 8002778:	f002 f980 	bl	8004a7c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8002782:	23c0      	movs	r3, #192	; 0xc0
 8002784:	2200      	movs	r2, #0
 8002786:	2181      	movs	r1, #129	; 0x81
 8002788:	f002 f978 	bl	8004a7c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8002792:	f44f 7388 	mov.w	r3, #272	; 0x110
 8002796:	2200      	movs	r2, #0
 8002798:	2101      	movs	r1, #1
 800279a:	f002 f96f 	bl	8004a7c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80027a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027a8:	2200      	movs	r2, #0
 80027aa:	2182      	movs	r1, #130	; 0x82
 80027ac:	f002 f966 	bl	8004a7c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80027b0:	2300      	movs	r3, #0
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3708      	adds	r7, #8
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	20001144 	.word	0x20001144
 80027c0:	40005c00 	.word	0x40005c00

080027c4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80027cc:	2300      	movs	r3, #0
 80027ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80027d0:	2300      	movs	r3, #0
 80027d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80027da:	4618      	mov	r0, r3
 80027dc:	f000 fdd8 	bl	8003390 <HAL_PCD_Start>
 80027e0:	4603      	mov	r3, r0
 80027e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80027e4:	7bfb      	ldrb	r3, [r7, #15]
 80027e6:	4618      	mov	r0, r3
 80027e8:	f000 f94e 	bl	8002a88 <USBD_Get_USB_Status>
 80027ec:	4603      	mov	r3, r0
 80027ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80027f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3710      	adds	r7, #16
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}

080027fa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80027fa:	b580      	push	{r7, lr}
 80027fc:	b084      	sub	sp, #16
 80027fe:	af00      	add	r7, sp, #0
 8002800:	6078      	str	r0, [r7, #4]
 8002802:	4608      	mov	r0, r1
 8002804:	4611      	mov	r1, r2
 8002806:	461a      	mov	r2, r3
 8002808:	4603      	mov	r3, r0
 800280a:	70fb      	strb	r3, [r7, #3]
 800280c:	460b      	mov	r3, r1
 800280e:	70bb      	strb	r3, [r7, #2]
 8002810:	4613      	mov	r3, r2
 8002812:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8002814:	2300      	movs	r3, #0
 8002816:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8002818:	2300      	movs	r3, #0
 800281a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8002822:	78bb      	ldrb	r3, [r7, #2]
 8002824:	883a      	ldrh	r2, [r7, #0]
 8002826:	78f9      	ldrb	r1, [r7, #3]
 8002828:	f000 ff50 	bl	80036cc <HAL_PCD_EP_Open>
 800282c:	4603      	mov	r3, r0
 800282e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8002830:	7bfb      	ldrb	r3, [r7, #15]
 8002832:	4618      	mov	r0, r3
 8002834:	f000 f928 	bl	8002a88 <USBD_Get_USB_Status>
 8002838:	4603      	mov	r3, r0
 800283a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800283c:	7bbb      	ldrb	r3, [r7, #14]
}
 800283e:	4618      	mov	r0, r3
 8002840:	3710      	adds	r7, #16
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}

08002846 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8002846:	b580      	push	{r7, lr}
 8002848:	b084      	sub	sp, #16
 800284a:	af00      	add	r7, sp, #0
 800284c:	6078      	str	r0, [r7, #4]
 800284e:	460b      	mov	r3, r1
 8002850:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8002852:	2300      	movs	r3, #0
 8002854:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8002856:	2300      	movs	r3, #0
 8002858:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8002860:	78fa      	ldrb	r2, [r7, #3]
 8002862:	4611      	mov	r1, r2
 8002864:	4618      	mov	r0, r3
 8002866:	f000 ff97 	bl	8003798 <HAL_PCD_EP_Close>
 800286a:	4603      	mov	r3, r0
 800286c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800286e:	7bfb      	ldrb	r3, [r7, #15]
 8002870:	4618      	mov	r0, r3
 8002872:	f000 f909 	bl	8002a88 <USBD_Get_USB_Status>
 8002876:	4603      	mov	r3, r0
 8002878:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800287a:	7bbb      	ldrb	r3, [r7, #14]
}
 800287c:	4618      	mov	r0, r3
 800287e:	3710      	adds	r7, #16
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}

08002884 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	460b      	mov	r3, r1
 800288e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8002890:	2300      	movs	r3, #0
 8002892:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8002894:	2300      	movs	r3, #0
 8002896:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800289e:	78fa      	ldrb	r2, [r7, #3]
 80028a0:	4611      	mov	r1, r2
 80028a2:	4618      	mov	r0, r3
 80028a4:	f001 f857 	bl	8003956 <HAL_PCD_EP_SetStall>
 80028a8:	4603      	mov	r3, r0
 80028aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80028ac:	7bfb      	ldrb	r3, [r7, #15]
 80028ae:	4618      	mov	r0, r3
 80028b0:	f000 f8ea 	bl	8002a88 <USBD_Get_USB_Status>
 80028b4:	4603      	mov	r3, r0
 80028b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80028b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3710      	adds	r7, #16
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}

080028c2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80028c2:	b580      	push	{r7, lr}
 80028c4:	b084      	sub	sp, #16
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]
 80028ca:	460b      	mov	r3, r1
 80028cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80028ce:	2300      	movs	r3, #0
 80028d0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80028d2:	2300      	movs	r3, #0
 80028d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80028dc:	78fa      	ldrb	r2, [r7, #3]
 80028de:	4611      	mov	r1, r2
 80028e0:	4618      	mov	r0, r3
 80028e2:	f001 f898 	bl	8003a16 <HAL_PCD_EP_ClrStall>
 80028e6:	4603      	mov	r3, r0
 80028e8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80028ea:	7bfb      	ldrb	r3, [r7, #15]
 80028ec:	4618      	mov	r0, r3
 80028ee:	f000 f8cb 	bl	8002a88 <USBD_Get_USB_Status>
 80028f2:	4603      	mov	r3, r0
 80028f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80028f6:	7bbb      	ldrb	r3, [r7, #14]
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3710      	adds	r7, #16
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}

08002900 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8002900:	b480      	push	{r7}
 8002902:	b085      	sub	sp, #20
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	460b      	mov	r3, r1
 800290a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8002912:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8002914:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002918:	2b00      	cmp	r3, #0
 800291a:	da0c      	bge.n	8002936 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800291c:	78fb      	ldrb	r3, [r7, #3]
 800291e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002922:	68f9      	ldr	r1, [r7, #12]
 8002924:	1c5a      	adds	r2, r3, #1
 8002926:	4613      	mov	r3, r2
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	4413      	add	r3, r2
 800292c:	00db      	lsls	r3, r3, #3
 800292e:	440b      	add	r3, r1
 8002930:	3302      	adds	r3, #2
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	e00b      	b.n	800294e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8002936:	78fb      	ldrb	r3, [r7, #3]
 8002938:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800293c:	68f9      	ldr	r1, [r7, #12]
 800293e:	4613      	mov	r3, r2
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	4413      	add	r3, r2
 8002944:	00db      	lsls	r3, r3, #3
 8002946:	440b      	add	r3, r1
 8002948:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800294c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800294e:	4618      	mov	r0, r3
 8002950:	3714      	adds	r7, #20
 8002952:	46bd      	mov	sp, r7
 8002954:	bc80      	pop	{r7}
 8002956:	4770      	bx	lr

08002958 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	460b      	mov	r3, r1
 8002962:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8002964:	2300      	movs	r3, #0
 8002966:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8002968:	2300      	movs	r3, #0
 800296a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8002972:	78fa      	ldrb	r2, [r7, #3]
 8002974:	4611      	mov	r1, r2
 8002976:	4618      	mov	r0, r3
 8002978:	f000 fe83 	bl	8003682 <HAL_PCD_SetAddress>
 800297c:	4603      	mov	r3, r0
 800297e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8002980:	7bfb      	ldrb	r3, [r7, #15]
 8002982:	4618      	mov	r0, r3
 8002984:	f000 f880 	bl	8002a88 <USBD_Get_USB_Status>
 8002988:	4603      	mov	r3, r0
 800298a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800298c:	7bbb      	ldrb	r3, [r7, #14]
}
 800298e:	4618      	mov	r0, r3
 8002990:	3710      	adds	r7, #16
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}

08002996 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8002996:	b580      	push	{r7, lr}
 8002998:	b086      	sub	sp, #24
 800299a:	af00      	add	r7, sp, #0
 800299c:	60f8      	str	r0, [r7, #12]
 800299e:	607a      	str	r2, [r7, #4]
 80029a0:	461a      	mov	r2, r3
 80029a2:	460b      	mov	r3, r1
 80029a4:	72fb      	strb	r3, [r7, #11]
 80029a6:	4613      	mov	r3, r2
 80029a8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80029aa:	2300      	movs	r3, #0
 80029ac:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80029ae:	2300      	movs	r3, #0
 80029b0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80029b8:	893b      	ldrh	r3, [r7, #8]
 80029ba:	7af9      	ldrb	r1, [r7, #11]
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	f000 ff87 	bl	80038d0 <HAL_PCD_EP_Transmit>
 80029c2:	4603      	mov	r3, r0
 80029c4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80029c6:	7dfb      	ldrb	r3, [r7, #23]
 80029c8:	4618      	mov	r0, r3
 80029ca:	f000 f85d 	bl	8002a88 <USBD_Get_USB_Status>
 80029ce:	4603      	mov	r3, r0
 80029d0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80029d2:	7dbb      	ldrb	r3, [r7, #22]
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3718      	adds	r7, #24
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}

080029dc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b086      	sub	sp, #24
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	60f8      	str	r0, [r7, #12]
 80029e4:	607a      	str	r2, [r7, #4]
 80029e6:	461a      	mov	r2, r3
 80029e8:	460b      	mov	r3, r1
 80029ea:	72fb      	strb	r3, [r7, #11]
 80029ec:	4613      	mov	r3, r2
 80029ee:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80029f0:	2300      	movs	r3, #0
 80029f2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80029f4:	2300      	movs	r3, #0
 80029f6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80029fe:	893b      	ldrh	r3, [r7, #8]
 8002a00:	7af9      	ldrb	r1, [r7, #11]
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	f000 ff10 	bl	8003828 <HAL_PCD_EP_Receive>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8002a0c:	7dfb      	ldrb	r3, [r7, #23]
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f000 f83a 	bl	8002a88 <USBD_Get_USB_Status>
 8002a14:	4603      	mov	r3, r0
 8002a16:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8002a18:	7dbb      	ldrb	r3, [r7, #22]
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3718      	adds	r7, #24
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}

08002a22 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8002a22:	b580      	push	{r7, lr}
 8002a24:	b082      	sub	sp, #8
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]
 8002a2a:	460b      	mov	r3, r1
 8002a2c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8002a34:	78fa      	ldrb	r2, [r7, #3]
 8002a36:	4611      	mov	r1, r2
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f000 ff32 	bl	80038a2 <HAL_PCD_EP_GetRxCount>
 8002a3e:	4603      	mov	r3, r0
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3708      	adds	r7, #8
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8002a50:	4b02      	ldr	r3, [pc, #8]	; (8002a5c <USBD_static_malloc+0x14>)
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	370c      	adds	r7, #12
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bc80      	pop	{r7}
 8002a5a:	4770      	bx	lr
 8002a5c:	20001430 	.word	0x20001430

08002a60 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]

}
 8002a68:	bf00      	nop
 8002a6a:	370c      	adds	r7, #12
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bc80      	pop	{r7}
 8002a70:	4770      	bx	lr

08002a72 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8002a72:	b480      	push	{r7}
 8002a74:	b083      	sub	sp, #12
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]
 8002a7a:	460b      	mov	r3, r1
 8002a7c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8002a7e:	bf00      	nop
 8002a80:	370c      	adds	r7, #12
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bc80      	pop	{r7}
 8002a86:	4770      	bx	lr

08002a88 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b085      	sub	sp, #20
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	4603      	mov	r3, r0
 8002a90:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8002a92:	2300      	movs	r3, #0
 8002a94:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8002a96:	79fb      	ldrb	r3, [r7, #7]
 8002a98:	2b03      	cmp	r3, #3
 8002a9a:	d817      	bhi.n	8002acc <USBD_Get_USB_Status+0x44>
 8002a9c:	a201      	add	r2, pc, #4	; (adr r2, 8002aa4 <USBD_Get_USB_Status+0x1c>)
 8002a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aa2:	bf00      	nop
 8002aa4:	08002ab5 	.word	0x08002ab5
 8002aa8:	08002abb 	.word	0x08002abb
 8002aac:	08002ac1 	.word	0x08002ac1
 8002ab0:	08002ac7 	.word	0x08002ac7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	73fb      	strb	r3, [r7, #15]
    break;
 8002ab8:	e00b      	b.n	8002ad2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8002aba:	2302      	movs	r3, #2
 8002abc:	73fb      	strb	r3, [r7, #15]
    break;
 8002abe:	e008      	b.n	8002ad2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	73fb      	strb	r3, [r7, #15]
    break;
 8002ac4:	e005      	b.n	8002ad2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8002ac6:	2302      	movs	r3, #2
 8002ac8:	73fb      	strb	r3, [r7, #15]
    break;
 8002aca:	e002      	b.n	8002ad2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8002acc:	2302      	movs	r3, #2
 8002ace:	73fb      	strb	r3, [r7, #15]
    break;
 8002ad0:	bf00      	nop
  }
  return usb_status;
 8002ad2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3714      	adds	r7, #20
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bc80      	pop	{r7}
 8002adc:	4770      	bx	lr
 8002ade:	bf00      	nop

08002ae0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ae4:	bf00      	nop
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bc80      	pop	{r7}
 8002aea:	4770      	bx	lr

08002aec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002af0:	4b08      	ldr	r3, [pc, #32]	; (8002b14 <HAL_Init+0x28>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a07      	ldr	r2, [pc, #28]	; (8002b14 <HAL_Init+0x28>)
 8002af6:	f043 0310 	orr.w	r3, r3, #16
 8002afa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002afc:	2003      	movs	r0, #3
 8002afe:	f000 f947 	bl	8002d90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b02:	200f      	movs	r0, #15
 8002b04:	f000 f808 	bl	8002b18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b08:	f7ff f858 	bl	8001bbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b0c:	2300      	movs	r3, #0
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	40022000 	.word	0x40022000

08002b18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b20:	4b12      	ldr	r3, [pc, #72]	; (8002b6c <HAL_InitTick+0x54>)
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	4b12      	ldr	r3, [pc, #72]	; (8002b70 <HAL_InitTick+0x58>)
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	4619      	mov	r1, r3
 8002b2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b32:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b36:	4618      	mov	r0, r3
 8002b38:	f000 f95f 	bl	8002dfa <HAL_SYSTICK_Config>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d001      	beq.n	8002b46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e00e      	b.n	8002b64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2b0f      	cmp	r3, #15
 8002b4a:	d80a      	bhi.n	8002b62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	6879      	ldr	r1, [r7, #4]
 8002b50:	f04f 30ff 	mov.w	r0, #4294967295
 8002b54:	f000 f927 	bl	8002da6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b58:	4a06      	ldr	r2, [pc, #24]	; (8002b74 <HAL_InitTick+0x5c>)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	e000      	b.n	8002b64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3708      	adds	r7, #8
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	2000006c 	.word	0x2000006c
 8002b70:	20000074 	.word	0x20000074
 8002b74:	20000070 	.word	0x20000070

08002b78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b7c:	4b05      	ldr	r3, [pc, #20]	; (8002b94 <HAL_IncTick+0x1c>)
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	461a      	mov	r2, r3
 8002b82:	4b05      	ldr	r3, [pc, #20]	; (8002b98 <HAL_IncTick+0x20>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4413      	add	r3, r2
 8002b88:	4a03      	ldr	r2, [pc, #12]	; (8002b98 <HAL_IncTick+0x20>)
 8002b8a:	6013      	str	r3, [r2, #0]
}
 8002b8c:	bf00      	nop
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bc80      	pop	{r7}
 8002b92:	4770      	bx	lr
 8002b94:	20000074 	.word	0x20000074
 8002b98:	20001650 	.word	0x20001650

08002b9c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	af00      	add	r7, sp, #0
  return uwTick;
 8002ba0:	4b02      	ldr	r3, [pc, #8]	; (8002bac <HAL_GetTick+0x10>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bc80      	pop	{r7}
 8002baa:	4770      	bx	lr
 8002bac:	20001650 	.word	0x20001650

08002bb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bb8:	f7ff fff0 	bl	8002b9c <HAL_GetTick>
 8002bbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bc8:	d005      	beq.n	8002bd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002bca:	4b0a      	ldr	r3, [pc, #40]	; (8002bf4 <HAL_Delay+0x44>)
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	461a      	mov	r2, r3
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	4413      	add	r3, r2
 8002bd4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002bd6:	bf00      	nop
 8002bd8:	f7ff ffe0 	bl	8002b9c <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	68fa      	ldr	r2, [r7, #12]
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d8f7      	bhi.n	8002bd8 <HAL_Delay+0x28>
  {
  }
}
 8002be8:	bf00      	nop
 8002bea:	bf00      	nop
 8002bec:	3710      	adds	r7, #16
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	20000074 	.word	0x20000074

08002bf8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b085      	sub	sp, #20
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f003 0307 	and.w	r3, r3, #7
 8002c06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c08:	4b0c      	ldr	r3, [pc, #48]	; (8002c3c <__NVIC_SetPriorityGrouping+0x44>)
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c0e:	68ba      	ldr	r2, [r7, #8]
 8002c10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c14:	4013      	ands	r3, r2
 8002c16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c2a:	4a04      	ldr	r2, [pc, #16]	; (8002c3c <__NVIC_SetPriorityGrouping+0x44>)
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	60d3      	str	r3, [r2, #12]
}
 8002c30:	bf00      	nop
 8002c32:	3714      	adds	r7, #20
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bc80      	pop	{r7}
 8002c38:	4770      	bx	lr
 8002c3a:	bf00      	nop
 8002c3c:	e000ed00 	.word	0xe000ed00

08002c40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c40:	b480      	push	{r7}
 8002c42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c44:	4b04      	ldr	r3, [pc, #16]	; (8002c58 <__NVIC_GetPriorityGrouping+0x18>)
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	0a1b      	lsrs	r3, r3, #8
 8002c4a:	f003 0307 	and.w	r3, r3, #7
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bc80      	pop	{r7}
 8002c54:	4770      	bx	lr
 8002c56:	bf00      	nop
 8002c58:	e000ed00 	.word	0xe000ed00

08002c5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	4603      	mov	r3, r0
 8002c64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	db0b      	blt.n	8002c86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c6e:	79fb      	ldrb	r3, [r7, #7]
 8002c70:	f003 021f 	and.w	r2, r3, #31
 8002c74:	4906      	ldr	r1, [pc, #24]	; (8002c90 <__NVIC_EnableIRQ+0x34>)
 8002c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c7a:	095b      	lsrs	r3, r3, #5
 8002c7c:	2001      	movs	r0, #1
 8002c7e:	fa00 f202 	lsl.w	r2, r0, r2
 8002c82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c86:	bf00      	nop
 8002c88:	370c      	adds	r7, #12
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bc80      	pop	{r7}
 8002c8e:	4770      	bx	lr
 8002c90:	e000e100 	.word	0xe000e100

08002c94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	6039      	str	r1, [r7, #0]
 8002c9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ca0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	db0a      	blt.n	8002cbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	b2da      	uxtb	r2, r3
 8002cac:	490c      	ldr	r1, [pc, #48]	; (8002ce0 <__NVIC_SetPriority+0x4c>)
 8002cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cb2:	0112      	lsls	r2, r2, #4
 8002cb4:	b2d2      	uxtb	r2, r2
 8002cb6:	440b      	add	r3, r1
 8002cb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cbc:	e00a      	b.n	8002cd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	b2da      	uxtb	r2, r3
 8002cc2:	4908      	ldr	r1, [pc, #32]	; (8002ce4 <__NVIC_SetPriority+0x50>)
 8002cc4:	79fb      	ldrb	r3, [r7, #7]
 8002cc6:	f003 030f 	and.w	r3, r3, #15
 8002cca:	3b04      	subs	r3, #4
 8002ccc:	0112      	lsls	r2, r2, #4
 8002cce:	b2d2      	uxtb	r2, r2
 8002cd0:	440b      	add	r3, r1
 8002cd2:	761a      	strb	r2, [r3, #24]
}
 8002cd4:	bf00      	nop
 8002cd6:	370c      	adds	r7, #12
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bc80      	pop	{r7}
 8002cdc:	4770      	bx	lr
 8002cde:	bf00      	nop
 8002ce0:	e000e100 	.word	0xe000e100
 8002ce4:	e000ed00 	.word	0xe000ed00

08002ce8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b089      	sub	sp, #36	; 0x24
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	60b9      	str	r1, [r7, #8]
 8002cf2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f003 0307 	and.w	r3, r3, #7
 8002cfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	f1c3 0307 	rsb	r3, r3, #7
 8002d02:	2b04      	cmp	r3, #4
 8002d04:	bf28      	it	cs
 8002d06:	2304      	movcs	r3, #4
 8002d08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	3304      	adds	r3, #4
 8002d0e:	2b06      	cmp	r3, #6
 8002d10:	d902      	bls.n	8002d18 <NVIC_EncodePriority+0x30>
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	3b03      	subs	r3, #3
 8002d16:	e000      	b.n	8002d1a <NVIC_EncodePriority+0x32>
 8002d18:	2300      	movs	r3, #0
 8002d1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d1c:	f04f 32ff 	mov.w	r2, #4294967295
 8002d20:	69bb      	ldr	r3, [r7, #24]
 8002d22:	fa02 f303 	lsl.w	r3, r2, r3
 8002d26:	43da      	mvns	r2, r3
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	401a      	ands	r2, r3
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d30:	f04f 31ff 	mov.w	r1, #4294967295
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	fa01 f303 	lsl.w	r3, r1, r3
 8002d3a:	43d9      	mvns	r1, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d40:	4313      	orrs	r3, r2
         );
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3724      	adds	r7, #36	; 0x24
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bc80      	pop	{r7}
 8002d4a:	4770      	bx	lr

08002d4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b082      	sub	sp, #8
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	3b01      	subs	r3, #1
 8002d58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d5c:	d301      	bcc.n	8002d62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e00f      	b.n	8002d82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d62:	4a0a      	ldr	r2, [pc, #40]	; (8002d8c <SysTick_Config+0x40>)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	3b01      	subs	r3, #1
 8002d68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d6a:	210f      	movs	r1, #15
 8002d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d70:	f7ff ff90 	bl	8002c94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d74:	4b05      	ldr	r3, [pc, #20]	; (8002d8c <SysTick_Config+0x40>)
 8002d76:	2200      	movs	r2, #0
 8002d78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d7a:	4b04      	ldr	r3, [pc, #16]	; (8002d8c <SysTick_Config+0x40>)
 8002d7c:	2207      	movs	r2, #7
 8002d7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d80:	2300      	movs	r3, #0
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3708      	adds	r7, #8
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	e000e010 	.word	0xe000e010

08002d90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f7ff ff2d 	bl	8002bf8 <__NVIC_SetPriorityGrouping>
}
 8002d9e:	bf00      	nop
 8002da0:	3708      	adds	r7, #8
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}

08002da6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002da6:	b580      	push	{r7, lr}
 8002da8:	b086      	sub	sp, #24
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	4603      	mov	r3, r0
 8002dae:	60b9      	str	r1, [r7, #8]
 8002db0:	607a      	str	r2, [r7, #4]
 8002db2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002db4:	2300      	movs	r3, #0
 8002db6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002db8:	f7ff ff42 	bl	8002c40 <__NVIC_GetPriorityGrouping>
 8002dbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	68b9      	ldr	r1, [r7, #8]
 8002dc2:	6978      	ldr	r0, [r7, #20]
 8002dc4:	f7ff ff90 	bl	8002ce8 <NVIC_EncodePriority>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dce:	4611      	mov	r1, r2
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f7ff ff5f 	bl	8002c94 <__NVIC_SetPriority>
}
 8002dd6:	bf00      	nop
 8002dd8:	3718      	adds	r7, #24
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}

08002dde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dde:	b580      	push	{r7, lr}
 8002de0:	b082      	sub	sp, #8
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	4603      	mov	r3, r0
 8002de6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002de8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dec:	4618      	mov	r0, r3
 8002dee:	f7ff ff35 	bl	8002c5c <__NVIC_EnableIRQ>
}
 8002df2:	bf00      	nop
 8002df4:	3708      	adds	r7, #8
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}

08002dfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002dfa:	b580      	push	{r7, lr}
 8002dfc:	b082      	sub	sp, #8
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f7ff ffa2 	bl	8002d4c <SysTick_Config>
 8002e08:	4603      	mov	r3, r0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3708      	adds	r7, #8
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
	...

08002e14 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b08b      	sub	sp, #44	; 0x2c
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002e22:	2300      	movs	r3, #0
 8002e24:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e26:	e169      	b.n	80030fc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002e28:	2201      	movs	r2, #1
 8002e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e30:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	69fa      	ldr	r2, [r7, #28]
 8002e38:	4013      	ands	r3, r2
 8002e3a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002e3c:	69ba      	ldr	r2, [r7, #24]
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	429a      	cmp	r2, r3
 8002e42:	f040 8158 	bne.w	80030f6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	4a9a      	ldr	r2, [pc, #616]	; (80030b4 <HAL_GPIO_Init+0x2a0>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d05e      	beq.n	8002f0e <HAL_GPIO_Init+0xfa>
 8002e50:	4a98      	ldr	r2, [pc, #608]	; (80030b4 <HAL_GPIO_Init+0x2a0>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d875      	bhi.n	8002f42 <HAL_GPIO_Init+0x12e>
 8002e56:	4a98      	ldr	r2, [pc, #608]	; (80030b8 <HAL_GPIO_Init+0x2a4>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d058      	beq.n	8002f0e <HAL_GPIO_Init+0xfa>
 8002e5c:	4a96      	ldr	r2, [pc, #600]	; (80030b8 <HAL_GPIO_Init+0x2a4>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d86f      	bhi.n	8002f42 <HAL_GPIO_Init+0x12e>
 8002e62:	4a96      	ldr	r2, [pc, #600]	; (80030bc <HAL_GPIO_Init+0x2a8>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d052      	beq.n	8002f0e <HAL_GPIO_Init+0xfa>
 8002e68:	4a94      	ldr	r2, [pc, #592]	; (80030bc <HAL_GPIO_Init+0x2a8>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d869      	bhi.n	8002f42 <HAL_GPIO_Init+0x12e>
 8002e6e:	4a94      	ldr	r2, [pc, #592]	; (80030c0 <HAL_GPIO_Init+0x2ac>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d04c      	beq.n	8002f0e <HAL_GPIO_Init+0xfa>
 8002e74:	4a92      	ldr	r2, [pc, #584]	; (80030c0 <HAL_GPIO_Init+0x2ac>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d863      	bhi.n	8002f42 <HAL_GPIO_Init+0x12e>
 8002e7a:	4a92      	ldr	r2, [pc, #584]	; (80030c4 <HAL_GPIO_Init+0x2b0>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d046      	beq.n	8002f0e <HAL_GPIO_Init+0xfa>
 8002e80:	4a90      	ldr	r2, [pc, #576]	; (80030c4 <HAL_GPIO_Init+0x2b0>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d85d      	bhi.n	8002f42 <HAL_GPIO_Init+0x12e>
 8002e86:	2b12      	cmp	r3, #18
 8002e88:	d82a      	bhi.n	8002ee0 <HAL_GPIO_Init+0xcc>
 8002e8a:	2b12      	cmp	r3, #18
 8002e8c:	d859      	bhi.n	8002f42 <HAL_GPIO_Init+0x12e>
 8002e8e:	a201      	add	r2, pc, #4	; (adr r2, 8002e94 <HAL_GPIO_Init+0x80>)
 8002e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e94:	08002f0f 	.word	0x08002f0f
 8002e98:	08002ee9 	.word	0x08002ee9
 8002e9c:	08002efb 	.word	0x08002efb
 8002ea0:	08002f3d 	.word	0x08002f3d
 8002ea4:	08002f43 	.word	0x08002f43
 8002ea8:	08002f43 	.word	0x08002f43
 8002eac:	08002f43 	.word	0x08002f43
 8002eb0:	08002f43 	.word	0x08002f43
 8002eb4:	08002f43 	.word	0x08002f43
 8002eb8:	08002f43 	.word	0x08002f43
 8002ebc:	08002f43 	.word	0x08002f43
 8002ec0:	08002f43 	.word	0x08002f43
 8002ec4:	08002f43 	.word	0x08002f43
 8002ec8:	08002f43 	.word	0x08002f43
 8002ecc:	08002f43 	.word	0x08002f43
 8002ed0:	08002f43 	.word	0x08002f43
 8002ed4:	08002f43 	.word	0x08002f43
 8002ed8:	08002ef1 	.word	0x08002ef1
 8002edc:	08002f05 	.word	0x08002f05
 8002ee0:	4a79      	ldr	r2, [pc, #484]	; (80030c8 <HAL_GPIO_Init+0x2b4>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d013      	beq.n	8002f0e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002ee6:	e02c      	b.n	8002f42 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	623b      	str	r3, [r7, #32]
          break;
 8002eee:	e029      	b.n	8002f44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	3304      	adds	r3, #4
 8002ef6:	623b      	str	r3, [r7, #32]
          break;
 8002ef8:	e024      	b.n	8002f44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	68db      	ldr	r3, [r3, #12]
 8002efe:	3308      	adds	r3, #8
 8002f00:	623b      	str	r3, [r7, #32]
          break;
 8002f02:	e01f      	b.n	8002f44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	330c      	adds	r3, #12
 8002f0a:	623b      	str	r3, [r7, #32]
          break;
 8002f0c:	e01a      	b.n	8002f44 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d102      	bne.n	8002f1c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002f16:	2304      	movs	r3, #4
 8002f18:	623b      	str	r3, [r7, #32]
          break;
 8002f1a:	e013      	b.n	8002f44 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d105      	bne.n	8002f30 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002f24:	2308      	movs	r3, #8
 8002f26:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	69fa      	ldr	r2, [r7, #28]
 8002f2c:	611a      	str	r2, [r3, #16]
          break;
 8002f2e:	e009      	b.n	8002f44 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002f30:	2308      	movs	r3, #8
 8002f32:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	69fa      	ldr	r2, [r7, #28]
 8002f38:	615a      	str	r2, [r3, #20]
          break;
 8002f3a:	e003      	b.n	8002f44 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	623b      	str	r3, [r7, #32]
          break;
 8002f40:	e000      	b.n	8002f44 <HAL_GPIO_Init+0x130>
          break;
 8002f42:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002f44:	69bb      	ldr	r3, [r7, #24]
 8002f46:	2bff      	cmp	r3, #255	; 0xff
 8002f48:	d801      	bhi.n	8002f4e <HAL_GPIO_Init+0x13a>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	e001      	b.n	8002f52 <HAL_GPIO_Init+0x13e>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	3304      	adds	r3, #4
 8002f52:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002f54:	69bb      	ldr	r3, [r7, #24]
 8002f56:	2bff      	cmp	r3, #255	; 0xff
 8002f58:	d802      	bhi.n	8002f60 <HAL_GPIO_Init+0x14c>
 8002f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	e002      	b.n	8002f66 <HAL_GPIO_Init+0x152>
 8002f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f62:	3b08      	subs	r3, #8
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	210f      	movs	r1, #15
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	fa01 f303 	lsl.w	r3, r1, r3
 8002f74:	43db      	mvns	r3, r3
 8002f76:	401a      	ands	r2, r3
 8002f78:	6a39      	ldr	r1, [r7, #32]
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f80:	431a      	orrs	r2, r3
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	f000 80b1 	beq.w	80030f6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002f94:	4b4d      	ldr	r3, [pc, #308]	; (80030cc <HAL_GPIO_Init+0x2b8>)
 8002f96:	699b      	ldr	r3, [r3, #24]
 8002f98:	4a4c      	ldr	r2, [pc, #304]	; (80030cc <HAL_GPIO_Init+0x2b8>)
 8002f9a:	f043 0301 	orr.w	r3, r3, #1
 8002f9e:	6193      	str	r3, [r2, #24]
 8002fa0:	4b4a      	ldr	r3, [pc, #296]	; (80030cc <HAL_GPIO_Init+0x2b8>)
 8002fa2:	699b      	ldr	r3, [r3, #24]
 8002fa4:	f003 0301 	and.w	r3, r3, #1
 8002fa8:	60bb      	str	r3, [r7, #8]
 8002faa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002fac:	4a48      	ldr	r2, [pc, #288]	; (80030d0 <HAL_GPIO_Init+0x2bc>)
 8002fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb0:	089b      	lsrs	r3, r3, #2
 8002fb2:	3302      	adds	r3, #2
 8002fb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fb8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fbc:	f003 0303 	and.w	r3, r3, #3
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	220f      	movs	r2, #15
 8002fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc8:	43db      	mvns	r3, r3
 8002fca:	68fa      	ldr	r2, [r7, #12]
 8002fcc:	4013      	ands	r3, r2
 8002fce:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	4a40      	ldr	r2, [pc, #256]	; (80030d4 <HAL_GPIO_Init+0x2c0>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d013      	beq.n	8003000 <HAL_GPIO_Init+0x1ec>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	4a3f      	ldr	r2, [pc, #252]	; (80030d8 <HAL_GPIO_Init+0x2c4>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d00d      	beq.n	8002ffc <HAL_GPIO_Init+0x1e8>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	4a3e      	ldr	r2, [pc, #248]	; (80030dc <HAL_GPIO_Init+0x2c8>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d007      	beq.n	8002ff8 <HAL_GPIO_Init+0x1e4>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	4a3d      	ldr	r2, [pc, #244]	; (80030e0 <HAL_GPIO_Init+0x2cc>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d101      	bne.n	8002ff4 <HAL_GPIO_Init+0x1e0>
 8002ff0:	2303      	movs	r3, #3
 8002ff2:	e006      	b.n	8003002 <HAL_GPIO_Init+0x1ee>
 8002ff4:	2304      	movs	r3, #4
 8002ff6:	e004      	b.n	8003002 <HAL_GPIO_Init+0x1ee>
 8002ff8:	2302      	movs	r3, #2
 8002ffa:	e002      	b.n	8003002 <HAL_GPIO_Init+0x1ee>
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e000      	b.n	8003002 <HAL_GPIO_Init+0x1ee>
 8003000:	2300      	movs	r3, #0
 8003002:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003004:	f002 0203 	and.w	r2, r2, #3
 8003008:	0092      	lsls	r2, r2, #2
 800300a:	4093      	lsls	r3, r2
 800300c:	68fa      	ldr	r2, [r7, #12]
 800300e:	4313      	orrs	r3, r2
 8003010:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003012:	492f      	ldr	r1, [pc, #188]	; (80030d0 <HAL_GPIO_Init+0x2bc>)
 8003014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003016:	089b      	lsrs	r3, r3, #2
 8003018:	3302      	adds	r3, #2
 800301a:	68fa      	ldr	r2, [r7, #12]
 800301c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003028:	2b00      	cmp	r3, #0
 800302a:	d006      	beq.n	800303a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800302c:	4b2d      	ldr	r3, [pc, #180]	; (80030e4 <HAL_GPIO_Init+0x2d0>)
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	492c      	ldr	r1, [pc, #176]	; (80030e4 <HAL_GPIO_Init+0x2d0>)
 8003032:	69bb      	ldr	r3, [r7, #24]
 8003034:	4313      	orrs	r3, r2
 8003036:	600b      	str	r3, [r1, #0]
 8003038:	e006      	b.n	8003048 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800303a:	4b2a      	ldr	r3, [pc, #168]	; (80030e4 <HAL_GPIO_Init+0x2d0>)
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	69bb      	ldr	r3, [r7, #24]
 8003040:	43db      	mvns	r3, r3
 8003042:	4928      	ldr	r1, [pc, #160]	; (80030e4 <HAL_GPIO_Init+0x2d0>)
 8003044:	4013      	ands	r3, r2
 8003046:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003050:	2b00      	cmp	r3, #0
 8003052:	d006      	beq.n	8003062 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003054:	4b23      	ldr	r3, [pc, #140]	; (80030e4 <HAL_GPIO_Init+0x2d0>)
 8003056:	685a      	ldr	r2, [r3, #4]
 8003058:	4922      	ldr	r1, [pc, #136]	; (80030e4 <HAL_GPIO_Init+0x2d0>)
 800305a:	69bb      	ldr	r3, [r7, #24]
 800305c:	4313      	orrs	r3, r2
 800305e:	604b      	str	r3, [r1, #4]
 8003060:	e006      	b.n	8003070 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003062:	4b20      	ldr	r3, [pc, #128]	; (80030e4 <HAL_GPIO_Init+0x2d0>)
 8003064:	685a      	ldr	r2, [r3, #4]
 8003066:	69bb      	ldr	r3, [r7, #24]
 8003068:	43db      	mvns	r3, r3
 800306a:	491e      	ldr	r1, [pc, #120]	; (80030e4 <HAL_GPIO_Init+0x2d0>)
 800306c:	4013      	ands	r3, r2
 800306e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003078:	2b00      	cmp	r3, #0
 800307a:	d006      	beq.n	800308a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800307c:	4b19      	ldr	r3, [pc, #100]	; (80030e4 <HAL_GPIO_Init+0x2d0>)
 800307e:	689a      	ldr	r2, [r3, #8]
 8003080:	4918      	ldr	r1, [pc, #96]	; (80030e4 <HAL_GPIO_Init+0x2d0>)
 8003082:	69bb      	ldr	r3, [r7, #24]
 8003084:	4313      	orrs	r3, r2
 8003086:	608b      	str	r3, [r1, #8]
 8003088:	e006      	b.n	8003098 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800308a:	4b16      	ldr	r3, [pc, #88]	; (80030e4 <HAL_GPIO_Init+0x2d0>)
 800308c:	689a      	ldr	r2, [r3, #8]
 800308e:	69bb      	ldr	r3, [r7, #24]
 8003090:	43db      	mvns	r3, r3
 8003092:	4914      	ldr	r1, [pc, #80]	; (80030e4 <HAL_GPIO_Init+0x2d0>)
 8003094:	4013      	ands	r3, r2
 8003096:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d021      	beq.n	80030e8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80030a4:	4b0f      	ldr	r3, [pc, #60]	; (80030e4 <HAL_GPIO_Init+0x2d0>)
 80030a6:	68da      	ldr	r2, [r3, #12]
 80030a8:	490e      	ldr	r1, [pc, #56]	; (80030e4 <HAL_GPIO_Init+0x2d0>)
 80030aa:	69bb      	ldr	r3, [r7, #24]
 80030ac:	4313      	orrs	r3, r2
 80030ae:	60cb      	str	r3, [r1, #12]
 80030b0:	e021      	b.n	80030f6 <HAL_GPIO_Init+0x2e2>
 80030b2:	bf00      	nop
 80030b4:	10320000 	.word	0x10320000
 80030b8:	10310000 	.word	0x10310000
 80030bc:	10220000 	.word	0x10220000
 80030c0:	10210000 	.word	0x10210000
 80030c4:	10120000 	.word	0x10120000
 80030c8:	10110000 	.word	0x10110000
 80030cc:	40021000 	.word	0x40021000
 80030d0:	40010000 	.word	0x40010000
 80030d4:	40010800 	.word	0x40010800
 80030d8:	40010c00 	.word	0x40010c00
 80030dc:	40011000 	.word	0x40011000
 80030e0:	40011400 	.word	0x40011400
 80030e4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80030e8:	4b0b      	ldr	r3, [pc, #44]	; (8003118 <HAL_GPIO_Init+0x304>)
 80030ea:	68da      	ldr	r2, [r3, #12]
 80030ec:	69bb      	ldr	r3, [r7, #24]
 80030ee:	43db      	mvns	r3, r3
 80030f0:	4909      	ldr	r1, [pc, #36]	; (8003118 <HAL_GPIO_Init+0x304>)
 80030f2:	4013      	ands	r3, r2
 80030f4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80030f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f8:	3301      	adds	r3, #1
 80030fa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003102:	fa22 f303 	lsr.w	r3, r2, r3
 8003106:	2b00      	cmp	r3, #0
 8003108:	f47f ae8e 	bne.w	8002e28 <HAL_GPIO_Init+0x14>
  }
}
 800310c:	bf00      	nop
 800310e:	bf00      	nop
 8003110:	372c      	adds	r7, #44	; 0x2c
 8003112:	46bd      	mov	sp, r7
 8003114:	bc80      	pop	{r7}
 8003116:	4770      	bx	lr
 8003118:	40010400 	.word	0x40010400

0800311c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800311c:	b480      	push	{r7}
 800311e:	b085      	sub	sp, #20
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
 8003124:	460b      	mov	r3, r1
 8003126:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	689a      	ldr	r2, [r3, #8]
 800312c:	887b      	ldrh	r3, [r7, #2]
 800312e:	4013      	ands	r3, r2
 8003130:	2b00      	cmp	r3, #0
 8003132:	d002      	beq.n	800313a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003134:	2301      	movs	r3, #1
 8003136:	73fb      	strb	r3, [r7, #15]
 8003138:	e001      	b.n	800313e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800313a:	2300      	movs	r3, #0
 800313c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800313e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003140:	4618      	mov	r0, r3
 8003142:	3714      	adds	r7, #20
 8003144:	46bd      	mov	sp, r7
 8003146:	bc80      	pop	{r7}
 8003148:	4770      	bx	lr

0800314a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800314a:	b480      	push	{r7}
 800314c:	b083      	sub	sp, #12
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]
 8003152:	460b      	mov	r3, r1
 8003154:	807b      	strh	r3, [r7, #2]
 8003156:	4613      	mov	r3, r2
 8003158:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800315a:	787b      	ldrb	r3, [r7, #1]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d003      	beq.n	8003168 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003160:	887a      	ldrh	r2, [r7, #2]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003166:	e003      	b.n	8003170 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003168:	887b      	ldrh	r3, [r7, #2]
 800316a:	041a      	lsls	r2, r3, #16
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	611a      	str	r2, [r3, #16]
}
 8003170:	bf00      	nop
 8003172:	370c      	adds	r7, #12
 8003174:	46bd      	mov	sp, r7
 8003176:	bc80      	pop	{r7}
 8003178:	4770      	bx	lr

0800317a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800317a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800317c:	b08b      	sub	sp, #44	; 0x2c
 800317e:	af06      	add	r7, sp, #24
 8003180:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d101      	bne.n	800318c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e0fd      	b.n	8003388 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8003192:	b2db      	uxtb	r3, r3
 8003194:	2b00      	cmp	r3, #0
 8003196:	d106      	bne.n	80031a6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2200      	movs	r2, #0
 800319c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	f7ff f9eb 	bl	800257c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2203      	movs	r2, #3
 80031aa:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4618      	mov	r0, r3
 80031b4:	f003 fbb8 	bl	8006928 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	603b      	str	r3, [r7, #0]
 80031be:	687e      	ldr	r6, [r7, #4]
 80031c0:	466d      	mov	r5, sp
 80031c2:	f106 0410 	add.w	r4, r6, #16
 80031c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031ca:	6823      	ldr	r3, [r4, #0]
 80031cc:	602b      	str	r3, [r5, #0]
 80031ce:	1d33      	adds	r3, r6, #4
 80031d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031d2:	6838      	ldr	r0, [r7, #0]
 80031d4:	f003 fb82 	bl	80068dc <USB_CoreInit>
 80031d8:	4603      	mov	r3, r0
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d005      	beq.n	80031ea <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2202      	movs	r2, #2
 80031e2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e0ce      	b.n	8003388 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	2100      	movs	r1, #0
 80031f0:	4618      	mov	r0, r3
 80031f2:	f003 fbb3 	bl	800695c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031f6:	2300      	movs	r3, #0
 80031f8:	73fb      	strb	r3, [r7, #15]
 80031fa:	e04c      	b.n	8003296 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80031fc:	7bfb      	ldrb	r3, [r7, #15]
 80031fe:	6879      	ldr	r1, [r7, #4]
 8003200:	1c5a      	adds	r2, r3, #1
 8003202:	4613      	mov	r3, r2
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	4413      	add	r3, r2
 8003208:	00db      	lsls	r3, r3, #3
 800320a:	440b      	add	r3, r1
 800320c:	3301      	adds	r3, #1
 800320e:	2201      	movs	r2, #1
 8003210:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003212:	7bfb      	ldrb	r3, [r7, #15]
 8003214:	6879      	ldr	r1, [r7, #4]
 8003216:	1c5a      	adds	r2, r3, #1
 8003218:	4613      	mov	r3, r2
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	4413      	add	r3, r2
 800321e:	00db      	lsls	r3, r3, #3
 8003220:	440b      	add	r3, r1
 8003222:	7bfa      	ldrb	r2, [r7, #15]
 8003224:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003226:	7bfa      	ldrb	r2, [r7, #15]
 8003228:	7bfb      	ldrb	r3, [r7, #15]
 800322a:	b298      	uxth	r0, r3
 800322c:	6879      	ldr	r1, [r7, #4]
 800322e:	4613      	mov	r3, r2
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	4413      	add	r3, r2
 8003234:	00db      	lsls	r3, r3, #3
 8003236:	440b      	add	r3, r1
 8003238:	3336      	adds	r3, #54	; 0x36
 800323a:	4602      	mov	r2, r0
 800323c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800323e:	7bfb      	ldrb	r3, [r7, #15]
 8003240:	6879      	ldr	r1, [r7, #4]
 8003242:	1c5a      	adds	r2, r3, #1
 8003244:	4613      	mov	r3, r2
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	4413      	add	r3, r2
 800324a:	00db      	lsls	r3, r3, #3
 800324c:	440b      	add	r3, r1
 800324e:	3303      	adds	r3, #3
 8003250:	2200      	movs	r2, #0
 8003252:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003254:	7bfa      	ldrb	r2, [r7, #15]
 8003256:	6879      	ldr	r1, [r7, #4]
 8003258:	4613      	mov	r3, r2
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	4413      	add	r3, r2
 800325e:	00db      	lsls	r3, r3, #3
 8003260:	440b      	add	r3, r1
 8003262:	3338      	adds	r3, #56	; 0x38
 8003264:	2200      	movs	r2, #0
 8003266:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003268:	7bfa      	ldrb	r2, [r7, #15]
 800326a:	6879      	ldr	r1, [r7, #4]
 800326c:	4613      	mov	r3, r2
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	4413      	add	r3, r2
 8003272:	00db      	lsls	r3, r3, #3
 8003274:	440b      	add	r3, r1
 8003276:	333c      	adds	r3, #60	; 0x3c
 8003278:	2200      	movs	r2, #0
 800327a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800327c:	7bfa      	ldrb	r2, [r7, #15]
 800327e:	6879      	ldr	r1, [r7, #4]
 8003280:	4613      	mov	r3, r2
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	4413      	add	r3, r2
 8003286:	00db      	lsls	r3, r3, #3
 8003288:	440b      	add	r3, r1
 800328a:	3340      	adds	r3, #64	; 0x40
 800328c:	2200      	movs	r2, #0
 800328e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003290:	7bfb      	ldrb	r3, [r7, #15]
 8003292:	3301      	adds	r3, #1
 8003294:	73fb      	strb	r3, [r7, #15]
 8003296:	7bfa      	ldrb	r2, [r7, #15]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	429a      	cmp	r2, r3
 800329e:	d3ad      	bcc.n	80031fc <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032a0:	2300      	movs	r3, #0
 80032a2:	73fb      	strb	r3, [r7, #15]
 80032a4:	e044      	b.n	8003330 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80032a6:	7bfa      	ldrb	r2, [r7, #15]
 80032a8:	6879      	ldr	r1, [r7, #4]
 80032aa:	4613      	mov	r3, r2
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	4413      	add	r3, r2
 80032b0:	00db      	lsls	r3, r3, #3
 80032b2:	440b      	add	r3, r1
 80032b4:	f203 1369 	addw	r3, r3, #361	; 0x169
 80032b8:	2200      	movs	r2, #0
 80032ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80032bc:	7bfa      	ldrb	r2, [r7, #15]
 80032be:	6879      	ldr	r1, [r7, #4]
 80032c0:	4613      	mov	r3, r2
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	4413      	add	r3, r2
 80032c6:	00db      	lsls	r3, r3, #3
 80032c8:	440b      	add	r3, r1
 80032ca:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80032ce:	7bfa      	ldrb	r2, [r7, #15]
 80032d0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80032d2:	7bfa      	ldrb	r2, [r7, #15]
 80032d4:	6879      	ldr	r1, [r7, #4]
 80032d6:	4613      	mov	r3, r2
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	4413      	add	r3, r2
 80032dc:	00db      	lsls	r3, r3, #3
 80032de:	440b      	add	r3, r1
 80032e0:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80032e4:	2200      	movs	r2, #0
 80032e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80032e8:	7bfa      	ldrb	r2, [r7, #15]
 80032ea:	6879      	ldr	r1, [r7, #4]
 80032ec:	4613      	mov	r3, r2
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	4413      	add	r3, r2
 80032f2:	00db      	lsls	r3, r3, #3
 80032f4:	440b      	add	r3, r1
 80032f6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80032fa:	2200      	movs	r2, #0
 80032fc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80032fe:	7bfa      	ldrb	r2, [r7, #15]
 8003300:	6879      	ldr	r1, [r7, #4]
 8003302:	4613      	mov	r3, r2
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	4413      	add	r3, r2
 8003308:	00db      	lsls	r3, r3, #3
 800330a:	440b      	add	r3, r1
 800330c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003310:	2200      	movs	r2, #0
 8003312:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003314:	7bfa      	ldrb	r2, [r7, #15]
 8003316:	6879      	ldr	r1, [r7, #4]
 8003318:	4613      	mov	r3, r2
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	4413      	add	r3, r2
 800331e:	00db      	lsls	r3, r3, #3
 8003320:	440b      	add	r3, r1
 8003322:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003326:	2200      	movs	r2, #0
 8003328:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800332a:	7bfb      	ldrb	r3, [r7, #15]
 800332c:	3301      	adds	r3, #1
 800332e:	73fb      	strb	r3, [r7, #15]
 8003330:	7bfa      	ldrb	r2, [r7, #15]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	429a      	cmp	r2, r3
 8003338:	d3b5      	bcc.n	80032a6 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	603b      	str	r3, [r7, #0]
 8003340:	687e      	ldr	r6, [r7, #4]
 8003342:	466d      	mov	r5, sp
 8003344:	f106 0410 	add.w	r4, r6, #16
 8003348:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800334a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800334c:	6823      	ldr	r3, [r4, #0]
 800334e:	602b      	str	r3, [r5, #0]
 8003350:	1d33      	adds	r3, r6, #4
 8003352:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003354:	6838      	ldr	r0, [r7, #0]
 8003356:	f003 fb0d 	bl	8006974 <USB_DevInit>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d005      	beq.n	800336c <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2202      	movs	r2, #2
 8003364:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e00d      	b.n	8003388 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2200      	movs	r2, #0
 8003370:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4618      	mov	r0, r3
 8003382:	f005 ffbf 	bl	8009304 <USB_DevDisconnect>

  return HAL_OK;
 8003386:	2300      	movs	r3, #0
}
 8003388:	4618      	mov	r0, r3
 800338a:	3714      	adds	r7, #20
 800338c:	46bd      	mov	sp, r7
 800338e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003390 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b082      	sub	sp, #8
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d101      	bne.n	80033a6 <HAL_PCD_Start+0x16>
 80033a2:	2302      	movs	r3, #2
 80033a4:	e016      	b.n	80033d4 <HAL_PCD_Start+0x44>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2201      	movs	r2, #1
 80033aa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4618      	mov	r0, r3
 80033b4:	f003 faa2 	bl	80068fc <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80033b8:	2101      	movs	r1, #1
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f7ff fb59 	bl	8002a72 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4618      	mov	r0, r3
 80033c6:	f005 ff93 	bl	80092f0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80033d2:	2300      	movs	r3, #0
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3708      	adds	r7, #8
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}

080033dc <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b088      	sub	sp, #32
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4618      	mov	r0, r3
 80033ea:	f005 ff95 	bl	8009318 <USB_ReadInterrupts>
 80033ee:	4603      	mov	r3, r0
 80033f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033f8:	d102      	bne.n	8003400 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f000 fb5f 	bl	8003abe <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4618      	mov	r0, r3
 8003406:	f005 ff87 	bl	8009318 <USB_ReadInterrupts>
 800340a:	4603      	mov	r3, r0
 800340c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003410:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003414:	d112      	bne.n	800343c <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800341e:	b29a      	uxth	r2, r3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003428:	b292      	uxth	r2, r2
 800342a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f7ff f927 	bl	8002682 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003434:	2100      	movs	r1, #0
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f000 f923 	bl	8003682 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4618      	mov	r0, r3
 8003442:	f005 ff69 	bl	8009318 <USB_ReadInterrupts>
 8003446:	4603      	mov	r3, r0
 8003448:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800344c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003450:	d10b      	bne.n	800346a <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800345a:	b29a      	uxth	r2, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003464:	b292      	uxth	r2, r2
 8003466:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4618      	mov	r0, r3
 8003470:	f005 ff52 	bl	8009318 <USB_ReadInterrupts>
 8003474:	4603      	mov	r3, r0
 8003476:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800347a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800347e:	d10b      	bne.n	8003498 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003488:	b29a      	uxth	r2, r3
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003492:	b292      	uxth	r2, r2
 8003494:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4618      	mov	r0, r3
 800349e:	f005 ff3b 	bl	8009318 <USB_ReadInterrupts>
 80034a2:	4603      	mov	r3, r0
 80034a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034ac:	d126      	bne.n	80034fc <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80034b6:	b29a      	uxth	r2, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f022 0204 	bic.w	r2, r2, #4
 80034c0:	b292      	uxth	r2, r2
 80034c2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80034ce:	b29a      	uxth	r2, r3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f022 0208 	bic.w	r2, r2, #8
 80034d8:	b292      	uxth	r2, r2
 80034da:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f7ff f908 	bl	80026f4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80034ec:	b29a      	uxth	r2, r3
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80034f6:	b292      	uxth	r2, r2
 80034f8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4618      	mov	r0, r3
 8003502:	f005 ff09 	bl	8009318 <USB_ReadInterrupts>
 8003506:	4603      	mov	r3, r0
 8003508:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800350c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003510:	f040 8082 	bne.w	8003618 <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8003514:	2300      	movs	r3, #0
 8003516:	77fb      	strb	r3, [r7, #31]
 8003518:	e010      	b.n	800353c <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	461a      	mov	r2, r3
 8003520:	7ffb      	ldrb	r3, [r7, #31]
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	441a      	add	r2, r3
 8003526:	7ffb      	ldrb	r3, [r7, #31]
 8003528:	8812      	ldrh	r2, [r2, #0]
 800352a:	b292      	uxth	r2, r2
 800352c:	005b      	lsls	r3, r3, #1
 800352e:	3320      	adds	r3, #32
 8003530:	443b      	add	r3, r7
 8003532:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8003536:	7ffb      	ldrb	r3, [r7, #31]
 8003538:	3301      	adds	r3, #1
 800353a:	77fb      	strb	r3, [r7, #31]
 800353c:	7ffb      	ldrb	r3, [r7, #31]
 800353e:	2b07      	cmp	r3, #7
 8003540:	d9eb      	bls.n	800351a <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800354a:	b29a      	uxth	r2, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f042 0201 	orr.w	r2, r2, #1
 8003554:	b292      	uxth	r2, r2
 8003556:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003562:	b29a      	uxth	r2, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f022 0201 	bic.w	r2, r2, #1
 800356c:	b292      	uxth	r2, r2
 800356e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8003572:	bf00      	nop
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800357c:	b29b      	uxth	r3, r3
 800357e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003582:	2b00      	cmp	r3, #0
 8003584:	d0f6      	beq.n	8003574 <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800358e:	b29a      	uxth	r2, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003598:	b292      	uxth	r2, r2
 800359a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 800359e:	2300      	movs	r3, #0
 80035a0:	77fb      	strb	r3, [r7, #31]
 80035a2:	e00f      	b.n	80035c4 <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80035a4:	7ffb      	ldrb	r3, [r7, #31]
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	6812      	ldr	r2, [r2, #0]
 80035aa:	4611      	mov	r1, r2
 80035ac:	7ffa      	ldrb	r2, [r7, #31]
 80035ae:	0092      	lsls	r2, r2, #2
 80035b0:	440a      	add	r2, r1
 80035b2:	005b      	lsls	r3, r3, #1
 80035b4:	3320      	adds	r3, #32
 80035b6:	443b      	add	r3, r7
 80035b8:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80035bc:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80035be:	7ffb      	ldrb	r3, [r7, #31]
 80035c0:	3301      	adds	r3, #1
 80035c2:	77fb      	strb	r3, [r7, #31]
 80035c4:	7ffb      	ldrb	r3, [r7, #31]
 80035c6:	2b07      	cmp	r3, #7
 80035c8:	d9ec      	bls.n	80035a4 <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80035d2:	b29a      	uxth	r2, r3
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f042 0208 	orr.w	r2, r2, #8
 80035dc:	b292      	uxth	r2, r2
 80035de:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80035ea:	b29a      	uxth	r2, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035f4:	b292      	uxth	r2, r2
 80035f6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003602:	b29a      	uxth	r2, r3
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f042 0204 	orr.w	r2, r2, #4
 800360c:	b292      	uxth	r2, r2
 800360e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f7ff f854 	bl	80026c0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4618      	mov	r0, r3
 800361e:	f005 fe7b 	bl	8009318 <USB_ReadInterrupts>
 8003622:	4603      	mov	r3, r0
 8003624:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003628:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800362c:	d10e      	bne.n	800364c <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003636:	b29a      	uxth	r2, r3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003640:	b292      	uxth	r2, r2
 8003642:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f7ff f80d 	bl	8002666 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4618      	mov	r0, r3
 8003652:	f005 fe61 	bl	8009318 <USB_ReadInterrupts>
 8003656:	4603      	mov	r3, r0
 8003658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800365c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003660:	d10b      	bne.n	800367a <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800366a:	b29a      	uxth	r2, r3
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003674:	b292      	uxth	r2, r2
 8003676:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800367a:	bf00      	nop
 800367c:	3720      	adds	r7, #32
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}

08003682 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003682:	b580      	push	{r7, lr}
 8003684:	b082      	sub	sp, #8
 8003686:	af00      	add	r7, sp, #0
 8003688:	6078      	str	r0, [r7, #4]
 800368a:	460b      	mov	r3, r1
 800368c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003694:	2b01      	cmp	r3, #1
 8003696:	d101      	bne.n	800369c <HAL_PCD_SetAddress+0x1a>
 8003698:	2302      	movs	r3, #2
 800369a:	e013      	b.n	80036c4 <HAL_PCD_SetAddress+0x42>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	78fa      	ldrb	r2, [r7, #3]
 80036a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	78fa      	ldrb	r2, [r7, #3]
 80036b2:	4611      	mov	r1, r2
 80036b4:	4618      	mov	r0, r3
 80036b6:	f005 fe08 	bl	80092ca <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80036c2:	2300      	movs	r3, #0
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3708      	adds	r7, #8
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}

080036cc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b084      	sub	sp, #16
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	4608      	mov	r0, r1
 80036d6:	4611      	mov	r1, r2
 80036d8:	461a      	mov	r2, r3
 80036da:	4603      	mov	r3, r0
 80036dc:	70fb      	strb	r3, [r7, #3]
 80036de:	460b      	mov	r3, r1
 80036e0:	803b      	strh	r3, [r7, #0]
 80036e2:	4613      	mov	r3, r2
 80036e4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80036e6:	2300      	movs	r3, #0
 80036e8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80036ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	da0e      	bge.n	8003710 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036f2:	78fb      	ldrb	r3, [r7, #3]
 80036f4:	f003 0307 	and.w	r3, r3, #7
 80036f8:	1c5a      	adds	r2, r3, #1
 80036fa:	4613      	mov	r3, r2
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	4413      	add	r3, r2
 8003700:	00db      	lsls	r3, r3, #3
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	4413      	add	r3, r2
 8003706:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2201      	movs	r2, #1
 800370c:	705a      	strb	r2, [r3, #1]
 800370e:	e00e      	b.n	800372e <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003710:	78fb      	ldrb	r3, [r7, #3]
 8003712:	f003 0207 	and.w	r2, r3, #7
 8003716:	4613      	mov	r3, r2
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	4413      	add	r3, r2
 800371c:	00db      	lsls	r3, r3, #3
 800371e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	4413      	add	r3, r2
 8003726:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2200      	movs	r2, #0
 800372c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800372e:	78fb      	ldrb	r3, [r7, #3]
 8003730:	f003 0307 	and.w	r3, r3, #7
 8003734:	b2da      	uxtb	r2, r3
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800373a:	883a      	ldrh	r2, [r7, #0]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	78ba      	ldrb	r2, [r7, #2]
 8003744:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	785b      	ldrb	r3, [r3, #1]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d004      	beq.n	8003758 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	781b      	ldrb	r3, [r3, #0]
 8003752:	b29a      	uxth	r2, r3
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003758:	78bb      	ldrb	r3, [r7, #2]
 800375a:	2b02      	cmp	r3, #2
 800375c:	d102      	bne.n	8003764 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2200      	movs	r2, #0
 8003762:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800376a:	2b01      	cmp	r3, #1
 800376c:	d101      	bne.n	8003772 <HAL_PCD_EP_Open+0xa6>
 800376e:	2302      	movs	r3, #2
 8003770:	e00e      	b.n	8003790 <HAL_PCD_EP_Open+0xc4>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2201      	movs	r2, #1
 8003776:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	68f9      	ldr	r1, [r7, #12]
 8003780:	4618      	mov	r0, r3
 8003782:	f003 f917 	bl	80069b4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800378e:	7afb      	ldrb	r3, [r7, #11]
}
 8003790:	4618      	mov	r0, r3
 8003792:	3710      	adds	r7, #16
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}

08003798 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b084      	sub	sp, #16
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	460b      	mov	r3, r1
 80037a2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80037a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	da0e      	bge.n	80037ca <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037ac:	78fb      	ldrb	r3, [r7, #3]
 80037ae:	f003 0307 	and.w	r3, r3, #7
 80037b2:	1c5a      	adds	r2, r3, #1
 80037b4:	4613      	mov	r3, r2
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	4413      	add	r3, r2
 80037ba:	00db      	lsls	r3, r3, #3
 80037bc:	687a      	ldr	r2, [r7, #4]
 80037be:	4413      	add	r3, r2
 80037c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2201      	movs	r2, #1
 80037c6:	705a      	strb	r2, [r3, #1]
 80037c8:	e00e      	b.n	80037e8 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037ca:	78fb      	ldrb	r3, [r7, #3]
 80037cc:	f003 0207 	and.w	r2, r3, #7
 80037d0:	4613      	mov	r3, r2
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	4413      	add	r3, r2
 80037d6:	00db      	lsls	r3, r3, #3
 80037d8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	4413      	add	r3, r2
 80037e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2200      	movs	r2, #0
 80037e6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80037e8:	78fb      	ldrb	r3, [r7, #3]
 80037ea:	f003 0307 	and.w	r3, r3, #7
 80037ee:	b2da      	uxtb	r2, r3
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d101      	bne.n	8003802 <HAL_PCD_EP_Close+0x6a>
 80037fe:	2302      	movs	r3, #2
 8003800:	e00e      	b.n	8003820 <HAL_PCD_EP_Close+0x88>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2201      	movs	r2, #1
 8003806:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	68f9      	ldr	r1, [r7, #12]
 8003810:	4618      	mov	r0, r3
 8003812:	f003 fc39 	bl	8007088 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800381e:	2300      	movs	r3, #0
}
 8003820:	4618      	mov	r0, r3
 8003822:	3710      	adds	r7, #16
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}

08003828 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b086      	sub	sp, #24
 800382c:	af00      	add	r7, sp, #0
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	607a      	str	r2, [r7, #4]
 8003832:	603b      	str	r3, [r7, #0]
 8003834:	460b      	mov	r3, r1
 8003836:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003838:	7afb      	ldrb	r3, [r7, #11]
 800383a:	f003 0207 	and.w	r2, r3, #7
 800383e:	4613      	mov	r3, r2
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	4413      	add	r3, r2
 8003844:	00db      	lsls	r3, r3, #3
 8003846:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800384a:	68fa      	ldr	r2, [r7, #12]
 800384c:	4413      	add	r3, r2
 800384e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	683a      	ldr	r2, [r7, #0]
 800385a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	2200      	movs	r2, #0
 8003860:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	2200      	movs	r2, #0
 8003866:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003868:	7afb      	ldrb	r3, [r7, #11]
 800386a:	f003 0307 	and.w	r3, r3, #7
 800386e:	b2da      	uxtb	r2, r3
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003874:	7afb      	ldrb	r3, [r7, #11]
 8003876:	f003 0307 	and.w	r3, r3, #7
 800387a:	2b00      	cmp	r3, #0
 800387c:	d106      	bne.n	800388c <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	6979      	ldr	r1, [r7, #20]
 8003884:	4618      	mov	r0, r3
 8003886:	f003 fdeb 	bl	8007460 <USB_EPStartXfer>
 800388a:	e005      	b.n	8003898 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	6979      	ldr	r1, [r7, #20]
 8003892:	4618      	mov	r0, r3
 8003894:	f003 fde4 	bl	8007460 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003898:	2300      	movs	r3, #0
}
 800389a:	4618      	mov	r0, r3
 800389c:	3718      	adds	r7, #24
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}

080038a2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80038a2:	b480      	push	{r7}
 80038a4:	b083      	sub	sp, #12
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
 80038aa:	460b      	mov	r3, r1
 80038ac:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80038ae:	78fb      	ldrb	r3, [r7, #3]
 80038b0:	f003 0207 	and.w	r2, r3, #7
 80038b4:	6879      	ldr	r1, [r7, #4]
 80038b6:	4613      	mov	r3, r2
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	4413      	add	r3, r2
 80038bc:	00db      	lsls	r3, r3, #3
 80038be:	440b      	add	r3, r1
 80038c0:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80038c4:	681b      	ldr	r3, [r3, #0]
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	370c      	adds	r7, #12
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bc80      	pop	{r7}
 80038ce:	4770      	bx	lr

080038d0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b086      	sub	sp, #24
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	60f8      	str	r0, [r7, #12]
 80038d8:	607a      	str	r2, [r7, #4]
 80038da:	603b      	str	r3, [r7, #0]
 80038dc:	460b      	mov	r3, r1
 80038de:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038e0:	7afb      	ldrb	r3, [r7, #11]
 80038e2:	f003 0307 	and.w	r3, r3, #7
 80038e6:	1c5a      	adds	r2, r3, #1
 80038e8:	4613      	mov	r3, r2
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	4413      	add	r3, r2
 80038ee:	00db      	lsls	r3, r3, #3
 80038f0:	68fa      	ldr	r2, [r7, #12]
 80038f2:	4413      	add	r3, r2
 80038f4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	683a      	ldr	r2, [r7, #0]
 8003900:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	2201      	movs	r2, #1
 8003906:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	683a      	ldr	r2, [r7, #0]
 800390e:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	2200      	movs	r2, #0
 8003914:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	2201      	movs	r2, #1
 800391a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800391c:	7afb      	ldrb	r3, [r7, #11]
 800391e:	f003 0307 	and.w	r3, r3, #7
 8003922:	b2da      	uxtb	r2, r3
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003928:	7afb      	ldrb	r3, [r7, #11]
 800392a:	f003 0307 	and.w	r3, r3, #7
 800392e:	2b00      	cmp	r3, #0
 8003930:	d106      	bne.n	8003940 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	6979      	ldr	r1, [r7, #20]
 8003938:	4618      	mov	r0, r3
 800393a:	f003 fd91 	bl	8007460 <USB_EPStartXfer>
 800393e:	e005      	b.n	800394c <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	6979      	ldr	r1, [r7, #20]
 8003946:	4618      	mov	r0, r3
 8003948:	f003 fd8a 	bl	8007460 <USB_EPStartXfer>
  }

  return HAL_OK;
 800394c:	2300      	movs	r3, #0
}
 800394e:	4618      	mov	r0, r3
 8003950:	3718      	adds	r7, #24
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}

08003956 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003956:	b580      	push	{r7, lr}
 8003958:	b084      	sub	sp, #16
 800395a:	af00      	add	r7, sp, #0
 800395c:	6078      	str	r0, [r7, #4]
 800395e:	460b      	mov	r3, r1
 8003960:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003962:	78fb      	ldrb	r3, [r7, #3]
 8003964:	f003 0207 	and.w	r2, r3, #7
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	429a      	cmp	r2, r3
 800396e:	d901      	bls.n	8003974 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	e04c      	b.n	8003a0e <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003974:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003978:	2b00      	cmp	r3, #0
 800397a:	da0e      	bge.n	800399a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800397c:	78fb      	ldrb	r3, [r7, #3]
 800397e:	f003 0307 	and.w	r3, r3, #7
 8003982:	1c5a      	adds	r2, r3, #1
 8003984:	4613      	mov	r3, r2
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	4413      	add	r3, r2
 800398a:	00db      	lsls	r3, r3, #3
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	4413      	add	r3, r2
 8003990:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2201      	movs	r2, #1
 8003996:	705a      	strb	r2, [r3, #1]
 8003998:	e00c      	b.n	80039b4 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800399a:	78fa      	ldrb	r2, [r7, #3]
 800399c:	4613      	mov	r3, r2
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	4413      	add	r3, r2
 80039a2:	00db      	lsls	r3, r3, #3
 80039a4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	4413      	add	r3, r2
 80039ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2200      	movs	r2, #0
 80039b2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2201      	movs	r2, #1
 80039b8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80039ba:	78fb      	ldrb	r3, [r7, #3]
 80039bc:	f003 0307 	and.w	r3, r3, #7
 80039c0:	b2da      	uxtb	r2, r3
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d101      	bne.n	80039d4 <HAL_PCD_EP_SetStall+0x7e>
 80039d0:	2302      	movs	r3, #2
 80039d2:	e01c      	b.n	8003a0e <HAL_PCD_EP_SetStall+0xb8>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	68f9      	ldr	r1, [r7, #12]
 80039e2:	4618      	mov	r0, r3
 80039e4:	f005 fb74 	bl	80090d0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80039e8:	78fb      	ldrb	r3, [r7, #3]
 80039ea:	f003 0307 	and.w	r3, r3, #7
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d108      	bne.n	8003a04 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80039fc:	4619      	mov	r1, r3
 80039fe:	4610      	mov	r0, r2
 8003a00:	f005 fc99 	bl	8009336 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2200      	movs	r2, #0
 8003a08:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003a0c:	2300      	movs	r3, #0
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3710      	adds	r7, #16
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}

08003a16 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a16:	b580      	push	{r7, lr}
 8003a18:	b084      	sub	sp, #16
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	6078      	str	r0, [r7, #4]
 8003a1e:	460b      	mov	r3, r1
 8003a20:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003a22:	78fb      	ldrb	r3, [r7, #3]
 8003a24:	f003 020f 	and.w	r2, r3, #15
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d901      	bls.n	8003a34 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e040      	b.n	8003ab6 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003a34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	da0e      	bge.n	8003a5a <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a3c:	78fb      	ldrb	r3, [r7, #3]
 8003a3e:	f003 0307 	and.w	r3, r3, #7
 8003a42:	1c5a      	adds	r2, r3, #1
 8003a44:	4613      	mov	r3, r2
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	4413      	add	r3, r2
 8003a4a:	00db      	lsls	r3, r3, #3
 8003a4c:	687a      	ldr	r2, [r7, #4]
 8003a4e:	4413      	add	r3, r2
 8003a50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2201      	movs	r2, #1
 8003a56:	705a      	strb	r2, [r3, #1]
 8003a58:	e00e      	b.n	8003a78 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a5a:	78fb      	ldrb	r3, [r7, #3]
 8003a5c:	f003 0207 	and.w	r2, r3, #7
 8003a60:	4613      	mov	r3, r2
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	4413      	add	r3, r2
 8003a66:	00db      	lsls	r3, r3, #3
 8003a68:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	4413      	add	r3, r2
 8003a70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2200      	movs	r2, #0
 8003a76:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a7e:	78fb      	ldrb	r3, [r7, #3]
 8003a80:	f003 0307 	and.w	r3, r3, #7
 8003a84:	b2da      	uxtb	r2, r3
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d101      	bne.n	8003a98 <HAL_PCD_EP_ClrStall+0x82>
 8003a94:	2302      	movs	r3, #2
 8003a96:	e00e      	b.n	8003ab6 <HAL_PCD_EP_ClrStall+0xa0>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	68f9      	ldr	r1, [r7, #12]
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f005 fb62 	bl	8009170 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003ab4:	2300      	movs	r3, #0
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3710      	adds	r7, #16
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}

08003abe <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003abe:	b580      	push	{r7, lr}
 8003ac0:	b08e      	sub	sp, #56	; 0x38
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003ac6:	e2ec      	b.n	80040a2 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003ad0:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003ad2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	f003 030f 	and.w	r3, r3, #15
 8003ada:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8003ade:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	f040 8161 	bne.w	8003daa <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003ae8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003aea:	f003 0310 	and.w	r3, r3, #16
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d152      	bne.n	8003b98 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	881b      	ldrh	r3, [r3, #0]
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003afe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b02:	81fb      	strh	r3, [r7, #14]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	89fb      	ldrh	r3, [r7, #14]
 8003b0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	3328      	adds	r3, #40	; 0x28
 8003b1a:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	461a      	mov	r2, r3
 8003b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2a:	781b      	ldrb	r3, [r3, #0]
 8003b2c:	00db      	lsls	r3, r3, #3
 8003b2e:	4413      	add	r3, r2
 8003b30:	3302      	adds	r3, #2
 8003b32:	005b      	lsls	r3, r3, #1
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	6812      	ldr	r2, [r2, #0]
 8003b38:	4413      	add	r3, r2
 8003b3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b3e:	881b      	ldrh	r3, [r3, #0]
 8003b40:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b46:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4a:	695a      	ldr	r2, [r3, #20]
 8003b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4e:	69db      	ldr	r3, [r3, #28]
 8003b50:	441a      	add	r2, r3
 8003b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b54:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003b56:	2100      	movs	r1, #0
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f7fe fd6a 	bl	8002632 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	f000 829b 	beq.w	80040a2 <PCD_EP_ISR_Handler+0x5e4>
 8003b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6e:	699b      	ldr	r3, [r3, #24]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	f040 8296 	bne.w	80040a2 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003b82:	b2da      	uxtb	r2, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	b292      	uxth	r2, r2
 8003b8a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003b96:	e284      	b.n	80040a2 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003b9e:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	881b      	ldrh	r3, [r3, #0]
 8003ba6:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003ba8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003baa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d034      	beq.n	8003c1c <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc0:	781b      	ldrb	r3, [r3, #0]
 8003bc2:	00db      	lsls	r3, r3, #3
 8003bc4:	4413      	add	r3, r2
 8003bc6:	3306      	adds	r3, #6
 8003bc8:	005b      	lsls	r3, r3, #1
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	6812      	ldr	r2, [r2, #0]
 8003bce:	4413      	add	r3, r2
 8003bd0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003bd4:	881b      	ldrh	r3, [r3, #0]
 8003bd6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bdc:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6818      	ldr	r0, [r3, #0]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8003be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bea:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bee:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	f005 fbf0 	bl	80093d6 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	881b      	ldrh	r3, [r3, #0]
 8003bfc:	b29a      	uxth	r2, r3
 8003bfe:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003c02:	4013      	ands	r3, r2
 8003c04:	823b      	strh	r3, [r7, #16]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	8a3a      	ldrh	r2, [r7, #16]
 8003c0c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003c10:	b292      	uxth	r2, r2
 8003c12:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f7fe fcdf 	bl	80025d8 <HAL_PCD_SetupStageCallback>
 8003c1a:	e242      	b.n	80040a2 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003c1c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	f280 823e 	bge.w	80040a2 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	881b      	ldrh	r3, [r3, #0]
 8003c2c:	b29a      	uxth	r2, r3
 8003c2e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003c32:	4013      	ands	r3, r2
 8003c34:	83bb      	strh	r3, [r7, #28]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	8bba      	ldrh	r2, [r7, #28]
 8003c3c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003c40:	b292      	uxth	r2, r2
 8003c42:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	461a      	mov	r2, r3
 8003c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c52:	781b      	ldrb	r3, [r3, #0]
 8003c54:	00db      	lsls	r3, r3, #3
 8003c56:	4413      	add	r3, r2
 8003c58:	3306      	adds	r3, #6
 8003c5a:	005b      	lsls	r3, r3, #1
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	6812      	ldr	r2, [r2, #0]
 8003c60:	4413      	add	r3, r2
 8003c62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c66:	881b      	ldrh	r3, [r3, #0]
 8003c68:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c72:	69db      	ldr	r3, [r3, #28]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d019      	beq.n	8003cac <PCD_EP_ISR_Handler+0x1ee>
 8003c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7a:	695b      	ldr	r3, [r3, #20]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d015      	beq.n	8003cac <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6818      	ldr	r0, [r3, #0]
 8003c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c86:	6959      	ldr	r1, [r3, #20]
 8003c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003c90:	b29b      	uxth	r3, r3
 8003c92:	f005 fba0 	bl	80093d6 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c98:	695a      	ldr	r2, [r3, #20]
 8003c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9c:	69db      	ldr	r3, [r3, #28]
 8003c9e:	441a      	add	r2, r3
 8003ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca2:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003ca4:	2100      	movs	r1, #0
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f7fe fca8 	bl	80025fc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	881b      	ldrh	r3, [r3, #0]
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	f040 81f2 	bne.w	80040a2 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	61bb      	str	r3, [r7, #24]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	461a      	mov	r2, r3
 8003cd0:	69bb      	ldr	r3, [r7, #24]
 8003cd2:	4413      	add	r3, r2
 8003cd4:	61bb      	str	r3, [r7, #24]
 8003cd6:	69bb      	ldr	r3, [r7, #24]
 8003cd8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003cdc:	617b      	str	r3, [r7, #20]
 8003cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce0:	691b      	ldr	r3, [r3, #16]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d112      	bne.n	8003d0c <PCD_EP_ISR_Handler+0x24e>
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	881b      	ldrh	r3, [r3, #0]
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003cf0:	b29a      	uxth	r2, r3
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	801a      	strh	r2, [r3, #0]
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	881b      	ldrh	r3, [r3, #0]
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d04:	b29a      	uxth	r2, r3
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	801a      	strh	r2, [r3, #0]
 8003d0a:	e02f      	b.n	8003d6c <PCD_EP_ISR_Handler+0x2ae>
 8003d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0e:	691b      	ldr	r3, [r3, #16]
 8003d10:	2b3e      	cmp	r3, #62	; 0x3e
 8003d12:	d813      	bhi.n	8003d3c <PCD_EP_ISR_Handler+0x27e>
 8003d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d16:	691b      	ldr	r3, [r3, #16]
 8003d18:	085b      	lsrs	r3, r3, #1
 8003d1a:	633b      	str	r3, [r7, #48]	; 0x30
 8003d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1e:	691b      	ldr	r3, [r3, #16]
 8003d20:	f003 0301 	and.w	r3, r3, #1
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d002      	beq.n	8003d2e <PCD_EP_ISR_Handler+0x270>
 8003d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d2a:	3301      	adds	r3, #1
 8003d2c:	633b      	str	r3, [r7, #48]	; 0x30
 8003d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	029b      	lsls	r3, r3, #10
 8003d34:	b29a      	uxth	r2, r3
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	801a      	strh	r2, [r3, #0]
 8003d3a:	e017      	b.n	8003d6c <PCD_EP_ISR_Handler+0x2ae>
 8003d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3e:	691b      	ldr	r3, [r3, #16]
 8003d40:	095b      	lsrs	r3, r3, #5
 8003d42:	633b      	str	r3, [r7, #48]	; 0x30
 8003d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d46:	691b      	ldr	r3, [r3, #16]
 8003d48:	f003 031f 	and.w	r3, r3, #31
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d102      	bne.n	8003d56 <PCD_EP_ISR_Handler+0x298>
 8003d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d52:	3b01      	subs	r3, #1
 8003d54:	633b      	str	r3, [r7, #48]	; 0x30
 8003d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	029b      	lsls	r3, r3, #10
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d66:	b29a      	uxth	r2, r3
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	881b      	ldrh	r3, [r3, #0]
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d7c:	827b      	strh	r3, [r7, #18]
 8003d7e:	8a7b      	ldrh	r3, [r7, #18]
 8003d80:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003d84:	827b      	strh	r3, [r7, #18]
 8003d86:	8a7b      	ldrh	r3, [r7, #18]
 8003d88:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003d8c:	827b      	strh	r3, [r7, #18]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	8a7b      	ldrh	r3, [r7, #18]
 8003d94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003da0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	8013      	strh	r3, [r2, #0]
 8003da8:	e17b      	b.n	80040a2 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	461a      	mov	r2, r3
 8003db0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003db4:	009b      	lsls	r3, r3, #2
 8003db6:	4413      	add	r3, r2
 8003db8:	881b      	ldrh	r3, [r3, #0]
 8003dba:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003dbc:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	f280 80ea 	bge.w	8003f9a <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	461a      	mov	r2, r3
 8003dcc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003dd0:	009b      	lsls	r3, r3, #2
 8003dd2:	4413      	add	r3, r2
 8003dd4:	881b      	ldrh	r3, [r3, #0]
 8003dd6:	b29a      	uxth	r2, r3
 8003dd8:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003ddc:	4013      	ands	r3, r2
 8003dde:	853b      	strh	r3, [r7, #40]	; 0x28
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	461a      	mov	r2, r3
 8003de6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	4413      	add	r3, r2
 8003dee:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003df0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003df4:	b292      	uxth	r2, r2
 8003df6:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003df8:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	4413      	add	r3, r2
 8003e02:	00db      	lsls	r3, r3, #3
 8003e04:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	4413      	add	r3, r2
 8003e0c:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e10:	7b1b      	ldrb	r3, [r3, #12]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d122      	bne.n	8003e5c <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	461a      	mov	r2, r3
 8003e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e24:	781b      	ldrb	r3, [r3, #0]
 8003e26:	00db      	lsls	r3, r3, #3
 8003e28:	4413      	add	r3, r2
 8003e2a:	3306      	adds	r3, #6
 8003e2c:	005b      	lsls	r3, r3, #1
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	6812      	ldr	r2, [r2, #0]
 8003e32:	4413      	add	r3, r2
 8003e34:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e38:	881b      	ldrh	r3, [r3, #0]
 8003e3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e3e:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8003e40:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	f000 8087 	beq.w	8003f56 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6818      	ldr	r0, [r3, #0]
 8003e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4e:	6959      	ldr	r1, [r3, #20]
 8003e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e52:	88da      	ldrh	r2, [r3, #6]
 8003e54:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003e56:	f005 fabe 	bl	80093d6 <USB_ReadPMA>
 8003e5a:	e07c      	b.n	8003f56 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5e:	78db      	ldrb	r3, [r3, #3]
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	d108      	bne.n	8003e76 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003e64:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003e66:	461a      	mov	r2, r3
 8003e68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f000 f927 	bl	80040be <HAL_PCD_EP_DB_Receive>
 8003e70:	4603      	mov	r3, r0
 8003e72:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003e74:	e06f      	b.n	8003f56 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7e:	781b      	ldrb	r3, [r3, #0]
 8003e80:	009b      	lsls	r3, r3, #2
 8003e82:	4413      	add	r3, r2
 8003e84:	881b      	ldrh	r3, [r3, #0]
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e90:	847b      	strh	r3, [r7, #34]	; 0x22
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	461a      	mov	r2, r3
 8003e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	441a      	add	r2, r3
 8003ea0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003ea2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ea6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003eaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003eae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	461a      	mov	r2, r3
 8003ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ebe:	781b      	ldrb	r3, [r3, #0]
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	4413      	add	r3, r2
 8003ec4:	881b      	ldrh	r3, [r3, #0]
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d021      	beq.n	8003f14 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	461a      	mov	r2, r3
 8003edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ede:	781b      	ldrb	r3, [r3, #0]
 8003ee0:	00db      	lsls	r3, r3, #3
 8003ee2:	4413      	add	r3, r2
 8003ee4:	3302      	adds	r3, #2
 8003ee6:	005b      	lsls	r3, r3, #1
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	6812      	ldr	r2, [r2, #0]
 8003eec:	4413      	add	r3, r2
 8003eee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ef2:	881b      	ldrh	r3, [r3, #0]
 8003ef4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ef8:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003efa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d02a      	beq.n	8003f56 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6818      	ldr	r0, [r3, #0]
 8003f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f06:	6959      	ldr	r1, [r3, #20]
 8003f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0a:	891a      	ldrh	r2, [r3, #8]
 8003f0c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003f0e:	f005 fa62 	bl	80093d6 <USB_ReadPMA>
 8003f12:	e020      	b.n	8003f56 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	461a      	mov	r2, r3
 8003f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f22:	781b      	ldrb	r3, [r3, #0]
 8003f24:	00db      	lsls	r3, r3, #3
 8003f26:	4413      	add	r3, r2
 8003f28:	3306      	adds	r3, #6
 8003f2a:	005b      	lsls	r3, r3, #1
 8003f2c:	687a      	ldr	r2, [r7, #4]
 8003f2e:	6812      	ldr	r2, [r2, #0]
 8003f30:	4413      	add	r3, r2
 8003f32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f36:	881b      	ldrh	r3, [r3, #0]
 8003f38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f3c:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003f3e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d008      	beq.n	8003f56 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6818      	ldr	r0, [r3, #0]
 8003f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4a:	6959      	ldr	r1, [r3, #20]
 8003f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4e:	895a      	ldrh	r2, [r3, #10]
 8003f50:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003f52:	f005 fa40 	bl	80093d6 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f58:	69da      	ldr	r2, [r3, #28]
 8003f5a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003f5c:	441a      	add	r2, r3
 8003f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f60:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f64:	695a      	ldr	r2, [r3, #20]
 8003f66:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003f68:	441a      	add	r2, r3
 8003f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f70:	699b      	ldr	r3, [r3, #24]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d004      	beq.n	8003f80 <PCD_EP_ISR_Handler+0x4c2>
 8003f76:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7a:	691b      	ldr	r3, [r3, #16]
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d206      	bcs.n	8003f8e <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f82:	781b      	ldrb	r3, [r3, #0]
 8003f84:	4619      	mov	r1, r3
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f7fe fb38 	bl	80025fc <HAL_PCD_DataOutStageCallback>
 8003f8c:	e005      	b.n	8003f9a <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003f94:	4618      	mov	r0, r3
 8003f96:	f003 fa63 	bl	8007460 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003f9a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003f9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d07e      	beq.n	80040a2 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8003fa4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003fa8:	1c5a      	adds	r2, r3, #1
 8003faa:	4613      	mov	r3, r2
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	4413      	add	r3, r2
 8003fb0:	00db      	lsls	r3, r3, #3
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	4413      	add	r3, r2
 8003fb6:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	461a      	mov	r2, r3
 8003fbe:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	4413      	add	r3, r2
 8003fc6:	881b      	ldrh	r3, [r3, #0]
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003fce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fd2:	843b      	strh	r3, [r7, #32]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	461a      	mov	r2, r3
 8003fda:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	441a      	add	r2, r3
 8003fe2:	8c3b      	ldrh	r3, [r7, #32]
 8003fe4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fe8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8003ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff2:	78db      	ldrb	r3, [r3, #3]
 8003ff4:	2b03      	cmp	r3, #3
 8003ff6:	d00c      	beq.n	8004012 <PCD_EP_ISR_Handler+0x554>
 8003ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ffa:	78db      	ldrb	r3, [r3, #3]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d008      	beq.n	8004012 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8004000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004002:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8004004:	2b02      	cmp	r3, #2
 8004006:	d146      	bne.n	8004096 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8004008:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800400a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800400e:	2b00      	cmp	r3, #0
 8004010:	d141      	bne.n	8004096 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800401a:	b29b      	uxth	r3, r3
 800401c:	461a      	mov	r2, r3
 800401e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004020:	781b      	ldrb	r3, [r3, #0]
 8004022:	00db      	lsls	r3, r3, #3
 8004024:	4413      	add	r3, r2
 8004026:	3302      	adds	r3, #2
 8004028:	005b      	lsls	r3, r3, #1
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	6812      	ldr	r2, [r2, #0]
 800402e:	4413      	add	r3, r2
 8004030:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004034:	881b      	ldrh	r3, [r3, #0]
 8004036:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800403a:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 800403c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403e:	699a      	ldr	r2, [r3, #24]
 8004040:	8bfb      	ldrh	r3, [r7, #30]
 8004042:	429a      	cmp	r2, r3
 8004044:	d906      	bls.n	8004054 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8004046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004048:	699a      	ldr	r2, [r3, #24]
 800404a:	8bfb      	ldrh	r3, [r7, #30]
 800404c:	1ad2      	subs	r2, r2, r3
 800404e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004050:	619a      	str	r2, [r3, #24]
 8004052:	e002      	b.n	800405a <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8004054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004056:	2200      	movs	r2, #0
 8004058:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800405a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405c:	699b      	ldr	r3, [r3, #24]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d106      	bne.n	8004070 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004064:	781b      	ldrb	r3, [r3, #0]
 8004066:	4619      	mov	r1, r3
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f7fe fae2 	bl	8002632 <HAL_PCD_DataInStageCallback>
 800406e:	e018      	b.n	80040a2 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8004070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004072:	695a      	ldr	r2, [r3, #20]
 8004074:	8bfb      	ldrh	r3, [r7, #30]
 8004076:	441a      	add	r2, r3
 8004078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407a:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 800407c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407e:	69da      	ldr	r2, [r3, #28]
 8004080:	8bfb      	ldrh	r3, [r7, #30]
 8004082:	441a      	add	r2, r3
 8004084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004086:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800408e:	4618      	mov	r0, r3
 8004090:	f003 f9e6 	bl	8007460 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8004094:	e005      	b.n	80040a2 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004096:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004098:	461a      	mov	r2, r3
 800409a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f000 f91b 	bl	80042d8 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	b21b      	sxth	r3, r3
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	f6ff ad0a 	blt.w	8003ac8 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80040b4:	2300      	movs	r3, #0
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3738      	adds	r7, #56	; 0x38
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}

080040be <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80040be:	b580      	push	{r7, lr}
 80040c0:	b088      	sub	sp, #32
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	60f8      	str	r0, [r7, #12]
 80040c6:	60b9      	str	r1, [r7, #8]
 80040c8:	4613      	mov	r3, r2
 80040ca:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80040cc:	88fb      	ldrh	r3, [r7, #6]
 80040ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d07e      	beq.n	80041d4 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040de:	b29b      	uxth	r3, r3
 80040e0:	461a      	mov	r2, r3
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	781b      	ldrb	r3, [r3, #0]
 80040e6:	00db      	lsls	r3, r3, #3
 80040e8:	4413      	add	r3, r2
 80040ea:	3302      	adds	r3, #2
 80040ec:	005b      	lsls	r3, r3, #1
 80040ee:	68fa      	ldr	r2, [r7, #12]
 80040f0:	6812      	ldr	r2, [r2, #0]
 80040f2:	4413      	add	r3, r2
 80040f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80040f8:	881b      	ldrh	r3, [r3, #0]
 80040fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040fe:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	699a      	ldr	r2, [r3, #24]
 8004104:	8b7b      	ldrh	r3, [r7, #26]
 8004106:	429a      	cmp	r2, r3
 8004108:	d306      	bcc.n	8004118 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	699a      	ldr	r2, [r3, #24]
 800410e:	8b7b      	ldrh	r3, [r7, #26]
 8004110:	1ad2      	subs	r2, r2, r3
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	619a      	str	r2, [r3, #24]
 8004116:	e002      	b.n	800411e <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	2200      	movs	r2, #0
 800411c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	699b      	ldr	r3, [r3, #24]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d123      	bne.n	800416e <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	461a      	mov	r2, r3
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	781b      	ldrb	r3, [r3, #0]
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	4413      	add	r3, r2
 8004134:	881b      	ldrh	r3, [r3, #0]
 8004136:	b29b      	uxth	r3, r3
 8004138:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800413c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004140:	833b      	strh	r3, [r7, #24]
 8004142:	8b3b      	ldrh	r3, [r7, #24]
 8004144:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004148:	833b      	strh	r3, [r7, #24]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	461a      	mov	r2, r3
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	781b      	ldrb	r3, [r3, #0]
 8004154:	009b      	lsls	r3, r3, #2
 8004156:	441a      	add	r2, r3
 8004158:	8b3b      	ldrh	r3, [r7, #24]
 800415a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800415e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004162:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004166:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800416a:	b29b      	uxth	r3, r3
 800416c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800416e:	88fb      	ldrh	r3, [r7, #6]
 8004170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004174:	2b00      	cmp	r3, #0
 8004176:	d01f      	beq.n	80041b8 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	461a      	mov	r2, r3
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	781b      	ldrb	r3, [r3, #0]
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	4413      	add	r3, r2
 8004186:	881b      	ldrh	r3, [r3, #0]
 8004188:	b29b      	uxth	r3, r3
 800418a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800418e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004192:	82fb      	strh	r3, [r7, #22]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	461a      	mov	r2, r3
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	781b      	ldrb	r3, [r3, #0]
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	441a      	add	r2, r3
 80041a2:	8afb      	ldrh	r3, [r7, #22]
 80041a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041b0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80041b8:	8b7b      	ldrh	r3, [r7, #26]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	f000 8087 	beq.w	80042ce <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	6818      	ldr	r0, [r3, #0]
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	6959      	ldr	r1, [r3, #20]
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	891a      	ldrh	r2, [r3, #8]
 80041cc:	8b7b      	ldrh	r3, [r7, #26]
 80041ce:	f005 f902 	bl	80093d6 <USB_ReadPMA>
 80041d2:	e07c      	b.n	80042ce <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041dc:	b29b      	uxth	r3, r3
 80041de:	461a      	mov	r2, r3
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	781b      	ldrb	r3, [r3, #0]
 80041e4:	00db      	lsls	r3, r3, #3
 80041e6:	4413      	add	r3, r2
 80041e8:	3306      	adds	r3, #6
 80041ea:	005b      	lsls	r3, r3, #1
 80041ec:	68fa      	ldr	r2, [r7, #12]
 80041ee:	6812      	ldr	r2, [r2, #0]
 80041f0:	4413      	add	r3, r2
 80041f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80041f6:	881b      	ldrh	r3, [r3, #0]
 80041f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041fc:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	699a      	ldr	r2, [r3, #24]
 8004202:	8b7b      	ldrh	r3, [r7, #26]
 8004204:	429a      	cmp	r2, r3
 8004206:	d306      	bcc.n	8004216 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	699a      	ldr	r2, [r3, #24]
 800420c:	8b7b      	ldrh	r3, [r7, #26]
 800420e:	1ad2      	subs	r2, r2, r3
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	619a      	str	r2, [r3, #24]
 8004214:	e002      	b.n	800421c <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	2200      	movs	r2, #0
 800421a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	699b      	ldr	r3, [r3, #24]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d123      	bne.n	800426c <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	461a      	mov	r2, r3
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	781b      	ldrb	r3, [r3, #0]
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	4413      	add	r3, r2
 8004232:	881b      	ldrh	r3, [r3, #0]
 8004234:	b29b      	uxth	r3, r3
 8004236:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800423a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800423e:	83fb      	strh	r3, [r7, #30]
 8004240:	8bfb      	ldrh	r3, [r7, #30]
 8004242:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004246:	83fb      	strh	r3, [r7, #30]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	461a      	mov	r2, r3
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	781b      	ldrb	r3, [r3, #0]
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	441a      	add	r2, r3
 8004256:	8bfb      	ldrh	r3, [r7, #30]
 8004258:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800425c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004260:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004264:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004268:	b29b      	uxth	r3, r3
 800426a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800426c:	88fb      	ldrh	r3, [r7, #6]
 800426e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004272:	2b00      	cmp	r3, #0
 8004274:	d11f      	bne.n	80042b6 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	461a      	mov	r2, r3
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	781b      	ldrb	r3, [r3, #0]
 8004280:	009b      	lsls	r3, r3, #2
 8004282:	4413      	add	r3, r2
 8004284:	881b      	ldrh	r3, [r3, #0]
 8004286:	b29b      	uxth	r3, r3
 8004288:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800428c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004290:	83bb      	strh	r3, [r7, #28]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	461a      	mov	r2, r3
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	009b      	lsls	r3, r3, #2
 800429e:	441a      	add	r2, r3
 80042a0:	8bbb      	ldrh	r3, [r7, #28]
 80042a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042ae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80042b6:	8b7b      	ldrh	r3, [r7, #26]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d008      	beq.n	80042ce <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	6818      	ldr	r0, [r3, #0]
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	6959      	ldr	r1, [r3, #20]
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	895a      	ldrh	r2, [r3, #10]
 80042c8:	8b7b      	ldrh	r3, [r7, #26]
 80042ca:	f005 f884 	bl	80093d6 <USB_ReadPMA>
    }
  }

  return count;
 80042ce:	8b7b      	ldrh	r3, [r7, #26]
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3720      	adds	r7, #32
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}

080042d8 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b0a2      	sub	sp, #136	; 0x88
 80042dc:	af00      	add	r7, sp, #0
 80042de:	60f8      	str	r0, [r7, #12]
 80042e0:	60b9      	str	r1, [r7, #8]
 80042e2:	4613      	mov	r3, r2
 80042e4:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80042e6:	88fb      	ldrh	r3, [r7, #6]
 80042e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	f000 81c7 	beq.w	8004680 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	461a      	mov	r2, r3
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	781b      	ldrb	r3, [r3, #0]
 8004302:	00db      	lsls	r3, r3, #3
 8004304:	4413      	add	r3, r2
 8004306:	3302      	adds	r3, #2
 8004308:	005b      	lsls	r3, r3, #1
 800430a:	68fa      	ldr	r2, [r7, #12]
 800430c:	6812      	ldr	r2, [r2, #0]
 800430e:	4413      	add	r3, r2
 8004310:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004314:	881b      	ldrh	r3, [r3, #0]
 8004316:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800431a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	699a      	ldr	r2, [r3, #24]
 8004322:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004326:	429a      	cmp	r2, r3
 8004328:	d907      	bls.n	800433a <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	699a      	ldr	r2, [r3, #24]
 800432e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004332:	1ad2      	subs	r2, r2, r3
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	619a      	str	r2, [r3, #24]
 8004338:	e002      	b.n	8004340 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	2200      	movs	r2, #0
 800433e:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	699b      	ldr	r3, [r3, #24]
 8004344:	2b00      	cmp	r3, #0
 8004346:	f040 80b9 	bne.w	80044bc <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	785b      	ldrb	r3, [r3, #1]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d126      	bne.n	80043a0 <HAL_PCD_EP_DB_Transmit+0xc8>
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	62bb      	str	r3, [r7, #40]	; 0x28
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004360:	b29b      	uxth	r3, r3
 8004362:	461a      	mov	r2, r3
 8004364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004366:	4413      	add	r3, r2
 8004368:	62bb      	str	r3, [r7, #40]	; 0x28
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	781b      	ldrb	r3, [r3, #0]
 800436e:	011a      	lsls	r2, r3, #4
 8004370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004372:	4413      	add	r3, r2
 8004374:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004378:	627b      	str	r3, [r7, #36]	; 0x24
 800437a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437c:	881b      	ldrh	r3, [r3, #0]
 800437e:	b29b      	uxth	r3, r3
 8004380:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004384:	b29a      	uxth	r2, r3
 8004386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004388:	801a      	strh	r2, [r3, #0]
 800438a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800438c:	881b      	ldrh	r3, [r3, #0]
 800438e:	b29b      	uxth	r3, r3
 8004390:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004394:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004398:	b29a      	uxth	r2, r3
 800439a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439c:	801a      	strh	r2, [r3, #0]
 800439e:	e01a      	b.n	80043d6 <HAL_PCD_EP_DB_Transmit+0xfe>
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	785b      	ldrb	r3, [r3, #1]
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d116      	bne.n	80043d6 <HAL_PCD_EP_DB_Transmit+0xfe>
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	633b      	str	r3, [r7, #48]	; 0x30
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	461a      	mov	r2, r3
 80043ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043bc:	4413      	add	r3, r2
 80043be:	633b      	str	r3, [r7, #48]	; 0x30
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	781b      	ldrb	r3, [r3, #0]
 80043c4:	011a      	lsls	r2, r3, #4
 80043c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043c8:	4413      	add	r3, r2
 80043ca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80043ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043d2:	2200      	movs	r2, #0
 80043d4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	623b      	str	r3, [r7, #32]
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	785b      	ldrb	r3, [r3, #1]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d126      	bne.n	8004432 <HAL_PCD_EP_DB_Transmit+0x15a>
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	61bb      	str	r3, [r7, #24]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	461a      	mov	r2, r3
 80043f6:	69bb      	ldr	r3, [r7, #24]
 80043f8:	4413      	add	r3, r2
 80043fa:	61bb      	str	r3, [r7, #24]
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	781b      	ldrb	r3, [r3, #0]
 8004400:	011a      	lsls	r2, r3, #4
 8004402:	69bb      	ldr	r3, [r7, #24]
 8004404:	4413      	add	r3, r2
 8004406:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800440a:	617b      	str	r3, [r7, #20]
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	881b      	ldrh	r3, [r3, #0]
 8004410:	b29b      	uxth	r3, r3
 8004412:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004416:	b29a      	uxth	r2, r3
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	801a      	strh	r2, [r3, #0]
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	881b      	ldrh	r3, [r3, #0]
 8004420:	b29b      	uxth	r3, r3
 8004422:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004426:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800442a:	b29a      	uxth	r2, r3
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	801a      	strh	r2, [r3, #0]
 8004430:	e017      	b.n	8004462 <HAL_PCD_EP_DB_Transmit+0x18a>
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	785b      	ldrb	r3, [r3, #1]
 8004436:	2b01      	cmp	r3, #1
 8004438:	d113      	bne.n	8004462 <HAL_PCD_EP_DB_Transmit+0x18a>
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004442:	b29b      	uxth	r3, r3
 8004444:	461a      	mov	r2, r3
 8004446:	6a3b      	ldr	r3, [r7, #32]
 8004448:	4413      	add	r3, r2
 800444a:	623b      	str	r3, [r7, #32]
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	781b      	ldrb	r3, [r3, #0]
 8004450:	011a      	lsls	r2, r3, #4
 8004452:	6a3b      	ldr	r3, [r7, #32]
 8004454:	4413      	add	r3, r2
 8004456:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800445a:	61fb      	str	r3, [r7, #28]
 800445c:	69fb      	ldr	r3, [r7, #28]
 800445e:	2200      	movs	r2, #0
 8004460:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	781b      	ldrb	r3, [r3, #0]
 8004466:	4619      	mov	r1, r3
 8004468:	68f8      	ldr	r0, [r7, #12]
 800446a:	f7fe f8e2 	bl	8002632 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800446e:	88fb      	ldrh	r3, [r7, #6]
 8004470:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004474:	2b00      	cmp	r3, #0
 8004476:	f000 82d4 	beq.w	8004a22 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	461a      	mov	r2, r3
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	781b      	ldrb	r3, [r3, #0]
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	4413      	add	r3, r2
 8004488:	881b      	ldrh	r3, [r3, #0]
 800448a:	b29b      	uxth	r3, r3
 800448c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004490:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004494:	827b      	strh	r3, [r7, #18]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	461a      	mov	r2, r3
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	781b      	ldrb	r3, [r3, #0]
 80044a0:	009b      	lsls	r3, r3, #2
 80044a2:	441a      	add	r2, r3
 80044a4:	8a7b      	ldrh	r3, [r7, #18]
 80044a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80044b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	8013      	strh	r3, [r2, #0]
 80044ba:	e2b2      	b.n	8004a22 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80044bc:	88fb      	ldrh	r3, [r7, #6]
 80044be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d021      	beq.n	800450a <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	461a      	mov	r2, r3
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	781b      	ldrb	r3, [r3, #0]
 80044d0:	009b      	lsls	r3, r3, #2
 80044d2:	4413      	add	r3, r2
 80044d4:	881b      	ldrh	r3, [r3, #0]
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044e0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	461a      	mov	r2, r3
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	781b      	ldrb	r3, [r3, #0]
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	441a      	add	r2, r3
 80044f2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80044f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004502:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004506:	b29b      	uxth	r3, r3
 8004508:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004510:	2b01      	cmp	r3, #1
 8004512:	f040 8286 	bne.w	8004a22 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	695a      	ldr	r2, [r3, #20]
 800451a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800451e:	441a      	add	r2, r3
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	69da      	ldr	r2, [r3, #28]
 8004528:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800452c:	441a      	add	r2, r3
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	6a1a      	ldr	r2, [r3, #32]
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	691b      	ldr	r3, [r3, #16]
 800453a:	429a      	cmp	r2, r3
 800453c:	d309      	bcc.n	8004552 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	691b      	ldr	r3, [r3, #16]
 8004542:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	6a1a      	ldr	r2, [r3, #32]
 8004548:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800454a:	1ad2      	subs	r2, r2, r3
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	621a      	str	r2, [r3, #32]
 8004550:	e015      	b.n	800457e <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	6a1b      	ldr	r3, [r3, #32]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d107      	bne.n	800456a <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 800455a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800455e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	2200      	movs	r2, #0
 8004564:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004568:	e009      	b.n	800457e <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	2200      	movs	r2, #0
 800456e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	6a1b      	ldr	r3, [r3, #32]
 8004576:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	2200      	movs	r2, #0
 800457c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	785b      	ldrb	r3, [r3, #1]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d155      	bne.n	8004632 <HAL_PCD_EP_DB_Transmit+0x35a>
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	63bb      	str	r3, [r7, #56]	; 0x38
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004594:	b29b      	uxth	r3, r3
 8004596:	461a      	mov	r2, r3
 8004598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800459a:	4413      	add	r3, r2
 800459c:	63bb      	str	r3, [r7, #56]	; 0x38
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	781b      	ldrb	r3, [r3, #0]
 80045a2:	011a      	lsls	r2, r3, #4
 80045a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045a6:	4413      	add	r3, r2
 80045a8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80045ac:	637b      	str	r3, [r7, #52]	; 0x34
 80045ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d112      	bne.n	80045da <HAL_PCD_EP_DB_Transmit+0x302>
 80045b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045b6:	881b      	ldrh	r3, [r3, #0]
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80045be:	b29a      	uxth	r2, r3
 80045c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045c2:	801a      	strh	r2, [r3, #0]
 80045c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045c6:	881b      	ldrh	r3, [r3, #0]
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045d2:	b29a      	uxth	r2, r3
 80045d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045d6:	801a      	strh	r2, [r3, #0]
 80045d8:	e047      	b.n	800466a <HAL_PCD_EP_DB_Transmit+0x392>
 80045da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045dc:	2b3e      	cmp	r3, #62	; 0x3e
 80045de:	d811      	bhi.n	8004604 <HAL_PCD_EP_DB_Transmit+0x32c>
 80045e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045e2:	085b      	lsrs	r3, r3, #1
 80045e4:	64bb      	str	r3, [r7, #72]	; 0x48
 80045e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045e8:	f003 0301 	and.w	r3, r3, #1
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d002      	beq.n	80045f6 <HAL_PCD_EP_DB_Transmit+0x31e>
 80045f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045f2:	3301      	adds	r3, #1
 80045f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80045f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045f8:	b29b      	uxth	r3, r3
 80045fa:	029b      	lsls	r3, r3, #10
 80045fc:	b29a      	uxth	r2, r3
 80045fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004600:	801a      	strh	r2, [r3, #0]
 8004602:	e032      	b.n	800466a <HAL_PCD_EP_DB_Transmit+0x392>
 8004604:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004606:	095b      	lsrs	r3, r3, #5
 8004608:	64bb      	str	r3, [r7, #72]	; 0x48
 800460a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800460c:	f003 031f 	and.w	r3, r3, #31
 8004610:	2b00      	cmp	r3, #0
 8004612:	d102      	bne.n	800461a <HAL_PCD_EP_DB_Transmit+0x342>
 8004614:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004616:	3b01      	subs	r3, #1
 8004618:	64bb      	str	r3, [r7, #72]	; 0x48
 800461a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800461c:	b29b      	uxth	r3, r3
 800461e:	029b      	lsls	r3, r3, #10
 8004620:	b29b      	uxth	r3, r3
 8004622:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004626:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800462a:	b29a      	uxth	r2, r3
 800462c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800462e:	801a      	strh	r2, [r3, #0]
 8004630:	e01b      	b.n	800466a <HAL_PCD_EP_DB_Transmit+0x392>
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	785b      	ldrb	r3, [r3, #1]
 8004636:	2b01      	cmp	r3, #1
 8004638:	d117      	bne.n	800466a <HAL_PCD_EP_DB_Transmit+0x392>
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	643b      	str	r3, [r7, #64]	; 0x40
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004648:	b29b      	uxth	r3, r3
 800464a:	461a      	mov	r2, r3
 800464c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800464e:	4413      	add	r3, r2
 8004650:	643b      	str	r3, [r7, #64]	; 0x40
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	781b      	ldrb	r3, [r3, #0]
 8004656:	011a      	lsls	r2, r3, #4
 8004658:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800465a:	4413      	add	r3, r2
 800465c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004660:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004662:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004664:	b29a      	uxth	r2, r3
 8004666:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004668:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	6818      	ldr	r0, [r3, #0]
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	6959      	ldr	r1, [r3, #20]
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	891a      	ldrh	r2, [r3, #8]
 8004676:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004678:	b29b      	uxth	r3, r3
 800467a:	f004 fe67 	bl	800934c <USB_WritePMA>
 800467e:	e1d0      	b.n	8004a22 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004688:	b29b      	uxth	r3, r3
 800468a:	461a      	mov	r2, r3
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	781b      	ldrb	r3, [r3, #0]
 8004690:	00db      	lsls	r3, r3, #3
 8004692:	4413      	add	r3, r2
 8004694:	3306      	adds	r3, #6
 8004696:	005b      	lsls	r3, r3, #1
 8004698:	68fa      	ldr	r2, [r7, #12]
 800469a:	6812      	ldr	r2, [r2, #0]
 800469c:	4413      	add	r3, r2
 800469e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80046a2:	881b      	ldrh	r3, [r3, #0]
 80046a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80046a8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	699a      	ldr	r2, [r3, #24]
 80046b0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d307      	bcc.n	80046c8 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	699a      	ldr	r2, [r3, #24]
 80046bc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80046c0:	1ad2      	subs	r2, r2, r3
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	619a      	str	r2, [r3, #24]
 80046c6:	e002      	b.n	80046ce <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	2200      	movs	r2, #0
 80046cc:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	699b      	ldr	r3, [r3, #24]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	f040 80c4 	bne.w	8004860 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	785b      	ldrb	r3, [r3, #1]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d126      	bne.n	800472e <HAL_PCD_EP_DB_Transmit+0x456>
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046ee:	b29b      	uxth	r3, r3
 80046f0:	461a      	mov	r2, r3
 80046f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046f4:	4413      	add	r3, r2
 80046f6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	781b      	ldrb	r3, [r3, #0]
 80046fc:	011a      	lsls	r2, r3, #4
 80046fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004700:	4413      	add	r3, r2
 8004702:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004706:	66bb      	str	r3, [r7, #104]	; 0x68
 8004708:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800470a:	881b      	ldrh	r3, [r3, #0]
 800470c:	b29b      	uxth	r3, r3
 800470e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004712:	b29a      	uxth	r2, r3
 8004714:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004716:	801a      	strh	r2, [r3, #0]
 8004718:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800471a:	881b      	ldrh	r3, [r3, #0]
 800471c:	b29b      	uxth	r3, r3
 800471e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004722:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004726:	b29a      	uxth	r2, r3
 8004728:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800472a:	801a      	strh	r2, [r3, #0]
 800472c:	e01a      	b.n	8004764 <HAL_PCD_EP_DB_Transmit+0x48c>
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	785b      	ldrb	r3, [r3, #1]
 8004732:	2b01      	cmp	r3, #1
 8004734:	d116      	bne.n	8004764 <HAL_PCD_EP_DB_Transmit+0x48c>
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	677b      	str	r3, [r7, #116]	; 0x74
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004744:	b29b      	uxth	r3, r3
 8004746:	461a      	mov	r2, r3
 8004748:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800474a:	4413      	add	r3, r2
 800474c:	677b      	str	r3, [r7, #116]	; 0x74
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	781b      	ldrb	r3, [r3, #0]
 8004752:	011a      	lsls	r2, r3, #4
 8004754:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004756:	4413      	add	r3, r2
 8004758:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800475c:	673b      	str	r3, [r7, #112]	; 0x70
 800475e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004760:	2200      	movs	r2, #0
 8004762:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	67bb      	str	r3, [r7, #120]	; 0x78
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	785b      	ldrb	r3, [r3, #1]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d12f      	bne.n	80047d2 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004782:	b29b      	uxth	r3, r3
 8004784:	461a      	mov	r2, r3
 8004786:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800478a:	4413      	add	r3, r2
 800478c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	781b      	ldrb	r3, [r3, #0]
 8004794:	011a      	lsls	r2, r3, #4
 8004796:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800479a:	4413      	add	r3, r2
 800479c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80047a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80047a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80047a8:	881b      	ldrh	r3, [r3, #0]
 80047aa:	b29b      	uxth	r3, r3
 80047ac:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80047b0:	b29a      	uxth	r2, r3
 80047b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80047b6:	801a      	strh	r2, [r3, #0]
 80047b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80047bc:	881b      	ldrh	r3, [r3, #0]
 80047be:	b29b      	uxth	r3, r3
 80047c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047c8:	b29a      	uxth	r2, r3
 80047ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80047ce:	801a      	strh	r2, [r3, #0]
 80047d0:	e017      	b.n	8004802 <HAL_PCD_EP_DB_Transmit+0x52a>
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	785b      	ldrb	r3, [r3, #1]
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d113      	bne.n	8004802 <HAL_PCD_EP_DB_Transmit+0x52a>
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	461a      	mov	r2, r3
 80047e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047e8:	4413      	add	r3, r2
 80047ea:	67bb      	str	r3, [r7, #120]	; 0x78
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	781b      	ldrb	r3, [r3, #0]
 80047f0:	011a      	lsls	r2, r3, #4
 80047f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047f4:	4413      	add	r3, r2
 80047f6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80047fa:	67fb      	str	r3, [r7, #124]	; 0x7c
 80047fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80047fe:	2200      	movs	r2, #0
 8004800:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	781b      	ldrb	r3, [r3, #0]
 8004806:	4619      	mov	r1, r3
 8004808:	68f8      	ldr	r0, [r7, #12]
 800480a:	f7fd ff12 	bl	8002632 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800480e:	88fb      	ldrh	r3, [r7, #6]
 8004810:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004814:	2b00      	cmp	r3, #0
 8004816:	f040 8104 	bne.w	8004a22 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	461a      	mov	r2, r3
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	781b      	ldrb	r3, [r3, #0]
 8004824:	009b      	lsls	r3, r3, #2
 8004826:	4413      	add	r3, r2
 8004828:	881b      	ldrh	r3, [r3, #0]
 800482a:	b29b      	uxth	r3, r3
 800482c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004830:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004834:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	461a      	mov	r2, r3
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	781b      	ldrb	r3, [r3, #0]
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	441a      	add	r2, r3
 8004846:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800484a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800484e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004852:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004856:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800485a:	b29b      	uxth	r3, r3
 800485c:	8013      	strh	r3, [r2, #0]
 800485e:	e0e0      	b.n	8004a22 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004860:	88fb      	ldrh	r3, [r7, #6]
 8004862:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004866:	2b00      	cmp	r3, #0
 8004868:	d121      	bne.n	80048ae <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	461a      	mov	r2, r3
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	781b      	ldrb	r3, [r3, #0]
 8004874:	009b      	lsls	r3, r3, #2
 8004876:	4413      	add	r3, r2
 8004878:	881b      	ldrh	r3, [r3, #0]
 800487a:	b29b      	uxth	r3, r3
 800487c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004880:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004884:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	461a      	mov	r2, r3
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	781b      	ldrb	r3, [r3, #0]
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	441a      	add	r2, r3
 8004896:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800489a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800489e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80048a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	f040 80b4 	bne.w	8004a22 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	695a      	ldr	r2, [r3, #20]
 80048be:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80048c2:	441a      	add	r2, r3
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	69da      	ldr	r2, [r3, #28]
 80048cc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80048d0:	441a      	add	r2, r3
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	6a1a      	ldr	r2, [r3, #32]
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	691b      	ldr	r3, [r3, #16]
 80048de:	429a      	cmp	r2, r3
 80048e0:	d309      	bcc.n	80048f6 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	691b      	ldr	r3, [r3, #16]
 80048e6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	6a1a      	ldr	r2, [r3, #32]
 80048ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048ee:	1ad2      	subs	r2, r2, r3
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	621a      	str	r2, [r3, #32]
 80048f4:	e015      	b.n	8004922 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	6a1b      	ldr	r3, [r3, #32]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d107      	bne.n	800490e <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 80048fe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004902:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	2200      	movs	r2, #0
 8004908:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800490c:	e009      	b.n	8004922 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	6a1b      	ldr	r3, [r3, #32]
 8004912:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	2200      	movs	r2, #0
 8004918:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	2200      	movs	r2, #0
 800491e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	667b      	str	r3, [r7, #100]	; 0x64
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	785b      	ldrb	r3, [r3, #1]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d155      	bne.n	80049dc <HAL_PCD_EP_DB_Transmit+0x704>
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800493e:	b29b      	uxth	r3, r3
 8004940:	461a      	mov	r2, r3
 8004942:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004944:	4413      	add	r3, r2
 8004946:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	781b      	ldrb	r3, [r3, #0]
 800494c:	011a      	lsls	r2, r3, #4
 800494e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004950:	4413      	add	r3, r2
 8004952:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004956:	65bb      	str	r3, [r7, #88]	; 0x58
 8004958:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800495a:	2b00      	cmp	r3, #0
 800495c:	d112      	bne.n	8004984 <HAL_PCD_EP_DB_Transmit+0x6ac>
 800495e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004960:	881b      	ldrh	r3, [r3, #0]
 8004962:	b29b      	uxth	r3, r3
 8004964:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004968:	b29a      	uxth	r2, r3
 800496a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800496c:	801a      	strh	r2, [r3, #0]
 800496e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004970:	881b      	ldrh	r3, [r3, #0]
 8004972:	b29b      	uxth	r3, r3
 8004974:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004978:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800497c:	b29a      	uxth	r2, r3
 800497e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004980:	801a      	strh	r2, [r3, #0]
 8004982:	e044      	b.n	8004a0e <HAL_PCD_EP_DB_Transmit+0x736>
 8004984:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004986:	2b3e      	cmp	r3, #62	; 0x3e
 8004988:	d811      	bhi.n	80049ae <HAL_PCD_EP_DB_Transmit+0x6d6>
 800498a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800498c:	085b      	lsrs	r3, r3, #1
 800498e:	657b      	str	r3, [r7, #84]	; 0x54
 8004990:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004992:	f003 0301 	and.w	r3, r3, #1
 8004996:	2b00      	cmp	r3, #0
 8004998:	d002      	beq.n	80049a0 <HAL_PCD_EP_DB_Transmit+0x6c8>
 800499a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800499c:	3301      	adds	r3, #1
 800499e:	657b      	str	r3, [r7, #84]	; 0x54
 80049a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	029b      	lsls	r3, r3, #10
 80049a6:	b29a      	uxth	r2, r3
 80049a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80049aa:	801a      	strh	r2, [r3, #0]
 80049ac:	e02f      	b.n	8004a0e <HAL_PCD_EP_DB_Transmit+0x736>
 80049ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049b0:	095b      	lsrs	r3, r3, #5
 80049b2:	657b      	str	r3, [r7, #84]	; 0x54
 80049b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049b6:	f003 031f 	and.w	r3, r3, #31
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d102      	bne.n	80049c4 <HAL_PCD_EP_DB_Transmit+0x6ec>
 80049be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049c0:	3b01      	subs	r3, #1
 80049c2:	657b      	str	r3, [r7, #84]	; 0x54
 80049c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	029b      	lsls	r3, r3, #10
 80049ca:	b29b      	uxth	r3, r3
 80049cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049d4:	b29a      	uxth	r2, r3
 80049d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80049d8:	801a      	strh	r2, [r3, #0]
 80049da:	e018      	b.n	8004a0e <HAL_PCD_EP_DB_Transmit+0x736>
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	785b      	ldrb	r3, [r3, #1]
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d114      	bne.n	8004a0e <HAL_PCD_EP_DB_Transmit+0x736>
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	461a      	mov	r2, r3
 80049f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049f2:	4413      	add	r3, r2
 80049f4:	667b      	str	r3, [r7, #100]	; 0x64
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	781b      	ldrb	r3, [r3, #0]
 80049fa:	011a      	lsls	r2, r3, #4
 80049fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049fe:	4413      	add	r3, r2
 8004a00:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004a04:	663b      	str	r3, [r7, #96]	; 0x60
 8004a06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a08:	b29a      	uxth	r2, r3
 8004a0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a0c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	6818      	ldr	r0, [r3, #0]
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	6959      	ldr	r1, [r3, #20]
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	895a      	ldrh	r2, [r3, #10]
 8004a1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	f004 fc95 	bl	800934c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	461a      	mov	r2, r3
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	781b      	ldrb	r3, [r3, #0]
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	4413      	add	r3, r2
 8004a30:	881b      	ldrh	r3, [r3, #0]
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a3c:	823b      	strh	r3, [r7, #16]
 8004a3e:	8a3b      	ldrh	r3, [r7, #16]
 8004a40:	f083 0310 	eor.w	r3, r3, #16
 8004a44:	823b      	strh	r3, [r7, #16]
 8004a46:	8a3b      	ldrh	r3, [r7, #16]
 8004a48:	f083 0320 	eor.w	r3, r3, #32
 8004a4c:	823b      	strh	r3, [r7, #16]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	461a      	mov	r2, r3
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	781b      	ldrb	r3, [r3, #0]
 8004a58:	009b      	lsls	r3, r3, #2
 8004a5a:	441a      	add	r2, r3
 8004a5c:	8a3b      	ldrh	r3, [r7, #16]
 8004a5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004a72:	2300      	movs	r3, #0
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3788      	adds	r7, #136	; 0x88
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}

08004a7c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b087      	sub	sp, #28
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	60f8      	str	r0, [r7, #12]
 8004a84:	607b      	str	r3, [r7, #4]
 8004a86:	460b      	mov	r3, r1
 8004a88:	817b      	strh	r3, [r7, #10]
 8004a8a:	4613      	mov	r3, r2
 8004a8c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004a8e:	897b      	ldrh	r3, [r7, #10]
 8004a90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a94:	b29b      	uxth	r3, r3
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d00b      	beq.n	8004ab2 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a9a:	897b      	ldrh	r3, [r7, #10]
 8004a9c:	f003 0307 	and.w	r3, r3, #7
 8004aa0:	1c5a      	adds	r2, r3, #1
 8004aa2:	4613      	mov	r3, r2
 8004aa4:	009b      	lsls	r3, r3, #2
 8004aa6:	4413      	add	r3, r2
 8004aa8:	00db      	lsls	r3, r3, #3
 8004aaa:	68fa      	ldr	r2, [r7, #12]
 8004aac:	4413      	add	r3, r2
 8004aae:	617b      	str	r3, [r7, #20]
 8004ab0:	e009      	b.n	8004ac6 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004ab2:	897a      	ldrh	r2, [r7, #10]
 8004ab4:	4613      	mov	r3, r2
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	4413      	add	r3, r2
 8004aba:	00db      	lsls	r3, r3, #3
 8004abc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004ac0:	68fa      	ldr	r2, [r7, #12]
 8004ac2:	4413      	add	r3, r2
 8004ac4:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004ac6:	893b      	ldrh	r3, [r7, #8]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d107      	bne.n	8004adc <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	b29a      	uxth	r2, r3
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	80da      	strh	r2, [r3, #6]
 8004ada:	e00b      	b.n	8004af4 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	b29a      	uxth	r2, r3
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	0c1b      	lsrs	r3, r3, #16
 8004aee:	b29a      	uxth	r2, r3
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8004af4:	2300      	movs	r3, #0
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	371c      	adds	r7, #28
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bc80      	pop	{r7}
 8004afe:	4770      	bx	lr

08004b00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b086      	sub	sp, #24
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d101      	bne.n	8004b12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e272      	b.n	8004ff8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 0301 	and.w	r3, r3, #1
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	f000 8087 	beq.w	8004c2e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004b20:	4b92      	ldr	r3, [pc, #584]	; (8004d6c <HAL_RCC_OscConfig+0x26c>)
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	f003 030c 	and.w	r3, r3, #12
 8004b28:	2b04      	cmp	r3, #4
 8004b2a:	d00c      	beq.n	8004b46 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004b2c:	4b8f      	ldr	r3, [pc, #572]	; (8004d6c <HAL_RCC_OscConfig+0x26c>)
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	f003 030c 	and.w	r3, r3, #12
 8004b34:	2b08      	cmp	r3, #8
 8004b36:	d112      	bne.n	8004b5e <HAL_RCC_OscConfig+0x5e>
 8004b38:	4b8c      	ldr	r3, [pc, #560]	; (8004d6c <HAL_RCC_OscConfig+0x26c>)
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b44:	d10b      	bne.n	8004b5e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b46:	4b89      	ldr	r3, [pc, #548]	; (8004d6c <HAL_RCC_OscConfig+0x26c>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d06c      	beq.n	8004c2c <HAL_RCC_OscConfig+0x12c>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d168      	bne.n	8004c2c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e24c      	b.n	8004ff8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b66:	d106      	bne.n	8004b76 <HAL_RCC_OscConfig+0x76>
 8004b68:	4b80      	ldr	r3, [pc, #512]	; (8004d6c <HAL_RCC_OscConfig+0x26c>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a7f      	ldr	r2, [pc, #508]	; (8004d6c <HAL_RCC_OscConfig+0x26c>)
 8004b6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b72:	6013      	str	r3, [r2, #0]
 8004b74:	e02e      	b.n	8004bd4 <HAL_RCC_OscConfig+0xd4>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d10c      	bne.n	8004b98 <HAL_RCC_OscConfig+0x98>
 8004b7e:	4b7b      	ldr	r3, [pc, #492]	; (8004d6c <HAL_RCC_OscConfig+0x26c>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a7a      	ldr	r2, [pc, #488]	; (8004d6c <HAL_RCC_OscConfig+0x26c>)
 8004b84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b88:	6013      	str	r3, [r2, #0]
 8004b8a:	4b78      	ldr	r3, [pc, #480]	; (8004d6c <HAL_RCC_OscConfig+0x26c>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a77      	ldr	r2, [pc, #476]	; (8004d6c <HAL_RCC_OscConfig+0x26c>)
 8004b90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b94:	6013      	str	r3, [r2, #0]
 8004b96:	e01d      	b.n	8004bd4 <HAL_RCC_OscConfig+0xd4>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ba0:	d10c      	bne.n	8004bbc <HAL_RCC_OscConfig+0xbc>
 8004ba2:	4b72      	ldr	r3, [pc, #456]	; (8004d6c <HAL_RCC_OscConfig+0x26c>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a71      	ldr	r2, [pc, #452]	; (8004d6c <HAL_RCC_OscConfig+0x26c>)
 8004ba8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004bac:	6013      	str	r3, [r2, #0]
 8004bae:	4b6f      	ldr	r3, [pc, #444]	; (8004d6c <HAL_RCC_OscConfig+0x26c>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a6e      	ldr	r2, [pc, #440]	; (8004d6c <HAL_RCC_OscConfig+0x26c>)
 8004bb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bb8:	6013      	str	r3, [r2, #0]
 8004bba:	e00b      	b.n	8004bd4 <HAL_RCC_OscConfig+0xd4>
 8004bbc:	4b6b      	ldr	r3, [pc, #428]	; (8004d6c <HAL_RCC_OscConfig+0x26c>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a6a      	ldr	r2, [pc, #424]	; (8004d6c <HAL_RCC_OscConfig+0x26c>)
 8004bc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bc6:	6013      	str	r3, [r2, #0]
 8004bc8:	4b68      	ldr	r3, [pc, #416]	; (8004d6c <HAL_RCC_OscConfig+0x26c>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a67      	ldr	r2, [pc, #412]	; (8004d6c <HAL_RCC_OscConfig+0x26c>)
 8004bce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004bd2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d013      	beq.n	8004c04 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bdc:	f7fd ffde 	bl	8002b9c <HAL_GetTick>
 8004be0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004be2:	e008      	b.n	8004bf6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004be4:	f7fd ffda 	bl	8002b9c <HAL_GetTick>
 8004be8:	4602      	mov	r2, r0
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	1ad3      	subs	r3, r2, r3
 8004bee:	2b64      	cmp	r3, #100	; 0x64
 8004bf0:	d901      	bls.n	8004bf6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004bf2:	2303      	movs	r3, #3
 8004bf4:	e200      	b.n	8004ff8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bf6:	4b5d      	ldr	r3, [pc, #372]	; (8004d6c <HAL_RCC_OscConfig+0x26c>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d0f0      	beq.n	8004be4 <HAL_RCC_OscConfig+0xe4>
 8004c02:	e014      	b.n	8004c2e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c04:	f7fd ffca 	bl	8002b9c <HAL_GetTick>
 8004c08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c0a:	e008      	b.n	8004c1e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c0c:	f7fd ffc6 	bl	8002b9c <HAL_GetTick>
 8004c10:	4602      	mov	r2, r0
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	1ad3      	subs	r3, r2, r3
 8004c16:	2b64      	cmp	r3, #100	; 0x64
 8004c18:	d901      	bls.n	8004c1e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004c1a:	2303      	movs	r3, #3
 8004c1c:	e1ec      	b.n	8004ff8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c1e:	4b53      	ldr	r3, [pc, #332]	; (8004d6c <HAL_RCC_OscConfig+0x26c>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d1f0      	bne.n	8004c0c <HAL_RCC_OscConfig+0x10c>
 8004c2a:	e000      	b.n	8004c2e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 0302 	and.w	r3, r3, #2
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d063      	beq.n	8004d02 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004c3a:	4b4c      	ldr	r3, [pc, #304]	; (8004d6c <HAL_RCC_OscConfig+0x26c>)
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	f003 030c 	and.w	r3, r3, #12
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d00b      	beq.n	8004c5e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004c46:	4b49      	ldr	r3, [pc, #292]	; (8004d6c <HAL_RCC_OscConfig+0x26c>)
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	f003 030c 	and.w	r3, r3, #12
 8004c4e:	2b08      	cmp	r3, #8
 8004c50:	d11c      	bne.n	8004c8c <HAL_RCC_OscConfig+0x18c>
 8004c52:	4b46      	ldr	r3, [pc, #280]	; (8004d6c <HAL_RCC_OscConfig+0x26c>)
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d116      	bne.n	8004c8c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c5e:	4b43      	ldr	r3, [pc, #268]	; (8004d6c <HAL_RCC_OscConfig+0x26c>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 0302 	and.w	r3, r3, #2
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d005      	beq.n	8004c76 <HAL_RCC_OscConfig+0x176>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	691b      	ldr	r3, [r3, #16]
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	d001      	beq.n	8004c76 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	e1c0      	b.n	8004ff8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c76:	4b3d      	ldr	r3, [pc, #244]	; (8004d6c <HAL_RCC_OscConfig+0x26c>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	695b      	ldr	r3, [r3, #20]
 8004c82:	00db      	lsls	r3, r3, #3
 8004c84:	4939      	ldr	r1, [pc, #228]	; (8004d6c <HAL_RCC_OscConfig+0x26c>)
 8004c86:	4313      	orrs	r3, r2
 8004c88:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c8a:	e03a      	b.n	8004d02 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	691b      	ldr	r3, [r3, #16]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d020      	beq.n	8004cd6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c94:	4b36      	ldr	r3, [pc, #216]	; (8004d70 <HAL_RCC_OscConfig+0x270>)
 8004c96:	2201      	movs	r2, #1
 8004c98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c9a:	f7fd ff7f 	bl	8002b9c <HAL_GetTick>
 8004c9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ca0:	e008      	b.n	8004cb4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ca2:	f7fd ff7b 	bl	8002b9c <HAL_GetTick>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	1ad3      	subs	r3, r2, r3
 8004cac:	2b02      	cmp	r3, #2
 8004cae:	d901      	bls.n	8004cb4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004cb0:	2303      	movs	r3, #3
 8004cb2:	e1a1      	b.n	8004ff8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cb4:	4b2d      	ldr	r3, [pc, #180]	; (8004d6c <HAL_RCC_OscConfig+0x26c>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 0302 	and.w	r3, r3, #2
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d0f0      	beq.n	8004ca2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cc0:	4b2a      	ldr	r3, [pc, #168]	; (8004d6c <HAL_RCC_OscConfig+0x26c>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	695b      	ldr	r3, [r3, #20]
 8004ccc:	00db      	lsls	r3, r3, #3
 8004cce:	4927      	ldr	r1, [pc, #156]	; (8004d6c <HAL_RCC_OscConfig+0x26c>)
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	600b      	str	r3, [r1, #0]
 8004cd4:	e015      	b.n	8004d02 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004cd6:	4b26      	ldr	r3, [pc, #152]	; (8004d70 <HAL_RCC_OscConfig+0x270>)
 8004cd8:	2200      	movs	r2, #0
 8004cda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cdc:	f7fd ff5e 	bl	8002b9c <HAL_GetTick>
 8004ce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ce2:	e008      	b.n	8004cf6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ce4:	f7fd ff5a 	bl	8002b9c <HAL_GetTick>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	1ad3      	subs	r3, r2, r3
 8004cee:	2b02      	cmp	r3, #2
 8004cf0:	d901      	bls.n	8004cf6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004cf2:	2303      	movs	r3, #3
 8004cf4:	e180      	b.n	8004ff8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cf6:	4b1d      	ldr	r3, [pc, #116]	; (8004d6c <HAL_RCC_OscConfig+0x26c>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f003 0302 	and.w	r3, r3, #2
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d1f0      	bne.n	8004ce4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f003 0308 	and.w	r3, r3, #8
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d03a      	beq.n	8004d84 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	699b      	ldr	r3, [r3, #24]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d019      	beq.n	8004d4a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d16:	4b17      	ldr	r3, [pc, #92]	; (8004d74 <HAL_RCC_OscConfig+0x274>)
 8004d18:	2201      	movs	r2, #1
 8004d1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d1c:	f7fd ff3e 	bl	8002b9c <HAL_GetTick>
 8004d20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d22:	e008      	b.n	8004d36 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d24:	f7fd ff3a 	bl	8002b9c <HAL_GetTick>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	1ad3      	subs	r3, r2, r3
 8004d2e:	2b02      	cmp	r3, #2
 8004d30:	d901      	bls.n	8004d36 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004d32:	2303      	movs	r3, #3
 8004d34:	e160      	b.n	8004ff8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d36:	4b0d      	ldr	r3, [pc, #52]	; (8004d6c <HAL_RCC_OscConfig+0x26c>)
 8004d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d3a:	f003 0302 	and.w	r3, r3, #2
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d0f0      	beq.n	8004d24 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004d42:	2001      	movs	r0, #1
 8004d44:	f000 faa6 	bl	8005294 <RCC_Delay>
 8004d48:	e01c      	b.n	8004d84 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d4a:	4b0a      	ldr	r3, [pc, #40]	; (8004d74 <HAL_RCC_OscConfig+0x274>)
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d50:	f7fd ff24 	bl	8002b9c <HAL_GetTick>
 8004d54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d56:	e00f      	b.n	8004d78 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d58:	f7fd ff20 	bl	8002b9c <HAL_GetTick>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	1ad3      	subs	r3, r2, r3
 8004d62:	2b02      	cmp	r3, #2
 8004d64:	d908      	bls.n	8004d78 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004d66:	2303      	movs	r3, #3
 8004d68:	e146      	b.n	8004ff8 <HAL_RCC_OscConfig+0x4f8>
 8004d6a:	bf00      	nop
 8004d6c:	40021000 	.word	0x40021000
 8004d70:	42420000 	.word	0x42420000
 8004d74:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d78:	4b92      	ldr	r3, [pc, #584]	; (8004fc4 <HAL_RCC_OscConfig+0x4c4>)
 8004d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d7c:	f003 0302 	and.w	r3, r3, #2
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d1e9      	bne.n	8004d58 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f003 0304 	and.w	r3, r3, #4
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	f000 80a6 	beq.w	8004ede <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d92:	2300      	movs	r3, #0
 8004d94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d96:	4b8b      	ldr	r3, [pc, #556]	; (8004fc4 <HAL_RCC_OscConfig+0x4c4>)
 8004d98:	69db      	ldr	r3, [r3, #28]
 8004d9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d10d      	bne.n	8004dbe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004da2:	4b88      	ldr	r3, [pc, #544]	; (8004fc4 <HAL_RCC_OscConfig+0x4c4>)
 8004da4:	69db      	ldr	r3, [r3, #28]
 8004da6:	4a87      	ldr	r2, [pc, #540]	; (8004fc4 <HAL_RCC_OscConfig+0x4c4>)
 8004da8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dac:	61d3      	str	r3, [r2, #28]
 8004dae:	4b85      	ldr	r3, [pc, #532]	; (8004fc4 <HAL_RCC_OscConfig+0x4c4>)
 8004db0:	69db      	ldr	r3, [r3, #28]
 8004db2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004db6:	60bb      	str	r3, [r7, #8]
 8004db8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dbe:	4b82      	ldr	r3, [pc, #520]	; (8004fc8 <HAL_RCC_OscConfig+0x4c8>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d118      	bne.n	8004dfc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004dca:	4b7f      	ldr	r3, [pc, #508]	; (8004fc8 <HAL_RCC_OscConfig+0x4c8>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a7e      	ldr	r2, [pc, #504]	; (8004fc8 <HAL_RCC_OscConfig+0x4c8>)
 8004dd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004dd6:	f7fd fee1 	bl	8002b9c <HAL_GetTick>
 8004dda:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ddc:	e008      	b.n	8004df0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dde:	f7fd fedd 	bl	8002b9c <HAL_GetTick>
 8004de2:	4602      	mov	r2, r0
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	1ad3      	subs	r3, r2, r3
 8004de8:	2b64      	cmp	r3, #100	; 0x64
 8004dea:	d901      	bls.n	8004df0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004dec:	2303      	movs	r3, #3
 8004dee:	e103      	b.n	8004ff8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004df0:	4b75      	ldr	r3, [pc, #468]	; (8004fc8 <HAL_RCC_OscConfig+0x4c8>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d0f0      	beq.n	8004dde <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d106      	bne.n	8004e12 <HAL_RCC_OscConfig+0x312>
 8004e04:	4b6f      	ldr	r3, [pc, #444]	; (8004fc4 <HAL_RCC_OscConfig+0x4c4>)
 8004e06:	6a1b      	ldr	r3, [r3, #32]
 8004e08:	4a6e      	ldr	r2, [pc, #440]	; (8004fc4 <HAL_RCC_OscConfig+0x4c4>)
 8004e0a:	f043 0301 	orr.w	r3, r3, #1
 8004e0e:	6213      	str	r3, [r2, #32]
 8004e10:	e02d      	b.n	8004e6e <HAL_RCC_OscConfig+0x36e>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	68db      	ldr	r3, [r3, #12]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d10c      	bne.n	8004e34 <HAL_RCC_OscConfig+0x334>
 8004e1a:	4b6a      	ldr	r3, [pc, #424]	; (8004fc4 <HAL_RCC_OscConfig+0x4c4>)
 8004e1c:	6a1b      	ldr	r3, [r3, #32]
 8004e1e:	4a69      	ldr	r2, [pc, #420]	; (8004fc4 <HAL_RCC_OscConfig+0x4c4>)
 8004e20:	f023 0301 	bic.w	r3, r3, #1
 8004e24:	6213      	str	r3, [r2, #32]
 8004e26:	4b67      	ldr	r3, [pc, #412]	; (8004fc4 <HAL_RCC_OscConfig+0x4c4>)
 8004e28:	6a1b      	ldr	r3, [r3, #32]
 8004e2a:	4a66      	ldr	r2, [pc, #408]	; (8004fc4 <HAL_RCC_OscConfig+0x4c4>)
 8004e2c:	f023 0304 	bic.w	r3, r3, #4
 8004e30:	6213      	str	r3, [r2, #32]
 8004e32:	e01c      	b.n	8004e6e <HAL_RCC_OscConfig+0x36e>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	68db      	ldr	r3, [r3, #12]
 8004e38:	2b05      	cmp	r3, #5
 8004e3a:	d10c      	bne.n	8004e56 <HAL_RCC_OscConfig+0x356>
 8004e3c:	4b61      	ldr	r3, [pc, #388]	; (8004fc4 <HAL_RCC_OscConfig+0x4c4>)
 8004e3e:	6a1b      	ldr	r3, [r3, #32]
 8004e40:	4a60      	ldr	r2, [pc, #384]	; (8004fc4 <HAL_RCC_OscConfig+0x4c4>)
 8004e42:	f043 0304 	orr.w	r3, r3, #4
 8004e46:	6213      	str	r3, [r2, #32]
 8004e48:	4b5e      	ldr	r3, [pc, #376]	; (8004fc4 <HAL_RCC_OscConfig+0x4c4>)
 8004e4a:	6a1b      	ldr	r3, [r3, #32]
 8004e4c:	4a5d      	ldr	r2, [pc, #372]	; (8004fc4 <HAL_RCC_OscConfig+0x4c4>)
 8004e4e:	f043 0301 	orr.w	r3, r3, #1
 8004e52:	6213      	str	r3, [r2, #32]
 8004e54:	e00b      	b.n	8004e6e <HAL_RCC_OscConfig+0x36e>
 8004e56:	4b5b      	ldr	r3, [pc, #364]	; (8004fc4 <HAL_RCC_OscConfig+0x4c4>)
 8004e58:	6a1b      	ldr	r3, [r3, #32]
 8004e5a:	4a5a      	ldr	r2, [pc, #360]	; (8004fc4 <HAL_RCC_OscConfig+0x4c4>)
 8004e5c:	f023 0301 	bic.w	r3, r3, #1
 8004e60:	6213      	str	r3, [r2, #32]
 8004e62:	4b58      	ldr	r3, [pc, #352]	; (8004fc4 <HAL_RCC_OscConfig+0x4c4>)
 8004e64:	6a1b      	ldr	r3, [r3, #32]
 8004e66:	4a57      	ldr	r2, [pc, #348]	; (8004fc4 <HAL_RCC_OscConfig+0x4c4>)
 8004e68:	f023 0304 	bic.w	r3, r3, #4
 8004e6c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	68db      	ldr	r3, [r3, #12]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d015      	beq.n	8004ea2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e76:	f7fd fe91 	bl	8002b9c <HAL_GetTick>
 8004e7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e7c:	e00a      	b.n	8004e94 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e7e:	f7fd fe8d 	bl	8002b9c <HAL_GetTick>
 8004e82:	4602      	mov	r2, r0
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	1ad3      	subs	r3, r2, r3
 8004e88:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d901      	bls.n	8004e94 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004e90:	2303      	movs	r3, #3
 8004e92:	e0b1      	b.n	8004ff8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e94:	4b4b      	ldr	r3, [pc, #300]	; (8004fc4 <HAL_RCC_OscConfig+0x4c4>)
 8004e96:	6a1b      	ldr	r3, [r3, #32]
 8004e98:	f003 0302 	and.w	r3, r3, #2
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d0ee      	beq.n	8004e7e <HAL_RCC_OscConfig+0x37e>
 8004ea0:	e014      	b.n	8004ecc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ea2:	f7fd fe7b 	bl	8002b9c <HAL_GetTick>
 8004ea6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ea8:	e00a      	b.n	8004ec0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004eaa:	f7fd fe77 	bl	8002b9c <HAL_GetTick>
 8004eae:	4602      	mov	r2, r0
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	1ad3      	subs	r3, r2, r3
 8004eb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d901      	bls.n	8004ec0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004ebc:	2303      	movs	r3, #3
 8004ebe:	e09b      	b.n	8004ff8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ec0:	4b40      	ldr	r3, [pc, #256]	; (8004fc4 <HAL_RCC_OscConfig+0x4c4>)
 8004ec2:	6a1b      	ldr	r3, [r3, #32]
 8004ec4:	f003 0302 	and.w	r3, r3, #2
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d1ee      	bne.n	8004eaa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004ecc:	7dfb      	ldrb	r3, [r7, #23]
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d105      	bne.n	8004ede <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ed2:	4b3c      	ldr	r3, [pc, #240]	; (8004fc4 <HAL_RCC_OscConfig+0x4c4>)
 8004ed4:	69db      	ldr	r3, [r3, #28]
 8004ed6:	4a3b      	ldr	r2, [pc, #236]	; (8004fc4 <HAL_RCC_OscConfig+0x4c4>)
 8004ed8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004edc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	69db      	ldr	r3, [r3, #28]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	f000 8087 	beq.w	8004ff6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ee8:	4b36      	ldr	r3, [pc, #216]	; (8004fc4 <HAL_RCC_OscConfig+0x4c4>)
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	f003 030c 	and.w	r3, r3, #12
 8004ef0:	2b08      	cmp	r3, #8
 8004ef2:	d061      	beq.n	8004fb8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	69db      	ldr	r3, [r3, #28]
 8004ef8:	2b02      	cmp	r3, #2
 8004efa:	d146      	bne.n	8004f8a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004efc:	4b33      	ldr	r3, [pc, #204]	; (8004fcc <HAL_RCC_OscConfig+0x4cc>)
 8004efe:	2200      	movs	r2, #0
 8004f00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f02:	f7fd fe4b 	bl	8002b9c <HAL_GetTick>
 8004f06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f08:	e008      	b.n	8004f1c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f0a:	f7fd fe47 	bl	8002b9c <HAL_GetTick>
 8004f0e:	4602      	mov	r2, r0
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	1ad3      	subs	r3, r2, r3
 8004f14:	2b02      	cmp	r3, #2
 8004f16:	d901      	bls.n	8004f1c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004f18:	2303      	movs	r3, #3
 8004f1a:	e06d      	b.n	8004ff8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f1c:	4b29      	ldr	r3, [pc, #164]	; (8004fc4 <HAL_RCC_OscConfig+0x4c4>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d1f0      	bne.n	8004f0a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6a1b      	ldr	r3, [r3, #32]
 8004f2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f30:	d108      	bne.n	8004f44 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004f32:	4b24      	ldr	r3, [pc, #144]	; (8004fc4 <HAL_RCC_OscConfig+0x4c4>)
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	4921      	ldr	r1, [pc, #132]	; (8004fc4 <HAL_RCC_OscConfig+0x4c4>)
 8004f40:	4313      	orrs	r3, r2
 8004f42:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f44:	4b1f      	ldr	r3, [pc, #124]	; (8004fc4 <HAL_RCC_OscConfig+0x4c4>)
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6a19      	ldr	r1, [r3, #32]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f54:	430b      	orrs	r3, r1
 8004f56:	491b      	ldr	r1, [pc, #108]	; (8004fc4 <HAL_RCC_OscConfig+0x4c4>)
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f5c:	4b1b      	ldr	r3, [pc, #108]	; (8004fcc <HAL_RCC_OscConfig+0x4cc>)
 8004f5e:	2201      	movs	r2, #1
 8004f60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f62:	f7fd fe1b 	bl	8002b9c <HAL_GetTick>
 8004f66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004f68:	e008      	b.n	8004f7c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f6a:	f7fd fe17 	bl	8002b9c <HAL_GetTick>
 8004f6e:	4602      	mov	r2, r0
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	1ad3      	subs	r3, r2, r3
 8004f74:	2b02      	cmp	r3, #2
 8004f76:	d901      	bls.n	8004f7c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004f78:	2303      	movs	r3, #3
 8004f7a:	e03d      	b.n	8004ff8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004f7c:	4b11      	ldr	r3, [pc, #68]	; (8004fc4 <HAL_RCC_OscConfig+0x4c4>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d0f0      	beq.n	8004f6a <HAL_RCC_OscConfig+0x46a>
 8004f88:	e035      	b.n	8004ff6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f8a:	4b10      	ldr	r3, [pc, #64]	; (8004fcc <HAL_RCC_OscConfig+0x4cc>)
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f90:	f7fd fe04 	bl	8002b9c <HAL_GetTick>
 8004f94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f96:	e008      	b.n	8004faa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f98:	f7fd fe00 	bl	8002b9c <HAL_GetTick>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	1ad3      	subs	r3, r2, r3
 8004fa2:	2b02      	cmp	r3, #2
 8004fa4:	d901      	bls.n	8004faa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004fa6:	2303      	movs	r3, #3
 8004fa8:	e026      	b.n	8004ff8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004faa:	4b06      	ldr	r3, [pc, #24]	; (8004fc4 <HAL_RCC_OscConfig+0x4c4>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d1f0      	bne.n	8004f98 <HAL_RCC_OscConfig+0x498>
 8004fb6:	e01e      	b.n	8004ff6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	69db      	ldr	r3, [r3, #28]
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d107      	bne.n	8004fd0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	e019      	b.n	8004ff8 <HAL_RCC_OscConfig+0x4f8>
 8004fc4:	40021000 	.word	0x40021000
 8004fc8:	40007000 	.word	0x40007000
 8004fcc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004fd0:	4b0b      	ldr	r3, [pc, #44]	; (8005000 <HAL_RCC_OscConfig+0x500>)
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6a1b      	ldr	r3, [r3, #32]
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d106      	bne.n	8004ff2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	d001      	beq.n	8004ff6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e000      	b.n	8004ff8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004ff6:	2300      	movs	r3, #0
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3718      	adds	r7, #24
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}
 8005000:	40021000 	.word	0x40021000

08005004 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b084      	sub	sp, #16
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
 800500c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d101      	bne.n	8005018 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005014:	2301      	movs	r3, #1
 8005016:	e0d0      	b.n	80051ba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005018:	4b6a      	ldr	r3, [pc, #424]	; (80051c4 <HAL_RCC_ClockConfig+0x1c0>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f003 0307 	and.w	r3, r3, #7
 8005020:	683a      	ldr	r2, [r7, #0]
 8005022:	429a      	cmp	r2, r3
 8005024:	d910      	bls.n	8005048 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005026:	4b67      	ldr	r3, [pc, #412]	; (80051c4 <HAL_RCC_ClockConfig+0x1c0>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f023 0207 	bic.w	r2, r3, #7
 800502e:	4965      	ldr	r1, [pc, #404]	; (80051c4 <HAL_RCC_ClockConfig+0x1c0>)
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	4313      	orrs	r3, r2
 8005034:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005036:	4b63      	ldr	r3, [pc, #396]	; (80051c4 <HAL_RCC_ClockConfig+0x1c0>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 0307 	and.w	r3, r3, #7
 800503e:	683a      	ldr	r2, [r7, #0]
 8005040:	429a      	cmp	r2, r3
 8005042:	d001      	beq.n	8005048 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	e0b8      	b.n	80051ba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 0302 	and.w	r3, r3, #2
 8005050:	2b00      	cmp	r3, #0
 8005052:	d020      	beq.n	8005096 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 0304 	and.w	r3, r3, #4
 800505c:	2b00      	cmp	r3, #0
 800505e:	d005      	beq.n	800506c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005060:	4b59      	ldr	r3, [pc, #356]	; (80051c8 <HAL_RCC_ClockConfig+0x1c4>)
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	4a58      	ldr	r2, [pc, #352]	; (80051c8 <HAL_RCC_ClockConfig+0x1c4>)
 8005066:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800506a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f003 0308 	and.w	r3, r3, #8
 8005074:	2b00      	cmp	r3, #0
 8005076:	d005      	beq.n	8005084 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005078:	4b53      	ldr	r3, [pc, #332]	; (80051c8 <HAL_RCC_ClockConfig+0x1c4>)
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	4a52      	ldr	r2, [pc, #328]	; (80051c8 <HAL_RCC_ClockConfig+0x1c4>)
 800507e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005082:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005084:	4b50      	ldr	r3, [pc, #320]	; (80051c8 <HAL_RCC_ClockConfig+0x1c4>)
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	494d      	ldr	r1, [pc, #308]	; (80051c8 <HAL_RCC_ClockConfig+0x1c4>)
 8005092:	4313      	orrs	r3, r2
 8005094:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f003 0301 	and.w	r3, r3, #1
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d040      	beq.n	8005124 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	2b01      	cmp	r3, #1
 80050a8:	d107      	bne.n	80050ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050aa:	4b47      	ldr	r3, [pc, #284]	; (80051c8 <HAL_RCC_ClockConfig+0x1c4>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d115      	bne.n	80050e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	e07f      	b.n	80051ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	2b02      	cmp	r3, #2
 80050c0:	d107      	bne.n	80050d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050c2:	4b41      	ldr	r3, [pc, #260]	; (80051c8 <HAL_RCC_ClockConfig+0x1c4>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d109      	bne.n	80050e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	e073      	b.n	80051ba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050d2:	4b3d      	ldr	r3, [pc, #244]	; (80051c8 <HAL_RCC_ClockConfig+0x1c4>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f003 0302 	and.w	r3, r3, #2
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d101      	bne.n	80050e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	e06b      	b.n	80051ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050e2:	4b39      	ldr	r3, [pc, #228]	; (80051c8 <HAL_RCC_ClockConfig+0x1c4>)
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	f023 0203 	bic.w	r2, r3, #3
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	4936      	ldr	r1, [pc, #216]	; (80051c8 <HAL_RCC_ClockConfig+0x1c4>)
 80050f0:	4313      	orrs	r3, r2
 80050f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80050f4:	f7fd fd52 	bl	8002b9c <HAL_GetTick>
 80050f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050fa:	e00a      	b.n	8005112 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050fc:	f7fd fd4e 	bl	8002b9c <HAL_GetTick>
 8005100:	4602      	mov	r2, r0
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	1ad3      	subs	r3, r2, r3
 8005106:	f241 3288 	movw	r2, #5000	; 0x1388
 800510a:	4293      	cmp	r3, r2
 800510c:	d901      	bls.n	8005112 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800510e:	2303      	movs	r3, #3
 8005110:	e053      	b.n	80051ba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005112:	4b2d      	ldr	r3, [pc, #180]	; (80051c8 <HAL_RCC_ClockConfig+0x1c4>)
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	f003 020c 	and.w	r2, r3, #12
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	009b      	lsls	r3, r3, #2
 8005120:	429a      	cmp	r2, r3
 8005122:	d1eb      	bne.n	80050fc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005124:	4b27      	ldr	r3, [pc, #156]	; (80051c4 <HAL_RCC_ClockConfig+0x1c0>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f003 0307 	and.w	r3, r3, #7
 800512c:	683a      	ldr	r2, [r7, #0]
 800512e:	429a      	cmp	r2, r3
 8005130:	d210      	bcs.n	8005154 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005132:	4b24      	ldr	r3, [pc, #144]	; (80051c4 <HAL_RCC_ClockConfig+0x1c0>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f023 0207 	bic.w	r2, r3, #7
 800513a:	4922      	ldr	r1, [pc, #136]	; (80051c4 <HAL_RCC_ClockConfig+0x1c0>)
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	4313      	orrs	r3, r2
 8005140:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005142:	4b20      	ldr	r3, [pc, #128]	; (80051c4 <HAL_RCC_ClockConfig+0x1c0>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f003 0307 	and.w	r3, r3, #7
 800514a:	683a      	ldr	r2, [r7, #0]
 800514c:	429a      	cmp	r2, r3
 800514e:	d001      	beq.n	8005154 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005150:	2301      	movs	r3, #1
 8005152:	e032      	b.n	80051ba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 0304 	and.w	r3, r3, #4
 800515c:	2b00      	cmp	r3, #0
 800515e:	d008      	beq.n	8005172 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005160:	4b19      	ldr	r3, [pc, #100]	; (80051c8 <HAL_RCC_ClockConfig+0x1c4>)
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	68db      	ldr	r3, [r3, #12]
 800516c:	4916      	ldr	r1, [pc, #88]	; (80051c8 <HAL_RCC_ClockConfig+0x1c4>)
 800516e:	4313      	orrs	r3, r2
 8005170:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f003 0308 	and.w	r3, r3, #8
 800517a:	2b00      	cmp	r3, #0
 800517c:	d009      	beq.n	8005192 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800517e:	4b12      	ldr	r3, [pc, #72]	; (80051c8 <HAL_RCC_ClockConfig+0x1c4>)
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	691b      	ldr	r3, [r3, #16]
 800518a:	00db      	lsls	r3, r3, #3
 800518c:	490e      	ldr	r1, [pc, #56]	; (80051c8 <HAL_RCC_ClockConfig+0x1c4>)
 800518e:	4313      	orrs	r3, r2
 8005190:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005192:	f000 f821 	bl	80051d8 <HAL_RCC_GetSysClockFreq>
 8005196:	4602      	mov	r2, r0
 8005198:	4b0b      	ldr	r3, [pc, #44]	; (80051c8 <HAL_RCC_ClockConfig+0x1c4>)
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	091b      	lsrs	r3, r3, #4
 800519e:	f003 030f 	and.w	r3, r3, #15
 80051a2:	490a      	ldr	r1, [pc, #40]	; (80051cc <HAL_RCC_ClockConfig+0x1c8>)
 80051a4:	5ccb      	ldrb	r3, [r1, r3]
 80051a6:	fa22 f303 	lsr.w	r3, r2, r3
 80051aa:	4a09      	ldr	r2, [pc, #36]	; (80051d0 <HAL_RCC_ClockConfig+0x1cc>)
 80051ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80051ae:	4b09      	ldr	r3, [pc, #36]	; (80051d4 <HAL_RCC_ClockConfig+0x1d0>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4618      	mov	r0, r3
 80051b4:	f7fd fcb0 	bl	8002b18 <HAL_InitTick>

  return HAL_OK;
 80051b8:	2300      	movs	r3, #0
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3710      	adds	r7, #16
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
 80051c2:	bf00      	nop
 80051c4:	40022000 	.word	0x40022000
 80051c8:	40021000 	.word	0x40021000
 80051cc:	0800dcc8 	.word	0x0800dcc8
 80051d0:	2000006c 	.word	0x2000006c
 80051d4:	20000070 	.word	0x20000070

080051d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051d8:	b490      	push	{r4, r7}
 80051da:	b08a      	sub	sp, #40	; 0x28
 80051dc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80051de:	4b29      	ldr	r3, [pc, #164]	; (8005284 <HAL_RCC_GetSysClockFreq+0xac>)
 80051e0:	1d3c      	adds	r4, r7, #4
 80051e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80051e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80051e8:	f240 2301 	movw	r3, #513	; 0x201
 80051ec:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80051ee:	2300      	movs	r3, #0
 80051f0:	61fb      	str	r3, [r7, #28]
 80051f2:	2300      	movs	r3, #0
 80051f4:	61bb      	str	r3, [r7, #24]
 80051f6:	2300      	movs	r3, #0
 80051f8:	627b      	str	r3, [r7, #36]	; 0x24
 80051fa:	2300      	movs	r3, #0
 80051fc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80051fe:	2300      	movs	r3, #0
 8005200:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005202:	4b21      	ldr	r3, [pc, #132]	; (8005288 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005208:	69fb      	ldr	r3, [r7, #28]
 800520a:	f003 030c 	and.w	r3, r3, #12
 800520e:	2b04      	cmp	r3, #4
 8005210:	d002      	beq.n	8005218 <HAL_RCC_GetSysClockFreq+0x40>
 8005212:	2b08      	cmp	r3, #8
 8005214:	d003      	beq.n	800521e <HAL_RCC_GetSysClockFreq+0x46>
 8005216:	e02b      	b.n	8005270 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005218:	4b1c      	ldr	r3, [pc, #112]	; (800528c <HAL_RCC_GetSysClockFreq+0xb4>)
 800521a:	623b      	str	r3, [r7, #32]
      break;
 800521c:	e02b      	b.n	8005276 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800521e:	69fb      	ldr	r3, [r7, #28]
 8005220:	0c9b      	lsrs	r3, r3, #18
 8005222:	f003 030f 	and.w	r3, r3, #15
 8005226:	3328      	adds	r3, #40	; 0x28
 8005228:	443b      	add	r3, r7
 800522a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800522e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005230:	69fb      	ldr	r3, [r7, #28]
 8005232:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005236:	2b00      	cmp	r3, #0
 8005238:	d012      	beq.n	8005260 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800523a:	4b13      	ldr	r3, [pc, #76]	; (8005288 <HAL_RCC_GetSysClockFreq+0xb0>)
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	0c5b      	lsrs	r3, r3, #17
 8005240:	f003 0301 	and.w	r3, r3, #1
 8005244:	3328      	adds	r3, #40	; 0x28
 8005246:	443b      	add	r3, r7
 8005248:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800524c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	4a0e      	ldr	r2, [pc, #56]	; (800528c <HAL_RCC_GetSysClockFreq+0xb4>)
 8005252:	fb03 f202 	mul.w	r2, r3, r2
 8005256:	69bb      	ldr	r3, [r7, #24]
 8005258:	fbb2 f3f3 	udiv	r3, r2, r3
 800525c:	627b      	str	r3, [r7, #36]	; 0x24
 800525e:	e004      	b.n	800526a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	4a0b      	ldr	r2, [pc, #44]	; (8005290 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005264:	fb02 f303 	mul.w	r3, r2, r3
 8005268:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800526a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800526c:	623b      	str	r3, [r7, #32]
      break;
 800526e:	e002      	b.n	8005276 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005270:	4b06      	ldr	r3, [pc, #24]	; (800528c <HAL_RCC_GetSysClockFreq+0xb4>)
 8005272:	623b      	str	r3, [r7, #32]
      break;
 8005274:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005276:	6a3b      	ldr	r3, [r7, #32]
}
 8005278:	4618      	mov	r0, r3
 800527a:	3728      	adds	r7, #40	; 0x28
 800527c:	46bd      	mov	sp, r7
 800527e:	bc90      	pop	{r4, r7}
 8005280:	4770      	bx	lr
 8005282:	bf00      	nop
 8005284:	0800db20 	.word	0x0800db20
 8005288:	40021000 	.word	0x40021000
 800528c:	007a1200 	.word	0x007a1200
 8005290:	003d0900 	.word	0x003d0900

08005294 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005294:	b480      	push	{r7}
 8005296:	b085      	sub	sp, #20
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800529c:	4b0a      	ldr	r3, [pc, #40]	; (80052c8 <RCC_Delay+0x34>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a0a      	ldr	r2, [pc, #40]	; (80052cc <RCC_Delay+0x38>)
 80052a2:	fba2 2303 	umull	r2, r3, r2, r3
 80052a6:	0a5b      	lsrs	r3, r3, #9
 80052a8:	687a      	ldr	r2, [r7, #4]
 80052aa:	fb02 f303 	mul.w	r3, r2, r3
 80052ae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80052b0:	bf00      	nop
  }
  while (Delay --);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	1e5a      	subs	r2, r3, #1
 80052b6:	60fa      	str	r2, [r7, #12]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d1f9      	bne.n	80052b0 <RCC_Delay+0x1c>
}
 80052bc:	bf00      	nop
 80052be:	bf00      	nop
 80052c0:	3714      	adds	r7, #20
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bc80      	pop	{r7}
 80052c6:	4770      	bx	lr
 80052c8:	2000006c 	.word	0x2000006c
 80052cc:	10624dd3 	.word	0x10624dd3

080052d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b086      	sub	sp, #24
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80052d8:	2300      	movs	r3, #0
 80052da:	613b      	str	r3, [r7, #16]
 80052dc:	2300      	movs	r3, #0
 80052de:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f003 0301 	and.w	r3, r3, #1
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d07d      	beq.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80052ec:	2300      	movs	r3, #0
 80052ee:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052f0:	4b4f      	ldr	r3, [pc, #316]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052f2:	69db      	ldr	r3, [r3, #28]
 80052f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d10d      	bne.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052fc:	4b4c      	ldr	r3, [pc, #304]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052fe:	69db      	ldr	r3, [r3, #28]
 8005300:	4a4b      	ldr	r2, [pc, #300]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005302:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005306:	61d3      	str	r3, [r2, #28]
 8005308:	4b49      	ldr	r3, [pc, #292]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800530a:	69db      	ldr	r3, [r3, #28]
 800530c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005310:	60bb      	str	r3, [r7, #8]
 8005312:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005314:	2301      	movs	r3, #1
 8005316:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005318:	4b46      	ldr	r3, [pc, #280]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005320:	2b00      	cmp	r3, #0
 8005322:	d118      	bne.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005324:	4b43      	ldr	r3, [pc, #268]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a42      	ldr	r2, [pc, #264]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800532a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800532e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005330:	f7fd fc34 	bl	8002b9c <HAL_GetTick>
 8005334:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005336:	e008      	b.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005338:	f7fd fc30 	bl	8002b9c <HAL_GetTick>
 800533c:	4602      	mov	r2, r0
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	1ad3      	subs	r3, r2, r3
 8005342:	2b64      	cmp	r3, #100	; 0x64
 8005344:	d901      	bls.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005346:	2303      	movs	r3, #3
 8005348:	e06d      	b.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800534a:	4b3a      	ldr	r3, [pc, #232]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005352:	2b00      	cmp	r3, #0
 8005354:	d0f0      	beq.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005356:	4b36      	ldr	r3, [pc, #216]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005358:	6a1b      	ldr	r3, [r3, #32]
 800535a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800535e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d02e      	beq.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800536e:	68fa      	ldr	r2, [r7, #12]
 8005370:	429a      	cmp	r2, r3
 8005372:	d027      	beq.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005374:	4b2e      	ldr	r3, [pc, #184]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005376:	6a1b      	ldr	r3, [r3, #32]
 8005378:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800537c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800537e:	4b2e      	ldr	r3, [pc, #184]	; (8005438 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005380:	2201      	movs	r2, #1
 8005382:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005384:	4b2c      	ldr	r3, [pc, #176]	; (8005438 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005386:	2200      	movs	r2, #0
 8005388:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800538a:	4a29      	ldr	r2, [pc, #164]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f003 0301 	and.w	r3, r3, #1
 8005396:	2b00      	cmp	r3, #0
 8005398:	d014      	beq.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800539a:	f7fd fbff 	bl	8002b9c <HAL_GetTick>
 800539e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053a0:	e00a      	b.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053a2:	f7fd fbfb 	bl	8002b9c <HAL_GetTick>
 80053a6:	4602      	mov	r2, r0
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	1ad3      	subs	r3, r2, r3
 80053ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d901      	bls.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80053b4:	2303      	movs	r3, #3
 80053b6:	e036      	b.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053b8:	4b1d      	ldr	r3, [pc, #116]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053ba:	6a1b      	ldr	r3, [r3, #32]
 80053bc:	f003 0302 	and.w	r3, r3, #2
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d0ee      	beq.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80053c4:	4b1a      	ldr	r3, [pc, #104]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053c6:	6a1b      	ldr	r3, [r3, #32]
 80053c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	4917      	ldr	r1, [pc, #92]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053d2:	4313      	orrs	r3, r2
 80053d4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80053d6:	7dfb      	ldrb	r3, [r7, #23]
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d105      	bne.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053dc:	4b14      	ldr	r3, [pc, #80]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053de:	69db      	ldr	r3, [r3, #28]
 80053e0:	4a13      	ldr	r2, [pc, #76]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053e6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f003 0302 	and.w	r3, r3, #2
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d008      	beq.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80053f4:	4b0e      	ldr	r3, [pc, #56]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	490b      	ldr	r1, [pc, #44]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005402:	4313      	orrs	r3, r2
 8005404:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f003 0310 	and.w	r3, r3, #16
 800540e:	2b00      	cmp	r3, #0
 8005410:	d008      	beq.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005412:	4b07      	ldr	r3, [pc, #28]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	68db      	ldr	r3, [r3, #12]
 800541e:	4904      	ldr	r1, [pc, #16]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005420:	4313      	orrs	r3, r2
 8005422:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005424:	2300      	movs	r3, #0
}
 8005426:	4618      	mov	r0, r3
 8005428:	3718      	adds	r7, #24
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}
 800542e:	bf00      	nop
 8005430:	40021000 	.word	0x40021000
 8005434:	40007000 	.word	0x40007000
 8005438:	42420440 	.word	0x42420440

0800543c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b082      	sub	sp, #8
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d101      	bne.n	800544e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	e041      	b.n	80054d2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005454:	b2db      	uxtb	r3, r3
 8005456:	2b00      	cmp	r3, #0
 8005458:	d106      	bne.n	8005468 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2200      	movs	r2, #0
 800545e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f7fc fbec 	bl	8001c40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2202      	movs	r2, #2
 800546c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681a      	ldr	r2, [r3, #0]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	3304      	adds	r3, #4
 8005478:	4619      	mov	r1, r3
 800547a:	4610      	mov	r0, r2
 800547c:	f000 fe0c 	bl	8006098 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2201      	movs	r2, #1
 8005484:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2201      	movs	r2, #1
 800548c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2201      	movs	r2, #1
 8005494:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2201      	movs	r2, #1
 800549c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2201      	movs	r2, #1
 80054a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2201      	movs	r2, #1
 80054ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2201      	movs	r2, #1
 80054b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2201      	movs	r2, #1
 80054bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2201      	movs	r2, #1
 80054c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2201      	movs	r2, #1
 80054cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054d0:	2300      	movs	r3, #0
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3708      	adds	r7, #8
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}

080054da <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80054da:	b580      	push	{r7, lr}
 80054dc:	b082      	sub	sp, #8
 80054de:	af00      	add	r7, sp, #0
 80054e0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d101      	bne.n	80054ec <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	e041      	b.n	8005570 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054f2:	b2db      	uxtb	r3, r3
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d106      	bne.n	8005506 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2200      	movs	r2, #0
 80054fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f000 f839 	bl	8005578 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2202      	movs	r2, #2
 800550a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	3304      	adds	r3, #4
 8005516:	4619      	mov	r1, r3
 8005518:	4610      	mov	r0, r2
 800551a:	f000 fdbd 	bl	8006098 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2201      	movs	r2, #1
 8005522:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2201      	movs	r2, #1
 800552a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2201      	movs	r2, #1
 8005532:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2201      	movs	r2, #1
 800553a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2201      	movs	r2, #1
 8005542:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2201      	movs	r2, #1
 800554a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2201      	movs	r2, #1
 8005552:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2201      	movs	r2, #1
 800555a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2201      	movs	r2, #1
 8005562:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2201      	movs	r2, #1
 800556a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800556e:	2300      	movs	r3, #0
}
 8005570:	4618      	mov	r0, r3
 8005572:	3708      	adds	r7, #8
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}

08005578 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005578:	b480      	push	{r7}
 800557a:	b083      	sub	sp, #12
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005580:	bf00      	nop
 8005582:	370c      	adds	r7, #12
 8005584:	46bd      	mov	sp, r7
 8005586:	bc80      	pop	{r7}
 8005588:	4770      	bx	lr
	...

0800558c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b084      	sub	sp, #16
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d109      	bne.n	80055b0 <HAL_TIM_PWM_Start+0x24>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80055a2:	b2db      	uxtb	r3, r3
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	bf14      	ite	ne
 80055a8:	2301      	movne	r3, #1
 80055aa:	2300      	moveq	r3, #0
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	e022      	b.n	80055f6 <HAL_TIM_PWM_Start+0x6a>
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	2b04      	cmp	r3, #4
 80055b4:	d109      	bne.n	80055ca <HAL_TIM_PWM_Start+0x3e>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80055bc:	b2db      	uxtb	r3, r3
 80055be:	2b01      	cmp	r3, #1
 80055c0:	bf14      	ite	ne
 80055c2:	2301      	movne	r3, #1
 80055c4:	2300      	moveq	r3, #0
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	e015      	b.n	80055f6 <HAL_TIM_PWM_Start+0x6a>
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	2b08      	cmp	r3, #8
 80055ce:	d109      	bne.n	80055e4 <HAL_TIM_PWM_Start+0x58>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80055d6:	b2db      	uxtb	r3, r3
 80055d8:	2b01      	cmp	r3, #1
 80055da:	bf14      	ite	ne
 80055dc:	2301      	movne	r3, #1
 80055de:	2300      	moveq	r3, #0
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	e008      	b.n	80055f6 <HAL_TIM_PWM_Start+0x6a>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	bf14      	ite	ne
 80055f0:	2301      	movne	r3, #1
 80055f2:	2300      	moveq	r3, #0
 80055f4:	b2db      	uxtb	r3, r3
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d001      	beq.n	80055fe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	e05e      	b.n	80056bc <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d104      	bne.n	800560e <HAL_TIM_PWM_Start+0x82>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2202      	movs	r2, #2
 8005608:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800560c:	e013      	b.n	8005636 <HAL_TIM_PWM_Start+0xaa>
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	2b04      	cmp	r3, #4
 8005612:	d104      	bne.n	800561e <HAL_TIM_PWM_Start+0x92>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2202      	movs	r2, #2
 8005618:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800561c:	e00b      	b.n	8005636 <HAL_TIM_PWM_Start+0xaa>
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	2b08      	cmp	r3, #8
 8005622:	d104      	bne.n	800562e <HAL_TIM_PWM_Start+0xa2>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2202      	movs	r2, #2
 8005628:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800562c:	e003      	b.n	8005636 <HAL_TIM_PWM_Start+0xaa>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2202      	movs	r2, #2
 8005632:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	2201      	movs	r2, #1
 800563c:	6839      	ldr	r1, [r7, #0]
 800563e:	4618      	mov	r0, r3
 8005640:	f001 f8b7 	bl	80067b2 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a1e      	ldr	r2, [pc, #120]	; (80056c4 <HAL_TIM_PWM_Start+0x138>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d107      	bne.n	800565e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800565c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a18      	ldr	r2, [pc, #96]	; (80056c4 <HAL_TIM_PWM_Start+0x138>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d00e      	beq.n	8005686 <HAL_TIM_PWM_Start+0xfa>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005670:	d009      	beq.n	8005686 <HAL_TIM_PWM_Start+0xfa>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a14      	ldr	r2, [pc, #80]	; (80056c8 <HAL_TIM_PWM_Start+0x13c>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d004      	beq.n	8005686 <HAL_TIM_PWM_Start+0xfa>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a12      	ldr	r2, [pc, #72]	; (80056cc <HAL_TIM_PWM_Start+0x140>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d111      	bne.n	80056aa <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	f003 0307 	and.w	r3, r3, #7
 8005690:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2b06      	cmp	r3, #6
 8005696:	d010      	beq.n	80056ba <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	681a      	ldr	r2, [r3, #0]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f042 0201 	orr.w	r2, r2, #1
 80056a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056a8:	e007      	b.n	80056ba <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f042 0201 	orr.w	r2, r2, #1
 80056b8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80056ba:	2300      	movs	r3, #0
}
 80056bc:	4618      	mov	r0, r3
 80056be:	3710      	adds	r7, #16
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}
 80056c4:	40012c00 	.word	0x40012c00
 80056c8:	40000400 	.word	0x40000400
 80056cc:	40000800 	.word	0x40000800

080056d0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b082      	sub	sp, #8
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d101      	bne.n	80056e2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80056de:	2301      	movs	r3, #1
 80056e0:	e041      	b.n	8005766 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056e8:	b2db      	uxtb	r3, r3
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d106      	bne.n	80056fc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2200      	movs	r2, #0
 80056f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f000 f839 	bl	800576e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2202      	movs	r2, #2
 8005700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	3304      	adds	r3, #4
 800570c:	4619      	mov	r1, r3
 800570e:	4610      	mov	r0, r2
 8005710:	f000 fcc2 	bl	8006098 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2201      	movs	r2, #1
 8005718:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2201      	movs	r2, #1
 8005720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2201      	movs	r2, #1
 8005728:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2201      	movs	r2, #1
 8005730:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2201      	movs	r2, #1
 8005738:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2201      	movs	r2, #1
 8005740:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2201      	movs	r2, #1
 8005748:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2201      	movs	r2, #1
 8005750:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2201      	movs	r2, #1
 8005758:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2201      	movs	r2, #1
 8005760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005764:	2300      	movs	r3, #0
}
 8005766:	4618      	mov	r0, r3
 8005768:	3708      	adds	r7, #8
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}

0800576e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800576e:	b480      	push	{r7}
 8005770:	b083      	sub	sp, #12
 8005772:	af00      	add	r7, sp, #0
 8005774:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005776:	bf00      	nop
 8005778:	370c      	adds	r7, #12
 800577a:	46bd      	mov	sp, r7
 800577c:	bc80      	pop	{r7}
 800577e:	4770      	bx	lr

08005780 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b084      	sub	sp, #16
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
 8005788:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d104      	bne.n	800579a <HAL_TIM_IC_Start_IT+0x1a>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005796:	b2db      	uxtb	r3, r3
 8005798:	e013      	b.n	80057c2 <HAL_TIM_IC_Start_IT+0x42>
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	2b04      	cmp	r3, #4
 800579e:	d104      	bne.n	80057aa <HAL_TIM_IC_Start_IT+0x2a>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80057a6:	b2db      	uxtb	r3, r3
 80057a8:	e00b      	b.n	80057c2 <HAL_TIM_IC_Start_IT+0x42>
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	2b08      	cmp	r3, #8
 80057ae:	d104      	bne.n	80057ba <HAL_TIM_IC_Start_IT+0x3a>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80057b6:	b2db      	uxtb	r3, r3
 80057b8:	e003      	b.n	80057c2 <HAL_TIM_IC_Start_IT+0x42>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057c0:	b2db      	uxtb	r3, r3
 80057c2:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d104      	bne.n	80057d4 <HAL_TIM_IC_Start_IT+0x54>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80057d0:	b2db      	uxtb	r3, r3
 80057d2:	e013      	b.n	80057fc <HAL_TIM_IC_Start_IT+0x7c>
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	2b04      	cmp	r3, #4
 80057d8:	d104      	bne.n	80057e4 <HAL_TIM_IC_Start_IT+0x64>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80057e0:	b2db      	uxtb	r3, r3
 80057e2:	e00b      	b.n	80057fc <HAL_TIM_IC_Start_IT+0x7c>
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	2b08      	cmp	r3, #8
 80057e8:	d104      	bne.n	80057f4 <HAL_TIM_IC_Start_IT+0x74>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80057f0:	b2db      	uxtb	r3, r3
 80057f2:	e003      	b.n	80057fc <HAL_TIM_IC_Start_IT+0x7c>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80057fa:	b2db      	uxtb	r3, r3
 80057fc:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80057fe:	7bfb      	ldrb	r3, [r7, #15]
 8005800:	2b01      	cmp	r3, #1
 8005802:	d102      	bne.n	800580a <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005804:	7bbb      	ldrb	r3, [r7, #14]
 8005806:	2b01      	cmp	r3, #1
 8005808:	d001      	beq.n	800580e <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 800580a:	2301      	movs	r3, #1
 800580c:	e0b3      	b.n	8005976 <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d104      	bne.n	800581e <HAL_TIM_IC_Start_IT+0x9e>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2202      	movs	r2, #2
 8005818:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800581c:	e013      	b.n	8005846 <HAL_TIM_IC_Start_IT+0xc6>
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	2b04      	cmp	r3, #4
 8005822:	d104      	bne.n	800582e <HAL_TIM_IC_Start_IT+0xae>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2202      	movs	r2, #2
 8005828:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800582c:	e00b      	b.n	8005846 <HAL_TIM_IC_Start_IT+0xc6>
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	2b08      	cmp	r3, #8
 8005832:	d104      	bne.n	800583e <HAL_TIM_IC_Start_IT+0xbe>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2202      	movs	r2, #2
 8005838:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800583c:	e003      	b.n	8005846 <HAL_TIM_IC_Start_IT+0xc6>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2202      	movs	r2, #2
 8005842:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d104      	bne.n	8005856 <HAL_TIM_IC_Start_IT+0xd6>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2202      	movs	r2, #2
 8005850:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005854:	e013      	b.n	800587e <HAL_TIM_IC_Start_IT+0xfe>
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	2b04      	cmp	r3, #4
 800585a:	d104      	bne.n	8005866 <HAL_TIM_IC_Start_IT+0xe6>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2202      	movs	r2, #2
 8005860:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005864:	e00b      	b.n	800587e <HAL_TIM_IC_Start_IT+0xfe>
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	2b08      	cmp	r3, #8
 800586a:	d104      	bne.n	8005876 <HAL_TIM_IC_Start_IT+0xf6>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2202      	movs	r2, #2
 8005870:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005874:	e003      	b.n	800587e <HAL_TIM_IC_Start_IT+0xfe>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2202      	movs	r2, #2
 800587a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	2b0c      	cmp	r3, #12
 8005882:	d841      	bhi.n	8005908 <HAL_TIM_IC_Start_IT+0x188>
 8005884:	a201      	add	r2, pc, #4	; (adr r2, 800588c <HAL_TIM_IC_Start_IT+0x10c>)
 8005886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800588a:	bf00      	nop
 800588c:	080058c1 	.word	0x080058c1
 8005890:	08005909 	.word	0x08005909
 8005894:	08005909 	.word	0x08005909
 8005898:	08005909 	.word	0x08005909
 800589c:	080058d3 	.word	0x080058d3
 80058a0:	08005909 	.word	0x08005909
 80058a4:	08005909 	.word	0x08005909
 80058a8:	08005909 	.word	0x08005909
 80058ac:	080058e5 	.word	0x080058e5
 80058b0:	08005909 	.word	0x08005909
 80058b4:	08005909 	.word	0x08005909
 80058b8:	08005909 	.word	0x08005909
 80058bc:	080058f7 	.word	0x080058f7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	68da      	ldr	r2, [r3, #12]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f042 0202 	orr.w	r2, r2, #2
 80058ce:	60da      	str	r2, [r3, #12]
      break;
 80058d0:	e01b      	b.n	800590a <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	68da      	ldr	r2, [r3, #12]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f042 0204 	orr.w	r2, r2, #4
 80058e0:	60da      	str	r2, [r3, #12]
      break;
 80058e2:	e012      	b.n	800590a <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	68da      	ldr	r2, [r3, #12]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f042 0208 	orr.w	r2, r2, #8
 80058f2:	60da      	str	r2, [r3, #12]
      break;
 80058f4:	e009      	b.n	800590a <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	68da      	ldr	r2, [r3, #12]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f042 0210 	orr.w	r2, r2, #16
 8005904:	60da      	str	r2, [r3, #12]
      break;
 8005906:	e000      	b.n	800590a <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 8005908:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	2201      	movs	r2, #1
 8005910:	6839      	ldr	r1, [r7, #0]
 8005912:	4618      	mov	r0, r3
 8005914:	f000 ff4d 	bl	80067b2 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a18      	ldr	r2, [pc, #96]	; (8005980 <HAL_TIM_IC_Start_IT+0x200>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d00e      	beq.n	8005940 <HAL_TIM_IC_Start_IT+0x1c0>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800592a:	d009      	beq.n	8005940 <HAL_TIM_IC_Start_IT+0x1c0>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a14      	ldr	r2, [pc, #80]	; (8005984 <HAL_TIM_IC_Start_IT+0x204>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d004      	beq.n	8005940 <HAL_TIM_IC_Start_IT+0x1c0>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a13      	ldr	r2, [pc, #76]	; (8005988 <HAL_TIM_IC_Start_IT+0x208>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d111      	bne.n	8005964 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	689b      	ldr	r3, [r3, #8]
 8005946:	f003 0307 	and.w	r3, r3, #7
 800594a:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	2b06      	cmp	r3, #6
 8005950:	d010      	beq.n	8005974 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	681a      	ldr	r2, [r3, #0]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f042 0201 	orr.w	r2, r2, #1
 8005960:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005962:	e007      	b.n	8005974 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f042 0201 	orr.w	r2, r2, #1
 8005972:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005974:	2300      	movs	r3, #0
}
 8005976:	4618      	mov	r0, r3
 8005978:	3710      	adds	r7, #16
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}
 800597e:	bf00      	nop
 8005980:	40012c00 	.word	0x40012c00
 8005984:	40000400 	.word	0x40000400
 8005988:	40000800 	.word	0x40000800

0800598c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b082      	sub	sp, #8
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	691b      	ldr	r3, [r3, #16]
 800599a:	f003 0302 	and.w	r3, r3, #2
 800599e:	2b02      	cmp	r3, #2
 80059a0:	d122      	bne.n	80059e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	68db      	ldr	r3, [r3, #12]
 80059a8:	f003 0302 	and.w	r3, r3, #2
 80059ac:	2b02      	cmp	r3, #2
 80059ae:	d11b      	bne.n	80059e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f06f 0202 	mvn.w	r2, #2
 80059b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2201      	movs	r2, #1
 80059be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	699b      	ldr	r3, [r3, #24]
 80059c6:	f003 0303 	and.w	r3, r3, #3
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d003      	beq.n	80059d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f7fc f86c 	bl	8001aac <HAL_TIM_IC_CaptureCallback>
 80059d4:	e005      	b.n	80059e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f000 fb43 	bl	8006062 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f000 fb49 	bl	8006074 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2200      	movs	r2, #0
 80059e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	691b      	ldr	r3, [r3, #16]
 80059ee:	f003 0304 	and.w	r3, r3, #4
 80059f2:	2b04      	cmp	r3, #4
 80059f4:	d122      	bne.n	8005a3c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	68db      	ldr	r3, [r3, #12]
 80059fc:	f003 0304 	and.w	r3, r3, #4
 8005a00:	2b04      	cmp	r3, #4
 8005a02:	d11b      	bne.n	8005a3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f06f 0204 	mvn.w	r2, #4
 8005a0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2202      	movs	r2, #2
 8005a12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	699b      	ldr	r3, [r3, #24]
 8005a1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d003      	beq.n	8005a2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f7fc f842 	bl	8001aac <HAL_TIM_IC_CaptureCallback>
 8005a28:	e005      	b.n	8005a36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f000 fb19 	bl	8006062 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f000 fb1f 	bl	8006074 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	691b      	ldr	r3, [r3, #16]
 8005a42:	f003 0308 	and.w	r3, r3, #8
 8005a46:	2b08      	cmp	r3, #8
 8005a48:	d122      	bne.n	8005a90 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	68db      	ldr	r3, [r3, #12]
 8005a50:	f003 0308 	and.w	r3, r3, #8
 8005a54:	2b08      	cmp	r3, #8
 8005a56:	d11b      	bne.n	8005a90 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f06f 0208 	mvn.w	r2, #8
 8005a60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2204      	movs	r2, #4
 8005a66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	69db      	ldr	r3, [r3, #28]
 8005a6e:	f003 0303 	and.w	r3, r3, #3
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d003      	beq.n	8005a7e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f7fc f818 	bl	8001aac <HAL_TIM_IC_CaptureCallback>
 8005a7c:	e005      	b.n	8005a8a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f000 faef 	bl	8006062 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f000 faf5 	bl	8006074 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	691b      	ldr	r3, [r3, #16]
 8005a96:	f003 0310 	and.w	r3, r3, #16
 8005a9a:	2b10      	cmp	r3, #16
 8005a9c:	d122      	bne.n	8005ae4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	68db      	ldr	r3, [r3, #12]
 8005aa4:	f003 0310 	and.w	r3, r3, #16
 8005aa8:	2b10      	cmp	r3, #16
 8005aaa:	d11b      	bne.n	8005ae4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f06f 0210 	mvn.w	r2, #16
 8005ab4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2208      	movs	r2, #8
 8005aba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	69db      	ldr	r3, [r3, #28]
 8005ac2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d003      	beq.n	8005ad2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f7fb ffee 	bl	8001aac <HAL_TIM_IC_CaptureCallback>
 8005ad0:	e005      	b.n	8005ade <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f000 fac5 	bl	8006062 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	f000 facb 	bl	8006074 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	691b      	ldr	r3, [r3, #16]
 8005aea:	f003 0301 	and.w	r3, r3, #1
 8005aee:	2b01      	cmp	r3, #1
 8005af0:	d10e      	bne.n	8005b10 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	68db      	ldr	r3, [r3, #12]
 8005af8:	f003 0301 	and.w	r3, r3, #1
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	d107      	bne.n	8005b10 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f06f 0201 	mvn.w	r2, #1
 8005b08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f000 faa0 	bl	8006050 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	691b      	ldr	r3, [r3, #16]
 8005b16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b1a:	2b80      	cmp	r3, #128	; 0x80
 8005b1c:	d10e      	bne.n	8005b3c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	68db      	ldr	r3, [r3, #12]
 8005b24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b28:	2b80      	cmp	r3, #128	; 0x80
 8005b2a:	d107      	bne.n	8005b3c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005b34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f000 fec7 	bl	80068ca <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	691b      	ldr	r3, [r3, #16]
 8005b42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b46:	2b40      	cmp	r3, #64	; 0x40
 8005b48:	d10e      	bne.n	8005b68 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	68db      	ldr	r3, [r3, #12]
 8005b50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b54:	2b40      	cmp	r3, #64	; 0x40
 8005b56:	d107      	bne.n	8005b68 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005b60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f000 fa8f 	bl	8006086 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	691b      	ldr	r3, [r3, #16]
 8005b6e:	f003 0320 	and.w	r3, r3, #32
 8005b72:	2b20      	cmp	r3, #32
 8005b74:	d10e      	bne.n	8005b94 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	68db      	ldr	r3, [r3, #12]
 8005b7c:	f003 0320 	and.w	r3, r3, #32
 8005b80:	2b20      	cmp	r3, #32
 8005b82:	d107      	bne.n	8005b94 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f06f 0220 	mvn.w	r2, #32
 8005b8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f000 fe92 	bl	80068b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b94:	bf00      	nop
 8005b96:	3708      	adds	r7, #8
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}

08005b9c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b084      	sub	sp, #16
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	60f8      	str	r0, [r7, #12]
 8005ba4:	60b9      	str	r1, [r7, #8]
 8005ba6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	d101      	bne.n	8005bb6 <HAL_TIM_IC_ConfigChannel+0x1a>
 8005bb2:	2302      	movs	r3, #2
 8005bb4:	e082      	b.n	8005cbc <HAL_TIM_IC_ConfigChannel+0x120>
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2201      	movs	r2, #1
 8005bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d11b      	bne.n	8005bfc <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	6818      	ldr	r0, [r3, #0]
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	6819      	ldr	r1, [r3, #0]
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	685a      	ldr	r2, [r3, #4]
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	68db      	ldr	r3, [r3, #12]
 8005bd4:	f000 fc4a 	bl	800646c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	699a      	ldr	r2, [r3, #24]
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f022 020c 	bic.w	r2, r2, #12
 8005be6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	6999      	ldr	r1, [r3, #24]
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	689a      	ldr	r2, [r3, #8]
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	430a      	orrs	r2, r1
 8005bf8:	619a      	str	r2, [r3, #24]
 8005bfa:	e05a      	b.n	8005cb2 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2b04      	cmp	r3, #4
 8005c00:	d11c      	bne.n	8005c3c <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	6818      	ldr	r0, [r3, #0]
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	6819      	ldr	r1, [r3, #0]
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	685a      	ldr	r2, [r3, #4]
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	68db      	ldr	r3, [r3, #12]
 8005c12:	f000 fcb3 	bl	800657c <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	699a      	ldr	r2, [r3, #24]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005c24:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	6999      	ldr	r1, [r3, #24]
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	021a      	lsls	r2, r3, #8
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	430a      	orrs	r2, r1
 8005c38:	619a      	str	r2, [r3, #24]
 8005c3a:	e03a      	b.n	8005cb2 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2b08      	cmp	r3, #8
 8005c40:	d11b      	bne.n	8005c7a <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	6818      	ldr	r0, [r3, #0]
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	6819      	ldr	r1, [r3, #0]
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	685a      	ldr	r2, [r3, #4]
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	68db      	ldr	r3, [r3, #12]
 8005c52:	f000 fcfe 	bl	8006652 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	69da      	ldr	r2, [r3, #28]
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f022 020c 	bic.w	r2, r2, #12
 8005c64:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	69d9      	ldr	r1, [r3, #28]
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	689a      	ldr	r2, [r3, #8]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	430a      	orrs	r2, r1
 8005c76:	61da      	str	r2, [r3, #28]
 8005c78:	e01b      	b.n	8005cb2 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	6818      	ldr	r0, [r3, #0]
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	6819      	ldr	r1, [r3, #0]
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	685a      	ldr	r2, [r3, #4]
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	68db      	ldr	r3, [r3, #12]
 8005c8a:	f000 fd1d 	bl	80066c8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	69da      	ldr	r2, [r3, #28]
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005c9c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	69d9      	ldr	r1, [r3, #28]
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	021a      	lsls	r2, r3, #8
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	430a      	orrs	r2, r1
 8005cb0:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005cba:	2300      	movs	r3, #0
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3710      	adds	r7, #16
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}

08005cc4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b084      	sub	sp, #16
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	60f8      	str	r0, [r7, #12]
 8005ccc:	60b9      	str	r1, [r7, #8]
 8005cce:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cd6:	2b01      	cmp	r3, #1
 8005cd8:	d101      	bne.n	8005cde <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005cda:	2302      	movs	r3, #2
 8005cdc:	e0ac      	b.n	8005e38 <HAL_TIM_PWM_ConfigChannel+0x174>
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2201      	movs	r2, #1
 8005ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2b0c      	cmp	r3, #12
 8005cea:	f200 809f 	bhi.w	8005e2c <HAL_TIM_PWM_ConfigChannel+0x168>
 8005cee:	a201      	add	r2, pc, #4	; (adr r2, 8005cf4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cf4:	08005d29 	.word	0x08005d29
 8005cf8:	08005e2d 	.word	0x08005e2d
 8005cfc:	08005e2d 	.word	0x08005e2d
 8005d00:	08005e2d 	.word	0x08005e2d
 8005d04:	08005d69 	.word	0x08005d69
 8005d08:	08005e2d 	.word	0x08005e2d
 8005d0c:	08005e2d 	.word	0x08005e2d
 8005d10:	08005e2d 	.word	0x08005e2d
 8005d14:	08005dab 	.word	0x08005dab
 8005d18:	08005e2d 	.word	0x08005e2d
 8005d1c:	08005e2d 	.word	0x08005e2d
 8005d20:	08005e2d 	.word	0x08005e2d
 8005d24:	08005deb 	.word	0x08005deb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	68b9      	ldr	r1, [r7, #8]
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f000 fa14 	bl	800615c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	699a      	ldr	r2, [r3, #24]
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f042 0208 	orr.w	r2, r2, #8
 8005d42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	699a      	ldr	r2, [r3, #24]
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f022 0204 	bic.w	r2, r2, #4
 8005d52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	6999      	ldr	r1, [r3, #24]
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	691a      	ldr	r2, [r3, #16]
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	430a      	orrs	r2, r1
 8005d64:	619a      	str	r2, [r3, #24]
      break;
 8005d66:	e062      	b.n	8005e2e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	68b9      	ldr	r1, [r7, #8]
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f000 fa5a 	bl	8006228 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	699a      	ldr	r2, [r3, #24]
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	699a      	ldr	r2, [r3, #24]
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	6999      	ldr	r1, [r3, #24]
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	691b      	ldr	r3, [r3, #16]
 8005d9e:	021a      	lsls	r2, r3, #8
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	430a      	orrs	r2, r1
 8005da6:	619a      	str	r2, [r3, #24]
      break;
 8005da8:	e041      	b.n	8005e2e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	68b9      	ldr	r1, [r7, #8]
 8005db0:	4618      	mov	r0, r3
 8005db2:	f000 faa3 	bl	80062fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	69da      	ldr	r2, [r3, #28]
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f042 0208 	orr.w	r2, r2, #8
 8005dc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	69da      	ldr	r2, [r3, #28]
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f022 0204 	bic.w	r2, r2, #4
 8005dd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	69d9      	ldr	r1, [r3, #28]
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	691a      	ldr	r2, [r3, #16]
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	430a      	orrs	r2, r1
 8005de6:	61da      	str	r2, [r3, #28]
      break;
 8005de8:	e021      	b.n	8005e2e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	68b9      	ldr	r1, [r7, #8]
 8005df0:	4618      	mov	r0, r3
 8005df2:	f000 faed 	bl	80063d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	69da      	ldr	r2, [r3, #28]
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	69da      	ldr	r2, [r3, #28]
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	69d9      	ldr	r1, [r3, #28]
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	691b      	ldr	r3, [r3, #16]
 8005e20:	021a      	lsls	r2, r3, #8
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	430a      	orrs	r2, r1
 8005e28:	61da      	str	r2, [r3, #28]
      break;
 8005e2a:	e000      	b.n	8005e2e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8005e2c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2200      	movs	r2, #0
 8005e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e36:	2300      	movs	r3, #0
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	3710      	adds	r7, #16
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bd80      	pop	{r7, pc}

08005e40 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b084      	sub	sp, #16
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d101      	bne.n	8005e58 <HAL_TIM_ConfigClockSource+0x18>
 8005e54:	2302      	movs	r3, #2
 8005e56:	e0b3      	b.n	8005fc0 <HAL_TIM_ConfigClockSource+0x180>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2202      	movs	r2, #2
 8005e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005e76:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e7e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	68fa      	ldr	r2, [r7, #12]
 8005e86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e90:	d03e      	beq.n	8005f10 <HAL_TIM_ConfigClockSource+0xd0>
 8005e92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e96:	f200 8087 	bhi.w	8005fa8 <HAL_TIM_ConfigClockSource+0x168>
 8005e9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e9e:	f000 8085 	beq.w	8005fac <HAL_TIM_ConfigClockSource+0x16c>
 8005ea2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ea6:	d87f      	bhi.n	8005fa8 <HAL_TIM_ConfigClockSource+0x168>
 8005ea8:	2b70      	cmp	r3, #112	; 0x70
 8005eaa:	d01a      	beq.n	8005ee2 <HAL_TIM_ConfigClockSource+0xa2>
 8005eac:	2b70      	cmp	r3, #112	; 0x70
 8005eae:	d87b      	bhi.n	8005fa8 <HAL_TIM_ConfigClockSource+0x168>
 8005eb0:	2b60      	cmp	r3, #96	; 0x60
 8005eb2:	d050      	beq.n	8005f56 <HAL_TIM_ConfigClockSource+0x116>
 8005eb4:	2b60      	cmp	r3, #96	; 0x60
 8005eb6:	d877      	bhi.n	8005fa8 <HAL_TIM_ConfigClockSource+0x168>
 8005eb8:	2b50      	cmp	r3, #80	; 0x50
 8005eba:	d03c      	beq.n	8005f36 <HAL_TIM_ConfigClockSource+0xf6>
 8005ebc:	2b50      	cmp	r3, #80	; 0x50
 8005ebe:	d873      	bhi.n	8005fa8 <HAL_TIM_ConfigClockSource+0x168>
 8005ec0:	2b40      	cmp	r3, #64	; 0x40
 8005ec2:	d058      	beq.n	8005f76 <HAL_TIM_ConfigClockSource+0x136>
 8005ec4:	2b40      	cmp	r3, #64	; 0x40
 8005ec6:	d86f      	bhi.n	8005fa8 <HAL_TIM_ConfigClockSource+0x168>
 8005ec8:	2b30      	cmp	r3, #48	; 0x30
 8005eca:	d064      	beq.n	8005f96 <HAL_TIM_ConfigClockSource+0x156>
 8005ecc:	2b30      	cmp	r3, #48	; 0x30
 8005ece:	d86b      	bhi.n	8005fa8 <HAL_TIM_ConfigClockSource+0x168>
 8005ed0:	2b20      	cmp	r3, #32
 8005ed2:	d060      	beq.n	8005f96 <HAL_TIM_ConfigClockSource+0x156>
 8005ed4:	2b20      	cmp	r3, #32
 8005ed6:	d867      	bhi.n	8005fa8 <HAL_TIM_ConfigClockSource+0x168>
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d05c      	beq.n	8005f96 <HAL_TIM_ConfigClockSource+0x156>
 8005edc:	2b10      	cmp	r3, #16
 8005ede:	d05a      	beq.n	8005f96 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005ee0:	e062      	b.n	8005fa8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6818      	ldr	r0, [r3, #0]
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	6899      	ldr	r1, [r3, #8]
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	685a      	ldr	r2, [r3, #4]
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	68db      	ldr	r3, [r3, #12]
 8005ef2:	f000 fc3f 	bl	8006774 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	689b      	ldr	r3, [r3, #8]
 8005efc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005f04:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	68fa      	ldr	r2, [r7, #12]
 8005f0c:	609a      	str	r2, [r3, #8]
      break;
 8005f0e:	e04e      	b.n	8005fae <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6818      	ldr	r0, [r3, #0]
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	6899      	ldr	r1, [r3, #8]
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	685a      	ldr	r2, [r3, #4]
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	68db      	ldr	r3, [r3, #12]
 8005f20:	f000 fc28 	bl	8006774 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	689a      	ldr	r2, [r3, #8]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f32:	609a      	str	r2, [r3, #8]
      break;
 8005f34:	e03b      	b.n	8005fae <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6818      	ldr	r0, [r3, #0]
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	6859      	ldr	r1, [r3, #4]
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	68db      	ldr	r3, [r3, #12]
 8005f42:	461a      	mov	r2, r3
 8005f44:	f000 faec 	bl	8006520 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	2150      	movs	r1, #80	; 0x50
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f000 fbf6 	bl	8006740 <TIM_ITRx_SetConfig>
      break;
 8005f54:	e02b      	b.n	8005fae <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6818      	ldr	r0, [r3, #0]
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	6859      	ldr	r1, [r3, #4]
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	68db      	ldr	r3, [r3, #12]
 8005f62:	461a      	mov	r2, r3
 8005f64:	f000 fb46 	bl	80065f4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	2160      	movs	r1, #96	; 0x60
 8005f6e:	4618      	mov	r0, r3
 8005f70:	f000 fbe6 	bl	8006740 <TIM_ITRx_SetConfig>
      break;
 8005f74:	e01b      	b.n	8005fae <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6818      	ldr	r0, [r3, #0]
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	6859      	ldr	r1, [r3, #4]
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	68db      	ldr	r3, [r3, #12]
 8005f82:	461a      	mov	r2, r3
 8005f84:	f000 facc 	bl	8006520 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	2140      	movs	r1, #64	; 0x40
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f000 fbd6 	bl	8006740 <TIM_ITRx_SetConfig>
      break;
 8005f94:	e00b      	b.n	8005fae <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681a      	ldr	r2, [r3, #0]
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4619      	mov	r1, r3
 8005fa0:	4610      	mov	r0, r2
 8005fa2:	f000 fbcd 	bl	8006740 <TIM_ITRx_SetConfig>
        break;
 8005fa6:	e002      	b.n	8005fae <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005fa8:	bf00      	nop
 8005faa:	e000      	b.n	8005fae <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005fac:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2201      	movs	r2, #1
 8005fb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005fbe:	2300      	movs	r3, #0
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	3710      	adds	r7, #16
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}

08005fc8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b085      	sub	sp, #20
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
 8005fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	2b0c      	cmp	r3, #12
 8005fda:	d831      	bhi.n	8006040 <HAL_TIM_ReadCapturedValue+0x78>
 8005fdc:	a201      	add	r2, pc, #4	; (adr r2, 8005fe4 <HAL_TIM_ReadCapturedValue+0x1c>)
 8005fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fe2:	bf00      	nop
 8005fe4:	08006019 	.word	0x08006019
 8005fe8:	08006041 	.word	0x08006041
 8005fec:	08006041 	.word	0x08006041
 8005ff0:	08006041 	.word	0x08006041
 8005ff4:	08006023 	.word	0x08006023
 8005ff8:	08006041 	.word	0x08006041
 8005ffc:	08006041 	.word	0x08006041
 8006000:	08006041 	.word	0x08006041
 8006004:	0800602d 	.word	0x0800602d
 8006008:	08006041 	.word	0x08006041
 800600c:	08006041 	.word	0x08006041
 8006010:	08006041 	.word	0x08006041
 8006014:	08006037 	.word	0x08006037
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800601e:	60fb      	str	r3, [r7, #12]

      break;
 8006020:	e00f      	b.n	8006042 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006028:	60fb      	str	r3, [r7, #12]

      break;
 800602a:	e00a      	b.n	8006042 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006032:	60fb      	str	r3, [r7, #12]

      break;
 8006034:	e005      	b.n	8006042 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800603c:	60fb      	str	r3, [r7, #12]

      break;
 800603e:	e000      	b.n	8006042 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006040:	bf00      	nop
  }

  return tmpreg;
 8006042:	68fb      	ldr	r3, [r7, #12]
}
 8006044:	4618      	mov	r0, r3
 8006046:	3714      	adds	r7, #20
 8006048:	46bd      	mov	sp, r7
 800604a:	bc80      	pop	{r7}
 800604c:	4770      	bx	lr
 800604e:	bf00      	nop

08006050 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006050:	b480      	push	{r7}
 8006052:	b083      	sub	sp, #12
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006058:	bf00      	nop
 800605a:	370c      	adds	r7, #12
 800605c:	46bd      	mov	sp, r7
 800605e:	bc80      	pop	{r7}
 8006060:	4770      	bx	lr

08006062 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006062:	b480      	push	{r7}
 8006064:	b083      	sub	sp, #12
 8006066:	af00      	add	r7, sp, #0
 8006068:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800606a:	bf00      	nop
 800606c:	370c      	adds	r7, #12
 800606e:	46bd      	mov	sp, r7
 8006070:	bc80      	pop	{r7}
 8006072:	4770      	bx	lr

08006074 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006074:	b480      	push	{r7}
 8006076:	b083      	sub	sp, #12
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800607c:	bf00      	nop
 800607e:	370c      	adds	r7, #12
 8006080:	46bd      	mov	sp, r7
 8006082:	bc80      	pop	{r7}
 8006084:	4770      	bx	lr

08006086 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006086:	b480      	push	{r7}
 8006088:	b083      	sub	sp, #12
 800608a:	af00      	add	r7, sp, #0
 800608c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800608e:	bf00      	nop
 8006090:	370c      	adds	r7, #12
 8006092:	46bd      	mov	sp, r7
 8006094:	bc80      	pop	{r7}
 8006096:	4770      	bx	lr

08006098 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006098:	b480      	push	{r7}
 800609a:	b085      	sub	sp, #20
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
 80060a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	4a29      	ldr	r2, [pc, #164]	; (8006150 <TIM_Base_SetConfig+0xb8>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d00b      	beq.n	80060c8 <TIM_Base_SetConfig+0x30>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060b6:	d007      	beq.n	80060c8 <TIM_Base_SetConfig+0x30>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	4a26      	ldr	r2, [pc, #152]	; (8006154 <TIM_Base_SetConfig+0xbc>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d003      	beq.n	80060c8 <TIM_Base_SetConfig+0x30>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	4a25      	ldr	r2, [pc, #148]	; (8006158 <TIM_Base_SetConfig+0xc0>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d108      	bne.n	80060da <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	68fa      	ldr	r2, [r7, #12]
 80060d6:	4313      	orrs	r3, r2
 80060d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	4a1c      	ldr	r2, [pc, #112]	; (8006150 <TIM_Base_SetConfig+0xb8>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d00b      	beq.n	80060fa <TIM_Base_SetConfig+0x62>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060e8:	d007      	beq.n	80060fa <TIM_Base_SetConfig+0x62>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	4a19      	ldr	r2, [pc, #100]	; (8006154 <TIM_Base_SetConfig+0xbc>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d003      	beq.n	80060fa <TIM_Base_SetConfig+0x62>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	4a18      	ldr	r2, [pc, #96]	; (8006158 <TIM_Base_SetConfig+0xc0>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d108      	bne.n	800610c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006100:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	68db      	ldr	r3, [r3, #12]
 8006106:	68fa      	ldr	r2, [r7, #12]
 8006108:	4313      	orrs	r3, r2
 800610a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	695b      	ldr	r3, [r3, #20]
 8006116:	4313      	orrs	r3, r2
 8006118:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	68fa      	ldr	r2, [r7, #12]
 800611e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	689a      	ldr	r2, [r3, #8]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	681a      	ldr	r2, [r3, #0]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	4a07      	ldr	r2, [pc, #28]	; (8006150 <TIM_Base_SetConfig+0xb8>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d103      	bne.n	8006140 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	691a      	ldr	r2, [r3, #16]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2201      	movs	r2, #1
 8006144:	615a      	str	r2, [r3, #20]
}
 8006146:	bf00      	nop
 8006148:	3714      	adds	r7, #20
 800614a:	46bd      	mov	sp, r7
 800614c:	bc80      	pop	{r7}
 800614e:	4770      	bx	lr
 8006150:	40012c00 	.word	0x40012c00
 8006154:	40000400 	.word	0x40000400
 8006158:	40000800 	.word	0x40000800

0800615c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800615c:	b480      	push	{r7}
 800615e:	b087      	sub	sp, #28
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
 8006164:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6a1b      	ldr	r3, [r3, #32]
 800616a:	f023 0201 	bic.w	r2, r3, #1
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6a1b      	ldr	r3, [r3, #32]
 8006176:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	699b      	ldr	r3, [r3, #24]
 8006182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800618a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	f023 0303 	bic.w	r3, r3, #3
 8006192:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	68fa      	ldr	r2, [r7, #12]
 800619a:	4313      	orrs	r3, r2
 800619c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	f023 0302 	bic.w	r3, r3, #2
 80061a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	689b      	ldr	r3, [r3, #8]
 80061aa:	697a      	ldr	r2, [r7, #20]
 80061ac:	4313      	orrs	r3, r2
 80061ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	4a1c      	ldr	r2, [pc, #112]	; (8006224 <TIM_OC1_SetConfig+0xc8>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d10c      	bne.n	80061d2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	f023 0308 	bic.w	r3, r3, #8
 80061be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	68db      	ldr	r3, [r3, #12]
 80061c4:	697a      	ldr	r2, [r7, #20]
 80061c6:	4313      	orrs	r3, r2
 80061c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	f023 0304 	bic.w	r3, r3, #4
 80061d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	4a13      	ldr	r2, [pc, #76]	; (8006224 <TIM_OC1_SetConfig+0xc8>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d111      	bne.n	80061fe <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80061e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80061e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	695b      	ldr	r3, [r3, #20]
 80061ee:	693a      	ldr	r2, [r7, #16]
 80061f0:	4313      	orrs	r3, r2
 80061f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	699b      	ldr	r3, [r3, #24]
 80061f8:	693a      	ldr	r2, [r7, #16]
 80061fa:	4313      	orrs	r3, r2
 80061fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	693a      	ldr	r2, [r7, #16]
 8006202:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	68fa      	ldr	r2, [r7, #12]
 8006208:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	685a      	ldr	r2, [r3, #4]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	697a      	ldr	r2, [r7, #20]
 8006216:	621a      	str	r2, [r3, #32]
}
 8006218:	bf00      	nop
 800621a:	371c      	adds	r7, #28
 800621c:	46bd      	mov	sp, r7
 800621e:	bc80      	pop	{r7}
 8006220:	4770      	bx	lr
 8006222:	bf00      	nop
 8006224:	40012c00 	.word	0x40012c00

08006228 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006228:	b480      	push	{r7}
 800622a:	b087      	sub	sp, #28
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
 8006230:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6a1b      	ldr	r3, [r3, #32]
 8006236:	f023 0210 	bic.w	r2, r3, #16
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6a1b      	ldr	r3, [r3, #32]
 8006242:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	699b      	ldr	r3, [r3, #24]
 800624e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006256:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800625e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	021b      	lsls	r3, r3, #8
 8006266:	68fa      	ldr	r2, [r7, #12]
 8006268:	4313      	orrs	r3, r2
 800626a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	f023 0320 	bic.w	r3, r3, #32
 8006272:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	689b      	ldr	r3, [r3, #8]
 8006278:	011b      	lsls	r3, r3, #4
 800627a:	697a      	ldr	r2, [r7, #20]
 800627c:	4313      	orrs	r3, r2
 800627e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	4a1d      	ldr	r2, [pc, #116]	; (80062f8 <TIM_OC2_SetConfig+0xd0>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d10d      	bne.n	80062a4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800628e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	68db      	ldr	r3, [r3, #12]
 8006294:	011b      	lsls	r3, r3, #4
 8006296:	697a      	ldr	r2, [r7, #20]
 8006298:	4313      	orrs	r3, r2
 800629a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062a2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	4a14      	ldr	r2, [pc, #80]	; (80062f8 <TIM_OC2_SetConfig+0xd0>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d113      	bne.n	80062d4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80062b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80062ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	695b      	ldr	r3, [r3, #20]
 80062c0:	009b      	lsls	r3, r3, #2
 80062c2:	693a      	ldr	r2, [r7, #16]
 80062c4:	4313      	orrs	r3, r2
 80062c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	699b      	ldr	r3, [r3, #24]
 80062cc:	009b      	lsls	r3, r3, #2
 80062ce:	693a      	ldr	r2, [r7, #16]
 80062d0:	4313      	orrs	r3, r2
 80062d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	693a      	ldr	r2, [r7, #16]
 80062d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	68fa      	ldr	r2, [r7, #12]
 80062de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	685a      	ldr	r2, [r3, #4]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	697a      	ldr	r2, [r7, #20]
 80062ec:	621a      	str	r2, [r3, #32]
}
 80062ee:	bf00      	nop
 80062f0:	371c      	adds	r7, #28
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bc80      	pop	{r7}
 80062f6:	4770      	bx	lr
 80062f8:	40012c00 	.word	0x40012c00

080062fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b087      	sub	sp, #28
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
 8006304:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6a1b      	ldr	r3, [r3, #32]
 800630a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6a1b      	ldr	r3, [r3, #32]
 8006316:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	69db      	ldr	r3, [r3, #28]
 8006322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800632a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f023 0303 	bic.w	r3, r3, #3
 8006332:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	68fa      	ldr	r2, [r7, #12]
 800633a:	4313      	orrs	r3, r2
 800633c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006344:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	689b      	ldr	r3, [r3, #8]
 800634a:	021b      	lsls	r3, r3, #8
 800634c:	697a      	ldr	r2, [r7, #20]
 800634e:	4313      	orrs	r3, r2
 8006350:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	4a1d      	ldr	r2, [pc, #116]	; (80063cc <TIM_OC3_SetConfig+0xd0>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d10d      	bne.n	8006376 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006360:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	68db      	ldr	r3, [r3, #12]
 8006366:	021b      	lsls	r3, r3, #8
 8006368:	697a      	ldr	r2, [r7, #20]
 800636a:	4313      	orrs	r3, r2
 800636c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006374:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	4a14      	ldr	r2, [pc, #80]	; (80063cc <TIM_OC3_SetConfig+0xd0>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d113      	bne.n	80063a6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006384:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800638c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	695b      	ldr	r3, [r3, #20]
 8006392:	011b      	lsls	r3, r3, #4
 8006394:	693a      	ldr	r2, [r7, #16]
 8006396:	4313      	orrs	r3, r2
 8006398:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	699b      	ldr	r3, [r3, #24]
 800639e:	011b      	lsls	r3, r3, #4
 80063a0:	693a      	ldr	r2, [r7, #16]
 80063a2:	4313      	orrs	r3, r2
 80063a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	693a      	ldr	r2, [r7, #16]
 80063aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	68fa      	ldr	r2, [r7, #12]
 80063b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	685a      	ldr	r2, [r3, #4]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	697a      	ldr	r2, [r7, #20]
 80063be:	621a      	str	r2, [r3, #32]
}
 80063c0:	bf00      	nop
 80063c2:	371c      	adds	r7, #28
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bc80      	pop	{r7}
 80063c8:	4770      	bx	lr
 80063ca:	bf00      	nop
 80063cc:	40012c00 	.word	0x40012c00

080063d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b087      	sub	sp, #28
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
 80063d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6a1b      	ldr	r3, [r3, #32]
 80063de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6a1b      	ldr	r3, [r3, #32]
 80063ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	69db      	ldr	r3, [r3, #28]
 80063f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006406:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	021b      	lsls	r3, r3, #8
 800640e:	68fa      	ldr	r2, [r7, #12]
 8006410:	4313      	orrs	r3, r2
 8006412:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800641a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	689b      	ldr	r3, [r3, #8]
 8006420:	031b      	lsls	r3, r3, #12
 8006422:	693a      	ldr	r2, [r7, #16]
 8006424:	4313      	orrs	r3, r2
 8006426:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	4a0f      	ldr	r2, [pc, #60]	; (8006468 <TIM_OC4_SetConfig+0x98>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d109      	bne.n	8006444 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006436:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	695b      	ldr	r3, [r3, #20]
 800643c:	019b      	lsls	r3, r3, #6
 800643e:	697a      	ldr	r2, [r7, #20]
 8006440:	4313      	orrs	r3, r2
 8006442:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	697a      	ldr	r2, [r7, #20]
 8006448:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	68fa      	ldr	r2, [r7, #12]
 800644e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	685a      	ldr	r2, [r3, #4]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	693a      	ldr	r2, [r7, #16]
 800645c:	621a      	str	r2, [r3, #32]
}
 800645e:	bf00      	nop
 8006460:	371c      	adds	r7, #28
 8006462:	46bd      	mov	sp, r7
 8006464:	bc80      	pop	{r7}
 8006466:	4770      	bx	lr
 8006468:	40012c00 	.word	0x40012c00

0800646c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800646c:	b480      	push	{r7}
 800646e:	b087      	sub	sp, #28
 8006470:	af00      	add	r7, sp, #0
 8006472:	60f8      	str	r0, [r7, #12]
 8006474:	60b9      	str	r1, [r7, #8]
 8006476:	607a      	str	r2, [r7, #4]
 8006478:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	6a1b      	ldr	r3, [r3, #32]
 800647e:	f023 0201 	bic.w	r2, r3, #1
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	699b      	ldr	r3, [r3, #24]
 800648a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	6a1b      	ldr	r3, [r3, #32]
 8006490:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	4a1f      	ldr	r2, [pc, #124]	; (8006514 <TIM_TI1_SetConfig+0xa8>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d00b      	beq.n	80064b2 <TIM_TI1_SetConfig+0x46>
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064a0:	d007      	beq.n	80064b2 <TIM_TI1_SetConfig+0x46>
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	4a1c      	ldr	r2, [pc, #112]	; (8006518 <TIM_TI1_SetConfig+0xac>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d003      	beq.n	80064b2 <TIM_TI1_SetConfig+0x46>
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	4a1b      	ldr	r2, [pc, #108]	; (800651c <TIM_TI1_SetConfig+0xb0>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d101      	bne.n	80064b6 <TIM_TI1_SetConfig+0x4a>
 80064b2:	2301      	movs	r3, #1
 80064b4:	e000      	b.n	80064b8 <TIM_TI1_SetConfig+0x4c>
 80064b6:	2300      	movs	r3, #0
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d008      	beq.n	80064ce <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	f023 0303 	bic.w	r3, r3, #3
 80064c2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80064c4:	697a      	ldr	r2, [r7, #20]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	4313      	orrs	r3, r2
 80064ca:	617b      	str	r3, [r7, #20]
 80064cc:	e003      	b.n	80064d6 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	f043 0301 	orr.w	r3, r3, #1
 80064d4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80064dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	011b      	lsls	r3, r3, #4
 80064e2:	b2db      	uxtb	r3, r3
 80064e4:	697a      	ldr	r2, [r7, #20]
 80064e6:	4313      	orrs	r3, r2
 80064e8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	f023 030a 	bic.w	r3, r3, #10
 80064f0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	f003 030a 	and.w	r3, r3, #10
 80064f8:	693a      	ldr	r2, [r7, #16]
 80064fa:	4313      	orrs	r3, r2
 80064fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	697a      	ldr	r2, [r7, #20]
 8006502:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	693a      	ldr	r2, [r7, #16]
 8006508:	621a      	str	r2, [r3, #32]
}
 800650a:	bf00      	nop
 800650c:	371c      	adds	r7, #28
 800650e:	46bd      	mov	sp, r7
 8006510:	bc80      	pop	{r7}
 8006512:	4770      	bx	lr
 8006514:	40012c00 	.word	0x40012c00
 8006518:	40000400 	.word	0x40000400
 800651c:	40000800 	.word	0x40000800

08006520 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006520:	b480      	push	{r7}
 8006522:	b087      	sub	sp, #28
 8006524:	af00      	add	r7, sp, #0
 8006526:	60f8      	str	r0, [r7, #12]
 8006528:	60b9      	str	r1, [r7, #8]
 800652a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	6a1b      	ldr	r3, [r3, #32]
 8006530:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	6a1b      	ldr	r3, [r3, #32]
 8006536:	f023 0201 	bic.w	r2, r3, #1
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	699b      	ldr	r3, [r3, #24]
 8006542:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800654a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	011b      	lsls	r3, r3, #4
 8006550:	693a      	ldr	r2, [r7, #16]
 8006552:	4313      	orrs	r3, r2
 8006554:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	f023 030a 	bic.w	r3, r3, #10
 800655c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800655e:	697a      	ldr	r2, [r7, #20]
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	4313      	orrs	r3, r2
 8006564:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	693a      	ldr	r2, [r7, #16]
 800656a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	697a      	ldr	r2, [r7, #20]
 8006570:	621a      	str	r2, [r3, #32]
}
 8006572:	bf00      	nop
 8006574:	371c      	adds	r7, #28
 8006576:	46bd      	mov	sp, r7
 8006578:	bc80      	pop	{r7}
 800657a:	4770      	bx	lr

0800657c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800657c:	b480      	push	{r7}
 800657e:	b087      	sub	sp, #28
 8006580:	af00      	add	r7, sp, #0
 8006582:	60f8      	str	r0, [r7, #12]
 8006584:	60b9      	str	r1, [r7, #8]
 8006586:	607a      	str	r2, [r7, #4]
 8006588:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	6a1b      	ldr	r3, [r3, #32]
 800658e:	f023 0210 	bic.w	r2, r3, #16
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	699b      	ldr	r3, [r3, #24]
 800659a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	6a1b      	ldr	r3, [r3, #32]
 80065a0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	021b      	lsls	r3, r3, #8
 80065ae:	697a      	ldr	r2, [r7, #20]
 80065b0:	4313      	orrs	r3, r2
 80065b2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80065b4:	697b      	ldr	r3, [r7, #20]
 80065b6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80065ba:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	031b      	lsls	r3, r3, #12
 80065c0:	b29b      	uxth	r3, r3
 80065c2:	697a      	ldr	r2, [r7, #20]
 80065c4:	4313      	orrs	r3, r2
 80065c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80065ce:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	011b      	lsls	r3, r3, #4
 80065d4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80065d8:	693a      	ldr	r2, [r7, #16]
 80065da:	4313      	orrs	r3, r2
 80065dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	697a      	ldr	r2, [r7, #20]
 80065e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	693a      	ldr	r2, [r7, #16]
 80065e8:	621a      	str	r2, [r3, #32]
}
 80065ea:	bf00      	nop
 80065ec:	371c      	adds	r7, #28
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bc80      	pop	{r7}
 80065f2:	4770      	bx	lr

080065f4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b087      	sub	sp, #28
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	60f8      	str	r0, [r7, #12]
 80065fc:	60b9      	str	r1, [r7, #8]
 80065fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	6a1b      	ldr	r3, [r3, #32]
 8006604:	f023 0210 	bic.w	r2, r3, #16
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	699b      	ldr	r3, [r3, #24]
 8006610:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	6a1b      	ldr	r3, [r3, #32]
 8006616:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800661e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	031b      	lsls	r3, r3, #12
 8006624:	697a      	ldr	r2, [r7, #20]
 8006626:	4313      	orrs	r3, r2
 8006628:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006630:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	011b      	lsls	r3, r3, #4
 8006636:	693a      	ldr	r2, [r7, #16]
 8006638:	4313      	orrs	r3, r2
 800663a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	697a      	ldr	r2, [r7, #20]
 8006640:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	693a      	ldr	r2, [r7, #16]
 8006646:	621a      	str	r2, [r3, #32]
}
 8006648:	bf00      	nop
 800664a:	371c      	adds	r7, #28
 800664c:	46bd      	mov	sp, r7
 800664e:	bc80      	pop	{r7}
 8006650:	4770      	bx	lr

08006652 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006652:	b480      	push	{r7}
 8006654:	b087      	sub	sp, #28
 8006656:	af00      	add	r7, sp, #0
 8006658:	60f8      	str	r0, [r7, #12]
 800665a:	60b9      	str	r1, [r7, #8]
 800665c:	607a      	str	r2, [r7, #4]
 800665e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	6a1b      	ldr	r3, [r3, #32]
 8006664:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	69db      	ldr	r3, [r3, #28]
 8006670:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	6a1b      	ldr	r3, [r3, #32]
 8006676:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	f023 0303 	bic.w	r3, r3, #3
 800667e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006680:	697a      	ldr	r2, [r7, #20]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	4313      	orrs	r3, r2
 8006686:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800668e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	011b      	lsls	r3, r3, #4
 8006694:	b2db      	uxtb	r3, r3
 8006696:	697a      	ldr	r2, [r7, #20]
 8006698:	4313      	orrs	r3, r2
 800669a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80066a2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	021b      	lsls	r3, r3, #8
 80066a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80066ac:	693a      	ldr	r2, [r7, #16]
 80066ae:	4313      	orrs	r3, r2
 80066b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	697a      	ldr	r2, [r7, #20]
 80066b6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	693a      	ldr	r2, [r7, #16]
 80066bc:	621a      	str	r2, [r3, #32]
}
 80066be:	bf00      	nop
 80066c0:	371c      	adds	r7, #28
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bc80      	pop	{r7}
 80066c6:	4770      	bx	lr

080066c8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80066c8:	b480      	push	{r7}
 80066ca:	b087      	sub	sp, #28
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	60f8      	str	r0, [r7, #12]
 80066d0:	60b9      	str	r1, [r7, #8]
 80066d2:	607a      	str	r2, [r7, #4]
 80066d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	6a1b      	ldr	r3, [r3, #32]
 80066da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	69db      	ldr	r3, [r3, #28]
 80066e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	6a1b      	ldr	r3, [r3, #32]
 80066ec:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066f4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	021b      	lsls	r3, r3, #8
 80066fa:	697a      	ldr	r2, [r7, #20]
 80066fc:	4313      	orrs	r3, r2
 80066fe:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006706:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	031b      	lsls	r3, r3, #12
 800670c:	b29b      	uxth	r3, r3
 800670e:	697a      	ldr	r2, [r7, #20]
 8006710:	4313      	orrs	r3, r2
 8006712:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800671a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	031b      	lsls	r3, r3, #12
 8006720:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006724:	693a      	ldr	r2, [r7, #16]
 8006726:	4313      	orrs	r3, r2
 8006728:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	697a      	ldr	r2, [r7, #20]
 800672e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	693a      	ldr	r2, [r7, #16]
 8006734:	621a      	str	r2, [r3, #32]
}
 8006736:	bf00      	nop
 8006738:	371c      	adds	r7, #28
 800673a:	46bd      	mov	sp, r7
 800673c:	bc80      	pop	{r7}
 800673e:	4770      	bx	lr

08006740 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006740:	b480      	push	{r7}
 8006742:	b085      	sub	sp, #20
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
 8006748:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	689b      	ldr	r3, [r3, #8]
 800674e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006756:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006758:	683a      	ldr	r2, [r7, #0]
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	4313      	orrs	r3, r2
 800675e:	f043 0307 	orr.w	r3, r3, #7
 8006762:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	68fa      	ldr	r2, [r7, #12]
 8006768:	609a      	str	r2, [r3, #8]
}
 800676a:	bf00      	nop
 800676c:	3714      	adds	r7, #20
 800676e:	46bd      	mov	sp, r7
 8006770:	bc80      	pop	{r7}
 8006772:	4770      	bx	lr

08006774 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006774:	b480      	push	{r7}
 8006776:	b087      	sub	sp, #28
 8006778:	af00      	add	r7, sp, #0
 800677a:	60f8      	str	r0, [r7, #12]
 800677c:	60b9      	str	r1, [r7, #8]
 800677e:	607a      	str	r2, [r7, #4]
 8006780:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	689b      	ldr	r3, [r3, #8]
 8006786:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800678e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	021a      	lsls	r2, r3, #8
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	431a      	orrs	r2, r3
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	4313      	orrs	r3, r2
 800679c:	697a      	ldr	r2, [r7, #20]
 800679e:	4313      	orrs	r3, r2
 80067a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	697a      	ldr	r2, [r7, #20]
 80067a6:	609a      	str	r2, [r3, #8]
}
 80067a8:	bf00      	nop
 80067aa:	371c      	adds	r7, #28
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bc80      	pop	{r7}
 80067b0:	4770      	bx	lr

080067b2 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80067b2:	b480      	push	{r7}
 80067b4:	b087      	sub	sp, #28
 80067b6:	af00      	add	r7, sp, #0
 80067b8:	60f8      	str	r0, [r7, #12]
 80067ba:	60b9      	str	r1, [r7, #8]
 80067bc:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	f003 031f 	and.w	r3, r3, #31
 80067c4:	2201      	movs	r2, #1
 80067c6:	fa02 f303 	lsl.w	r3, r2, r3
 80067ca:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	6a1a      	ldr	r2, [r3, #32]
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	43db      	mvns	r3, r3
 80067d4:	401a      	ands	r2, r3
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	6a1a      	ldr	r2, [r3, #32]
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	f003 031f 	and.w	r3, r3, #31
 80067e4:	6879      	ldr	r1, [r7, #4]
 80067e6:	fa01 f303 	lsl.w	r3, r1, r3
 80067ea:	431a      	orrs	r2, r3
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	621a      	str	r2, [r3, #32]
}
 80067f0:	bf00      	nop
 80067f2:	371c      	adds	r7, #28
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bc80      	pop	{r7}
 80067f8:	4770      	bx	lr
	...

080067fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b085      	sub	sp, #20
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
 8006804:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800680c:	2b01      	cmp	r3, #1
 800680e:	d101      	bne.n	8006814 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006810:	2302      	movs	r3, #2
 8006812:	e046      	b.n	80068a2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2201      	movs	r2, #1
 8006818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2202      	movs	r2, #2
 8006820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	689b      	ldr	r3, [r3, #8]
 8006832:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800683a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	68fa      	ldr	r2, [r7, #12]
 8006842:	4313      	orrs	r3, r2
 8006844:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	68fa      	ldr	r2, [r7, #12]
 800684c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a16      	ldr	r2, [pc, #88]	; (80068ac <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d00e      	beq.n	8006876 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006860:	d009      	beq.n	8006876 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a12      	ldr	r2, [pc, #72]	; (80068b0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d004      	beq.n	8006876 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a10      	ldr	r2, [pc, #64]	; (80068b4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d10c      	bne.n	8006890 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800687c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	685b      	ldr	r3, [r3, #4]
 8006882:	68ba      	ldr	r2, [r7, #8]
 8006884:	4313      	orrs	r3, r2
 8006886:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	68ba      	ldr	r2, [r7, #8]
 800688e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2201      	movs	r2, #1
 8006894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2200      	movs	r2, #0
 800689c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80068a0:	2300      	movs	r3, #0
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	3714      	adds	r7, #20
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bc80      	pop	{r7}
 80068aa:	4770      	bx	lr
 80068ac:	40012c00 	.word	0x40012c00
 80068b0:	40000400 	.word	0x40000400
 80068b4:	40000800 	.word	0x40000800

080068b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80068b8:	b480      	push	{r7}
 80068ba:	b083      	sub	sp, #12
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80068c0:	bf00      	nop
 80068c2:	370c      	adds	r7, #12
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bc80      	pop	{r7}
 80068c8:	4770      	bx	lr

080068ca <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80068ca:	b480      	push	{r7}
 80068cc:	b083      	sub	sp, #12
 80068ce:	af00      	add	r7, sp, #0
 80068d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80068d2:	bf00      	nop
 80068d4:	370c      	adds	r7, #12
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bc80      	pop	{r7}
 80068da:	4770      	bx	lr

080068dc <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80068dc:	b084      	sub	sp, #16
 80068de:	b480      	push	{r7}
 80068e0:	b083      	sub	sp, #12
 80068e2:	af00      	add	r7, sp, #0
 80068e4:	6078      	str	r0, [r7, #4]
 80068e6:	f107 0014 	add.w	r0, r7, #20
 80068ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80068ee:	2300      	movs	r3, #0
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	370c      	adds	r7, #12
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bc80      	pop	{r7}
 80068f8:	b004      	add	sp, #16
 80068fa:	4770      	bx	lr

080068fc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b085      	sub	sp, #20
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2200      	movs	r2, #0
 8006908:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800690c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006910:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	b29a      	uxth	r2, r3
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800691c:	2300      	movs	r3, #0
}
 800691e:	4618      	mov	r0, r3
 8006920:	3714      	adds	r7, #20
 8006922:	46bd      	mov	sp, r7
 8006924:	bc80      	pop	{r7}
 8006926:	4770      	bx	lr

08006928 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006928:	b480      	push	{r7}
 800692a:	b085      	sub	sp, #20
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006930:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006934:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800693c:	b29a      	uxth	r2, r3
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	b29b      	uxth	r3, r3
 8006942:	43db      	mvns	r3, r3
 8006944:	b29b      	uxth	r3, r3
 8006946:	4013      	ands	r3, r2
 8006948:	b29a      	uxth	r2, r3
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006950:	2300      	movs	r3, #0
}
 8006952:	4618      	mov	r0, r3
 8006954:	3714      	adds	r7, #20
 8006956:	46bd      	mov	sp, r7
 8006958:	bc80      	pop	{r7}
 800695a:	4770      	bx	lr

0800695c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800695c:	b480      	push	{r7}
 800695e:	b083      	sub	sp, #12
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
 8006964:	460b      	mov	r3, r1
 8006966:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006968:	2300      	movs	r3, #0
}
 800696a:	4618      	mov	r0, r3
 800696c:	370c      	adds	r7, #12
 800696e:	46bd      	mov	sp, r7
 8006970:	bc80      	pop	{r7}
 8006972:	4770      	bx	lr

08006974 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006974:	b084      	sub	sp, #16
 8006976:	b480      	push	{r7}
 8006978:	b083      	sub	sp, #12
 800697a:	af00      	add	r7, sp, #0
 800697c:	6078      	str	r0, [r7, #4]
 800697e:	f107 0014 	add.w	r0, r7, #20
 8006982:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2201      	movs	r2, #1
 800698a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2200      	movs	r2, #0
 8006992:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2200      	movs	r2, #0
 800699a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2200      	movs	r2, #0
 80069a2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80069a6:	2300      	movs	r3, #0
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	370c      	adds	r7, #12
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bc80      	pop	{r7}
 80069b0:	b004      	add	sp, #16
 80069b2:	4770      	bx	lr

080069b4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b09b      	sub	sp, #108	; 0x6c
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
 80069bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80069be:	2300      	movs	r3, #0
 80069c0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80069c4:	687a      	ldr	r2, [r7, #4]
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	781b      	ldrb	r3, [r3, #0]
 80069ca:	009b      	lsls	r3, r3, #2
 80069cc:	4413      	add	r3, r2
 80069ce:	881b      	ldrh	r3, [r3, #0]
 80069d0:	b29b      	uxth	r3, r3
 80069d2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80069d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069da:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	78db      	ldrb	r3, [r3, #3]
 80069e2:	2b03      	cmp	r3, #3
 80069e4:	d81f      	bhi.n	8006a26 <USB_ActivateEndpoint+0x72>
 80069e6:	a201      	add	r2, pc, #4	; (adr r2, 80069ec <USB_ActivateEndpoint+0x38>)
 80069e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069ec:	080069fd 	.word	0x080069fd
 80069f0:	08006a19 	.word	0x08006a19
 80069f4:	08006a2f 	.word	0x08006a2f
 80069f8:	08006a0b 	.word	0x08006a0b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80069fc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006a00:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006a04:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8006a08:	e012      	b.n	8006a30 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006a0a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006a0e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8006a12:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8006a16:	e00b      	b.n	8006a30 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006a18:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006a1c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006a20:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8006a24:	e004      	b.n	8006a30 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8006a26:	2301      	movs	r3, #1
 8006a28:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8006a2c:	e000      	b.n	8006a30 <USB_ActivateEndpoint+0x7c>
      break;
 8006a2e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006a30:	687a      	ldr	r2, [r7, #4]
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	781b      	ldrb	r3, [r3, #0]
 8006a36:	009b      	lsls	r3, r3, #2
 8006a38:	441a      	add	r2, r3
 8006a3a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006a3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a4e:	b29b      	uxth	r3, r3
 8006a50:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006a52:	687a      	ldr	r2, [r7, #4]
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	781b      	ldrb	r3, [r3, #0]
 8006a58:	009b      	lsls	r3, r3, #2
 8006a5a:	4413      	add	r3, r2
 8006a5c:	881b      	ldrh	r3, [r3, #0]
 8006a5e:	b29b      	uxth	r3, r3
 8006a60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a68:	b29a      	uxth	r2, r3
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	781b      	ldrb	r3, [r3, #0]
 8006a6e:	b29b      	uxth	r3, r3
 8006a70:	4313      	orrs	r3, r2
 8006a72:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8006a76:	687a      	ldr	r2, [r7, #4]
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	781b      	ldrb	r3, [r3, #0]
 8006a7c:	009b      	lsls	r3, r3, #2
 8006a7e:	441a      	add	r2, r3
 8006a80:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8006a84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a94:	b29b      	uxth	r3, r3
 8006a96:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	7b1b      	ldrb	r3, [r3, #12]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	f040 8149 	bne.w	8006d34 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	785b      	ldrb	r3, [r3, #1]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	f000 8084 	beq.w	8006bb4 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	617b      	str	r3, [r7, #20]
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ab6:	b29b      	uxth	r3, r3
 8006ab8:	461a      	mov	r2, r3
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	4413      	add	r3, r2
 8006abe:	617b      	str	r3, [r7, #20]
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	781b      	ldrb	r3, [r3, #0]
 8006ac4:	011a      	lsls	r2, r3, #4
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	4413      	add	r3, r2
 8006aca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ace:	613b      	str	r3, [r7, #16]
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	88db      	ldrh	r3, [r3, #6]
 8006ad4:	085b      	lsrs	r3, r3, #1
 8006ad6:	b29b      	uxth	r3, r3
 8006ad8:	005b      	lsls	r3, r3, #1
 8006ada:	b29a      	uxth	r2, r3
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006ae0:	687a      	ldr	r2, [r7, #4]
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	781b      	ldrb	r3, [r3, #0]
 8006ae6:	009b      	lsls	r3, r3, #2
 8006ae8:	4413      	add	r3, r2
 8006aea:	881b      	ldrh	r3, [r3, #0]
 8006aec:	81fb      	strh	r3, [r7, #14]
 8006aee:	89fb      	ldrh	r3, [r7, #14]
 8006af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d01b      	beq.n	8006b30 <USB_ActivateEndpoint+0x17c>
 8006af8:	687a      	ldr	r2, [r7, #4]
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	781b      	ldrb	r3, [r3, #0]
 8006afe:	009b      	lsls	r3, r3, #2
 8006b00:	4413      	add	r3, r2
 8006b02:	881b      	ldrh	r3, [r3, #0]
 8006b04:	b29b      	uxth	r3, r3
 8006b06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b0e:	81bb      	strh	r3, [r7, #12]
 8006b10:	687a      	ldr	r2, [r7, #4]
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	781b      	ldrb	r3, [r3, #0]
 8006b16:	009b      	lsls	r3, r3, #2
 8006b18:	441a      	add	r2, r3
 8006b1a:	89bb      	ldrh	r3, [r7, #12]
 8006b1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b28:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006b2c:	b29b      	uxth	r3, r3
 8006b2e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	78db      	ldrb	r3, [r3, #3]
 8006b34:	2b01      	cmp	r3, #1
 8006b36:	d020      	beq.n	8006b7a <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006b38:	687a      	ldr	r2, [r7, #4]
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	781b      	ldrb	r3, [r3, #0]
 8006b3e:	009b      	lsls	r3, r3, #2
 8006b40:	4413      	add	r3, r2
 8006b42:	881b      	ldrh	r3, [r3, #0]
 8006b44:	b29b      	uxth	r3, r3
 8006b46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b4e:	813b      	strh	r3, [r7, #8]
 8006b50:	893b      	ldrh	r3, [r7, #8]
 8006b52:	f083 0320 	eor.w	r3, r3, #32
 8006b56:	813b      	strh	r3, [r7, #8]
 8006b58:	687a      	ldr	r2, [r7, #4]
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	781b      	ldrb	r3, [r3, #0]
 8006b5e:	009b      	lsls	r3, r3, #2
 8006b60:	441a      	add	r2, r3
 8006b62:	893b      	ldrh	r3, [r7, #8]
 8006b64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b74:	b29b      	uxth	r3, r3
 8006b76:	8013      	strh	r3, [r2, #0]
 8006b78:	e27f      	b.n	800707a <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006b7a:	687a      	ldr	r2, [r7, #4]
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	781b      	ldrb	r3, [r3, #0]
 8006b80:	009b      	lsls	r3, r3, #2
 8006b82:	4413      	add	r3, r2
 8006b84:	881b      	ldrh	r3, [r3, #0]
 8006b86:	b29b      	uxth	r3, r3
 8006b88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b90:	817b      	strh	r3, [r7, #10]
 8006b92:	687a      	ldr	r2, [r7, #4]
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	781b      	ldrb	r3, [r3, #0]
 8006b98:	009b      	lsls	r3, r3, #2
 8006b9a:	441a      	add	r2, r3
 8006b9c:	897b      	ldrh	r3, [r7, #10]
 8006b9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ba2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ba6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006baa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bae:	b29b      	uxth	r3, r3
 8006bb0:	8013      	strh	r3, [r2, #0]
 8006bb2:	e262      	b.n	800707a <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bbe:	b29b      	uxth	r3, r3
 8006bc0:	461a      	mov	r2, r3
 8006bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bc4:	4413      	add	r3, r2
 8006bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	781b      	ldrb	r3, [r3, #0]
 8006bcc:	011a      	lsls	r2, r3, #4
 8006bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bd0:	4413      	add	r3, r2
 8006bd2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8006bd6:	62bb      	str	r3, [r7, #40]	; 0x28
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	88db      	ldrh	r3, [r3, #6]
 8006bdc:	085b      	lsrs	r3, r3, #1
 8006bde:	b29b      	uxth	r3, r3
 8006be0:	005b      	lsls	r3, r3, #1
 8006be2:	b29a      	uxth	r2, r3
 8006be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006be6:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	627b      	str	r3, [r7, #36]	; 0x24
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bf2:	b29b      	uxth	r3, r3
 8006bf4:	461a      	mov	r2, r3
 8006bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf8:	4413      	add	r3, r2
 8006bfa:	627b      	str	r3, [r7, #36]	; 0x24
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	781b      	ldrb	r3, [r3, #0]
 8006c00:	011a      	lsls	r2, r3, #4
 8006c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c04:	4413      	add	r3, r2
 8006c06:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006c0a:	623b      	str	r3, [r7, #32]
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	691b      	ldr	r3, [r3, #16]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d112      	bne.n	8006c3a <USB_ActivateEndpoint+0x286>
 8006c14:	6a3b      	ldr	r3, [r7, #32]
 8006c16:	881b      	ldrh	r3, [r3, #0]
 8006c18:	b29b      	uxth	r3, r3
 8006c1a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006c1e:	b29a      	uxth	r2, r3
 8006c20:	6a3b      	ldr	r3, [r7, #32]
 8006c22:	801a      	strh	r2, [r3, #0]
 8006c24:	6a3b      	ldr	r3, [r7, #32]
 8006c26:	881b      	ldrh	r3, [r3, #0]
 8006c28:	b29b      	uxth	r3, r3
 8006c2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c32:	b29a      	uxth	r2, r3
 8006c34:	6a3b      	ldr	r3, [r7, #32]
 8006c36:	801a      	strh	r2, [r3, #0]
 8006c38:	e02f      	b.n	8006c9a <USB_ActivateEndpoint+0x2e6>
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	691b      	ldr	r3, [r3, #16]
 8006c3e:	2b3e      	cmp	r3, #62	; 0x3e
 8006c40:	d813      	bhi.n	8006c6a <USB_ActivateEndpoint+0x2b6>
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	691b      	ldr	r3, [r3, #16]
 8006c46:	085b      	lsrs	r3, r3, #1
 8006c48:	663b      	str	r3, [r7, #96]	; 0x60
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	691b      	ldr	r3, [r3, #16]
 8006c4e:	f003 0301 	and.w	r3, r3, #1
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d002      	beq.n	8006c5c <USB_ActivateEndpoint+0x2a8>
 8006c56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006c58:	3301      	adds	r3, #1
 8006c5a:	663b      	str	r3, [r7, #96]	; 0x60
 8006c5c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006c5e:	b29b      	uxth	r3, r3
 8006c60:	029b      	lsls	r3, r3, #10
 8006c62:	b29a      	uxth	r2, r3
 8006c64:	6a3b      	ldr	r3, [r7, #32]
 8006c66:	801a      	strh	r2, [r3, #0]
 8006c68:	e017      	b.n	8006c9a <USB_ActivateEndpoint+0x2e6>
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	691b      	ldr	r3, [r3, #16]
 8006c6e:	095b      	lsrs	r3, r3, #5
 8006c70:	663b      	str	r3, [r7, #96]	; 0x60
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	691b      	ldr	r3, [r3, #16]
 8006c76:	f003 031f 	and.w	r3, r3, #31
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d102      	bne.n	8006c84 <USB_ActivateEndpoint+0x2d0>
 8006c7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006c80:	3b01      	subs	r3, #1
 8006c82:	663b      	str	r3, [r7, #96]	; 0x60
 8006c84:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006c86:	b29b      	uxth	r3, r3
 8006c88:	029b      	lsls	r3, r3, #10
 8006c8a:	b29b      	uxth	r3, r3
 8006c8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c94:	b29a      	uxth	r2, r3
 8006c96:	6a3b      	ldr	r3, [r7, #32]
 8006c98:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006c9a:	687a      	ldr	r2, [r7, #4]
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	781b      	ldrb	r3, [r3, #0]
 8006ca0:	009b      	lsls	r3, r3, #2
 8006ca2:	4413      	add	r3, r2
 8006ca4:	881b      	ldrh	r3, [r3, #0]
 8006ca6:	83fb      	strh	r3, [r7, #30]
 8006ca8:	8bfb      	ldrh	r3, [r7, #30]
 8006caa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d01b      	beq.n	8006cea <USB_ActivateEndpoint+0x336>
 8006cb2:	687a      	ldr	r2, [r7, #4]
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	781b      	ldrb	r3, [r3, #0]
 8006cb8:	009b      	lsls	r3, r3, #2
 8006cba:	4413      	add	r3, r2
 8006cbc:	881b      	ldrh	r3, [r3, #0]
 8006cbe:	b29b      	uxth	r3, r3
 8006cc0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cc8:	83bb      	strh	r3, [r7, #28]
 8006cca:	687a      	ldr	r2, [r7, #4]
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	781b      	ldrb	r3, [r3, #0]
 8006cd0:	009b      	lsls	r3, r3, #2
 8006cd2:	441a      	add	r2, r3
 8006cd4:	8bbb      	ldrh	r3, [r7, #28]
 8006cd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cde:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006ce2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ce6:	b29b      	uxth	r3, r3
 8006ce8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006cea:	687a      	ldr	r2, [r7, #4]
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	781b      	ldrb	r3, [r3, #0]
 8006cf0:	009b      	lsls	r3, r3, #2
 8006cf2:	4413      	add	r3, r2
 8006cf4:	881b      	ldrh	r3, [r3, #0]
 8006cf6:	b29b      	uxth	r3, r3
 8006cf8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006cfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d00:	837b      	strh	r3, [r7, #26]
 8006d02:	8b7b      	ldrh	r3, [r7, #26]
 8006d04:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006d08:	837b      	strh	r3, [r7, #26]
 8006d0a:	8b7b      	ldrh	r3, [r7, #26]
 8006d0c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006d10:	837b      	strh	r3, [r7, #26]
 8006d12:	687a      	ldr	r2, [r7, #4]
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	781b      	ldrb	r3, [r3, #0]
 8006d18:	009b      	lsls	r3, r3, #2
 8006d1a:	441a      	add	r2, r3
 8006d1c:	8b7b      	ldrh	r3, [r7, #26]
 8006d1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d2e:	b29b      	uxth	r3, r3
 8006d30:	8013      	strh	r3, [r2, #0]
 8006d32:	e1a2      	b.n	800707a <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8006d34:	687a      	ldr	r2, [r7, #4]
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	781b      	ldrb	r3, [r3, #0]
 8006d3a:	009b      	lsls	r3, r3, #2
 8006d3c:	4413      	add	r3, r2
 8006d3e:	881b      	ldrh	r3, [r3, #0]
 8006d40:	b29b      	uxth	r3, r3
 8006d42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d4a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8006d4e:	687a      	ldr	r2, [r7, #4]
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	781b      	ldrb	r3, [r3, #0]
 8006d54:	009b      	lsls	r3, r3, #2
 8006d56:	441a      	add	r2, r3
 8006d58:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8006d5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d64:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006d68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d6c:	b29b      	uxth	r3, r3
 8006d6e:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	65bb      	str	r3, [r7, #88]	; 0x58
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d7a:	b29b      	uxth	r3, r3
 8006d7c:	461a      	mov	r2, r3
 8006d7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006d80:	4413      	add	r3, r2
 8006d82:	65bb      	str	r3, [r7, #88]	; 0x58
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	781b      	ldrb	r3, [r3, #0]
 8006d88:	011a      	lsls	r2, r3, #4
 8006d8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006d8c:	4413      	add	r3, r2
 8006d8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d92:	657b      	str	r3, [r7, #84]	; 0x54
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	891b      	ldrh	r3, [r3, #8]
 8006d98:	085b      	lsrs	r3, r3, #1
 8006d9a:	b29b      	uxth	r3, r3
 8006d9c:	005b      	lsls	r3, r3, #1
 8006d9e:	b29a      	uxth	r2, r3
 8006da0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006da2:	801a      	strh	r2, [r3, #0]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	653b      	str	r3, [r7, #80]	; 0x50
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006dae:	b29b      	uxth	r3, r3
 8006db0:	461a      	mov	r2, r3
 8006db2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006db4:	4413      	add	r3, r2
 8006db6:	653b      	str	r3, [r7, #80]	; 0x50
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	781b      	ldrb	r3, [r3, #0]
 8006dbc:	011a      	lsls	r2, r3, #4
 8006dbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006dc0:	4413      	add	r3, r2
 8006dc2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8006dc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	895b      	ldrh	r3, [r3, #10]
 8006dcc:	085b      	lsrs	r3, r3, #1
 8006dce:	b29b      	uxth	r3, r3
 8006dd0:	005b      	lsls	r3, r3, #1
 8006dd2:	b29a      	uxth	r2, r3
 8006dd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006dd6:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	785b      	ldrb	r3, [r3, #1]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	f040 8091 	bne.w	8006f04 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006de2:	687a      	ldr	r2, [r7, #4]
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	781b      	ldrb	r3, [r3, #0]
 8006de8:	009b      	lsls	r3, r3, #2
 8006dea:	4413      	add	r3, r2
 8006dec:	881b      	ldrh	r3, [r3, #0]
 8006dee:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8006df0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006df2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d01b      	beq.n	8006e32 <USB_ActivateEndpoint+0x47e>
 8006dfa:	687a      	ldr	r2, [r7, #4]
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	781b      	ldrb	r3, [r3, #0]
 8006e00:	009b      	lsls	r3, r3, #2
 8006e02:	4413      	add	r3, r2
 8006e04:	881b      	ldrh	r3, [r3, #0]
 8006e06:	b29b      	uxth	r3, r3
 8006e08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e10:	877b      	strh	r3, [r7, #58]	; 0x3a
 8006e12:	687a      	ldr	r2, [r7, #4]
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	781b      	ldrb	r3, [r3, #0]
 8006e18:	009b      	lsls	r3, r3, #2
 8006e1a:	441a      	add	r2, r3
 8006e1c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006e1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e26:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006e2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e2e:	b29b      	uxth	r3, r3
 8006e30:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006e32:	687a      	ldr	r2, [r7, #4]
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	781b      	ldrb	r3, [r3, #0]
 8006e38:	009b      	lsls	r3, r3, #2
 8006e3a:	4413      	add	r3, r2
 8006e3c:	881b      	ldrh	r3, [r3, #0]
 8006e3e:	873b      	strh	r3, [r7, #56]	; 0x38
 8006e40:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006e42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d01b      	beq.n	8006e82 <USB_ActivateEndpoint+0x4ce>
 8006e4a:	687a      	ldr	r2, [r7, #4]
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	781b      	ldrb	r3, [r3, #0]
 8006e50:	009b      	lsls	r3, r3, #2
 8006e52:	4413      	add	r3, r2
 8006e54:	881b      	ldrh	r3, [r3, #0]
 8006e56:	b29b      	uxth	r3, r3
 8006e58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e60:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006e62:	687a      	ldr	r2, [r7, #4]
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	781b      	ldrb	r3, [r3, #0]
 8006e68:	009b      	lsls	r3, r3, #2
 8006e6a:	441a      	add	r2, r3
 8006e6c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006e6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e7a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006e7e:	b29b      	uxth	r3, r3
 8006e80:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006e82:	687a      	ldr	r2, [r7, #4]
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	781b      	ldrb	r3, [r3, #0]
 8006e88:	009b      	lsls	r3, r3, #2
 8006e8a:	4413      	add	r3, r2
 8006e8c:	881b      	ldrh	r3, [r3, #0]
 8006e8e:	b29b      	uxth	r3, r3
 8006e90:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e98:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006e9a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006e9c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006ea0:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006ea2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006ea4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006ea8:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006eaa:	687a      	ldr	r2, [r7, #4]
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	781b      	ldrb	r3, [r3, #0]
 8006eb0:	009b      	lsls	r3, r3, #2
 8006eb2:	441a      	add	r2, r3
 8006eb4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006eb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006eba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ebe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ec2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ec6:	b29b      	uxth	r3, r3
 8006ec8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006eca:	687a      	ldr	r2, [r7, #4]
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	781b      	ldrb	r3, [r3, #0]
 8006ed0:	009b      	lsls	r3, r3, #2
 8006ed2:	4413      	add	r3, r2
 8006ed4:	881b      	ldrh	r3, [r3, #0]
 8006ed6:	b29b      	uxth	r3, r3
 8006ed8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006edc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ee0:	867b      	strh	r3, [r7, #50]	; 0x32
 8006ee2:	687a      	ldr	r2, [r7, #4]
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	781b      	ldrb	r3, [r3, #0]
 8006ee8:	009b      	lsls	r3, r3, #2
 8006eea:	441a      	add	r2, r3
 8006eec:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006eee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ef2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ef6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006efa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006efe:	b29b      	uxth	r3, r3
 8006f00:	8013      	strh	r3, [r2, #0]
 8006f02:	e0ba      	b.n	800707a <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006f04:	687a      	ldr	r2, [r7, #4]
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	781b      	ldrb	r3, [r3, #0]
 8006f0a:	009b      	lsls	r3, r3, #2
 8006f0c:	4413      	add	r3, r2
 8006f0e:	881b      	ldrh	r3, [r3, #0]
 8006f10:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006f14:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006f18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d01d      	beq.n	8006f5c <USB_ActivateEndpoint+0x5a8>
 8006f20:	687a      	ldr	r2, [r7, #4]
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	781b      	ldrb	r3, [r3, #0]
 8006f26:	009b      	lsls	r3, r3, #2
 8006f28:	4413      	add	r3, r2
 8006f2a:	881b      	ldrh	r3, [r3, #0]
 8006f2c:	b29b      	uxth	r3, r3
 8006f2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f36:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006f3a:	687a      	ldr	r2, [r7, #4]
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	781b      	ldrb	r3, [r3, #0]
 8006f40:	009b      	lsls	r3, r3, #2
 8006f42:	441a      	add	r2, r3
 8006f44:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006f48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f50:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006f54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f58:	b29b      	uxth	r3, r3
 8006f5a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006f5c:	687a      	ldr	r2, [r7, #4]
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	781b      	ldrb	r3, [r3, #0]
 8006f62:	009b      	lsls	r3, r3, #2
 8006f64:	4413      	add	r3, r2
 8006f66:	881b      	ldrh	r3, [r3, #0]
 8006f68:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006f6c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006f70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d01d      	beq.n	8006fb4 <USB_ActivateEndpoint+0x600>
 8006f78:	687a      	ldr	r2, [r7, #4]
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	781b      	ldrb	r3, [r3, #0]
 8006f7e:	009b      	lsls	r3, r3, #2
 8006f80:	4413      	add	r3, r2
 8006f82:	881b      	ldrh	r3, [r3, #0]
 8006f84:	b29b      	uxth	r3, r3
 8006f86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f8e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006f92:	687a      	ldr	r2, [r7, #4]
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	781b      	ldrb	r3, [r3, #0]
 8006f98:	009b      	lsls	r3, r3, #2
 8006f9a:	441a      	add	r2, r3
 8006f9c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006fa0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fa4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fa8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006fb0:	b29b      	uxth	r3, r3
 8006fb2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	78db      	ldrb	r3, [r3, #3]
 8006fb8:	2b01      	cmp	r3, #1
 8006fba:	d024      	beq.n	8007006 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006fbc:	687a      	ldr	r2, [r7, #4]
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	781b      	ldrb	r3, [r3, #0]
 8006fc2:	009b      	lsls	r3, r3, #2
 8006fc4:	4413      	add	r3, r2
 8006fc6:	881b      	ldrh	r3, [r3, #0]
 8006fc8:	b29b      	uxth	r3, r3
 8006fca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fd2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006fd6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006fda:	f083 0320 	eor.w	r3, r3, #32
 8006fde:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006fe2:	687a      	ldr	r2, [r7, #4]
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	781b      	ldrb	r3, [r3, #0]
 8006fe8:	009b      	lsls	r3, r3, #2
 8006fea:	441a      	add	r2, r3
 8006fec:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006ff0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ff4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ff8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ffc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007000:	b29b      	uxth	r3, r3
 8007002:	8013      	strh	r3, [r2, #0]
 8007004:	e01d      	b.n	8007042 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007006:	687a      	ldr	r2, [r7, #4]
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	781b      	ldrb	r3, [r3, #0]
 800700c:	009b      	lsls	r3, r3, #2
 800700e:	4413      	add	r3, r2
 8007010:	881b      	ldrh	r3, [r3, #0]
 8007012:	b29b      	uxth	r3, r3
 8007014:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007018:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800701c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8007020:	687a      	ldr	r2, [r7, #4]
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	781b      	ldrb	r3, [r3, #0]
 8007026:	009b      	lsls	r3, r3, #2
 8007028:	441a      	add	r2, r3
 800702a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800702e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007032:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007036:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800703a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800703e:	b29b      	uxth	r3, r3
 8007040:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007042:	687a      	ldr	r2, [r7, #4]
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	781b      	ldrb	r3, [r3, #0]
 8007048:	009b      	lsls	r3, r3, #2
 800704a:	4413      	add	r3, r2
 800704c:	881b      	ldrh	r3, [r3, #0]
 800704e:	b29b      	uxth	r3, r3
 8007050:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007054:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007058:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800705a:	687a      	ldr	r2, [r7, #4]
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	781b      	ldrb	r3, [r3, #0]
 8007060:	009b      	lsls	r3, r3, #2
 8007062:	441a      	add	r2, r3
 8007064:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007066:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800706a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800706e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007072:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007076:	b29b      	uxth	r3, r3
 8007078:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800707a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800707e:	4618      	mov	r0, r3
 8007080:	376c      	adds	r7, #108	; 0x6c
 8007082:	46bd      	mov	sp, r7
 8007084:	bc80      	pop	{r7}
 8007086:	4770      	bx	lr

08007088 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007088:	b480      	push	{r7}
 800708a:	b08d      	sub	sp, #52	; 0x34
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
 8007090:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	7b1b      	ldrb	r3, [r3, #12]
 8007096:	2b00      	cmp	r3, #0
 8007098:	f040 808e 	bne.w	80071b8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	785b      	ldrb	r3, [r3, #1]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d044      	beq.n	800712e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80070a4:	687a      	ldr	r2, [r7, #4]
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	781b      	ldrb	r3, [r3, #0]
 80070aa:	009b      	lsls	r3, r3, #2
 80070ac:	4413      	add	r3, r2
 80070ae:	881b      	ldrh	r3, [r3, #0]
 80070b0:	81bb      	strh	r3, [r7, #12]
 80070b2:	89bb      	ldrh	r3, [r7, #12]
 80070b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d01b      	beq.n	80070f4 <USB_DeactivateEndpoint+0x6c>
 80070bc:	687a      	ldr	r2, [r7, #4]
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	781b      	ldrb	r3, [r3, #0]
 80070c2:	009b      	lsls	r3, r3, #2
 80070c4:	4413      	add	r3, r2
 80070c6:	881b      	ldrh	r3, [r3, #0]
 80070c8:	b29b      	uxth	r3, r3
 80070ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070d2:	817b      	strh	r3, [r7, #10]
 80070d4:	687a      	ldr	r2, [r7, #4]
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	781b      	ldrb	r3, [r3, #0]
 80070da:	009b      	lsls	r3, r3, #2
 80070dc:	441a      	add	r2, r3
 80070de:	897b      	ldrh	r3, [r7, #10]
 80070e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070ec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80070f0:	b29b      	uxth	r3, r3
 80070f2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80070f4:	687a      	ldr	r2, [r7, #4]
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	781b      	ldrb	r3, [r3, #0]
 80070fa:	009b      	lsls	r3, r3, #2
 80070fc:	4413      	add	r3, r2
 80070fe:	881b      	ldrh	r3, [r3, #0]
 8007100:	b29b      	uxth	r3, r3
 8007102:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007106:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800710a:	813b      	strh	r3, [r7, #8]
 800710c:	687a      	ldr	r2, [r7, #4]
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	781b      	ldrb	r3, [r3, #0]
 8007112:	009b      	lsls	r3, r3, #2
 8007114:	441a      	add	r2, r3
 8007116:	893b      	ldrh	r3, [r7, #8]
 8007118:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800711c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007120:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007124:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007128:	b29b      	uxth	r3, r3
 800712a:	8013      	strh	r3, [r2, #0]
 800712c:	e192      	b.n	8007454 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800712e:	687a      	ldr	r2, [r7, #4]
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	781b      	ldrb	r3, [r3, #0]
 8007134:	009b      	lsls	r3, r3, #2
 8007136:	4413      	add	r3, r2
 8007138:	881b      	ldrh	r3, [r3, #0]
 800713a:	827b      	strh	r3, [r7, #18]
 800713c:	8a7b      	ldrh	r3, [r7, #18]
 800713e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007142:	2b00      	cmp	r3, #0
 8007144:	d01b      	beq.n	800717e <USB_DeactivateEndpoint+0xf6>
 8007146:	687a      	ldr	r2, [r7, #4]
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	781b      	ldrb	r3, [r3, #0]
 800714c:	009b      	lsls	r3, r3, #2
 800714e:	4413      	add	r3, r2
 8007150:	881b      	ldrh	r3, [r3, #0]
 8007152:	b29b      	uxth	r3, r3
 8007154:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007158:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800715c:	823b      	strh	r3, [r7, #16]
 800715e:	687a      	ldr	r2, [r7, #4]
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	781b      	ldrb	r3, [r3, #0]
 8007164:	009b      	lsls	r3, r3, #2
 8007166:	441a      	add	r2, r3
 8007168:	8a3b      	ldrh	r3, [r7, #16]
 800716a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800716e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007172:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007176:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800717a:	b29b      	uxth	r3, r3
 800717c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800717e:	687a      	ldr	r2, [r7, #4]
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	781b      	ldrb	r3, [r3, #0]
 8007184:	009b      	lsls	r3, r3, #2
 8007186:	4413      	add	r3, r2
 8007188:	881b      	ldrh	r3, [r3, #0]
 800718a:	b29b      	uxth	r3, r3
 800718c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007190:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007194:	81fb      	strh	r3, [r7, #14]
 8007196:	687a      	ldr	r2, [r7, #4]
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	781b      	ldrb	r3, [r3, #0]
 800719c:	009b      	lsls	r3, r3, #2
 800719e:	441a      	add	r2, r3
 80071a0:	89fb      	ldrh	r3, [r7, #14]
 80071a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071b2:	b29b      	uxth	r3, r3
 80071b4:	8013      	strh	r3, [r2, #0]
 80071b6:	e14d      	b.n	8007454 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	785b      	ldrb	r3, [r3, #1]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	f040 80a5 	bne.w	800730c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80071c2:	687a      	ldr	r2, [r7, #4]
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	781b      	ldrb	r3, [r3, #0]
 80071c8:	009b      	lsls	r3, r3, #2
 80071ca:	4413      	add	r3, r2
 80071cc:	881b      	ldrh	r3, [r3, #0]
 80071ce:	843b      	strh	r3, [r7, #32]
 80071d0:	8c3b      	ldrh	r3, [r7, #32]
 80071d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d01b      	beq.n	8007212 <USB_DeactivateEndpoint+0x18a>
 80071da:	687a      	ldr	r2, [r7, #4]
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	781b      	ldrb	r3, [r3, #0]
 80071e0:	009b      	lsls	r3, r3, #2
 80071e2:	4413      	add	r3, r2
 80071e4:	881b      	ldrh	r3, [r3, #0]
 80071e6:	b29b      	uxth	r3, r3
 80071e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071f0:	83fb      	strh	r3, [r7, #30]
 80071f2:	687a      	ldr	r2, [r7, #4]
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	781b      	ldrb	r3, [r3, #0]
 80071f8:	009b      	lsls	r3, r3, #2
 80071fa:	441a      	add	r2, r3
 80071fc:	8bfb      	ldrh	r3, [r7, #30]
 80071fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007202:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007206:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800720a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800720e:	b29b      	uxth	r3, r3
 8007210:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007212:	687a      	ldr	r2, [r7, #4]
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	781b      	ldrb	r3, [r3, #0]
 8007218:	009b      	lsls	r3, r3, #2
 800721a:	4413      	add	r3, r2
 800721c:	881b      	ldrh	r3, [r3, #0]
 800721e:	83bb      	strh	r3, [r7, #28]
 8007220:	8bbb      	ldrh	r3, [r7, #28]
 8007222:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007226:	2b00      	cmp	r3, #0
 8007228:	d01b      	beq.n	8007262 <USB_DeactivateEndpoint+0x1da>
 800722a:	687a      	ldr	r2, [r7, #4]
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	781b      	ldrb	r3, [r3, #0]
 8007230:	009b      	lsls	r3, r3, #2
 8007232:	4413      	add	r3, r2
 8007234:	881b      	ldrh	r3, [r3, #0]
 8007236:	b29b      	uxth	r3, r3
 8007238:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800723c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007240:	837b      	strh	r3, [r7, #26]
 8007242:	687a      	ldr	r2, [r7, #4]
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	781b      	ldrb	r3, [r3, #0]
 8007248:	009b      	lsls	r3, r3, #2
 800724a:	441a      	add	r2, r3
 800724c:	8b7b      	ldrh	r3, [r7, #26]
 800724e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007252:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007256:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800725a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800725e:	b29b      	uxth	r3, r3
 8007260:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8007262:	687a      	ldr	r2, [r7, #4]
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	781b      	ldrb	r3, [r3, #0]
 8007268:	009b      	lsls	r3, r3, #2
 800726a:	4413      	add	r3, r2
 800726c:	881b      	ldrh	r3, [r3, #0]
 800726e:	b29b      	uxth	r3, r3
 8007270:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007274:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007278:	833b      	strh	r3, [r7, #24]
 800727a:	687a      	ldr	r2, [r7, #4]
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	781b      	ldrb	r3, [r3, #0]
 8007280:	009b      	lsls	r3, r3, #2
 8007282:	441a      	add	r2, r3
 8007284:	8b3b      	ldrh	r3, [r7, #24]
 8007286:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800728a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800728e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007292:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007296:	b29b      	uxth	r3, r3
 8007298:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800729a:	687a      	ldr	r2, [r7, #4]
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	781b      	ldrb	r3, [r3, #0]
 80072a0:	009b      	lsls	r3, r3, #2
 80072a2:	4413      	add	r3, r2
 80072a4:	881b      	ldrh	r3, [r3, #0]
 80072a6:	b29b      	uxth	r3, r3
 80072a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80072ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072b0:	82fb      	strh	r3, [r7, #22]
 80072b2:	687a      	ldr	r2, [r7, #4]
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	781b      	ldrb	r3, [r3, #0]
 80072b8:	009b      	lsls	r3, r3, #2
 80072ba:	441a      	add	r2, r3
 80072bc:	8afb      	ldrh	r3, [r7, #22]
 80072be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072ce:	b29b      	uxth	r3, r3
 80072d0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80072d2:	687a      	ldr	r2, [r7, #4]
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	781b      	ldrb	r3, [r3, #0]
 80072d8:	009b      	lsls	r3, r3, #2
 80072da:	4413      	add	r3, r2
 80072dc:	881b      	ldrh	r3, [r3, #0]
 80072de:	b29b      	uxth	r3, r3
 80072e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072e8:	82bb      	strh	r3, [r7, #20]
 80072ea:	687a      	ldr	r2, [r7, #4]
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	781b      	ldrb	r3, [r3, #0]
 80072f0:	009b      	lsls	r3, r3, #2
 80072f2:	441a      	add	r2, r3
 80072f4:	8abb      	ldrh	r3, [r7, #20]
 80072f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007302:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007306:	b29b      	uxth	r3, r3
 8007308:	8013      	strh	r3, [r2, #0]
 800730a:	e0a3      	b.n	8007454 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800730c:	687a      	ldr	r2, [r7, #4]
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	781b      	ldrb	r3, [r3, #0]
 8007312:	009b      	lsls	r3, r3, #2
 8007314:	4413      	add	r3, r2
 8007316:	881b      	ldrh	r3, [r3, #0]
 8007318:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800731a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800731c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007320:	2b00      	cmp	r3, #0
 8007322:	d01b      	beq.n	800735c <USB_DeactivateEndpoint+0x2d4>
 8007324:	687a      	ldr	r2, [r7, #4]
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	781b      	ldrb	r3, [r3, #0]
 800732a:	009b      	lsls	r3, r3, #2
 800732c:	4413      	add	r3, r2
 800732e:	881b      	ldrh	r3, [r3, #0]
 8007330:	b29b      	uxth	r3, r3
 8007332:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007336:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800733a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800733c:	687a      	ldr	r2, [r7, #4]
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	781b      	ldrb	r3, [r3, #0]
 8007342:	009b      	lsls	r3, r3, #2
 8007344:	441a      	add	r2, r3
 8007346:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007348:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800734c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007350:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007354:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007358:	b29b      	uxth	r3, r3
 800735a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800735c:	687a      	ldr	r2, [r7, #4]
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	781b      	ldrb	r3, [r3, #0]
 8007362:	009b      	lsls	r3, r3, #2
 8007364:	4413      	add	r3, r2
 8007366:	881b      	ldrh	r3, [r3, #0]
 8007368:	857b      	strh	r3, [r7, #42]	; 0x2a
 800736a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800736c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007370:	2b00      	cmp	r3, #0
 8007372:	d01b      	beq.n	80073ac <USB_DeactivateEndpoint+0x324>
 8007374:	687a      	ldr	r2, [r7, #4]
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	781b      	ldrb	r3, [r3, #0]
 800737a:	009b      	lsls	r3, r3, #2
 800737c:	4413      	add	r3, r2
 800737e:	881b      	ldrh	r3, [r3, #0]
 8007380:	b29b      	uxth	r3, r3
 8007382:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007386:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800738a:	853b      	strh	r3, [r7, #40]	; 0x28
 800738c:	687a      	ldr	r2, [r7, #4]
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	781b      	ldrb	r3, [r3, #0]
 8007392:	009b      	lsls	r3, r3, #2
 8007394:	441a      	add	r2, r3
 8007396:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007398:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800739c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073a4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80073a8:	b29b      	uxth	r3, r3
 80073aa:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80073ac:	687a      	ldr	r2, [r7, #4]
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	781b      	ldrb	r3, [r3, #0]
 80073b2:	009b      	lsls	r3, r3, #2
 80073b4:	4413      	add	r3, r2
 80073b6:	881b      	ldrh	r3, [r3, #0]
 80073b8:	b29b      	uxth	r3, r3
 80073ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073c2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80073c4:	687a      	ldr	r2, [r7, #4]
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	781b      	ldrb	r3, [r3, #0]
 80073ca:	009b      	lsls	r3, r3, #2
 80073cc:	441a      	add	r2, r3
 80073ce:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80073d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80073dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073e0:	b29b      	uxth	r3, r3
 80073e2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80073e4:	687a      	ldr	r2, [r7, #4]
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	781b      	ldrb	r3, [r3, #0]
 80073ea:	009b      	lsls	r3, r3, #2
 80073ec:	4413      	add	r3, r2
 80073ee:	881b      	ldrh	r3, [r3, #0]
 80073f0:	b29b      	uxth	r3, r3
 80073f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073fa:	84bb      	strh	r3, [r7, #36]	; 0x24
 80073fc:	687a      	ldr	r2, [r7, #4]
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	781b      	ldrb	r3, [r3, #0]
 8007402:	009b      	lsls	r3, r3, #2
 8007404:	441a      	add	r2, r3
 8007406:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007408:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800740c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007410:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007414:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007418:	b29b      	uxth	r3, r3
 800741a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800741c:	687a      	ldr	r2, [r7, #4]
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	781b      	ldrb	r3, [r3, #0]
 8007422:	009b      	lsls	r3, r3, #2
 8007424:	4413      	add	r3, r2
 8007426:	881b      	ldrh	r3, [r3, #0]
 8007428:	b29b      	uxth	r3, r3
 800742a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800742e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007432:	847b      	strh	r3, [r7, #34]	; 0x22
 8007434:	687a      	ldr	r2, [r7, #4]
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	781b      	ldrb	r3, [r3, #0]
 800743a:	009b      	lsls	r3, r3, #2
 800743c:	441a      	add	r2, r3
 800743e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007440:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007444:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007448:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800744c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007450:	b29b      	uxth	r3, r3
 8007452:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007454:	2300      	movs	r3, #0
}
 8007456:	4618      	mov	r0, r3
 8007458:	3734      	adds	r7, #52	; 0x34
 800745a:	46bd      	mov	sp, r7
 800745c:	bc80      	pop	{r7}
 800745e:	4770      	bx	lr

08007460 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b0cc      	sub	sp, #304	; 0x130
 8007464:	af00      	add	r7, sp, #0
 8007466:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800746a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800746e:	6018      	str	r0, [r3, #0]
 8007470:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007474:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007478:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800747a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800747e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	785b      	ldrb	r3, [r3, #1]
 8007486:	2b01      	cmp	r3, #1
 8007488:	f041 817d 	bne.w	8008786 <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800748c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007490:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	699a      	ldr	r2, [r3, #24]
 8007498:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800749c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	691b      	ldr	r3, [r3, #16]
 80074a4:	429a      	cmp	r2, r3
 80074a6:	d908      	bls.n	80074ba <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80074a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	691b      	ldr	r3, [r3, #16]
 80074b4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80074b8:	e007      	b.n	80074ca <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80074ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	699b      	ldr	r3, [r3, #24]
 80074c6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80074ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	7b1b      	ldrb	r3, [r3, #12]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d152      	bne.n	8007580 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80074da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	6959      	ldr	r1, [r3, #20]
 80074e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	88da      	ldrh	r2, [r3, #6]
 80074f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074f6:	b29b      	uxth	r3, r3
 80074f8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80074fc:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007500:	6800      	ldr	r0, [r0, #0]
 8007502:	f001 ff23 	bl	800934c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007506:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800750a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800750e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007512:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8007516:	6812      	ldr	r2, [r2, #0]
 8007518:	601a      	str	r2, [r3, #0]
 800751a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800751e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007528:	b29b      	uxth	r3, r3
 800752a:	4619      	mov	r1, r3
 800752c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007530:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8007534:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007538:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 800753c:	6812      	ldr	r2, [r2, #0]
 800753e:	440a      	add	r2, r1
 8007540:	601a      	str	r2, [r3, #0]
 8007542:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007546:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	781b      	ldrb	r3, [r3, #0]
 800754e:	011a      	lsls	r2, r3, #4
 8007550:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007554:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	4413      	add	r3, r2
 800755c:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8007560:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007564:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8007568:	601a      	str	r2, [r3, #0]
 800756a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800756e:	b29a      	uxth	r2, r3
 8007570:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007574:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	801a      	strh	r2, [r3, #0]
 800757c:	f001 b8b5 	b.w	80086ea <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8007580:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007584:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	78db      	ldrb	r3, [r3, #3]
 800758c:	2b02      	cmp	r3, #2
 800758e:	f040 84c6 	bne.w	8007f1e <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8007592:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007596:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	6a1a      	ldr	r2, [r3, #32]
 800759e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	691b      	ldr	r3, [r3, #16]
 80075aa:	429a      	cmp	r2, r3
 80075ac:	f240 8443 	bls.w	8007e36 <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80075b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075b4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80075b8:	681a      	ldr	r2, [r3, #0]
 80075ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	781b      	ldrb	r3, [r3, #0]
 80075c6:	009b      	lsls	r3, r3, #2
 80075c8:	4413      	add	r3, r2
 80075ca:	881b      	ldrh	r3, [r3, #0]
 80075cc:	b29b      	uxth	r3, r3
 80075ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075d6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80075da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075de:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80075e2:	681a      	ldr	r2, [r3, #0]
 80075e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	781b      	ldrb	r3, [r3, #0]
 80075f0:	009b      	lsls	r3, r3, #2
 80075f2:	441a      	add	r2, r3
 80075f4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80075f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007600:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007604:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007608:	b29b      	uxth	r3, r3
 800760a:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800760c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007610:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	6a1a      	ldr	r2, [r3, #32]
 8007618:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800761c:	1ad2      	subs	r2, r2, r3
 800761e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007622:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800762a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800762e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007632:	681a      	ldr	r2, [r3, #0]
 8007634:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007638:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	781b      	ldrb	r3, [r3, #0]
 8007640:	009b      	lsls	r3, r3, #2
 8007642:	4413      	add	r3, r2
 8007644:	881b      	ldrh	r3, [r3, #0]
 8007646:	b29b      	uxth	r3, r3
 8007648:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800764c:	2b00      	cmp	r3, #0
 800764e:	f000 823e 	beq.w	8007ace <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007652:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007656:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800765a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800765e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8007662:	6812      	ldr	r2, [r2, #0]
 8007664:	601a      	str	r2, [r3, #0]
 8007666:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800766a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	785b      	ldrb	r3, [r3, #1]
 8007672:	2b00      	cmp	r3, #0
 8007674:	f040 809a 	bne.w	80077ac <USB_EPStartXfer+0x34c>
 8007678:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800767c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007680:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007684:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8007688:	6812      	ldr	r2, [r2, #0]
 800768a:	601a      	str	r2, [r3, #0]
 800768c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007690:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800769a:	b29b      	uxth	r3, r3
 800769c:	4619      	mov	r1, r3
 800769e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076a6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80076aa:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 80076ae:	6812      	ldr	r2, [r2, #0]
 80076b0:	440a      	add	r2, r1
 80076b2:	601a      	str	r2, [r3, #0]
 80076b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	781b      	ldrb	r3, [r3, #0]
 80076c0:	011a      	lsls	r2, r3, #4
 80076c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	4413      	add	r3, r2
 80076ce:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80076d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076d6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80076da:	601a      	str	r2, [r3, #0]
 80076dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d122      	bne.n	800772a <USB_EPStartXfer+0x2ca>
 80076e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076e8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	881b      	ldrh	r3, [r3, #0]
 80076f0:	b29b      	uxth	r3, r3
 80076f2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80076f6:	b29a      	uxth	r2, r3
 80076f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076fc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	801a      	strh	r2, [r3, #0]
 8007704:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007708:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	881b      	ldrh	r3, [r3, #0]
 8007710:	b29b      	uxth	r3, r3
 8007712:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007716:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800771a:	b29a      	uxth	r2, r3
 800771c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007720:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	801a      	strh	r2, [r3, #0]
 8007728:	e079      	b.n	800781e <USB_EPStartXfer+0x3be>
 800772a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800772e:	2b3e      	cmp	r3, #62	; 0x3e
 8007730:	d81b      	bhi.n	800776a <USB_EPStartXfer+0x30a>
 8007732:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007736:	085b      	lsrs	r3, r3, #1
 8007738:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800773c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007740:	f003 0301 	and.w	r3, r3, #1
 8007744:	2b00      	cmp	r3, #0
 8007746:	d004      	beq.n	8007752 <USB_EPStartXfer+0x2f2>
 8007748:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800774c:	3301      	adds	r3, #1
 800774e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007752:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007756:	b29b      	uxth	r3, r3
 8007758:	029b      	lsls	r3, r3, #10
 800775a:	b29a      	uxth	r2, r3
 800775c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007760:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	801a      	strh	r2, [r3, #0]
 8007768:	e059      	b.n	800781e <USB_EPStartXfer+0x3be>
 800776a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800776e:	095b      	lsrs	r3, r3, #5
 8007770:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007774:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007778:	f003 031f 	and.w	r3, r3, #31
 800777c:	2b00      	cmp	r3, #0
 800777e:	d104      	bne.n	800778a <USB_EPStartXfer+0x32a>
 8007780:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007784:	3b01      	subs	r3, #1
 8007786:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800778a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800778e:	b29b      	uxth	r3, r3
 8007790:	029b      	lsls	r3, r3, #10
 8007792:	b29b      	uxth	r3, r3
 8007794:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007798:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800779c:	b29a      	uxth	r2, r3
 800779e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077a2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	801a      	strh	r2, [r3, #0]
 80077aa:	e038      	b.n	800781e <USB_EPStartXfer+0x3be>
 80077ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	785b      	ldrb	r3, [r3, #1]
 80077b8:	2b01      	cmp	r3, #1
 80077ba:	d130      	bne.n	800781e <USB_EPStartXfer+0x3be>
 80077bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077c0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077ca:	b29b      	uxth	r3, r3
 80077cc:	4619      	mov	r1, r3
 80077ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077d2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80077d6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80077da:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 80077de:	6812      	ldr	r2, [r2, #0]
 80077e0:	440a      	add	r2, r1
 80077e2:	601a      	str	r2, [r3, #0]
 80077e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	781b      	ldrb	r3, [r3, #0]
 80077f0:	011a      	lsls	r2, r3, #4
 80077f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077f6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4413      	add	r3, r2
 80077fe:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8007802:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007806:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800780a:	601a      	str	r2, [r3, #0]
 800780c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007810:	b29a      	uxth	r2, r3
 8007812:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007816:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800781e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007822:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	895b      	ldrh	r3, [r3, #10]
 800782a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800782e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007832:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	6959      	ldr	r1, [r3, #20]
 800783a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800783e:	b29b      	uxth	r3, r3
 8007840:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007844:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007848:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800784c:	6800      	ldr	r0, [r0, #0]
 800784e:	f001 fd7d 	bl	800934c <USB_WritePMA>
            ep->xfer_buff += len;
 8007852:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007856:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	695a      	ldr	r2, [r3, #20]
 800785e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007862:	441a      	add	r2, r3
 8007864:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007868:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007870:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007874:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	6a1a      	ldr	r2, [r3, #32]
 800787c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007880:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	691b      	ldr	r3, [r3, #16]
 8007888:	429a      	cmp	r2, r3
 800788a:	d90f      	bls.n	80078ac <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 800788c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007890:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	6a1a      	ldr	r2, [r3, #32]
 8007898:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800789c:	1ad2      	subs	r2, r2, r3
 800789e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	621a      	str	r2, [r3, #32]
 80078aa:	e00e      	b.n	80078ca <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 80078ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	6a1b      	ldr	r3, [r3, #32]
 80078b8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80078bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	2200      	movs	r2, #0
 80078c8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80078ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	785b      	ldrb	r3, [r3, #1]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	f040 809a 	bne.w	8007a10 <USB_EPStartXfer+0x5b0>
 80078dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078e0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80078e4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80078e8:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80078ec:	6812      	ldr	r2, [r2, #0]
 80078ee:	601a      	str	r2, [r3, #0]
 80078f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078fe:	b29b      	uxth	r3, r3
 8007900:	4619      	mov	r1, r3
 8007902:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007906:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800790a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800790e:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8007912:	6812      	ldr	r2, [r2, #0]
 8007914:	440a      	add	r2, r1
 8007916:	601a      	str	r2, [r3, #0]
 8007918:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800791c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	781b      	ldrb	r3, [r3, #0]
 8007924:	011a      	lsls	r2, r3, #4
 8007926:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800792a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	4413      	add	r3, r2
 8007932:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8007936:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800793a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800793e:	601a      	str	r2, [r3, #0]
 8007940:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007944:	2b00      	cmp	r3, #0
 8007946:	d122      	bne.n	800798e <USB_EPStartXfer+0x52e>
 8007948:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800794c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	881b      	ldrh	r3, [r3, #0]
 8007954:	b29b      	uxth	r3, r3
 8007956:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800795a:	b29a      	uxth	r2, r3
 800795c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007960:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	801a      	strh	r2, [r3, #0]
 8007968:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800796c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	881b      	ldrh	r3, [r3, #0]
 8007974:	b29b      	uxth	r3, r3
 8007976:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800797a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800797e:	b29a      	uxth	r2, r3
 8007980:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007984:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	801a      	strh	r2, [r3, #0]
 800798c:	e083      	b.n	8007a96 <USB_EPStartXfer+0x636>
 800798e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007992:	2b3e      	cmp	r3, #62	; 0x3e
 8007994:	d81b      	bhi.n	80079ce <USB_EPStartXfer+0x56e>
 8007996:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800799a:	085b      	lsrs	r3, r3, #1
 800799c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80079a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079a4:	f003 0301 	and.w	r3, r3, #1
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d004      	beq.n	80079b6 <USB_EPStartXfer+0x556>
 80079ac:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80079b0:	3301      	adds	r3, #1
 80079b2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80079b6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80079ba:	b29b      	uxth	r3, r3
 80079bc:	029b      	lsls	r3, r3, #10
 80079be:	b29a      	uxth	r2, r3
 80079c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079c4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	801a      	strh	r2, [r3, #0]
 80079cc:	e063      	b.n	8007a96 <USB_EPStartXfer+0x636>
 80079ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079d2:	095b      	lsrs	r3, r3, #5
 80079d4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80079d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079dc:	f003 031f 	and.w	r3, r3, #31
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d104      	bne.n	80079ee <USB_EPStartXfer+0x58e>
 80079e4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80079e8:	3b01      	subs	r3, #1
 80079ea:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80079ee:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80079f2:	b29b      	uxth	r3, r3
 80079f4:	029b      	lsls	r3, r3, #10
 80079f6:	b29b      	uxth	r3, r3
 80079f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a00:	b29a      	uxth	r2, r3
 8007a02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a06:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	801a      	strh	r2, [r3, #0]
 8007a0e:	e042      	b.n	8007a96 <USB_EPStartXfer+0x636>
 8007a10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a14:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	785b      	ldrb	r3, [r3, #1]
 8007a1c:	2b01      	cmp	r3, #1
 8007a1e:	d13a      	bne.n	8007a96 <USB_EPStartXfer+0x636>
 8007a20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a24:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007a28:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007a2c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8007a30:	6812      	ldr	r2, [r2, #0]
 8007a32:	601a      	str	r2, [r3, #0]
 8007a34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a38:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a42:	b29b      	uxth	r3, r3
 8007a44:	4619      	mov	r1, r3
 8007a46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a4a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007a4e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007a52:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8007a56:	6812      	ldr	r2, [r2, #0]
 8007a58:	440a      	add	r2, r1
 8007a5a:	601a      	str	r2, [r3, #0]
 8007a5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a60:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	781b      	ldrb	r3, [r3, #0]
 8007a68:	011a      	lsls	r2, r3, #4
 8007a6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a6e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	4413      	add	r3, r2
 8007a76:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8007a7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a7e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8007a82:	601a      	str	r2, [r3, #0]
 8007a84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a88:	b29a      	uxth	r2, r3
 8007a8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a8e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007a96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	891b      	ldrh	r3, [r3, #8]
 8007aa2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007aa6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007aaa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	6959      	ldr	r1, [r3, #20]
 8007ab2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ab6:	b29b      	uxth	r3, r3
 8007ab8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007abc:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007ac0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007ac4:	6800      	ldr	r0, [r0, #0]
 8007ac6:	f001 fc41 	bl	800934c <USB_WritePMA>
 8007aca:	f000 be0e 	b.w	80086ea <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007ace:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ad2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	785b      	ldrb	r3, [r3, #1]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d16d      	bne.n	8007bba <USB_EPStartXfer+0x75a>
 8007ade:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ae2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	64bb      	str	r3, [r7, #72]	; 0x48
 8007aea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007aee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007af8:	b29b      	uxth	r3, r3
 8007afa:	461a      	mov	r2, r3
 8007afc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007afe:	4413      	add	r3, r2
 8007b00:	64bb      	str	r3, [r7, #72]	; 0x48
 8007b02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	781b      	ldrb	r3, [r3, #0]
 8007b0e:	011a      	lsls	r2, r3, #4
 8007b10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b12:	4413      	add	r3, r2
 8007b14:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007b18:	647b      	str	r3, [r7, #68]	; 0x44
 8007b1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d112      	bne.n	8007b48 <USB_EPStartXfer+0x6e8>
 8007b22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b24:	881b      	ldrh	r3, [r3, #0]
 8007b26:	b29b      	uxth	r3, r3
 8007b28:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007b2c:	b29a      	uxth	r2, r3
 8007b2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b30:	801a      	strh	r2, [r3, #0]
 8007b32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b34:	881b      	ldrh	r3, [r3, #0]
 8007b36:	b29b      	uxth	r3, r3
 8007b38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b40:	b29a      	uxth	r2, r3
 8007b42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b44:	801a      	strh	r2, [r3, #0]
 8007b46:	e063      	b.n	8007c10 <USB_EPStartXfer+0x7b0>
 8007b48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b4c:	2b3e      	cmp	r3, #62	; 0x3e
 8007b4e:	d817      	bhi.n	8007b80 <USB_EPStartXfer+0x720>
 8007b50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b54:	085b      	lsrs	r3, r3, #1
 8007b56:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007b5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b5e:	f003 0301 	and.w	r3, r3, #1
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d004      	beq.n	8007b70 <USB_EPStartXfer+0x710>
 8007b66:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007b6a:	3301      	adds	r3, #1
 8007b6c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007b70:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007b74:	b29b      	uxth	r3, r3
 8007b76:	029b      	lsls	r3, r3, #10
 8007b78:	b29a      	uxth	r2, r3
 8007b7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b7c:	801a      	strh	r2, [r3, #0]
 8007b7e:	e047      	b.n	8007c10 <USB_EPStartXfer+0x7b0>
 8007b80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b84:	095b      	lsrs	r3, r3, #5
 8007b86:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007b8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b8e:	f003 031f 	and.w	r3, r3, #31
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d104      	bne.n	8007ba0 <USB_EPStartXfer+0x740>
 8007b96:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007b9a:	3b01      	subs	r3, #1
 8007b9c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007ba0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007ba4:	b29b      	uxth	r3, r3
 8007ba6:	029b      	lsls	r3, r3, #10
 8007ba8:	b29b      	uxth	r3, r3
 8007baa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bb2:	b29a      	uxth	r2, r3
 8007bb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007bb6:	801a      	strh	r2, [r3, #0]
 8007bb8:	e02a      	b.n	8007c10 <USB_EPStartXfer+0x7b0>
 8007bba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bbe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	785b      	ldrb	r3, [r3, #1]
 8007bc6:	2b01      	cmp	r3, #1
 8007bc8:	d122      	bne.n	8007c10 <USB_EPStartXfer+0x7b0>
 8007bca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	653b      	str	r3, [r7, #80]	; 0x50
 8007bd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bda:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007be4:	b29b      	uxth	r3, r3
 8007be6:	461a      	mov	r2, r3
 8007be8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bea:	4413      	add	r3, r2
 8007bec:	653b      	str	r3, [r7, #80]	; 0x50
 8007bee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bf2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	781b      	ldrb	r3, [r3, #0]
 8007bfa:	011a      	lsls	r2, r3, #4
 8007bfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bfe:	4413      	add	r3, r2
 8007c00:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007c04:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c0a:	b29a      	uxth	r2, r3
 8007c0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c0e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007c10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c14:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	891b      	ldrh	r3, [r3, #8]
 8007c1c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007c20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c24:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	6959      	ldr	r1, [r3, #20]
 8007c2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c30:	b29b      	uxth	r3, r3
 8007c32:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007c36:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007c3a:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007c3e:	6800      	ldr	r0, [r0, #0]
 8007c40:	f001 fb84 	bl	800934c <USB_WritePMA>
            ep->xfer_buff += len;
 8007c44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c48:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	695a      	ldr	r2, [r3, #20]
 8007c50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c54:	441a      	add	r2, r3
 8007c56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007c62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	6a1a      	ldr	r2, [r3, #32]
 8007c6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	691b      	ldr	r3, [r3, #16]
 8007c7a:	429a      	cmp	r2, r3
 8007c7c:	d90f      	bls.n	8007c9e <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 8007c7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c82:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	6a1a      	ldr	r2, [r3, #32]
 8007c8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c8e:	1ad2      	subs	r2, r2, r3
 8007c90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c94:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	621a      	str	r2, [r3, #32]
 8007c9c:	e00e      	b.n	8007cbc <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 8007c9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ca2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	6a1b      	ldr	r3, [r3, #32]
 8007caa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8007cae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cb2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	2200      	movs	r2, #0
 8007cba:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007cbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cc0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	643b      	str	r3, [r7, #64]	; 0x40
 8007cc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ccc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	785b      	ldrb	r3, [r3, #1]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d16d      	bne.n	8007db4 <USB_EPStartXfer+0x954>
 8007cd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cdc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	63bb      	str	r3, [r7, #56]	; 0x38
 8007ce4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ce8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007cf2:	b29b      	uxth	r3, r3
 8007cf4:	461a      	mov	r2, r3
 8007cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cf8:	4413      	add	r3, r2
 8007cfa:	63bb      	str	r3, [r7, #56]	; 0x38
 8007cfc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	781b      	ldrb	r3, [r3, #0]
 8007d08:	011a      	lsls	r2, r3, #4
 8007d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d0c:	4413      	add	r3, r2
 8007d0e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007d12:	637b      	str	r3, [r7, #52]	; 0x34
 8007d14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d112      	bne.n	8007d42 <USB_EPStartXfer+0x8e2>
 8007d1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d1e:	881b      	ldrh	r3, [r3, #0]
 8007d20:	b29b      	uxth	r3, r3
 8007d22:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007d26:	b29a      	uxth	r2, r3
 8007d28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d2a:	801a      	strh	r2, [r3, #0]
 8007d2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d2e:	881b      	ldrh	r3, [r3, #0]
 8007d30:	b29b      	uxth	r3, r3
 8007d32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d3a:	b29a      	uxth	r2, r3
 8007d3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d3e:	801a      	strh	r2, [r3, #0]
 8007d40:	e05d      	b.n	8007dfe <USB_EPStartXfer+0x99e>
 8007d42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d46:	2b3e      	cmp	r3, #62	; 0x3e
 8007d48:	d817      	bhi.n	8007d7a <USB_EPStartXfer+0x91a>
 8007d4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d4e:	085b      	lsrs	r3, r3, #1
 8007d50:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007d54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d58:	f003 0301 	and.w	r3, r3, #1
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d004      	beq.n	8007d6a <USB_EPStartXfer+0x90a>
 8007d60:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007d64:	3301      	adds	r3, #1
 8007d66:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007d6a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007d6e:	b29b      	uxth	r3, r3
 8007d70:	029b      	lsls	r3, r3, #10
 8007d72:	b29a      	uxth	r2, r3
 8007d74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d76:	801a      	strh	r2, [r3, #0]
 8007d78:	e041      	b.n	8007dfe <USB_EPStartXfer+0x99e>
 8007d7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d7e:	095b      	lsrs	r3, r3, #5
 8007d80:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007d84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d88:	f003 031f 	and.w	r3, r3, #31
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d104      	bne.n	8007d9a <USB_EPStartXfer+0x93a>
 8007d90:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007d94:	3b01      	subs	r3, #1
 8007d96:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007d9a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007d9e:	b29b      	uxth	r3, r3
 8007da0:	029b      	lsls	r3, r3, #10
 8007da2:	b29b      	uxth	r3, r3
 8007da4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007da8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007dac:	b29a      	uxth	r2, r3
 8007dae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007db0:	801a      	strh	r2, [r3, #0]
 8007db2:	e024      	b.n	8007dfe <USB_EPStartXfer+0x99e>
 8007db4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007db8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	785b      	ldrb	r3, [r3, #1]
 8007dc0:	2b01      	cmp	r3, #1
 8007dc2:	d11c      	bne.n	8007dfe <USB_EPStartXfer+0x99e>
 8007dc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dc8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007dd2:	b29b      	uxth	r3, r3
 8007dd4:	461a      	mov	r2, r3
 8007dd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007dd8:	4413      	add	r3, r2
 8007dda:	643b      	str	r3, [r7, #64]	; 0x40
 8007ddc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007de0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	781b      	ldrb	r3, [r3, #0]
 8007de8:	011a      	lsls	r2, r3, #4
 8007dea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007dec:	4413      	add	r3, r2
 8007dee:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007df2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007df4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007df8:	b29a      	uxth	r2, r3
 8007dfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dfc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007dfe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e02:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	895b      	ldrh	r3, [r3, #10]
 8007e0a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007e0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	6959      	ldr	r1, [r3, #20]
 8007e1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e1e:	b29b      	uxth	r3, r3
 8007e20:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007e24:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007e28:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007e2c:	6800      	ldr	r0, [r0, #0]
 8007e2e:	f001 fa8d 	bl	800934c <USB_WritePMA>
 8007e32:	f000 bc5a 	b.w	80086ea <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007e36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	6a1b      	ldr	r3, [r3, #32]
 8007e42:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8007e46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e4a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007e4e:	681a      	ldr	r2, [r3, #0]
 8007e50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e54:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	781b      	ldrb	r3, [r3, #0]
 8007e5c:	009b      	lsls	r3, r3, #2
 8007e5e:	4413      	add	r3, r2
 8007e60:	881b      	ldrh	r3, [r3, #0]
 8007e62:	b29b      	uxth	r3, r3
 8007e64:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007e68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e6c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8007e70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e74:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007e78:	681a      	ldr	r2, [r3, #0]
 8007e7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	781b      	ldrb	r3, [r3, #0]
 8007e86:	009b      	lsls	r3, r3, #2
 8007e88:	441a      	add	r2, r3
 8007e8a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8007e8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e9e:	b29b      	uxth	r3, r3
 8007ea0:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007ea2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ea6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007eae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007eb2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ebc:	b29b      	uxth	r3, r3
 8007ebe:	461a      	mov	r2, r3
 8007ec0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ec2:	4413      	add	r3, r2
 8007ec4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007ec6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007eca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	781b      	ldrb	r3, [r3, #0]
 8007ed2:	011a      	lsls	r2, r3, #4
 8007ed4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ed6:	4413      	add	r3, r2
 8007ed8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007edc:	65bb      	str	r3, [r7, #88]	; 0x58
 8007ede:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ee2:	b29a      	uxth	r2, r3
 8007ee4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007ee6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007ee8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007eec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	891b      	ldrh	r3, [r3, #8]
 8007ef4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007ef8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007efc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	6959      	ldr	r1, [r3, #20]
 8007f04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f08:	b29b      	uxth	r3, r3
 8007f0a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007f0e:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007f12:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007f16:	6800      	ldr	r0, [r0, #0]
 8007f18:	f001 fa18 	bl	800934c <USB_WritePMA>
 8007f1c:	e3e5      	b.n	80086ea <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8007f1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f22:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007f26:	681a      	ldr	r2, [r3, #0]
 8007f28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	781b      	ldrb	r3, [r3, #0]
 8007f34:	009b      	lsls	r3, r3, #2
 8007f36:	4413      	add	r3, r2
 8007f38:	881b      	ldrh	r3, [r3, #0]
 8007f3a:	b29b      	uxth	r3, r3
 8007f3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f44:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8007f48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f4c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007f50:	681a      	ldr	r2, [r3, #0]
 8007f52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	781b      	ldrb	r3, [r3, #0]
 8007f5e:	009b      	lsls	r3, r3, #2
 8007f60:	441a      	add	r2, r3
 8007f62:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8007f66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f6e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007f72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f76:	b29b      	uxth	r3, r3
 8007f78:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007f7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	6a1a      	ldr	r2, [r3, #32]
 8007f86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f8a:	1ad2      	subs	r2, r2, r3
 8007f8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f90:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007f98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f9c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007fa0:	681a      	ldr	r2, [r3, #0]
 8007fa2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fa6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	781b      	ldrb	r3, [r3, #0]
 8007fae:	009b      	lsls	r3, r3, #2
 8007fb0:	4413      	add	r3, r2
 8007fb2:	881b      	ldrh	r3, [r3, #0]
 8007fb4:	b29b      	uxth	r3, r3
 8007fb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	f000 81bc 	beq.w	8008338 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007fc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fc4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007fce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fd2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	785b      	ldrb	r3, [r3, #1]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d16d      	bne.n	80080ba <USB_EPStartXfer+0xc5a>
 8007fde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fe2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	67bb      	str	r3, [r7, #120]	; 0x78
 8007fea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ff8:	b29b      	uxth	r3, r3
 8007ffa:	461a      	mov	r2, r3
 8007ffc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007ffe:	4413      	add	r3, r2
 8008000:	67bb      	str	r3, [r7, #120]	; 0x78
 8008002:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008006:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	781b      	ldrb	r3, [r3, #0]
 800800e:	011a      	lsls	r2, r3, #4
 8008010:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008012:	4413      	add	r3, r2
 8008014:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008018:	677b      	str	r3, [r7, #116]	; 0x74
 800801a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800801e:	2b00      	cmp	r3, #0
 8008020:	d112      	bne.n	8008048 <USB_EPStartXfer+0xbe8>
 8008022:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008024:	881b      	ldrh	r3, [r3, #0]
 8008026:	b29b      	uxth	r3, r3
 8008028:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800802c:	b29a      	uxth	r2, r3
 800802e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008030:	801a      	strh	r2, [r3, #0]
 8008032:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008034:	881b      	ldrh	r3, [r3, #0]
 8008036:	b29b      	uxth	r3, r3
 8008038:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800803c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008040:	b29a      	uxth	r2, r3
 8008042:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008044:	801a      	strh	r2, [r3, #0]
 8008046:	e060      	b.n	800810a <USB_EPStartXfer+0xcaa>
 8008048:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800804c:	2b3e      	cmp	r3, #62	; 0x3e
 800804e:	d817      	bhi.n	8008080 <USB_EPStartXfer+0xc20>
 8008050:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008054:	085b      	lsrs	r3, r3, #1
 8008056:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800805a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800805e:	f003 0301 	and.w	r3, r3, #1
 8008062:	2b00      	cmp	r3, #0
 8008064:	d004      	beq.n	8008070 <USB_EPStartXfer+0xc10>
 8008066:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800806a:	3301      	adds	r3, #1
 800806c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008070:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008074:	b29b      	uxth	r3, r3
 8008076:	029b      	lsls	r3, r3, #10
 8008078:	b29a      	uxth	r2, r3
 800807a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800807c:	801a      	strh	r2, [r3, #0]
 800807e:	e044      	b.n	800810a <USB_EPStartXfer+0xcaa>
 8008080:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008084:	095b      	lsrs	r3, r3, #5
 8008086:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800808a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800808e:	f003 031f 	and.w	r3, r3, #31
 8008092:	2b00      	cmp	r3, #0
 8008094:	d104      	bne.n	80080a0 <USB_EPStartXfer+0xc40>
 8008096:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800809a:	3b01      	subs	r3, #1
 800809c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80080a0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80080a4:	b29b      	uxth	r3, r3
 80080a6:	029b      	lsls	r3, r3, #10
 80080a8:	b29b      	uxth	r3, r3
 80080aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080b2:	b29a      	uxth	r2, r3
 80080b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80080b6:	801a      	strh	r2, [r3, #0]
 80080b8:	e027      	b.n	800810a <USB_EPStartXfer+0xcaa>
 80080ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	785b      	ldrb	r3, [r3, #1]
 80080c6:	2b01      	cmp	r3, #1
 80080c8:	d11f      	bne.n	800810a <USB_EPStartXfer+0xcaa>
 80080ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080ce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080d8:	b29b      	uxth	r3, r3
 80080da:	461a      	mov	r2, r3
 80080dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80080e0:	4413      	add	r3, r2
 80080e2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80080e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	781b      	ldrb	r3, [r3, #0]
 80080f2:	011a      	lsls	r2, r3, #4
 80080f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80080f8:	4413      	add	r3, r2
 80080fa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80080fe:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008100:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008104:	b29a      	uxth	r2, r3
 8008106:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008108:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800810a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800810e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	895b      	ldrh	r3, [r3, #10]
 8008116:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800811a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800811e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	6959      	ldr	r1, [r3, #20]
 8008126:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800812a:	b29b      	uxth	r3, r3
 800812c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008130:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8008134:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8008138:	6800      	ldr	r0, [r0, #0]
 800813a:	f001 f907 	bl	800934c <USB_WritePMA>
          ep->xfer_buff += len;
 800813e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008142:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	695a      	ldr	r2, [r3, #20]
 800814a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800814e:	441a      	add	r2, r3
 8008150:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008154:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800815c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008160:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	6a1a      	ldr	r2, [r3, #32]
 8008168:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800816c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	691b      	ldr	r3, [r3, #16]
 8008174:	429a      	cmp	r2, r3
 8008176:	d90f      	bls.n	8008198 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8008178:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800817c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	6a1a      	ldr	r2, [r3, #32]
 8008184:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008188:	1ad2      	subs	r2, r2, r3
 800818a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800818e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	621a      	str	r2, [r3, #32]
 8008196:	e00e      	b.n	80081b6 <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8008198:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800819c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	6a1b      	ldr	r3, [r3, #32]
 80081a4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80081a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	2200      	movs	r2, #0
 80081b4:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80081b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	f000 8295 	beq.w	80086ea <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80081c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	785b      	ldrb	r3, [r3, #1]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d16d      	bne.n	80082ac <USB_EPStartXfer+0xe4c>
 80081d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	66bb      	str	r3, [r7, #104]	; 0x68
 80081dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081e0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80081ea:	b29b      	uxth	r3, r3
 80081ec:	461a      	mov	r2, r3
 80081ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80081f0:	4413      	add	r3, r2
 80081f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80081f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	781b      	ldrb	r3, [r3, #0]
 8008200:	011a      	lsls	r2, r3, #4
 8008202:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008204:	4413      	add	r3, r2
 8008206:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800820a:	667b      	str	r3, [r7, #100]	; 0x64
 800820c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008210:	2b00      	cmp	r3, #0
 8008212:	d112      	bne.n	800823a <USB_EPStartXfer+0xdda>
 8008214:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008216:	881b      	ldrh	r3, [r3, #0]
 8008218:	b29b      	uxth	r3, r3
 800821a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800821e:	b29a      	uxth	r2, r3
 8008220:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008222:	801a      	strh	r2, [r3, #0]
 8008224:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008226:	881b      	ldrh	r3, [r3, #0]
 8008228:	b29b      	uxth	r3, r3
 800822a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800822e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008232:	b29a      	uxth	r2, r3
 8008234:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008236:	801a      	strh	r2, [r3, #0]
 8008238:	e063      	b.n	8008302 <USB_EPStartXfer+0xea2>
 800823a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800823e:	2b3e      	cmp	r3, #62	; 0x3e
 8008240:	d817      	bhi.n	8008272 <USB_EPStartXfer+0xe12>
 8008242:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008246:	085b      	lsrs	r3, r3, #1
 8008248:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800824c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008250:	f003 0301 	and.w	r3, r3, #1
 8008254:	2b00      	cmp	r3, #0
 8008256:	d004      	beq.n	8008262 <USB_EPStartXfer+0xe02>
 8008258:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800825c:	3301      	adds	r3, #1
 800825e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008262:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008266:	b29b      	uxth	r3, r3
 8008268:	029b      	lsls	r3, r3, #10
 800826a:	b29a      	uxth	r2, r3
 800826c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800826e:	801a      	strh	r2, [r3, #0]
 8008270:	e047      	b.n	8008302 <USB_EPStartXfer+0xea2>
 8008272:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008276:	095b      	lsrs	r3, r3, #5
 8008278:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800827c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008280:	f003 031f 	and.w	r3, r3, #31
 8008284:	2b00      	cmp	r3, #0
 8008286:	d104      	bne.n	8008292 <USB_EPStartXfer+0xe32>
 8008288:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800828c:	3b01      	subs	r3, #1
 800828e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008292:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008296:	b29b      	uxth	r3, r3
 8008298:	029b      	lsls	r3, r3, #10
 800829a:	b29b      	uxth	r3, r3
 800829c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082a4:	b29a      	uxth	r2, r3
 80082a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80082a8:	801a      	strh	r2, [r3, #0]
 80082aa:	e02a      	b.n	8008302 <USB_EPStartXfer+0xea2>
 80082ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	785b      	ldrb	r3, [r3, #1]
 80082b8:	2b01      	cmp	r3, #1
 80082ba:	d122      	bne.n	8008302 <USB_EPStartXfer+0xea2>
 80082bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082c0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	673b      	str	r3, [r7, #112]	; 0x70
 80082c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082cc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80082d6:	b29b      	uxth	r3, r3
 80082d8:	461a      	mov	r2, r3
 80082da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80082dc:	4413      	add	r3, r2
 80082de:	673b      	str	r3, [r7, #112]	; 0x70
 80082e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	781b      	ldrb	r3, [r3, #0]
 80082ec:	011a      	lsls	r2, r3, #4
 80082ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80082f0:	4413      	add	r3, r2
 80082f2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80082f6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80082f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082fc:	b29a      	uxth	r2, r3
 80082fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008300:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008302:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008306:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	891b      	ldrh	r3, [r3, #8]
 800830e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008312:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008316:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	6959      	ldr	r1, [r3, #20]
 800831e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008322:	b29b      	uxth	r3, r3
 8008324:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008328:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800832c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8008330:	6800      	ldr	r0, [r0, #0]
 8008332:	f001 f80b 	bl	800934c <USB_WritePMA>
 8008336:	e1d8      	b.n	80086ea <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008338:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800833c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	785b      	ldrb	r3, [r3, #1]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d178      	bne.n	800843a <USB_EPStartXfer+0xfda>
 8008348:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800834c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008356:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800835a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008364:	b29b      	uxth	r3, r3
 8008366:	461a      	mov	r2, r3
 8008368:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800836c:	4413      	add	r3, r2
 800836e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008372:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008376:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	781b      	ldrb	r3, [r3, #0]
 800837e:	011a      	lsls	r2, r3, #4
 8008380:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008384:	4413      	add	r3, r2
 8008386:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800838a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800838e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008392:	2b00      	cmp	r3, #0
 8008394:	d116      	bne.n	80083c4 <USB_EPStartXfer+0xf64>
 8008396:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800839a:	881b      	ldrh	r3, [r3, #0]
 800839c:	b29b      	uxth	r3, r3
 800839e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80083a2:	b29a      	uxth	r2, r3
 80083a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80083a8:	801a      	strh	r2, [r3, #0]
 80083aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80083ae:	881b      	ldrh	r3, [r3, #0]
 80083b0:	b29b      	uxth	r3, r3
 80083b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083ba:	b29a      	uxth	r2, r3
 80083bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80083c0:	801a      	strh	r2, [r3, #0]
 80083c2:	e06b      	b.n	800849c <USB_EPStartXfer+0x103c>
 80083c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083c8:	2b3e      	cmp	r3, #62	; 0x3e
 80083ca:	d818      	bhi.n	80083fe <USB_EPStartXfer+0xf9e>
 80083cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083d0:	085b      	lsrs	r3, r3, #1
 80083d2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80083d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083da:	f003 0301 	and.w	r3, r3, #1
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d004      	beq.n	80083ec <USB_EPStartXfer+0xf8c>
 80083e2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80083e6:	3301      	adds	r3, #1
 80083e8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80083ec:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80083f0:	b29b      	uxth	r3, r3
 80083f2:	029b      	lsls	r3, r3, #10
 80083f4:	b29a      	uxth	r2, r3
 80083f6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80083fa:	801a      	strh	r2, [r3, #0]
 80083fc:	e04e      	b.n	800849c <USB_EPStartXfer+0x103c>
 80083fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008402:	095b      	lsrs	r3, r3, #5
 8008404:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008408:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800840c:	f003 031f 	and.w	r3, r3, #31
 8008410:	2b00      	cmp	r3, #0
 8008412:	d104      	bne.n	800841e <USB_EPStartXfer+0xfbe>
 8008414:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008418:	3b01      	subs	r3, #1
 800841a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800841e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008422:	b29b      	uxth	r3, r3
 8008424:	029b      	lsls	r3, r3, #10
 8008426:	b29b      	uxth	r3, r3
 8008428:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800842c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008430:	b29a      	uxth	r2, r3
 8008432:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008436:	801a      	strh	r2, [r3, #0]
 8008438:	e030      	b.n	800849c <USB_EPStartXfer+0x103c>
 800843a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800843e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	785b      	ldrb	r3, [r3, #1]
 8008446:	2b01      	cmp	r3, #1
 8008448:	d128      	bne.n	800849c <USB_EPStartXfer+0x103c>
 800844a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800844e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008458:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800845c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008466:	b29b      	uxth	r3, r3
 8008468:	461a      	mov	r2, r3
 800846a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800846e:	4413      	add	r3, r2
 8008470:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008474:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008478:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	781b      	ldrb	r3, [r3, #0]
 8008480:	011a      	lsls	r2, r3, #4
 8008482:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008486:	4413      	add	r3, r2
 8008488:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800848c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008490:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008494:	b29a      	uxth	r2, r3
 8008496:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800849a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800849c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	891b      	ldrh	r3, [r3, #8]
 80084a8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80084ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	6959      	ldr	r1, [r3, #20]
 80084b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084bc:	b29b      	uxth	r3, r3
 80084be:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80084c2:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80084c6:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80084ca:	6800      	ldr	r0, [r0, #0]
 80084cc:	f000 ff3e 	bl	800934c <USB_WritePMA>
          ep->xfer_buff += len;
 80084d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	695a      	ldr	r2, [r3, #20]
 80084dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084e0:	441a      	add	r2, r3
 80084e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80084ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	6a1a      	ldr	r2, [r3, #32]
 80084fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	691b      	ldr	r3, [r3, #16]
 8008506:	429a      	cmp	r2, r3
 8008508:	d90f      	bls.n	800852a <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 800850a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800850e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	6a1a      	ldr	r2, [r3, #32]
 8008516:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800851a:	1ad2      	subs	r2, r2, r3
 800851c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008520:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	621a      	str	r2, [r3, #32]
 8008528:	e00e      	b.n	8008548 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 800852a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800852e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	6a1b      	ldr	r3, [r3, #32]
 8008536:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800853a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800853e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	2200      	movs	r2, #0
 8008546:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8008548:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800854c:	2b00      	cmp	r3, #0
 800854e:	f000 80cc 	beq.w	80086ea <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008552:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008556:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008560:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008564:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	785b      	ldrb	r3, [r3, #1]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d178      	bne.n	8008662 <USB_EPStartXfer+0x1202>
 8008570:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008574:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800857e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008582:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800858c:	b29b      	uxth	r3, r3
 800858e:	461a      	mov	r2, r3
 8008590:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008594:	4413      	add	r3, r2
 8008596:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800859a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800859e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	781b      	ldrb	r3, [r3, #0]
 80085a6:	011a      	lsls	r2, r3, #4
 80085a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80085ac:	4413      	add	r3, r2
 80085ae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80085b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80085b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d116      	bne.n	80085ec <USB_EPStartXfer+0x118c>
 80085be:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80085c2:	881b      	ldrh	r3, [r3, #0]
 80085c4:	b29b      	uxth	r3, r3
 80085c6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80085ca:	b29a      	uxth	r2, r3
 80085cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80085d0:	801a      	strh	r2, [r3, #0]
 80085d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80085d6:	881b      	ldrh	r3, [r3, #0]
 80085d8:	b29b      	uxth	r3, r3
 80085da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085e2:	b29a      	uxth	r2, r3
 80085e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80085e8:	801a      	strh	r2, [r3, #0]
 80085ea:	e064      	b.n	80086b6 <USB_EPStartXfer+0x1256>
 80085ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80085f0:	2b3e      	cmp	r3, #62	; 0x3e
 80085f2:	d818      	bhi.n	8008626 <USB_EPStartXfer+0x11c6>
 80085f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80085f8:	085b      	lsrs	r3, r3, #1
 80085fa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80085fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008602:	f003 0301 	and.w	r3, r3, #1
 8008606:	2b00      	cmp	r3, #0
 8008608:	d004      	beq.n	8008614 <USB_EPStartXfer+0x11b4>
 800860a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800860e:	3301      	adds	r3, #1
 8008610:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008614:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008618:	b29b      	uxth	r3, r3
 800861a:	029b      	lsls	r3, r3, #10
 800861c:	b29a      	uxth	r2, r3
 800861e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008622:	801a      	strh	r2, [r3, #0]
 8008624:	e047      	b.n	80086b6 <USB_EPStartXfer+0x1256>
 8008626:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800862a:	095b      	lsrs	r3, r3, #5
 800862c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008630:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008634:	f003 031f 	and.w	r3, r3, #31
 8008638:	2b00      	cmp	r3, #0
 800863a:	d104      	bne.n	8008646 <USB_EPStartXfer+0x11e6>
 800863c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008640:	3b01      	subs	r3, #1
 8008642:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008646:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800864a:	b29b      	uxth	r3, r3
 800864c:	029b      	lsls	r3, r3, #10
 800864e:	b29b      	uxth	r3, r3
 8008650:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008654:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008658:	b29a      	uxth	r2, r3
 800865a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800865e:	801a      	strh	r2, [r3, #0]
 8008660:	e029      	b.n	80086b6 <USB_EPStartXfer+0x1256>
 8008662:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008666:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	785b      	ldrb	r3, [r3, #1]
 800866e:	2b01      	cmp	r3, #1
 8008670:	d121      	bne.n	80086b6 <USB_EPStartXfer+0x1256>
 8008672:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008676:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008680:	b29b      	uxth	r3, r3
 8008682:	461a      	mov	r2, r3
 8008684:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008688:	4413      	add	r3, r2
 800868a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800868e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008692:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	781b      	ldrb	r3, [r3, #0]
 800869a:	011a      	lsls	r2, r3, #4
 800869c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80086a0:	4413      	add	r3, r2
 80086a2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80086a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80086aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086ae:	b29a      	uxth	r2, r3
 80086b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80086b4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80086b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	895b      	ldrh	r3, [r3, #10]
 80086c2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80086c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	6959      	ldr	r1, [r3, #20]
 80086d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086d6:	b29b      	uxth	r3, r3
 80086d8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80086dc:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80086e0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80086e4:	6800      	ldr	r0, [r0, #0]
 80086e6:	f000 fe31 	bl	800934c <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80086ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086ee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80086f2:	681a      	ldr	r2, [r3, #0]
 80086f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	781b      	ldrb	r3, [r3, #0]
 8008700:	009b      	lsls	r3, r3, #2
 8008702:	4413      	add	r3, r2
 8008704:	881b      	ldrh	r3, [r3, #0]
 8008706:	b29b      	uxth	r3, r3
 8008708:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800870c:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8008710:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008714:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008718:	8013      	strh	r3, [r2, #0]
 800871a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800871e:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8008722:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008726:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800872a:	8812      	ldrh	r2, [r2, #0]
 800872c:	f082 0210 	eor.w	r2, r2, #16
 8008730:	801a      	strh	r2, [r3, #0]
 8008732:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008736:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800873a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800873e:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8008742:	8812      	ldrh	r2, [r2, #0]
 8008744:	f082 0220 	eor.w	r2, r2, #32
 8008748:	801a      	strh	r2, [r3, #0]
 800874a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800874e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008752:	681a      	ldr	r2, [r3, #0]
 8008754:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008758:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	781b      	ldrb	r3, [r3, #0]
 8008760:	009b      	lsls	r3, r3, #2
 8008762:	441a      	add	r2, r3
 8008764:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008768:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800876c:	881b      	ldrh	r3, [r3, #0]
 800876e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008772:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008776:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800877a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800877e:	b29b      	uxth	r3, r3
 8008780:	8013      	strh	r3, [r2, #0]
 8008782:	f000 bc9f 	b.w	80090c4 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8008786:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800878a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	7b1b      	ldrb	r3, [r3, #12]
 8008792:	2b00      	cmp	r3, #0
 8008794:	f040 80ae 	bne.w	80088f4 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8008798:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800879c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	699a      	ldr	r2, [r3, #24]
 80087a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	691b      	ldr	r3, [r3, #16]
 80087b0:	429a      	cmp	r2, r3
 80087b2:	d917      	bls.n	80087e4 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 80087b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	691b      	ldr	r3, [r3, #16]
 80087c0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 80087c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	699a      	ldr	r2, [r3, #24]
 80087d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087d4:	1ad2      	subs	r2, r2, r3
 80087d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	619a      	str	r2, [r3, #24]
 80087e2:	e00e      	b.n	8008802 <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 80087e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	699b      	ldr	r3, [r3, #24]
 80087f0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 80087f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	2200      	movs	r2, #0
 8008800:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008802:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008806:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008810:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008814:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800881e:	b29b      	uxth	r3, r3
 8008820:	461a      	mov	r2, r3
 8008822:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008826:	4413      	add	r3, r2
 8008828:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800882c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008830:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	781b      	ldrb	r3, [r3, #0]
 8008838:	011a      	lsls	r2, r3, #4
 800883a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800883e:	4413      	add	r3, r2
 8008840:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008844:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008848:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800884c:	2b00      	cmp	r3, #0
 800884e:	d116      	bne.n	800887e <USB_EPStartXfer+0x141e>
 8008850:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008854:	881b      	ldrh	r3, [r3, #0]
 8008856:	b29b      	uxth	r3, r3
 8008858:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800885c:	b29a      	uxth	r2, r3
 800885e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008862:	801a      	strh	r2, [r3, #0]
 8008864:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008868:	881b      	ldrh	r3, [r3, #0]
 800886a:	b29b      	uxth	r3, r3
 800886c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008870:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008874:	b29a      	uxth	r2, r3
 8008876:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800887a:	801a      	strh	r2, [r3, #0]
 800887c:	e3e8      	b.n	8009050 <USB_EPStartXfer+0x1bf0>
 800887e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008882:	2b3e      	cmp	r3, #62	; 0x3e
 8008884:	d818      	bhi.n	80088b8 <USB_EPStartXfer+0x1458>
 8008886:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800888a:	085b      	lsrs	r3, r3, #1
 800888c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008890:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008894:	f003 0301 	and.w	r3, r3, #1
 8008898:	2b00      	cmp	r3, #0
 800889a:	d004      	beq.n	80088a6 <USB_EPStartXfer+0x1446>
 800889c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80088a0:	3301      	adds	r3, #1
 80088a2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80088a6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80088aa:	b29b      	uxth	r3, r3
 80088ac:	029b      	lsls	r3, r3, #10
 80088ae:	b29a      	uxth	r2, r3
 80088b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80088b4:	801a      	strh	r2, [r3, #0]
 80088b6:	e3cb      	b.n	8009050 <USB_EPStartXfer+0x1bf0>
 80088b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088bc:	095b      	lsrs	r3, r3, #5
 80088be:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80088c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088c6:	f003 031f 	and.w	r3, r3, #31
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d104      	bne.n	80088d8 <USB_EPStartXfer+0x1478>
 80088ce:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80088d2:	3b01      	subs	r3, #1
 80088d4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80088d8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80088dc:	b29b      	uxth	r3, r3
 80088de:	029b      	lsls	r3, r3, #10
 80088e0:	b29b      	uxth	r3, r3
 80088e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80088e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80088ea:	b29a      	uxth	r2, r3
 80088ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80088f0:	801a      	strh	r2, [r3, #0]
 80088f2:	e3ad      	b.n	8009050 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80088f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	78db      	ldrb	r3, [r3, #3]
 8008900:	2b02      	cmp	r3, #2
 8008902:	f040 8200 	bne.w	8008d06 <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008906:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800890a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	785b      	ldrb	r3, [r3, #1]
 8008912:	2b00      	cmp	r3, #0
 8008914:	f040 8091 	bne.w	8008a3a <USB_EPStartXfer+0x15da>
 8008918:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800891c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008926:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800892a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008934:	b29b      	uxth	r3, r3
 8008936:	461a      	mov	r2, r3
 8008938:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800893c:	4413      	add	r3, r2
 800893e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008942:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008946:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	781b      	ldrb	r3, [r3, #0]
 800894e:	011a      	lsls	r2, r3, #4
 8008950:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008954:	4413      	add	r3, r2
 8008956:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800895a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800895e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008962:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	691b      	ldr	r3, [r3, #16]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d116      	bne.n	800899c <USB_EPStartXfer+0x153c>
 800896e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008972:	881b      	ldrh	r3, [r3, #0]
 8008974:	b29b      	uxth	r3, r3
 8008976:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800897a:	b29a      	uxth	r2, r3
 800897c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008980:	801a      	strh	r2, [r3, #0]
 8008982:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008986:	881b      	ldrh	r3, [r3, #0]
 8008988:	b29b      	uxth	r3, r3
 800898a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800898e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008992:	b29a      	uxth	r2, r3
 8008994:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008998:	801a      	strh	r2, [r3, #0]
 800899a:	e083      	b.n	8008aa4 <USB_EPStartXfer+0x1644>
 800899c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	691b      	ldr	r3, [r3, #16]
 80089a8:	2b3e      	cmp	r3, #62	; 0x3e
 80089aa:	d820      	bhi.n	80089ee <USB_EPStartXfer+0x158e>
 80089ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	691b      	ldr	r3, [r3, #16]
 80089b8:	085b      	lsrs	r3, r3, #1
 80089ba:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80089be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	691b      	ldr	r3, [r3, #16]
 80089ca:	f003 0301 	and.w	r3, r3, #1
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d004      	beq.n	80089dc <USB_EPStartXfer+0x157c>
 80089d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089d6:	3301      	adds	r3, #1
 80089d8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80089dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089e0:	b29b      	uxth	r3, r3
 80089e2:	029b      	lsls	r3, r3, #10
 80089e4:	b29a      	uxth	r2, r3
 80089e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80089ea:	801a      	strh	r2, [r3, #0]
 80089ec:	e05a      	b.n	8008aa4 <USB_EPStartXfer+0x1644>
 80089ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	691b      	ldr	r3, [r3, #16]
 80089fa:	095b      	lsrs	r3, r3, #5
 80089fc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008a00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a04:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	691b      	ldr	r3, [r3, #16]
 8008a0c:	f003 031f 	and.w	r3, r3, #31
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d104      	bne.n	8008a1e <USB_EPStartXfer+0x15be>
 8008a14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a18:	3b01      	subs	r3, #1
 8008a1a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008a1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a22:	b29b      	uxth	r3, r3
 8008a24:	029b      	lsls	r3, r3, #10
 8008a26:	b29b      	uxth	r3, r3
 8008a28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a30:	b29a      	uxth	r2, r3
 8008a32:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008a36:	801a      	strh	r2, [r3, #0]
 8008a38:	e034      	b.n	8008aa4 <USB_EPStartXfer+0x1644>
 8008a3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	785b      	ldrb	r3, [r3, #1]
 8008a46:	2b01      	cmp	r3, #1
 8008a48:	d12c      	bne.n	8008aa4 <USB_EPStartXfer+0x1644>
 8008a4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a4e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008a58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a5c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a66:	b29b      	uxth	r3, r3
 8008a68:	461a      	mov	r2, r3
 8008a6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008a6e:	4413      	add	r3, r2
 8008a70:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008a74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a78:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	781b      	ldrb	r3, [r3, #0]
 8008a80:	011a      	lsls	r2, r3, #4
 8008a82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008a86:	4413      	add	r3, r2
 8008a88:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008a8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008a90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a94:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	691b      	ldr	r3, [r3, #16]
 8008a9c:	b29a      	uxth	r2, r3
 8008a9e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008aa2:	801a      	strh	r2, [r3, #0]
 8008aa4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008aa8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008ab2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ab6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	785b      	ldrb	r3, [r3, #1]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	f040 8091 	bne.w	8008be6 <USB_EPStartXfer+0x1786>
 8008ac4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ac8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008ad2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ad6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008ae0:	b29b      	uxth	r3, r3
 8008ae2:	461a      	mov	r2, r3
 8008ae4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008ae8:	4413      	add	r3, r2
 8008aea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008aee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008af2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	781b      	ldrb	r3, [r3, #0]
 8008afa:	011a      	lsls	r2, r3, #4
 8008afc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008b00:	4413      	add	r3, r2
 8008b02:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008b06:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008b0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	691b      	ldr	r3, [r3, #16]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d116      	bne.n	8008b48 <USB_EPStartXfer+0x16e8>
 8008b1a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008b1e:	881b      	ldrh	r3, [r3, #0]
 8008b20:	b29b      	uxth	r3, r3
 8008b22:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008b26:	b29a      	uxth	r2, r3
 8008b28:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008b2c:	801a      	strh	r2, [r3, #0]
 8008b2e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008b32:	881b      	ldrh	r3, [r3, #0]
 8008b34:	b29b      	uxth	r3, r3
 8008b36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b3e:	b29a      	uxth	r2, r3
 8008b40:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008b44:	801a      	strh	r2, [r3, #0]
 8008b46:	e07c      	b.n	8008c42 <USB_EPStartXfer+0x17e2>
 8008b48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	691b      	ldr	r3, [r3, #16]
 8008b54:	2b3e      	cmp	r3, #62	; 0x3e
 8008b56:	d820      	bhi.n	8008b9a <USB_EPStartXfer+0x173a>
 8008b58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b5c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	691b      	ldr	r3, [r3, #16]
 8008b64:	085b      	lsrs	r3, r3, #1
 8008b66:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008b6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	691b      	ldr	r3, [r3, #16]
 8008b76:	f003 0301 	and.w	r3, r3, #1
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d004      	beq.n	8008b88 <USB_EPStartXfer+0x1728>
 8008b7e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008b82:	3301      	adds	r3, #1
 8008b84:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008b88:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008b8c:	b29b      	uxth	r3, r3
 8008b8e:	029b      	lsls	r3, r3, #10
 8008b90:	b29a      	uxth	r2, r3
 8008b92:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008b96:	801a      	strh	r2, [r3, #0]
 8008b98:	e053      	b.n	8008c42 <USB_EPStartXfer+0x17e2>
 8008b9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	691b      	ldr	r3, [r3, #16]
 8008ba6:	095b      	lsrs	r3, r3, #5
 8008ba8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008bac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bb0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	691b      	ldr	r3, [r3, #16]
 8008bb8:	f003 031f 	and.w	r3, r3, #31
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d104      	bne.n	8008bca <USB_EPStartXfer+0x176a>
 8008bc0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008bc4:	3b01      	subs	r3, #1
 8008bc6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008bca:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008bce:	b29b      	uxth	r3, r3
 8008bd0:	029b      	lsls	r3, r3, #10
 8008bd2:	b29b      	uxth	r3, r3
 8008bd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008bd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008bdc:	b29a      	uxth	r2, r3
 8008bde:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008be2:	801a      	strh	r2, [r3, #0]
 8008be4:	e02d      	b.n	8008c42 <USB_EPStartXfer+0x17e2>
 8008be6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	785b      	ldrb	r3, [r3, #1]
 8008bf2:	2b01      	cmp	r3, #1
 8008bf4:	d125      	bne.n	8008c42 <USB_EPStartXfer+0x17e2>
 8008bf6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bfa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c04:	b29b      	uxth	r3, r3
 8008c06:	461a      	mov	r2, r3
 8008c08:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008c0c:	4413      	add	r3, r2
 8008c0e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008c12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	781b      	ldrb	r3, [r3, #0]
 8008c1e:	011a      	lsls	r2, r3, #4
 8008c20:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008c24:	4413      	add	r3, r2
 8008c26:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008c2a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008c2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	691b      	ldr	r3, [r3, #16]
 8008c3a:	b29a      	uxth	r2, r3
 8008c3c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008c40:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008c42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	69db      	ldr	r3, [r3, #28]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	f000 81fe 	beq.w	8009050 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008c54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c58:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008c5c:	681a      	ldr	r2, [r3, #0]
 8008c5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	781b      	ldrb	r3, [r3, #0]
 8008c6a:	009b      	lsls	r3, r3, #2
 8008c6c:	4413      	add	r3, r2
 8008c6e:	881b      	ldrh	r3, [r3, #0]
 8008c70:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008c74:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008c78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d005      	beq.n	8008c8c <USB_EPStartXfer+0x182c>
 8008c80:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008c84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d10d      	bne.n	8008ca8 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008c8c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008c90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	f040 81db 	bne.w	8009050 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008c9a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008c9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	f040 81d4 	bne.w	8009050 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8008ca8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008cb0:	681a      	ldr	r2, [r3, #0]
 8008cb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cb6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	781b      	ldrb	r3, [r3, #0]
 8008cbe:	009b      	lsls	r3, r3, #2
 8008cc0:	4413      	add	r3, r2
 8008cc2:	881b      	ldrh	r3, [r3, #0]
 8008cc4:	b29b      	uxth	r3, r3
 8008cc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008cca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cce:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8008cd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cd6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008cda:	681a      	ldr	r2, [r3, #0]
 8008cdc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ce0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	781b      	ldrb	r3, [r3, #0]
 8008ce8:	009b      	lsls	r3, r3, #2
 8008cea:	441a      	add	r2, r3
 8008cec:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8008cf0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008cf4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008cf8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008cfc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008d00:	b29b      	uxth	r3, r3
 8008d02:	8013      	strh	r3, [r2, #0]
 8008d04:	e1a4      	b.n	8009050 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008d06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	78db      	ldrb	r3, [r3, #3]
 8008d12:	2b01      	cmp	r3, #1
 8008d14:	f040 819a 	bne.w	800904c <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008d18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	699a      	ldr	r2, [r3, #24]
 8008d24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d28:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	691b      	ldr	r3, [r3, #16]
 8008d30:	429a      	cmp	r2, r3
 8008d32:	d917      	bls.n	8008d64 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8008d34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d38:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	691b      	ldr	r3, [r3, #16]
 8008d40:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8008d44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d48:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	699a      	ldr	r2, [r3, #24]
 8008d50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d54:	1ad2      	subs	r2, r2, r3
 8008d56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	619a      	str	r2, [r3, #24]
 8008d62:	e00e      	b.n	8008d82 <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8008d64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	699b      	ldr	r3, [r3, #24]
 8008d70:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8008d74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d78:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	2200      	movs	r2, #0
 8008d80:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008d82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	785b      	ldrb	r3, [r3, #1]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d178      	bne.n	8008e84 <USB_EPStartXfer+0x1a24>
 8008d92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d96:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008da0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008da4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008dae:	b29b      	uxth	r3, r3
 8008db0:	461a      	mov	r2, r3
 8008db2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008db6:	4413      	add	r3, r2
 8008db8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008dbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008dc0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	781b      	ldrb	r3, [r3, #0]
 8008dc8:	011a      	lsls	r2, r3, #4
 8008dca:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008dce:	4413      	add	r3, r2
 8008dd0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008dd4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008dd8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d116      	bne.n	8008e0e <USB_EPStartXfer+0x19ae>
 8008de0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008de4:	881b      	ldrh	r3, [r3, #0]
 8008de6:	b29b      	uxth	r3, r3
 8008de8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008dec:	b29a      	uxth	r2, r3
 8008dee:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008df2:	801a      	strh	r2, [r3, #0]
 8008df4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008df8:	881b      	ldrh	r3, [r3, #0]
 8008dfa:	b29b      	uxth	r3, r3
 8008dfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e04:	b29a      	uxth	r2, r3
 8008e06:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008e0a:	801a      	strh	r2, [r3, #0]
 8008e0c:	e06b      	b.n	8008ee6 <USB_EPStartXfer+0x1a86>
 8008e0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e12:	2b3e      	cmp	r3, #62	; 0x3e
 8008e14:	d818      	bhi.n	8008e48 <USB_EPStartXfer+0x19e8>
 8008e16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e1a:	085b      	lsrs	r3, r3, #1
 8008e1c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008e20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e24:	f003 0301 	and.w	r3, r3, #1
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d004      	beq.n	8008e36 <USB_EPStartXfer+0x19d6>
 8008e2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e30:	3301      	adds	r3, #1
 8008e32:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008e36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e3a:	b29b      	uxth	r3, r3
 8008e3c:	029b      	lsls	r3, r3, #10
 8008e3e:	b29a      	uxth	r2, r3
 8008e40:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008e44:	801a      	strh	r2, [r3, #0]
 8008e46:	e04e      	b.n	8008ee6 <USB_EPStartXfer+0x1a86>
 8008e48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e4c:	095b      	lsrs	r3, r3, #5
 8008e4e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008e52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e56:	f003 031f 	and.w	r3, r3, #31
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d104      	bne.n	8008e68 <USB_EPStartXfer+0x1a08>
 8008e5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e62:	3b01      	subs	r3, #1
 8008e64:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008e68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e6c:	b29b      	uxth	r3, r3
 8008e6e:	029b      	lsls	r3, r3, #10
 8008e70:	b29b      	uxth	r3, r3
 8008e72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e7a:	b29a      	uxth	r2, r3
 8008e7c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008e80:	801a      	strh	r2, [r3, #0]
 8008e82:	e030      	b.n	8008ee6 <USB_EPStartXfer+0x1a86>
 8008e84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e88:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	785b      	ldrb	r3, [r3, #1]
 8008e90:	2b01      	cmp	r3, #1
 8008e92:	d128      	bne.n	8008ee6 <USB_EPStartXfer+0x1a86>
 8008e94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e98:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008ea2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ea6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008eb0:	b29b      	uxth	r3, r3
 8008eb2:	461a      	mov	r2, r3
 8008eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008eb8:	4413      	add	r3, r2
 8008eba:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008ebe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ec2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	781b      	ldrb	r3, [r3, #0]
 8008eca:	011a      	lsls	r2, r3, #4
 8008ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ed0:	4413      	add	r3, r2
 8008ed2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008ed6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008eda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ede:	b29a      	uxth	r2, r3
 8008ee0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008ee4:	801a      	strh	r2, [r3, #0]
 8008ee6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008eea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008ef4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ef8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	785b      	ldrb	r3, [r3, #1]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d178      	bne.n	8008ff6 <USB_EPStartXfer+0x1b96>
 8008f04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f08:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008f12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f16:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f20:	b29b      	uxth	r3, r3
 8008f22:	461a      	mov	r2, r3
 8008f24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008f28:	4413      	add	r3, r2
 8008f2a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008f2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	781b      	ldrb	r3, [r3, #0]
 8008f3a:	011a      	lsls	r2, r3, #4
 8008f3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008f40:	4413      	add	r3, r2
 8008f42:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008f46:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008f4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d116      	bne.n	8008f80 <USB_EPStartXfer+0x1b20>
 8008f52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008f56:	881b      	ldrh	r3, [r3, #0]
 8008f58:	b29b      	uxth	r3, r3
 8008f5a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008f5e:	b29a      	uxth	r2, r3
 8008f60:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008f64:	801a      	strh	r2, [r3, #0]
 8008f66:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008f6a:	881b      	ldrh	r3, [r3, #0]
 8008f6c:	b29b      	uxth	r3, r3
 8008f6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f76:	b29a      	uxth	r2, r3
 8008f78:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008f7c:	801a      	strh	r2, [r3, #0]
 8008f7e:	e067      	b.n	8009050 <USB_EPStartXfer+0x1bf0>
 8008f80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f84:	2b3e      	cmp	r3, #62	; 0x3e
 8008f86:	d818      	bhi.n	8008fba <USB_EPStartXfer+0x1b5a>
 8008f88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f8c:	085b      	lsrs	r3, r3, #1
 8008f8e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008f92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f96:	f003 0301 	and.w	r3, r3, #1
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d004      	beq.n	8008fa8 <USB_EPStartXfer+0x1b48>
 8008f9e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008fa2:	3301      	adds	r3, #1
 8008fa4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008fa8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008fac:	b29b      	uxth	r3, r3
 8008fae:	029b      	lsls	r3, r3, #10
 8008fb0:	b29a      	uxth	r2, r3
 8008fb2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008fb6:	801a      	strh	r2, [r3, #0]
 8008fb8:	e04a      	b.n	8009050 <USB_EPStartXfer+0x1bf0>
 8008fba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008fbe:	095b      	lsrs	r3, r3, #5
 8008fc0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008fc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008fc8:	f003 031f 	and.w	r3, r3, #31
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d104      	bne.n	8008fda <USB_EPStartXfer+0x1b7a>
 8008fd0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008fd4:	3b01      	subs	r3, #1
 8008fd6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008fda:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008fde:	b29b      	uxth	r3, r3
 8008fe0:	029b      	lsls	r3, r3, #10
 8008fe2:	b29b      	uxth	r3, r3
 8008fe4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008fe8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008fec:	b29a      	uxth	r2, r3
 8008fee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008ff2:	801a      	strh	r2, [r3, #0]
 8008ff4:	e02c      	b.n	8009050 <USB_EPStartXfer+0x1bf0>
 8008ff6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ffa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	785b      	ldrb	r3, [r3, #1]
 8009002:	2b01      	cmp	r3, #1
 8009004:	d124      	bne.n	8009050 <USB_EPStartXfer+0x1bf0>
 8009006:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800900a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009014:	b29b      	uxth	r3, r3
 8009016:	461a      	mov	r2, r3
 8009018:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800901c:	4413      	add	r3, r2
 800901e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009022:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009026:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	781b      	ldrb	r3, [r3, #0]
 800902e:	011a      	lsls	r2, r3, #4
 8009030:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009034:	4413      	add	r3, r2
 8009036:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800903a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800903e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009042:	b29a      	uxth	r2, r3
 8009044:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009048:	801a      	strh	r2, [r3, #0]
 800904a:	e001      	b.n	8009050 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 800904c:	2301      	movs	r3, #1
 800904e:	e03a      	b.n	80090c6 <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009050:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009054:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009058:	681a      	ldr	r2, [r3, #0]
 800905a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800905e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	781b      	ldrb	r3, [r3, #0]
 8009066:	009b      	lsls	r3, r3, #2
 8009068:	4413      	add	r3, r2
 800906a:	881b      	ldrh	r3, [r3, #0]
 800906c:	b29b      	uxth	r3, r3
 800906e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009072:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009076:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800907a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800907e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009082:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8009086:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800908a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800908e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8009092:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009096:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800909a:	681a      	ldr	r2, [r3, #0]
 800909c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	781b      	ldrb	r3, [r3, #0]
 80090a8:	009b      	lsls	r3, r3, #2
 80090aa:	441a      	add	r2, r3
 80090ac:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80090b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80090b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80090b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80090bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090c0:	b29b      	uxth	r3, r3
 80090c2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80090c4:	2300      	movs	r3, #0
}
 80090c6:	4618      	mov	r0, r3
 80090c8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80090cc:	46bd      	mov	sp, r7
 80090ce:	bd80      	pop	{r7, pc}

080090d0 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80090d0:	b480      	push	{r7}
 80090d2:	b085      	sub	sp, #20
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
 80090d8:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	785b      	ldrb	r3, [r3, #1]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d020      	beq.n	8009124 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80090e2:	687a      	ldr	r2, [r7, #4]
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	781b      	ldrb	r3, [r3, #0]
 80090e8:	009b      	lsls	r3, r3, #2
 80090ea:	4413      	add	r3, r2
 80090ec:	881b      	ldrh	r3, [r3, #0]
 80090ee:	b29b      	uxth	r3, r3
 80090f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80090f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80090f8:	81bb      	strh	r3, [r7, #12]
 80090fa:	89bb      	ldrh	r3, [r7, #12]
 80090fc:	f083 0310 	eor.w	r3, r3, #16
 8009100:	81bb      	strh	r3, [r7, #12]
 8009102:	687a      	ldr	r2, [r7, #4]
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	781b      	ldrb	r3, [r3, #0]
 8009108:	009b      	lsls	r3, r3, #2
 800910a:	441a      	add	r2, r3
 800910c:	89bb      	ldrh	r3, [r7, #12]
 800910e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009112:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009116:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800911a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800911e:	b29b      	uxth	r3, r3
 8009120:	8013      	strh	r3, [r2, #0]
 8009122:	e01f      	b.n	8009164 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8009124:	687a      	ldr	r2, [r7, #4]
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	781b      	ldrb	r3, [r3, #0]
 800912a:	009b      	lsls	r3, r3, #2
 800912c:	4413      	add	r3, r2
 800912e:	881b      	ldrh	r3, [r3, #0]
 8009130:	b29b      	uxth	r3, r3
 8009132:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009136:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800913a:	81fb      	strh	r3, [r7, #14]
 800913c:	89fb      	ldrh	r3, [r7, #14]
 800913e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009142:	81fb      	strh	r3, [r7, #14]
 8009144:	687a      	ldr	r2, [r7, #4]
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	781b      	ldrb	r3, [r3, #0]
 800914a:	009b      	lsls	r3, r3, #2
 800914c:	441a      	add	r2, r3
 800914e:	89fb      	ldrh	r3, [r7, #14]
 8009150:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009154:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009158:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800915c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009160:	b29b      	uxth	r3, r3
 8009162:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009164:	2300      	movs	r3, #0
}
 8009166:	4618      	mov	r0, r3
 8009168:	3714      	adds	r7, #20
 800916a:	46bd      	mov	sp, r7
 800916c:	bc80      	pop	{r7}
 800916e:	4770      	bx	lr

08009170 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009170:	b480      	push	{r7}
 8009172:	b087      	sub	sp, #28
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
 8009178:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	7b1b      	ldrb	r3, [r3, #12]
 800917e:	2b00      	cmp	r3, #0
 8009180:	f040 809d 	bne.w	80092be <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	785b      	ldrb	r3, [r3, #1]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d04c      	beq.n	8009226 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800918c:	687a      	ldr	r2, [r7, #4]
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	781b      	ldrb	r3, [r3, #0]
 8009192:	009b      	lsls	r3, r3, #2
 8009194:	4413      	add	r3, r2
 8009196:	881b      	ldrh	r3, [r3, #0]
 8009198:	823b      	strh	r3, [r7, #16]
 800919a:	8a3b      	ldrh	r3, [r7, #16]
 800919c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d01b      	beq.n	80091dc <USB_EPClearStall+0x6c>
 80091a4:	687a      	ldr	r2, [r7, #4]
 80091a6:	683b      	ldr	r3, [r7, #0]
 80091a8:	781b      	ldrb	r3, [r3, #0]
 80091aa:	009b      	lsls	r3, r3, #2
 80091ac:	4413      	add	r3, r2
 80091ae:	881b      	ldrh	r3, [r3, #0]
 80091b0:	b29b      	uxth	r3, r3
 80091b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80091b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091ba:	81fb      	strh	r3, [r7, #14]
 80091bc:	687a      	ldr	r2, [r7, #4]
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	781b      	ldrb	r3, [r3, #0]
 80091c2:	009b      	lsls	r3, r3, #2
 80091c4:	441a      	add	r2, r3
 80091c6:	89fb      	ldrh	r3, [r7, #14]
 80091c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80091cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80091d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80091d4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80091d8:	b29b      	uxth	r3, r3
 80091da:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	78db      	ldrb	r3, [r3, #3]
 80091e0:	2b01      	cmp	r3, #1
 80091e2:	d06c      	beq.n	80092be <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80091e4:	687a      	ldr	r2, [r7, #4]
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	781b      	ldrb	r3, [r3, #0]
 80091ea:	009b      	lsls	r3, r3, #2
 80091ec:	4413      	add	r3, r2
 80091ee:	881b      	ldrh	r3, [r3, #0]
 80091f0:	b29b      	uxth	r3, r3
 80091f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80091f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80091fa:	81bb      	strh	r3, [r7, #12]
 80091fc:	89bb      	ldrh	r3, [r7, #12]
 80091fe:	f083 0320 	eor.w	r3, r3, #32
 8009202:	81bb      	strh	r3, [r7, #12]
 8009204:	687a      	ldr	r2, [r7, #4]
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	781b      	ldrb	r3, [r3, #0]
 800920a:	009b      	lsls	r3, r3, #2
 800920c:	441a      	add	r2, r3
 800920e:	89bb      	ldrh	r3, [r7, #12]
 8009210:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009214:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009218:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800921c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009220:	b29b      	uxth	r3, r3
 8009222:	8013      	strh	r3, [r2, #0]
 8009224:	e04b      	b.n	80092be <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009226:	687a      	ldr	r2, [r7, #4]
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	781b      	ldrb	r3, [r3, #0]
 800922c:	009b      	lsls	r3, r3, #2
 800922e:	4413      	add	r3, r2
 8009230:	881b      	ldrh	r3, [r3, #0]
 8009232:	82fb      	strh	r3, [r7, #22]
 8009234:	8afb      	ldrh	r3, [r7, #22]
 8009236:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800923a:	2b00      	cmp	r3, #0
 800923c:	d01b      	beq.n	8009276 <USB_EPClearStall+0x106>
 800923e:	687a      	ldr	r2, [r7, #4]
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	781b      	ldrb	r3, [r3, #0]
 8009244:	009b      	lsls	r3, r3, #2
 8009246:	4413      	add	r3, r2
 8009248:	881b      	ldrh	r3, [r3, #0]
 800924a:	b29b      	uxth	r3, r3
 800924c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009250:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009254:	82bb      	strh	r3, [r7, #20]
 8009256:	687a      	ldr	r2, [r7, #4]
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	781b      	ldrb	r3, [r3, #0]
 800925c:	009b      	lsls	r3, r3, #2
 800925e:	441a      	add	r2, r3
 8009260:	8abb      	ldrh	r3, [r7, #20]
 8009262:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009266:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800926a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800926e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009272:	b29b      	uxth	r3, r3
 8009274:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009276:	687a      	ldr	r2, [r7, #4]
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	781b      	ldrb	r3, [r3, #0]
 800927c:	009b      	lsls	r3, r3, #2
 800927e:	4413      	add	r3, r2
 8009280:	881b      	ldrh	r3, [r3, #0]
 8009282:	b29b      	uxth	r3, r3
 8009284:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009288:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800928c:	827b      	strh	r3, [r7, #18]
 800928e:	8a7b      	ldrh	r3, [r7, #18]
 8009290:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009294:	827b      	strh	r3, [r7, #18]
 8009296:	8a7b      	ldrh	r3, [r7, #18]
 8009298:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800929c:	827b      	strh	r3, [r7, #18]
 800929e:	687a      	ldr	r2, [r7, #4]
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	781b      	ldrb	r3, [r3, #0]
 80092a4:	009b      	lsls	r3, r3, #2
 80092a6:	441a      	add	r2, r3
 80092a8:	8a7b      	ldrh	r3, [r7, #18]
 80092aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80092ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80092b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80092b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092ba:	b29b      	uxth	r3, r3
 80092bc:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80092be:	2300      	movs	r3, #0
}
 80092c0:	4618      	mov	r0, r3
 80092c2:	371c      	adds	r7, #28
 80092c4:	46bd      	mov	sp, r7
 80092c6:	bc80      	pop	{r7}
 80092c8:	4770      	bx	lr

080092ca <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80092ca:	b480      	push	{r7}
 80092cc:	b083      	sub	sp, #12
 80092ce:	af00      	add	r7, sp, #0
 80092d0:	6078      	str	r0, [r7, #4]
 80092d2:	460b      	mov	r3, r1
 80092d4:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80092d6:	78fb      	ldrb	r3, [r7, #3]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d103      	bne.n	80092e4 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2280      	movs	r2, #128	; 0x80
 80092e0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80092e4:	2300      	movs	r3, #0
}
 80092e6:	4618      	mov	r0, r3
 80092e8:	370c      	adds	r7, #12
 80092ea:	46bd      	mov	sp, r7
 80092ec:	bc80      	pop	{r7}
 80092ee:	4770      	bx	lr

080092f0 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80092f0:	b480      	push	{r7}
 80092f2:	b083      	sub	sp, #12
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80092f8:	2300      	movs	r3, #0
}
 80092fa:	4618      	mov	r0, r3
 80092fc:	370c      	adds	r7, #12
 80092fe:	46bd      	mov	sp, r7
 8009300:	bc80      	pop	{r7}
 8009302:	4770      	bx	lr

08009304 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8009304:	b480      	push	{r7}
 8009306:	b083      	sub	sp, #12
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800930c:	2300      	movs	r3, #0
}
 800930e:	4618      	mov	r0, r3
 8009310:	370c      	adds	r7, #12
 8009312:	46bd      	mov	sp, r7
 8009314:	bc80      	pop	{r7}
 8009316:	4770      	bx	lr

08009318 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8009318:	b480      	push	{r7}
 800931a:	b085      	sub	sp, #20
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009326:	b29b      	uxth	r3, r3
 8009328:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800932a:	68fb      	ldr	r3, [r7, #12]
}
 800932c:	4618      	mov	r0, r3
 800932e:	3714      	adds	r7, #20
 8009330:	46bd      	mov	sp, r7
 8009332:	bc80      	pop	{r7}
 8009334:	4770      	bx	lr

08009336 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8009336:	b480      	push	{r7}
 8009338:	b083      	sub	sp, #12
 800933a:	af00      	add	r7, sp, #0
 800933c:	6078      	str	r0, [r7, #4]
 800933e:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8009340:	2300      	movs	r3, #0
}
 8009342:	4618      	mov	r0, r3
 8009344:	370c      	adds	r7, #12
 8009346:	46bd      	mov	sp, r7
 8009348:	bc80      	pop	{r7}
 800934a:	4770      	bx	lr

0800934c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800934c:	b480      	push	{r7}
 800934e:	b08d      	sub	sp, #52	; 0x34
 8009350:	af00      	add	r7, sp, #0
 8009352:	60f8      	str	r0, [r7, #12]
 8009354:	60b9      	str	r1, [r7, #8]
 8009356:	4611      	mov	r1, r2
 8009358:	461a      	mov	r2, r3
 800935a:	460b      	mov	r3, r1
 800935c:	80fb      	strh	r3, [r7, #6]
 800935e:	4613      	mov	r3, r2
 8009360:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009362:	88bb      	ldrh	r3, [r7, #4]
 8009364:	3301      	adds	r3, #1
 8009366:	085b      	lsrs	r3, r3, #1
 8009368:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800936e:	68bb      	ldr	r3, [r7, #8]
 8009370:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009372:	88fb      	ldrh	r3, [r7, #6]
 8009374:	005a      	lsls	r2, r3, #1
 8009376:	69fb      	ldr	r3, [r7, #28]
 8009378:	4413      	add	r3, r2
 800937a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800937e:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8009380:	6a3b      	ldr	r3, [r7, #32]
 8009382:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009384:	e01e      	b.n	80093c4 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8009386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009388:	781b      	ldrb	r3, [r3, #0]
 800938a:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800938c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800938e:	3301      	adds	r3, #1
 8009390:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8009392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009394:	781b      	ldrb	r3, [r3, #0]
 8009396:	b29b      	uxth	r3, r3
 8009398:	021b      	lsls	r3, r3, #8
 800939a:	b29b      	uxth	r3, r3
 800939c:	461a      	mov	r2, r3
 800939e:	69bb      	ldr	r3, [r7, #24]
 80093a0:	4313      	orrs	r3, r2
 80093a2:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80093a4:	697b      	ldr	r3, [r7, #20]
 80093a6:	b29a      	uxth	r2, r3
 80093a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093aa:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80093ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ae:	3302      	adds	r3, #2
 80093b0:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80093b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093b4:	3302      	adds	r3, #2
 80093b6:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80093b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ba:	3301      	adds	r3, #1
 80093bc:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80093be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093c0:	3b01      	subs	r3, #1
 80093c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80093c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d1dd      	bne.n	8009386 <USB_WritePMA+0x3a>
  }
}
 80093ca:	bf00      	nop
 80093cc:	bf00      	nop
 80093ce:	3734      	adds	r7, #52	; 0x34
 80093d0:	46bd      	mov	sp, r7
 80093d2:	bc80      	pop	{r7}
 80093d4:	4770      	bx	lr

080093d6 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80093d6:	b480      	push	{r7}
 80093d8:	b08b      	sub	sp, #44	; 0x2c
 80093da:	af00      	add	r7, sp, #0
 80093dc:	60f8      	str	r0, [r7, #12]
 80093de:	60b9      	str	r1, [r7, #8]
 80093e0:	4611      	mov	r1, r2
 80093e2:	461a      	mov	r2, r3
 80093e4:	460b      	mov	r3, r1
 80093e6:	80fb      	strh	r3, [r7, #6]
 80093e8:	4613      	mov	r3, r2
 80093ea:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80093ec:	88bb      	ldrh	r3, [r7, #4]
 80093ee:	085b      	lsrs	r3, r3, #1
 80093f0:	b29b      	uxth	r3, r3
 80093f2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80093f8:	68bb      	ldr	r3, [r7, #8]
 80093fa:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80093fc:	88fb      	ldrh	r3, [r7, #6]
 80093fe:	005a      	lsls	r2, r3, #1
 8009400:	697b      	ldr	r3, [r7, #20]
 8009402:	4413      	add	r3, r2
 8009404:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009408:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800940a:	69bb      	ldr	r3, [r7, #24]
 800940c:	627b      	str	r3, [r7, #36]	; 0x24
 800940e:	e01b      	b.n	8009448 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8009410:	6a3b      	ldr	r3, [r7, #32]
 8009412:	881b      	ldrh	r3, [r3, #0]
 8009414:	b29b      	uxth	r3, r3
 8009416:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8009418:	6a3b      	ldr	r3, [r7, #32]
 800941a:	3302      	adds	r3, #2
 800941c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800941e:	693b      	ldr	r3, [r7, #16]
 8009420:	b2da      	uxtb	r2, r3
 8009422:	69fb      	ldr	r3, [r7, #28]
 8009424:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009426:	69fb      	ldr	r3, [r7, #28]
 8009428:	3301      	adds	r3, #1
 800942a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800942c:	693b      	ldr	r3, [r7, #16]
 800942e:	0a1b      	lsrs	r3, r3, #8
 8009430:	b2da      	uxtb	r2, r3
 8009432:	69fb      	ldr	r3, [r7, #28]
 8009434:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009436:	69fb      	ldr	r3, [r7, #28]
 8009438:	3301      	adds	r3, #1
 800943a:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800943c:	6a3b      	ldr	r3, [r7, #32]
 800943e:	3302      	adds	r3, #2
 8009440:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8009442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009444:	3b01      	subs	r3, #1
 8009446:	627b      	str	r3, [r7, #36]	; 0x24
 8009448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800944a:	2b00      	cmp	r3, #0
 800944c:	d1e0      	bne.n	8009410 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800944e:	88bb      	ldrh	r3, [r7, #4]
 8009450:	f003 0301 	and.w	r3, r3, #1
 8009454:	b29b      	uxth	r3, r3
 8009456:	2b00      	cmp	r3, #0
 8009458:	d007      	beq.n	800946a <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800945a:	6a3b      	ldr	r3, [r7, #32]
 800945c:	881b      	ldrh	r3, [r3, #0]
 800945e:	b29b      	uxth	r3, r3
 8009460:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009462:	693b      	ldr	r3, [r7, #16]
 8009464:	b2da      	uxtb	r2, r3
 8009466:	69fb      	ldr	r3, [r7, #28]
 8009468:	701a      	strb	r2, [r3, #0]
  }
}
 800946a:	bf00      	nop
 800946c:	372c      	adds	r7, #44	; 0x2c
 800946e:	46bd      	mov	sp, r7
 8009470:	bc80      	pop	{r7}
 8009472:	4770      	bx	lr

08009474 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b084      	sub	sp, #16
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
 800947c:	460b      	mov	r3, r1
 800947e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009480:	2300      	movs	r3, #0
 8009482:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	7c1b      	ldrb	r3, [r3, #16]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d115      	bne.n	80094b8 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800948c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009490:	2202      	movs	r2, #2
 8009492:	2181      	movs	r1, #129	; 0x81
 8009494:	6878      	ldr	r0, [r7, #4]
 8009496:	f7f9 f9b0 	bl	80027fa <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2201      	movs	r2, #1
 800949e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80094a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80094a4:	2202      	movs	r2, #2
 80094a6:	2101      	movs	r1, #1
 80094a8:	6878      	ldr	r0, [r7, #4]
 80094aa:	f7f9 f9a6 	bl	80027fa <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	2201      	movs	r2, #1
 80094b2:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80094b6:	e012      	b.n	80094de <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80094b8:	2340      	movs	r3, #64	; 0x40
 80094ba:	2202      	movs	r2, #2
 80094bc:	2181      	movs	r1, #129	; 0x81
 80094be:	6878      	ldr	r0, [r7, #4]
 80094c0:	f7f9 f99b 	bl	80027fa <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2201      	movs	r2, #1
 80094c8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80094ca:	2340      	movs	r3, #64	; 0x40
 80094cc:	2202      	movs	r2, #2
 80094ce:	2101      	movs	r1, #1
 80094d0:	6878      	ldr	r0, [r7, #4]
 80094d2:	f7f9 f992 	bl	80027fa <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	2201      	movs	r2, #1
 80094da:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80094de:	2308      	movs	r3, #8
 80094e0:	2203      	movs	r2, #3
 80094e2:	2182      	movs	r1, #130	; 0x82
 80094e4:	6878      	ldr	r0, [r7, #4]
 80094e6:	f7f9 f988 	bl	80027fa <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	2201      	movs	r2, #1
 80094ee:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80094f0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80094f4:	f7f9 faa8 	bl	8002a48 <USBD_static_malloc>
 80094f8:	4602      	mov	r2, r0
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009506:	2b00      	cmp	r3, #0
 8009508:	d102      	bne.n	8009510 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800950a:	2301      	movs	r3, #1
 800950c:	73fb      	strb	r3, [r7, #15]
 800950e:	e026      	b.n	800955e <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009516:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8009522:	68bb      	ldr	r3, [r7, #8]
 8009524:	2200      	movs	r2, #0
 8009526:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800952a:	68bb      	ldr	r3, [r7, #8]
 800952c:	2200      	movs	r2, #0
 800952e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	7c1b      	ldrb	r3, [r3, #16]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d109      	bne.n	800954e <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800953a:	68bb      	ldr	r3, [r7, #8]
 800953c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009540:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009544:	2101      	movs	r1, #1
 8009546:	6878      	ldr	r0, [r7, #4]
 8009548:	f7f9 fa48 	bl	80029dc <USBD_LL_PrepareReceive>
 800954c:	e007      	b.n	800955e <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800954e:	68bb      	ldr	r3, [r7, #8]
 8009550:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009554:	2340      	movs	r3, #64	; 0x40
 8009556:	2101      	movs	r1, #1
 8009558:	6878      	ldr	r0, [r7, #4]
 800955a:	f7f9 fa3f 	bl	80029dc <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800955e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009560:	4618      	mov	r0, r3
 8009562:	3710      	adds	r7, #16
 8009564:	46bd      	mov	sp, r7
 8009566:	bd80      	pop	{r7, pc}

08009568 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b084      	sub	sp, #16
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
 8009570:	460b      	mov	r3, r1
 8009572:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009574:	2300      	movs	r3, #0
 8009576:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009578:	2181      	movs	r1, #129	; 0x81
 800957a:	6878      	ldr	r0, [r7, #4]
 800957c:	f7f9 f963 	bl	8002846 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2200      	movs	r2, #0
 8009584:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009586:	2101      	movs	r1, #1
 8009588:	6878      	ldr	r0, [r7, #4]
 800958a:	f7f9 f95c 	bl	8002846 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	2200      	movs	r2, #0
 8009592:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009596:	2182      	movs	r1, #130	; 0x82
 8009598:	6878      	ldr	r0, [r7, #4]
 800959a:	f7f9 f954 	bl	8002846 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2200      	movs	r2, #0
 80095a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d00e      	beq.n	80095cc <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80095b4:	685b      	ldr	r3, [r3, #4]
 80095b6:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095be:	4618      	mov	r0, r3
 80095c0:	f7f9 fa4e 	bl	8002a60 <USBD_static_free>
    pdev->pClassData = NULL;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2200      	movs	r2, #0
 80095c8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80095cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80095ce:	4618      	mov	r0, r3
 80095d0:	3710      	adds	r7, #16
 80095d2:	46bd      	mov	sp, r7
 80095d4:	bd80      	pop	{r7, pc}

080095d6 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80095d6:	b580      	push	{r7, lr}
 80095d8:	b086      	sub	sp, #24
 80095da:	af00      	add	r7, sp, #0
 80095dc:	6078      	str	r0, [r7, #4]
 80095de:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095e6:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80095e8:	2300      	movs	r3, #0
 80095ea:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80095ec:	2300      	movs	r3, #0
 80095ee:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80095f0:	2300      	movs	r3, #0
 80095f2:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	781b      	ldrb	r3, [r3, #0]
 80095f8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d039      	beq.n	8009674 <USBD_CDC_Setup+0x9e>
 8009600:	2b20      	cmp	r3, #32
 8009602:	d17f      	bne.n	8009704 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	88db      	ldrh	r3, [r3, #6]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d029      	beq.n	8009660 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	781b      	ldrb	r3, [r3, #0]
 8009610:	b25b      	sxtb	r3, r3
 8009612:	2b00      	cmp	r3, #0
 8009614:	da11      	bge.n	800963a <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800961c:	689b      	ldr	r3, [r3, #8]
 800961e:	683a      	ldr	r2, [r7, #0]
 8009620:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8009622:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009624:	683a      	ldr	r2, [r7, #0]
 8009626:	88d2      	ldrh	r2, [r2, #6]
 8009628:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800962a:	6939      	ldr	r1, [r7, #16]
 800962c:	683b      	ldr	r3, [r7, #0]
 800962e:	88db      	ldrh	r3, [r3, #6]
 8009630:	461a      	mov	r2, r3
 8009632:	6878      	ldr	r0, [r7, #4]
 8009634:	f001 fa23 	bl	800aa7e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8009638:	e06b      	b.n	8009712 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800963a:	683b      	ldr	r3, [r7, #0]
 800963c:	785a      	ldrb	r2, [r3, #1]
 800963e:	693b      	ldr	r3, [r7, #16]
 8009640:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	88db      	ldrh	r3, [r3, #6]
 8009648:	b2da      	uxtb	r2, r3
 800964a:	693b      	ldr	r3, [r7, #16]
 800964c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009650:	6939      	ldr	r1, [r7, #16]
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	88db      	ldrh	r3, [r3, #6]
 8009656:	461a      	mov	r2, r3
 8009658:	6878      	ldr	r0, [r7, #4]
 800965a:	f001 fa3e 	bl	800aada <USBD_CtlPrepareRx>
      break;
 800965e:	e058      	b.n	8009712 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009666:	689b      	ldr	r3, [r3, #8]
 8009668:	683a      	ldr	r2, [r7, #0]
 800966a:	7850      	ldrb	r0, [r2, #1]
 800966c:	2200      	movs	r2, #0
 800966e:	6839      	ldr	r1, [r7, #0]
 8009670:	4798      	blx	r3
      break;
 8009672:	e04e      	b.n	8009712 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009674:	683b      	ldr	r3, [r7, #0]
 8009676:	785b      	ldrb	r3, [r3, #1]
 8009678:	2b0b      	cmp	r3, #11
 800967a:	d02e      	beq.n	80096da <USBD_CDC_Setup+0x104>
 800967c:	2b0b      	cmp	r3, #11
 800967e:	dc38      	bgt.n	80096f2 <USBD_CDC_Setup+0x11c>
 8009680:	2b00      	cmp	r3, #0
 8009682:	d002      	beq.n	800968a <USBD_CDC_Setup+0xb4>
 8009684:	2b0a      	cmp	r3, #10
 8009686:	d014      	beq.n	80096b2 <USBD_CDC_Setup+0xdc>
 8009688:	e033      	b.n	80096f2 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009690:	2b03      	cmp	r3, #3
 8009692:	d107      	bne.n	80096a4 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8009694:	f107 030c 	add.w	r3, r7, #12
 8009698:	2202      	movs	r2, #2
 800969a:	4619      	mov	r1, r3
 800969c:	6878      	ldr	r0, [r7, #4]
 800969e:	f001 f9ee 	bl	800aa7e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80096a2:	e02e      	b.n	8009702 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80096a4:	6839      	ldr	r1, [r7, #0]
 80096a6:	6878      	ldr	r0, [r7, #4]
 80096a8:	f001 f97f 	bl	800a9aa <USBD_CtlError>
            ret = USBD_FAIL;
 80096ac:	2302      	movs	r3, #2
 80096ae:	75fb      	strb	r3, [r7, #23]
          break;
 80096b0:	e027      	b.n	8009702 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096b8:	2b03      	cmp	r3, #3
 80096ba:	d107      	bne.n	80096cc <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80096bc:	f107 030f 	add.w	r3, r7, #15
 80096c0:	2201      	movs	r2, #1
 80096c2:	4619      	mov	r1, r3
 80096c4:	6878      	ldr	r0, [r7, #4]
 80096c6:	f001 f9da 	bl	800aa7e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80096ca:	e01a      	b.n	8009702 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80096cc:	6839      	ldr	r1, [r7, #0]
 80096ce:	6878      	ldr	r0, [r7, #4]
 80096d0:	f001 f96b 	bl	800a9aa <USBD_CtlError>
            ret = USBD_FAIL;
 80096d4:	2302      	movs	r3, #2
 80096d6:	75fb      	strb	r3, [r7, #23]
          break;
 80096d8:	e013      	b.n	8009702 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096e0:	2b03      	cmp	r3, #3
 80096e2:	d00d      	beq.n	8009700 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80096e4:	6839      	ldr	r1, [r7, #0]
 80096e6:	6878      	ldr	r0, [r7, #4]
 80096e8:	f001 f95f 	bl	800a9aa <USBD_CtlError>
            ret = USBD_FAIL;
 80096ec:	2302      	movs	r3, #2
 80096ee:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80096f0:	e006      	b.n	8009700 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80096f2:	6839      	ldr	r1, [r7, #0]
 80096f4:	6878      	ldr	r0, [r7, #4]
 80096f6:	f001 f958 	bl	800a9aa <USBD_CtlError>
          ret = USBD_FAIL;
 80096fa:	2302      	movs	r3, #2
 80096fc:	75fb      	strb	r3, [r7, #23]
          break;
 80096fe:	e000      	b.n	8009702 <USBD_CDC_Setup+0x12c>
          break;
 8009700:	bf00      	nop
      }
      break;
 8009702:	e006      	b.n	8009712 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009704:	6839      	ldr	r1, [r7, #0]
 8009706:	6878      	ldr	r0, [r7, #4]
 8009708:	f001 f94f 	bl	800a9aa <USBD_CtlError>
      ret = USBD_FAIL;
 800970c:	2302      	movs	r3, #2
 800970e:	75fb      	strb	r3, [r7, #23]
      break;
 8009710:	bf00      	nop
  }

  return ret;
 8009712:	7dfb      	ldrb	r3, [r7, #23]
}
 8009714:	4618      	mov	r0, r3
 8009716:	3718      	adds	r7, #24
 8009718:	46bd      	mov	sp, r7
 800971a:	bd80      	pop	{r7, pc}

0800971c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800971c:	b580      	push	{r7, lr}
 800971e:	b084      	sub	sp, #16
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
 8009724:	460b      	mov	r3, r1
 8009726:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800972e:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009736:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800973e:	2b00      	cmp	r3, #0
 8009740:	d03a      	beq.n	80097b8 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009742:	78fa      	ldrb	r2, [r7, #3]
 8009744:	6879      	ldr	r1, [r7, #4]
 8009746:	4613      	mov	r3, r2
 8009748:	009b      	lsls	r3, r3, #2
 800974a:	4413      	add	r3, r2
 800974c:	009b      	lsls	r3, r3, #2
 800974e:	440b      	add	r3, r1
 8009750:	331c      	adds	r3, #28
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d029      	beq.n	80097ac <USBD_CDC_DataIn+0x90>
 8009758:	78fa      	ldrb	r2, [r7, #3]
 800975a:	6879      	ldr	r1, [r7, #4]
 800975c:	4613      	mov	r3, r2
 800975e:	009b      	lsls	r3, r3, #2
 8009760:	4413      	add	r3, r2
 8009762:	009b      	lsls	r3, r3, #2
 8009764:	440b      	add	r3, r1
 8009766:	331c      	adds	r3, #28
 8009768:	681a      	ldr	r2, [r3, #0]
 800976a:	78f9      	ldrb	r1, [r7, #3]
 800976c:	68b8      	ldr	r0, [r7, #8]
 800976e:	460b      	mov	r3, r1
 8009770:	009b      	lsls	r3, r3, #2
 8009772:	440b      	add	r3, r1
 8009774:	00db      	lsls	r3, r3, #3
 8009776:	4403      	add	r3, r0
 8009778:	3338      	adds	r3, #56	; 0x38
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	fbb2 f1f3 	udiv	r1, r2, r3
 8009780:	fb01 f303 	mul.w	r3, r1, r3
 8009784:	1ad3      	subs	r3, r2, r3
 8009786:	2b00      	cmp	r3, #0
 8009788:	d110      	bne.n	80097ac <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800978a:	78fa      	ldrb	r2, [r7, #3]
 800978c:	6879      	ldr	r1, [r7, #4]
 800978e:	4613      	mov	r3, r2
 8009790:	009b      	lsls	r3, r3, #2
 8009792:	4413      	add	r3, r2
 8009794:	009b      	lsls	r3, r3, #2
 8009796:	440b      	add	r3, r1
 8009798:	331c      	adds	r3, #28
 800979a:	2200      	movs	r2, #0
 800979c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800979e:	78f9      	ldrb	r1, [r7, #3]
 80097a0:	2300      	movs	r3, #0
 80097a2:	2200      	movs	r2, #0
 80097a4:	6878      	ldr	r0, [r7, #4]
 80097a6:	f7f9 f8f6 	bl	8002996 <USBD_LL_Transmit>
 80097aa:	e003      	b.n	80097b4 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	2200      	movs	r2, #0
 80097b0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80097b4:	2300      	movs	r3, #0
 80097b6:	e000      	b.n	80097ba <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80097b8:	2302      	movs	r3, #2
  }
}
 80097ba:	4618      	mov	r0, r3
 80097bc:	3710      	adds	r7, #16
 80097be:	46bd      	mov	sp, r7
 80097c0:	bd80      	pop	{r7, pc}

080097c2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80097c2:	b580      	push	{r7, lr}
 80097c4:	b084      	sub	sp, #16
 80097c6:	af00      	add	r7, sp, #0
 80097c8:	6078      	str	r0, [r7, #4]
 80097ca:	460b      	mov	r3, r1
 80097cc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097d4:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80097d6:	78fb      	ldrb	r3, [r7, #3]
 80097d8:	4619      	mov	r1, r3
 80097da:	6878      	ldr	r0, [r7, #4]
 80097dc:	f7f9 f921 	bl	8002a22 <USBD_LL_GetRxDataSize>
 80097e0:	4602      	mov	r2, r0
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d00d      	beq.n	800980e <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80097f8:	68db      	ldr	r3, [r3, #12]
 80097fa:	68fa      	ldr	r2, [r7, #12]
 80097fc:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009800:	68fa      	ldr	r2, [r7, #12]
 8009802:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009806:	4611      	mov	r1, r2
 8009808:	4798      	blx	r3

    return USBD_OK;
 800980a:	2300      	movs	r3, #0
 800980c:	e000      	b.n	8009810 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800980e:	2302      	movs	r3, #2
  }
}
 8009810:	4618      	mov	r0, r3
 8009812:	3710      	adds	r7, #16
 8009814:	46bd      	mov	sp, r7
 8009816:	bd80      	pop	{r7, pc}

08009818 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b084      	sub	sp, #16
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009826:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800982e:	2b00      	cmp	r3, #0
 8009830:	d015      	beq.n	800985e <USBD_CDC_EP0_RxReady+0x46>
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009838:	2bff      	cmp	r3, #255	; 0xff
 800983a:	d010      	beq.n	800985e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009842:	689b      	ldr	r3, [r3, #8]
 8009844:	68fa      	ldr	r2, [r7, #12]
 8009846:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800984a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800984c:	68fa      	ldr	r2, [r7, #12]
 800984e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009852:	b292      	uxth	r2, r2
 8009854:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	22ff      	movs	r2, #255	; 0xff
 800985a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800985e:	2300      	movs	r3, #0
}
 8009860:	4618      	mov	r0, r3
 8009862:	3710      	adds	r7, #16
 8009864:	46bd      	mov	sp, r7
 8009866:	bd80      	pop	{r7, pc}

08009868 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009868:	b480      	push	{r7}
 800986a:	b083      	sub	sp, #12
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2243      	movs	r2, #67	; 0x43
 8009874:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8009876:	4b03      	ldr	r3, [pc, #12]	; (8009884 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009878:	4618      	mov	r0, r3
 800987a:	370c      	adds	r7, #12
 800987c:	46bd      	mov	sp, r7
 800987e:	bc80      	pop	{r7}
 8009880:	4770      	bx	lr
 8009882:	bf00      	nop
 8009884:	20000100 	.word	0x20000100

08009888 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009888:	b480      	push	{r7}
 800988a:	b083      	sub	sp, #12
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	2243      	movs	r2, #67	; 0x43
 8009894:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8009896:	4b03      	ldr	r3, [pc, #12]	; (80098a4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009898:	4618      	mov	r0, r3
 800989a:	370c      	adds	r7, #12
 800989c:	46bd      	mov	sp, r7
 800989e:	bc80      	pop	{r7}
 80098a0:	4770      	bx	lr
 80098a2:	bf00      	nop
 80098a4:	200000bc 	.word	0x200000bc

080098a8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80098a8:	b480      	push	{r7}
 80098aa:	b083      	sub	sp, #12
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2243      	movs	r2, #67	; 0x43
 80098b4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80098b6:	4b03      	ldr	r3, [pc, #12]	; (80098c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80098b8:	4618      	mov	r0, r3
 80098ba:	370c      	adds	r7, #12
 80098bc:	46bd      	mov	sp, r7
 80098be:	bc80      	pop	{r7}
 80098c0:	4770      	bx	lr
 80098c2:	bf00      	nop
 80098c4:	20000144 	.word	0x20000144

080098c8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80098c8:	b480      	push	{r7}
 80098ca:	b083      	sub	sp, #12
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	220a      	movs	r2, #10
 80098d4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80098d6:	4b03      	ldr	r3, [pc, #12]	; (80098e4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80098d8:	4618      	mov	r0, r3
 80098da:	370c      	adds	r7, #12
 80098dc:	46bd      	mov	sp, r7
 80098de:	bc80      	pop	{r7}
 80098e0:	4770      	bx	lr
 80098e2:	bf00      	nop
 80098e4:	20000078 	.word	0x20000078

080098e8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80098e8:	b480      	push	{r7}
 80098ea:	b085      	sub	sp, #20
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
 80098f0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80098f2:	2302      	movs	r3, #2
 80098f4:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d005      	beq.n	8009908 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	683a      	ldr	r2, [r7, #0]
 8009900:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8009904:	2300      	movs	r3, #0
 8009906:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009908:	7bfb      	ldrb	r3, [r7, #15]
}
 800990a:	4618      	mov	r0, r3
 800990c:	3714      	adds	r7, #20
 800990e:	46bd      	mov	sp, r7
 8009910:	bc80      	pop	{r7}
 8009912:	4770      	bx	lr

08009914 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8009914:	b480      	push	{r7}
 8009916:	b087      	sub	sp, #28
 8009918:	af00      	add	r7, sp, #0
 800991a:	60f8      	str	r0, [r7, #12]
 800991c:	60b9      	str	r1, [r7, #8]
 800991e:	4613      	mov	r3, r2
 8009920:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009928:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800992a:	697b      	ldr	r3, [r7, #20]
 800992c:	68ba      	ldr	r2, [r7, #8]
 800992e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009932:	88fa      	ldrh	r2, [r7, #6]
 8009934:	697b      	ldr	r3, [r7, #20]
 8009936:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800993a:	2300      	movs	r3, #0
}
 800993c:	4618      	mov	r0, r3
 800993e:	371c      	adds	r7, #28
 8009940:	46bd      	mov	sp, r7
 8009942:	bc80      	pop	{r7}
 8009944:	4770      	bx	lr

08009946 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8009946:	b480      	push	{r7}
 8009948:	b085      	sub	sp, #20
 800994a:	af00      	add	r7, sp, #0
 800994c:	6078      	str	r0, [r7, #4]
 800994e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009956:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	683a      	ldr	r2, [r7, #0]
 800995c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8009960:	2300      	movs	r3, #0
}
 8009962:	4618      	mov	r0, r3
 8009964:	3714      	adds	r7, #20
 8009966:	46bd      	mov	sp, r7
 8009968:	bc80      	pop	{r7}
 800996a:	4770      	bx	lr

0800996c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b084      	sub	sp, #16
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800997a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009982:	2b00      	cmp	r3, #0
 8009984:	d01c      	beq.n	80099c0 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800998c:	2b00      	cmp	r3, #0
 800998e:	d115      	bne.n	80099bc <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	2201      	movs	r2, #1
 8009994:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80099ae:	b29b      	uxth	r3, r3
 80099b0:	2181      	movs	r1, #129	; 0x81
 80099b2:	6878      	ldr	r0, [r7, #4]
 80099b4:	f7f8 ffef 	bl	8002996 <USBD_LL_Transmit>

      return USBD_OK;
 80099b8:	2300      	movs	r3, #0
 80099ba:	e002      	b.n	80099c2 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80099bc:	2301      	movs	r3, #1
 80099be:	e000      	b.n	80099c2 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80099c0:	2302      	movs	r3, #2
  }
}
 80099c2:	4618      	mov	r0, r3
 80099c4:	3710      	adds	r7, #16
 80099c6:	46bd      	mov	sp, r7
 80099c8:	bd80      	pop	{r7, pc}

080099ca <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80099ca:	b580      	push	{r7, lr}
 80099cc:	b084      	sub	sp, #16
 80099ce:	af00      	add	r7, sp, #0
 80099d0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80099d8:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d017      	beq.n	8009a14 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	7c1b      	ldrb	r3, [r3, #16]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d109      	bne.n	8009a00 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80099f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80099f6:	2101      	movs	r1, #1
 80099f8:	6878      	ldr	r0, [r7, #4]
 80099fa:	f7f8 ffef 	bl	80029dc <USBD_LL_PrepareReceive>
 80099fe:	e007      	b.n	8009a10 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009a06:	2340      	movs	r3, #64	; 0x40
 8009a08:	2101      	movs	r1, #1
 8009a0a:	6878      	ldr	r0, [r7, #4]
 8009a0c:	f7f8 ffe6 	bl	80029dc <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8009a10:	2300      	movs	r3, #0
 8009a12:	e000      	b.n	8009a16 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8009a14:	2302      	movs	r3, #2
  }
}
 8009a16:	4618      	mov	r0, r3
 8009a18:	3710      	adds	r7, #16
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bd80      	pop	{r7, pc}
	...

08009a20 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b084      	sub	sp, #16
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	60f8      	str	r0, [r7, #12]
 8009a28:	60b9      	str	r1, [r7, #8]
 8009a2a:	4613      	mov	r3, r2
 8009a2c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d10a      	bne.n	8009a4a <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 8009a34:	4814      	ldr	r0, [pc, #80]	; (8009a88 <USBD_Init+0x68>)
 8009a36:	f001 fd39 	bl	800b4ac <iprintf>
 8009a3a:	4814      	ldr	r0, [pc, #80]	; (8009a8c <USBD_Init+0x6c>)
 8009a3c:	f001 fd36 	bl	800b4ac <iprintf>
 8009a40:	200a      	movs	r0, #10
 8009a42:	f001 fd4b 	bl	800b4dc <putchar>
#endif
    return USBD_FAIL;
 8009a46:	2302      	movs	r3, #2
 8009a48:	e01a      	b.n	8009a80 <USBD_Init+0x60>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d003      	beq.n	8009a5c <USBD_Init+0x3c>
  {
    pdev->pClass = NULL;
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	2200      	movs	r2, #0
 8009a58:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009a5c:	68bb      	ldr	r3, [r7, #8]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d003      	beq.n	8009a6a <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	68ba      	ldr	r2, [r7, #8]
 8009a66:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	2201      	movs	r2, #1
 8009a6e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	79fa      	ldrb	r2, [r7, #7]
 8009a76:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8009a78:	68f8      	ldr	r0, [r7, #12]
 8009a7a:	f7f8 fe49 	bl	8002710 <USBD_LL_Init>

  return USBD_OK;
 8009a7e:	2300      	movs	r3, #0
}
 8009a80:	4618      	mov	r0, r3
 8009a82:	3710      	adds	r7, #16
 8009a84:	46bd      	mov	sp, r7
 8009a86:	bd80      	pop	{r7, pc}
 8009a88:	0800db30 	.word	0x0800db30
 8009a8c:	0800db38 	.word	0x0800db38

08009a90 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b084      	sub	sp, #16
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
 8009a98:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8009a9e:	683b      	ldr	r3, [r7, #0]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d006      	beq.n	8009ab2 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	683a      	ldr	r2, [r7, #0]
 8009aa8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8009aac:	2300      	movs	r3, #0
 8009aae:	73fb      	strb	r3, [r7, #15]
 8009ab0:	e00a      	b.n	8009ac8 <USBD_RegisterClass+0x38>
  }
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 8009ab2:	4808      	ldr	r0, [pc, #32]	; (8009ad4 <USBD_RegisterClass+0x44>)
 8009ab4:	f001 fcfa 	bl	800b4ac <iprintf>
 8009ab8:	4807      	ldr	r0, [pc, #28]	; (8009ad8 <USBD_RegisterClass+0x48>)
 8009aba:	f001 fcf7 	bl	800b4ac <iprintf>
 8009abe:	200a      	movs	r0, #10
 8009ac0:	f001 fd0c 	bl	800b4dc <putchar>
#endif
    status = USBD_FAIL;
 8009ac4:	2302      	movs	r3, #2
 8009ac6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009aca:	4618      	mov	r0, r3
 8009acc:	3710      	adds	r7, #16
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	bd80      	pop	{r7, pc}
 8009ad2:	bf00      	nop
 8009ad4:	0800db30 	.word	0x0800db30
 8009ad8:	0800db50 	.word	0x0800db50

08009adc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b082      	sub	sp, #8
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8009ae4:	6878      	ldr	r0, [r7, #4]
 8009ae6:	f7f8 fe6d 	bl	80027c4 <USBD_LL_Start>

  return USBD_OK;
 8009aea:	2300      	movs	r3, #0
}
 8009aec:	4618      	mov	r0, r3
 8009aee:	3708      	adds	r7, #8
 8009af0:	46bd      	mov	sp, r7
 8009af2:	bd80      	pop	{r7, pc}

08009af4 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009af4:	b480      	push	{r7}
 8009af6:	b083      	sub	sp, #12
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009afc:	2300      	movs	r3, #0
}
 8009afe:	4618      	mov	r0, r3
 8009b00:	370c      	adds	r7, #12
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bc80      	pop	{r7}
 8009b06:	4770      	bx	lr

08009b08 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b084      	sub	sp, #16
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
 8009b10:	460b      	mov	r3, r1
 8009b12:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009b14:	2302      	movs	r3, #2
 8009b16:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d00c      	beq.n	8009b3c <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	78fa      	ldrb	r2, [r7, #3]
 8009b2c:	4611      	mov	r1, r2
 8009b2e:	6878      	ldr	r0, [r7, #4]
 8009b30:	4798      	blx	r3
 8009b32:	4603      	mov	r3, r0
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d101      	bne.n	8009b3c <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8009b38:	2300      	movs	r3, #0
 8009b3a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8009b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b3e:	4618      	mov	r0, r3
 8009b40:	3710      	adds	r7, #16
 8009b42:	46bd      	mov	sp, r7
 8009b44:	bd80      	pop	{r7, pc}

08009b46 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009b46:	b580      	push	{r7, lr}
 8009b48:	b082      	sub	sp, #8
 8009b4a:	af00      	add	r7, sp, #0
 8009b4c:	6078      	str	r0, [r7, #4]
 8009b4e:	460b      	mov	r3, r1
 8009b50:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b58:	685b      	ldr	r3, [r3, #4]
 8009b5a:	78fa      	ldrb	r2, [r7, #3]
 8009b5c:	4611      	mov	r1, r2
 8009b5e:	6878      	ldr	r0, [r7, #4]
 8009b60:	4798      	blx	r3

  return USBD_OK;
 8009b62:	2300      	movs	r3, #0
}
 8009b64:	4618      	mov	r0, r3
 8009b66:	3708      	adds	r7, #8
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	bd80      	pop	{r7, pc}

08009b6c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b082      	sub	sp, #8
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
 8009b74:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009b7c:	6839      	ldr	r1, [r7, #0]
 8009b7e:	4618      	mov	r0, r3
 8009b80:	f000 fed7 	bl	800a932 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2201      	movs	r2, #1
 8009b88:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009b92:	461a      	mov	r2, r3
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009ba0:	f003 031f 	and.w	r3, r3, #31
 8009ba4:	2b02      	cmp	r3, #2
 8009ba6:	d016      	beq.n	8009bd6 <USBD_LL_SetupStage+0x6a>
 8009ba8:	2b02      	cmp	r3, #2
 8009baa:	d81c      	bhi.n	8009be6 <USBD_LL_SetupStage+0x7a>
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d002      	beq.n	8009bb6 <USBD_LL_SetupStage+0x4a>
 8009bb0:	2b01      	cmp	r3, #1
 8009bb2:	d008      	beq.n	8009bc6 <USBD_LL_SetupStage+0x5a>
 8009bb4:	e017      	b.n	8009be6 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009bbc:	4619      	mov	r1, r3
 8009bbe:	6878      	ldr	r0, [r7, #4]
 8009bc0:	f000 f9ca 	bl	8009f58 <USBD_StdDevReq>
      break;
 8009bc4:	e01a      	b.n	8009bfc <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009bcc:	4619      	mov	r1, r3
 8009bce:	6878      	ldr	r0, [r7, #4]
 8009bd0:	f000 fa2c 	bl	800a02c <USBD_StdItfReq>
      break;
 8009bd4:	e012      	b.n	8009bfc <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009bdc:	4619      	mov	r1, r3
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	f000 fa6c 	bl	800a0bc <USBD_StdEPReq>
      break;
 8009be4:	e00a      	b.n	8009bfc <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009bec:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009bf0:	b2db      	uxtb	r3, r3
 8009bf2:	4619      	mov	r1, r3
 8009bf4:	6878      	ldr	r0, [r7, #4]
 8009bf6:	f7f8 fe45 	bl	8002884 <USBD_LL_StallEP>
      break;
 8009bfa:	bf00      	nop
  }

  return USBD_OK;
 8009bfc:	2300      	movs	r3, #0
}
 8009bfe:	4618      	mov	r0, r3
 8009c00:	3708      	adds	r7, #8
 8009c02:	46bd      	mov	sp, r7
 8009c04:	bd80      	pop	{r7, pc}

08009c06 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009c06:	b580      	push	{r7, lr}
 8009c08:	b086      	sub	sp, #24
 8009c0a:	af00      	add	r7, sp, #0
 8009c0c:	60f8      	str	r0, [r7, #12]
 8009c0e:	460b      	mov	r3, r1
 8009c10:	607a      	str	r2, [r7, #4]
 8009c12:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009c14:	7afb      	ldrb	r3, [r7, #11]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d14b      	bne.n	8009cb2 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009c20:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009c28:	2b03      	cmp	r3, #3
 8009c2a:	d134      	bne.n	8009c96 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8009c2c:	697b      	ldr	r3, [r7, #20]
 8009c2e:	68da      	ldr	r2, [r3, #12]
 8009c30:	697b      	ldr	r3, [r7, #20]
 8009c32:	691b      	ldr	r3, [r3, #16]
 8009c34:	429a      	cmp	r2, r3
 8009c36:	d919      	bls.n	8009c6c <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8009c38:	697b      	ldr	r3, [r7, #20]
 8009c3a:	68da      	ldr	r2, [r3, #12]
 8009c3c:	697b      	ldr	r3, [r7, #20]
 8009c3e:	691b      	ldr	r3, [r3, #16]
 8009c40:	1ad2      	subs	r2, r2, r3
 8009c42:	697b      	ldr	r3, [r7, #20]
 8009c44:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009c46:	697b      	ldr	r3, [r7, #20]
 8009c48:	68da      	ldr	r2, [r3, #12]
 8009c4a:	697b      	ldr	r3, [r7, #20]
 8009c4c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009c4e:	429a      	cmp	r2, r3
 8009c50:	d203      	bcs.n	8009c5a <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009c52:	697b      	ldr	r3, [r7, #20]
 8009c54:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8009c56:	b29b      	uxth	r3, r3
 8009c58:	e002      	b.n	8009c60 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009c5a:	697b      	ldr	r3, [r7, #20]
 8009c5c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009c5e:	b29b      	uxth	r3, r3
 8009c60:	461a      	mov	r2, r3
 8009c62:	6879      	ldr	r1, [r7, #4]
 8009c64:	68f8      	ldr	r0, [r7, #12]
 8009c66:	f000 ff56 	bl	800ab16 <USBD_CtlContinueRx>
 8009c6a:	e038      	b.n	8009cde <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c72:	691b      	ldr	r3, [r3, #16]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d00a      	beq.n	8009c8e <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009c7e:	2b03      	cmp	r3, #3
 8009c80:	d105      	bne.n	8009c8e <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c88:	691b      	ldr	r3, [r3, #16]
 8009c8a:	68f8      	ldr	r0, [r7, #12]
 8009c8c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8009c8e:	68f8      	ldr	r0, [r7, #12]
 8009c90:	f000 ff53 	bl	800ab3a <USBD_CtlSendStatus>
 8009c94:	e023      	b.n	8009cde <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009c9c:	2b05      	cmp	r3, #5
 8009c9e:	d11e      	bne.n	8009cde <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8009ca8:	2100      	movs	r1, #0
 8009caa:	68f8      	ldr	r0, [r7, #12]
 8009cac:	f7f8 fdea 	bl	8002884 <USBD_LL_StallEP>
 8009cb0:	e015      	b.n	8009cde <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009cb8:	699b      	ldr	r3, [r3, #24]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d00d      	beq.n	8009cda <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8009cc4:	2b03      	cmp	r3, #3
 8009cc6:	d108      	bne.n	8009cda <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009cce:	699b      	ldr	r3, [r3, #24]
 8009cd0:	7afa      	ldrb	r2, [r7, #11]
 8009cd2:	4611      	mov	r1, r2
 8009cd4:	68f8      	ldr	r0, [r7, #12]
 8009cd6:	4798      	blx	r3
 8009cd8:	e001      	b.n	8009cde <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009cda:	2302      	movs	r3, #2
 8009cdc:	e000      	b.n	8009ce0 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8009cde:	2300      	movs	r3, #0
}
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	3718      	adds	r7, #24
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	bd80      	pop	{r7, pc}

08009ce8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b086      	sub	sp, #24
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	60f8      	str	r0, [r7, #12]
 8009cf0:	460b      	mov	r3, r1
 8009cf2:	607a      	str	r2, [r7, #4]
 8009cf4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009cf6:	7afb      	ldrb	r3, [r7, #11]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d17f      	bne.n	8009dfc <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	3314      	adds	r3, #20
 8009d00:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009d08:	2b02      	cmp	r3, #2
 8009d0a:	d15c      	bne.n	8009dc6 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8009d0c:	697b      	ldr	r3, [r7, #20]
 8009d0e:	68da      	ldr	r2, [r3, #12]
 8009d10:	697b      	ldr	r3, [r7, #20]
 8009d12:	691b      	ldr	r3, [r3, #16]
 8009d14:	429a      	cmp	r2, r3
 8009d16:	d915      	bls.n	8009d44 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8009d18:	697b      	ldr	r3, [r7, #20]
 8009d1a:	68da      	ldr	r2, [r3, #12]
 8009d1c:	697b      	ldr	r3, [r7, #20]
 8009d1e:	691b      	ldr	r3, [r3, #16]
 8009d20:	1ad2      	subs	r2, r2, r3
 8009d22:	697b      	ldr	r3, [r7, #20]
 8009d24:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8009d26:	697b      	ldr	r3, [r7, #20]
 8009d28:	68db      	ldr	r3, [r3, #12]
 8009d2a:	b29b      	uxth	r3, r3
 8009d2c:	461a      	mov	r2, r3
 8009d2e:	6879      	ldr	r1, [r7, #4]
 8009d30:	68f8      	ldr	r0, [r7, #12]
 8009d32:	f000 fec0 	bl	800aab6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009d36:	2300      	movs	r3, #0
 8009d38:	2200      	movs	r2, #0
 8009d3a:	2100      	movs	r1, #0
 8009d3c:	68f8      	ldr	r0, [r7, #12]
 8009d3e:	f7f8 fe4d 	bl	80029dc <USBD_LL_PrepareReceive>
 8009d42:	e04e      	b.n	8009de2 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009d44:	697b      	ldr	r3, [r7, #20]
 8009d46:	689b      	ldr	r3, [r3, #8]
 8009d48:	697a      	ldr	r2, [r7, #20]
 8009d4a:	6912      	ldr	r2, [r2, #16]
 8009d4c:	fbb3 f1f2 	udiv	r1, r3, r2
 8009d50:	fb01 f202 	mul.w	r2, r1, r2
 8009d54:	1a9b      	subs	r3, r3, r2
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d11c      	bne.n	8009d94 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8009d5a:	697b      	ldr	r3, [r7, #20]
 8009d5c:	689a      	ldr	r2, [r3, #8]
 8009d5e:	697b      	ldr	r3, [r7, #20]
 8009d60:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009d62:	429a      	cmp	r2, r3
 8009d64:	d316      	bcc.n	8009d94 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8009d66:	697b      	ldr	r3, [r7, #20]
 8009d68:	689a      	ldr	r2, [r3, #8]
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009d70:	429a      	cmp	r2, r3
 8009d72:	d20f      	bcs.n	8009d94 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009d74:	2200      	movs	r2, #0
 8009d76:	2100      	movs	r1, #0
 8009d78:	68f8      	ldr	r0, [r7, #12]
 8009d7a:	f000 fe9c 	bl	800aab6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	2200      	movs	r2, #0
 8009d82:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009d86:	2300      	movs	r3, #0
 8009d88:	2200      	movs	r2, #0
 8009d8a:	2100      	movs	r1, #0
 8009d8c:	68f8      	ldr	r0, [r7, #12]
 8009d8e:	f7f8 fe25 	bl	80029dc <USBD_LL_PrepareReceive>
 8009d92:	e026      	b.n	8009de2 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d9a:	68db      	ldr	r3, [r3, #12]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d00a      	beq.n	8009db6 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009da6:	2b03      	cmp	r3, #3
 8009da8:	d105      	bne.n	8009db6 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009db0:	68db      	ldr	r3, [r3, #12]
 8009db2:	68f8      	ldr	r0, [r7, #12]
 8009db4:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8009db6:	2180      	movs	r1, #128	; 0x80
 8009db8:	68f8      	ldr	r0, [r7, #12]
 8009dba:	f7f8 fd63 	bl	8002884 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8009dbe:	68f8      	ldr	r0, [r7, #12]
 8009dc0:	f000 fece 	bl	800ab60 <USBD_CtlReceiveStatus>
 8009dc4:	e00d      	b.n	8009de2 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009dcc:	2b04      	cmp	r3, #4
 8009dce:	d004      	beq.n	8009dda <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d103      	bne.n	8009de2 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8009dda:	2180      	movs	r1, #128	; 0x80
 8009ddc:	68f8      	ldr	r0, [r7, #12]
 8009dde:	f7f8 fd51 	bl	8002884 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009de8:	2b01      	cmp	r3, #1
 8009dea:	d11d      	bne.n	8009e28 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8009dec:	68f8      	ldr	r0, [r7, #12]
 8009dee:	f7ff fe81 	bl	8009af4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	2200      	movs	r2, #0
 8009df6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009dfa:	e015      	b.n	8009e28 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e02:	695b      	ldr	r3, [r3, #20]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d00d      	beq.n	8009e24 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009e0e:	2b03      	cmp	r3, #3
 8009e10:	d108      	bne.n	8009e24 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e18:	695b      	ldr	r3, [r3, #20]
 8009e1a:	7afa      	ldrb	r2, [r7, #11]
 8009e1c:	4611      	mov	r1, r2
 8009e1e:	68f8      	ldr	r0, [r7, #12]
 8009e20:	4798      	blx	r3
 8009e22:	e001      	b.n	8009e28 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009e24:	2302      	movs	r3, #2
 8009e26:	e000      	b.n	8009e2a <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8009e28:	2300      	movs	r3, #0
}
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	3718      	adds	r7, #24
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	bd80      	pop	{r7, pc}

08009e32 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009e32:	b580      	push	{r7, lr}
 8009e34:	b082      	sub	sp, #8
 8009e36:	af00      	add	r7, sp, #0
 8009e38:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009e3a:	2340      	movs	r3, #64	; 0x40
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	2100      	movs	r1, #0
 8009e40:	6878      	ldr	r0, [r7, #4]
 8009e42:	f7f8 fcda 	bl	80027fa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	2201      	movs	r2, #1
 8009e4a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	2240      	movs	r2, #64	; 0x40
 8009e52:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009e56:	2340      	movs	r3, #64	; 0x40
 8009e58:	2200      	movs	r2, #0
 8009e5a:	2180      	movs	r1, #128	; 0x80
 8009e5c:	6878      	ldr	r0, [r7, #4]
 8009e5e:	f7f8 fccc 	bl	80027fa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	2201      	movs	r2, #1
 8009e66:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2240      	movs	r2, #64	; 0x40
 8009e6c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	2201      	movs	r2, #1
 8009e72:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	2200      	movs	r2, #0
 8009e7a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	2200      	movs	r2, #0
 8009e82:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2200      	movs	r2, #0
 8009e88:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d009      	beq.n	8009eaa <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e9c:	685b      	ldr	r3, [r3, #4]
 8009e9e:	687a      	ldr	r2, [r7, #4]
 8009ea0:	6852      	ldr	r2, [r2, #4]
 8009ea2:	b2d2      	uxtb	r2, r2
 8009ea4:	4611      	mov	r1, r2
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	4798      	blx	r3
  }

  return USBD_OK;
 8009eaa:	2300      	movs	r3, #0
}
 8009eac:	4618      	mov	r0, r3
 8009eae:	3708      	adds	r7, #8
 8009eb0:	46bd      	mov	sp, r7
 8009eb2:	bd80      	pop	{r7, pc}

08009eb4 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009eb4:	b480      	push	{r7}
 8009eb6:	b083      	sub	sp, #12
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
 8009ebc:	460b      	mov	r3, r1
 8009ebe:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	78fa      	ldrb	r2, [r7, #3]
 8009ec4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009ec6:	2300      	movs	r3, #0
}
 8009ec8:	4618      	mov	r0, r3
 8009eca:	370c      	adds	r7, #12
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	bc80      	pop	{r7}
 8009ed0:	4770      	bx	lr

08009ed2 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009ed2:	b480      	push	{r7}
 8009ed4:	b083      	sub	sp, #12
 8009ed6:	af00      	add	r7, sp, #0
 8009ed8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	2204      	movs	r2, #4
 8009eea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009eee:	2300      	movs	r3, #0
}
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	370c      	adds	r7, #12
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	bc80      	pop	{r7}
 8009ef8:	4770      	bx	lr

08009efa <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009efa:	b480      	push	{r7}
 8009efc:	b083      	sub	sp, #12
 8009efe:	af00      	add	r7, sp, #0
 8009f00:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f08:	2b04      	cmp	r3, #4
 8009f0a:	d105      	bne.n	8009f18 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009f18:	2300      	movs	r3, #0
}
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	370c      	adds	r7, #12
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	bc80      	pop	{r7}
 8009f22:	4770      	bx	lr

08009f24 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b082      	sub	sp, #8
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f32:	2b03      	cmp	r3, #3
 8009f34:	d10b      	bne.n	8009f4e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f3c:	69db      	ldr	r3, [r3, #28]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d005      	beq.n	8009f4e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f48:	69db      	ldr	r3, [r3, #28]
 8009f4a:	6878      	ldr	r0, [r7, #4]
 8009f4c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009f4e:	2300      	movs	r3, #0
}
 8009f50:	4618      	mov	r0, r3
 8009f52:	3708      	adds	r7, #8
 8009f54:	46bd      	mov	sp, r7
 8009f56:	bd80      	pop	{r7, pc}

08009f58 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b084      	sub	sp, #16
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]
 8009f60:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009f62:	2300      	movs	r3, #0
 8009f64:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009f66:	683b      	ldr	r3, [r7, #0]
 8009f68:	781b      	ldrb	r3, [r3, #0]
 8009f6a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009f6e:	2b40      	cmp	r3, #64	; 0x40
 8009f70:	d005      	beq.n	8009f7e <USBD_StdDevReq+0x26>
 8009f72:	2b40      	cmp	r3, #64	; 0x40
 8009f74:	d84f      	bhi.n	800a016 <USBD_StdDevReq+0xbe>
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d009      	beq.n	8009f8e <USBD_StdDevReq+0x36>
 8009f7a:	2b20      	cmp	r3, #32
 8009f7c:	d14b      	bne.n	800a016 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f84:	689b      	ldr	r3, [r3, #8]
 8009f86:	6839      	ldr	r1, [r7, #0]
 8009f88:	6878      	ldr	r0, [r7, #4]
 8009f8a:	4798      	blx	r3
      break;
 8009f8c:	e048      	b.n	800a020 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009f8e:	683b      	ldr	r3, [r7, #0]
 8009f90:	785b      	ldrb	r3, [r3, #1]
 8009f92:	2b09      	cmp	r3, #9
 8009f94:	d839      	bhi.n	800a00a <USBD_StdDevReq+0xb2>
 8009f96:	a201      	add	r2, pc, #4	; (adr r2, 8009f9c <USBD_StdDevReq+0x44>)
 8009f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f9c:	08009fed 	.word	0x08009fed
 8009fa0:	0800a001 	.word	0x0800a001
 8009fa4:	0800a00b 	.word	0x0800a00b
 8009fa8:	08009ff7 	.word	0x08009ff7
 8009fac:	0800a00b 	.word	0x0800a00b
 8009fb0:	08009fcf 	.word	0x08009fcf
 8009fb4:	08009fc5 	.word	0x08009fc5
 8009fb8:	0800a00b 	.word	0x0800a00b
 8009fbc:	08009fe3 	.word	0x08009fe3
 8009fc0:	08009fd9 	.word	0x08009fd9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009fc4:	6839      	ldr	r1, [r7, #0]
 8009fc6:	6878      	ldr	r0, [r7, #4]
 8009fc8:	f000 f9dc 	bl	800a384 <USBD_GetDescriptor>
          break;
 8009fcc:	e022      	b.n	800a014 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009fce:	6839      	ldr	r1, [r7, #0]
 8009fd0:	6878      	ldr	r0, [r7, #4]
 8009fd2:	f000 fb3f 	bl	800a654 <USBD_SetAddress>
          break;
 8009fd6:	e01d      	b.n	800a014 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8009fd8:	6839      	ldr	r1, [r7, #0]
 8009fda:	6878      	ldr	r0, [r7, #4]
 8009fdc:	f000 fb7e 	bl	800a6dc <USBD_SetConfig>
          break;
 8009fe0:	e018      	b.n	800a014 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009fe2:	6839      	ldr	r1, [r7, #0]
 8009fe4:	6878      	ldr	r0, [r7, #4]
 8009fe6:	f000 fc07 	bl	800a7f8 <USBD_GetConfig>
          break;
 8009fea:	e013      	b.n	800a014 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009fec:	6839      	ldr	r1, [r7, #0]
 8009fee:	6878      	ldr	r0, [r7, #4]
 8009ff0:	f000 fc37 	bl	800a862 <USBD_GetStatus>
          break;
 8009ff4:	e00e      	b.n	800a014 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009ff6:	6839      	ldr	r1, [r7, #0]
 8009ff8:	6878      	ldr	r0, [r7, #4]
 8009ffa:	f000 fc65 	bl	800a8c8 <USBD_SetFeature>
          break;
 8009ffe:	e009      	b.n	800a014 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a000:	6839      	ldr	r1, [r7, #0]
 800a002:	6878      	ldr	r0, [r7, #4]
 800a004:	f000 fc74 	bl	800a8f0 <USBD_ClrFeature>
          break;
 800a008:	e004      	b.n	800a014 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800a00a:	6839      	ldr	r1, [r7, #0]
 800a00c:	6878      	ldr	r0, [r7, #4]
 800a00e:	f000 fccc 	bl	800a9aa <USBD_CtlError>
          break;
 800a012:	bf00      	nop
      }
      break;
 800a014:	e004      	b.n	800a020 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800a016:	6839      	ldr	r1, [r7, #0]
 800a018:	6878      	ldr	r0, [r7, #4]
 800a01a:	f000 fcc6 	bl	800a9aa <USBD_CtlError>
      break;
 800a01e:	bf00      	nop
  }

  return ret;
 800a020:	7bfb      	ldrb	r3, [r7, #15]
}
 800a022:	4618      	mov	r0, r3
 800a024:	3710      	adds	r7, #16
 800a026:	46bd      	mov	sp, r7
 800a028:	bd80      	pop	{r7, pc}
 800a02a:	bf00      	nop

0800a02c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b084      	sub	sp, #16
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
 800a034:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a036:	2300      	movs	r3, #0
 800a038:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a03a:	683b      	ldr	r3, [r7, #0]
 800a03c:	781b      	ldrb	r3, [r3, #0]
 800a03e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a042:	2b40      	cmp	r3, #64	; 0x40
 800a044:	d005      	beq.n	800a052 <USBD_StdItfReq+0x26>
 800a046:	2b40      	cmp	r3, #64	; 0x40
 800a048:	d82e      	bhi.n	800a0a8 <USBD_StdItfReq+0x7c>
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d001      	beq.n	800a052 <USBD_StdItfReq+0x26>
 800a04e:	2b20      	cmp	r3, #32
 800a050:	d12a      	bne.n	800a0a8 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a058:	3b01      	subs	r3, #1
 800a05a:	2b02      	cmp	r3, #2
 800a05c:	d81d      	bhi.n	800a09a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a05e:	683b      	ldr	r3, [r7, #0]
 800a060:	889b      	ldrh	r3, [r3, #4]
 800a062:	b2db      	uxtb	r3, r3
 800a064:	2b01      	cmp	r3, #1
 800a066:	d813      	bhi.n	800a090 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a06e:	689b      	ldr	r3, [r3, #8]
 800a070:	6839      	ldr	r1, [r7, #0]
 800a072:	6878      	ldr	r0, [r7, #4]
 800a074:	4798      	blx	r3
 800a076:	4603      	mov	r3, r0
 800a078:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a07a:	683b      	ldr	r3, [r7, #0]
 800a07c:	88db      	ldrh	r3, [r3, #6]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d110      	bne.n	800a0a4 <USBD_StdItfReq+0x78>
 800a082:	7bfb      	ldrb	r3, [r7, #15]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d10d      	bne.n	800a0a4 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800a088:	6878      	ldr	r0, [r7, #4]
 800a08a:	f000 fd56 	bl	800ab3a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a08e:	e009      	b.n	800a0a4 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800a090:	6839      	ldr	r1, [r7, #0]
 800a092:	6878      	ldr	r0, [r7, #4]
 800a094:	f000 fc89 	bl	800a9aa <USBD_CtlError>
          break;
 800a098:	e004      	b.n	800a0a4 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800a09a:	6839      	ldr	r1, [r7, #0]
 800a09c:	6878      	ldr	r0, [r7, #4]
 800a09e:	f000 fc84 	bl	800a9aa <USBD_CtlError>
          break;
 800a0a2:	e000      	b.n	800a0a6 <USBD_StdItfReq+0x7a>
          break;
 800a0a4:	bf00      	nop
      }
      break;
 800a0a6:	e004      	b.n	800a0b2 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800a0a8:	6839      	ldr	r1, [r7, #0]
 800a0aa:	6878      	ldr	r0, [r7, #4]
 800a0ac:	f000 fc7d 	bl	800a9aa <USBD_CtlError>
      break;
 800a0b0:	bf00      	nop
  }

  return USBD_OK;
 800a0b2:	2300      	movs	r3, #0
}
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	3710      	adds	r7, #16
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	bd80      	pop	{r7, pc}

0800a0bc <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b084      	sub	sp, #16
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
 800a0c4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800a0ca:	683b      	ldr	r3, [r7, #0]
 800a0cc:	889b      	ldrh	r3, [r3, #4]
 800a0ce:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a0d0:	683b      	ldr	r3, [r7, #0]
 800a0d2:	781b      	ldrb	r3, [r3, #0]
 800a0d4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a0d8:	2b40      	cmp	r3, #64	; 0x40
 800a0da:	d007      	beq.n	800a0ec <USBD_StdEPReq+0x30>
 800a0dc:	2b40      	cmp	r3, #64	; 0x40
 800a0de:	f200 8146 	bhi.w	800a36e <USBD_StdEPReq+0x2b2>
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d00a      	beq.n	800a0fc <USBD_StdEPReq+0x40>
 800a0e6:	2b20      	cmp	r3, #32
 800a0e8:	f040 8141 	bne.w	800a36e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0f2:	689b      	ldr	r3, [r3, #8]
 800a0f4:	6839      	ldr	r1, [r7, #0]
 800a0f6:	6878      	ldr	r0, [r7, #4]
 800a0f8:	4798      	blx	r3
      break;
 800a0fa:	e13d      	b.n	800a378 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	781b      	ldrb	r3, [r3, #0]
 800a100:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a104:	2b20      	cmp	r3, #32
 800a106:	d10a      	bne.n	800a11e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a10e:	689b      	ldr	r3, [r3, #8]
 800a110:	6839      	ldr	r1, [r7, #0]
 800a112:	6878      	ldr	r0, [r7, #4]
 800a114:	4798      	blx	r3
 800a116:	4603      	mov	r3, r0
 800a118:	73fb      	strb	r3, [r7, #15]

        return ret;
 800a11a:	7bfb      	ldrb	r3, [r7, #15]
 800a11c:	e12d      	b.n	800a37a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800a11e:	683b      	ldr	r3, [r7, #0]
 800a120:	785b      	ldrb	r3, [r3, #1]
 800a122:	2b03      	cmp	r3, #3
 800a124:	d007      	beq.n	800a136 <USBD_StdEPReq+0x7a>
 800a126:	2b03      	cmp	r3, #3
 800a128:	f300 811b 	bgt.w	800a362 <USBD_StdEPReq+0x2a6>
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d072      	beq.n	800a216 <USBD_StdEPReq+0x15a>
 800a130:	2b01      	cmp	r3, #1
 800a132:	d03a      	beq.n	800a1aa <USBD_StdEPReq+0xee>
 800a134:	e115      	b.n	800a362 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a13c:	2b02      	cmp	r3, #2
 800a13e:	d002      	beq.n	800a146 <USBD_StdEPReq+0x8a>
 800a140:	2b03      	cmp	r3, #3
 800a142:	d015      	beq.n	800a170 <USBD_StdEPReq+0xb4>
 800a144:	e02b      	b.n	800a19e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a146:	7bbb      	ldrb	r3, [r7, #14]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d00c      	beq.n	800a166 <USBD_StdEPReq+0xaa>
 800a14c:	7bbb      	ldrb	r3, [r7, #14]
 800a14e:	2b80      	cmp	r3, #128	; 0x80
 800a150:	d009      	beq.n	800a166 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a152:	7bbb      	ldrb	r3, [r7, #14]
 800a154:	4619      	mov	r1, r3
 800a156:	6878      	ldr	r0, [r7, #4]
 800a158:	f7f8 fb94 	bl	8002884 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a15c:	2180      	movs	r1, #128	; 0x80
 800a15e:	6878      	ldr	r0, [r7, #4]
 800a160:	f7f8 fb90 	bl	8002884 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a164:	e020      	b.n	800a1a8 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800a166:	6839      	ldr	r1, [r7, #0]
 800a168:	6878      	ldr	r0, [r7, #4]
 800a16a:	f000 fc1e 	bl	800a9aa <USBD_CtlError>
              break;
 800a16e:	e01b      	b.n	800a1a8 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a170:	683b      	ldr	r3, [r7, #0]
 800a172:	885b      	ldrh	r3, [r3, #2]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d10e      	bne.n	800a196 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800a178:	7bbb      	ldrb	r3, [r7, #14]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d00b      	beq.n	800a196 <USBD_StdEPReq+0xda>
 800a17e:	7bbb      	ldrb	r3, [r7, #14]
 800a180:	2b80      	cmp	r3, #128	; 0x80
 800a182:	d008      	beq.n	800a196 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a184:	683b      	ldr	r3, [r7, #0]
 800a186:	88db      	ldrh	r3, [r3, #6]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d104      	bne.n	800a196 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800a18c:	7bbb      	ldrb	r3, [r7, #14]
 800a18e:	4619      	mov	r1, r3
 800a190:	6878      	ldr	r0, [r7, #4]
 800a192:	f7f8 fb77 	bl	8002884 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800a196:	6878      	ldr	r0, [r7, #4]
 800a198:	f000 fccf 	bl	800ab3a <USBD_CtlSendStatus>

              break;
 800a19c:	e004      	b.n	800a1a8 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800a19e:	6839      	ldr	r1, [r7, #0]
 800a1a0:	6878      	ldr	r0, [r7, #4]
 800a1a2:	f000 fc02 	bl	800a9aa <USBD_CtlError>
              break;
 800a1a6:	bf00      	nop
          }
          break;
 800a1a8:	e0e0      	b.n	800a36c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1b0:	2b02      	cmp	r3, #2
 800a1b2:	d002      	beq.n	800a1ba <USBD_StdEPReq+0xfe>
 800a1b4:	2b03      	cmp	r3, #3
 800a1b6:	d015      	beq.n	800a1e4 <USBD_StdEPReq+0x128>
 800a1b8:	e026      	b.n	800a208 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a1ba:	7bbb      	ldrb	r3, [r7, #14]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d00c      	beq.n	800a1da <USBD_StdEPReq+0x11e>
 800a1c0:	7bbb      	ldrb	r3, [r7, #14]
 800a1c2:	2b80      	cmp	r3, #128	; 0x80
 800a1c4:	d009      	beq.n	800a1da <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a1c6:	7bbb      	ldrb	r3, [r7, #14]
 800a1c8:	4619      	mov	r1, r3
 800a1ca:	6878      	ldr	r0, [r7, #4]
 800a1cc:	f7f8 fb5a 	bl	8002884 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a1d0:	2180      	movs	r1, #128	; 0x80
 800a1d2:	6878      	ldr	r0, [r7, #4]
 800a1d4:	f7f8 fb56 	bl	8002884 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a1d8:	e01c      	b.n	800a214 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800a1da:	6839      	ldr	r1, [r7, #0]
 800a1dc:	6878      	ldr	r0, [r7, #4]
 800a1de:	f000 fbe4 	bl	800a9aa <USBD_CtlError>
              break;
 800a1e2:	e017      	b.n	800a214 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a1e4:	683b      	ldr	r3, [r7, #0]
 800a1e6:	885b      	ldrh	r3, [r3, #2]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d112      	bne.n	800a212 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a1ec:	7bbb      	ldrb	r3, [r7, #14]
 800a1ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d004      	beq.n	800a200 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800a1f6:	7bbb      	ldrb	r3, [r7, #14]
 800a1f8:	4619      	mov	r1, r3
 800a1fa:	6878      	ldr	r0, [r7, #4]
 800a1fc:	f7f8 fb61 	bl	80028c2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800a200:	6878      	ldr	r0, [r7, #4]
 800a202:	f000 fc9a 	bl	800ab3a <USBD_CtlSendStatus>
              }
              break;
 800a206:	e004      	b.n	800a212 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800a208:	6839      	ldr	r1, [r7, #0]
 800a20a:	6878      	ldr	r0, [r7, #4]
 800a20c:	f000 fbcd 	bl	800a9aa <USBD_CtlError>
              break;
 800a210:	e000      	b.n	800a214 <USBD_StdEPReq+0x158>
              break;
 800a212:	bf00      	nop
          }
          break;
 800a214:	e0aa      	b.n	800a36c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a21c:	2b02      	cmp	r3, #2
 800a21e:	d002      	beq.n	800a226 <USBD_StdEPReq+0x16a>
 800a220:	2b03      	cmp	r3, #3
 800a222:	d032      	beq.n	800a28a <USBD_StdEPReq+0x1ce>
 800a224:	e097      	b.n	800a356 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a226:	7bbb      	ldrb	r3, [r7, #14]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d007      	beq.n	800a23c <USBD_StdEPReq+0x180>
 800a22c:	7bbb      	ldrb	r3, [r7, #14]
 800a22e:	2b80      	cmp	r3, #128	; 0x80
 800a230:	d004      	beq.n	800a23c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800a232:	6839      	ldr	r1, [r7, #0]
 800a234:	6878      	ldr	r0, [r7, #4]
 800a236:	f000 fbb8 	bl	800a9aa <USBD_CtlError>
                break;
 800a23a:	e091      	b.n	800a360 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a23c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a240:	2b00      	cmp	r3, #0
 800a242:	da0b      	bge.n	800a25c <USBD_StdEPReq+0x1a0>
 800a244:	7bbb      	ldrb	r3, [r7, #14]
 800a246:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a24a:	4613      	mov	r3, r2
 800a24c:	009b      	lsls	r3, r3, #2
 800a24e:	4413      	add	r3, r2
 800a250:	009b      	lsls	r3, r3, #2
 800a252:	3310      	adds	r3, #16
 800a254:	687a      	ldr	r2, [r7, #4]
 800a256:	4413      	add	r3, r2
 800a258:	3304      	adds	r3, #4
 800a25a:	e00b      	b.n	800a274 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a25c:	7bbb      	ldrb	r3, [r7, #14]
 800a25e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a262:	4613      	mov	r3, r2
 800a264:	009b      	lsls	r3, r3, #2
 800a266:	4413      	add	r3, r2
 800a268:	009b      	lsls	r3, r3, #2
 800a26a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a26e:	687a      	ldr	r2, [r7, #4]
 800a270:	4413      	add	r3, r2
 800a272:	3304      	adds	r3, #4
 800a274:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a276:	68bb      	ldr	r3, [r7, #8]
 800a278:	2200      	movs	r2, #0
 800a27a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a27c:	68bb      	ldr	r3, [r7, #8]
 800a27e:	2202      	movs	r2, #2
 800a280:	4619      	mov	r1, r3
 800a282:	6878      	ldr	r0, [r7, #4]
 800a284:	f000 fbfb 	bl	800aa7e <USBD_CtlSendData>
              break;
 800a288:	e06a      	b.n	800a360 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a28a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	da11      	bge.n	800a2b6 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a292:	7bbb      	ldrb	r3, [r7, #14]
 800a294:	f003 020f 	and.w	r2, r3, #15
 800a298:	6879      	ldr	r1, [r7, #4]
 800a29a:	4613      	mov	r3, r2
 800a29c:	009b      	lsls	r3, r3, #2
 800a29e:	4413      	add	r3, r2
 800a2a0:	009b      	lsls	r3, r3, #2
 800a2a2:	440b      	add	r3, r1
 800a2a4:	3318      	adds	r3, #24
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d117      	bne.n	800a2dc <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800a2ac:	6839      	ldr	r1, [r7, #0]
 800a2ae:	6878      	ldr	r0, [r7, #4]
 800a2b0:	f000 fb7b 	bl	800a9aa <USBD_CtlError>
                  break;
 800a2b4:	e054      	b.n	800a360 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a2b6:	7bbb      	ldrb	r3, [r7, #14]
 800a2b8:	f003 020f 	and.w	r2, r3, #15
 800a2bc:	6879      	ldr	r1, [r7, #4]
 800a2be:	4613      	mov	r3, r2
 800a2c0:	009b      	lsls	r3, r3, #2
 800a2c2:	4413      	add	r3, r2
 800a2c4:	009b      	lsls	r3, r3, #2
 800a2c6:	440b      	add	r3, r1
 800a2c8:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d104      	bne.n	800a2dc <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800a2d2:	6839      	ldr	r1, [r7, #0]
 800a2d4:	6878      	ldr	r0, [r7, #4]
 800a2d6:	f000 fb68 	bl	800a9aa <USBD_CtlError>
                  break;
 800a2da:	e041      	b.n	800a360 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a2dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	da0b      	bge.n	800a2fc <USBD_StdEPReq+0x240>
 800a2e4:	7bbb      	ldrb	r3, [r7, #14]
 800a2e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a2ea:	4613      	mov	r3, r2
 800a2ec:	009b      	lsls	r3, r3, #2
 800a2ee:	4413      	add	r3, r2
 800a2f0:	009b      	lsls	r3, r3, #2
 800a2f2:	3310      	adds	r3, #16
 800a2f4:	687a      	ldr	r2, [r7, #4]
 800a2f6:	4413      	add	r3, r2
 800a2f8:	3304      	adds	r3, #4
 800a2fa:	e00b      	b.n	800a314 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a2fc:	7bbb      	ldrb	r3, [r7, #14]
 800a2fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a302:	4613      	mov	r3, r2
 800a304:	009b      	lsls	r3, r3, #2
 800a306:	4413      	add	r3, r2
 800a308:	009b      	lsls	r3, r3, #2
 800a30a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a30e:	687a      	ldr	r2, [r7, #4]
 800a310:	4413      	add	r3, r2
 800a312:	3304      	adds	r3, #4
 800a314:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a316:	7bbb      	ldrb	r3, [r7, #14]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d002      	beq.n	800a322 <USBD_StdEPReq+0x266>
 800a31c:	7bbb      	ldrb	r3, [r7, #14]
 800a31e:	2b80      	cmp	r3, #128	; 0x80
 800a320:	d103      	bne.n	800a32a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800a322:	68bb      	ldr	r3, [r7, #8]
 800a324:	2200      	movs	r2, #0
 800a326:	601a      	str	r2, [r3, #0]
 800a328:	e00e      	b.n	800a348 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800a32a:	7bbb      	ldrb	r3, [r7, #14]
 800a32c:	4619      	mov	r1, r3
 800a32e:	6878      	ldr	r0, [r7, #4]
 800a330:	f7f8 fae6 	bl	8002900 <USBD_LL_IsStallEP>
 800a334:	4603      	mov	r3, r0
 800a336:	2b00      	cmp	r3, #0
 800a338:	d003      	beq.n	800a342 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800a33a:	68bb      	ldr	r3, [r7, #8]
 800a33c:	2201      	movs	r2, #1
 800a33e:	601a      	str	r2, [r3, #0]
 800a340:	e002      	b.n	800a348 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800a342:	68bb      	ldr	r3, [r7, #8]
 800a344:	2200      	movs	r2, #0
 800a346:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a348:	68bb      	ldr	r3, [r7, #8]
 800a34a:	2202      	movs	r2, #2
 800a34c:	4619      	mov	r1, r3
 800a34e:	6878      	ldr	r0, [r7, #4]
 800a350:	f000 fb95 	bl	800aa7e <USBD_CtlSendData>
              break;
 800a354:	e004      	b.n	800a360 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800a356:	6839      	ldr	r1, [r7, #0]
 800a358:	6878      	ldr	r0, [r7, #4]
 800a35a:	f000 fb26 	bl	800a9aa <USBD_CtlError>
              break;
 800a35e:	bf00      	nop
          }
          break;
 800a360:	e004      	b.n	800a36c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800a362:	6839      	ldr	r1, [r7, #0]
 800a364:	6878      	ldr	r0, [r7, #4]
 800a366:	f000 fb20 	bl	800a9aa <USBD_CtlError>
          break;
 800a36a:	bf00      	nop
      }
      break;
 800a36c:	e004      	b.n	800a378 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800a36e:	6839      	ldr	r1, [r7, #0]
 800a370:	6878      	ldr	r0, [r7, #4]
 800a372:	f000 fb1a 	bl	800a9aa <USBD_CtlError>
      break;
 800a376:	bf00      	nop
  }

  return ret;
 800a378:	7bfb      	ldrb	r3, [r7, #15]
}
 800a37a:	4618      	mov	r0, r3
 800a37c:	3710      	adds	r7, #16
 800a37e:	46bd      	mov	sp, r7
 800a380:	bd80      	pop	{r7, pc}
	...

0800a384 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a384:	b580      	push	{r7, lr}
 800a386:	b084      	sub	sp, #16
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
 800a38c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a38e:	2300      	movs	r3, #0
 800a390:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a392:	2300      	movs	r3, #0
 800a394:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a396:	2300      	movs	r3, #0
 800a398:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a39a:	683b      	ldr	r3, [r7, #0]
 800a39c:	885b      	ldrh	r3, [r3, #2]
 800a39e:	0a1b      	lsrs	r3, r3, #8
 800a3a0:	b29b      	uxth	r3, r3
 800a3a2:	3b01      	subs	r3, #1
 800a3a4:	2b06      	cmp	r3, #6
 800a3a6:	f200 8128 	bhi.w	800a5fa <USBD_GetDescriptor+0x276>
 800a3aa:	a201      	add	r2, pc, #4	; (adr r2, 800a3b0 <USBD_GetDescriptor+0x2c>)
 800a3ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3b0:	0800a3cd 	.word	0x0800a3cd
 800a3b4:	0800a3e5 	.word	0x0800a3e5
 800a3b8:	0800a425 	.word	0x0800a425
 800a3bc:	0800a5fb 	.word	0x0800a5fb
 800a3c0:	0800a5fb 	.word	0x0800a5fb
 800a3c4:	0800a59b 	.word	0x0800a59b
 800a3c8:	0800a5c7 	.word	0x0800a5c7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	687a      	ldr	r2, [r7, #4]
 800a3d6:	7c12      	ldrb	r2, [r2, #16]
 800a3d8:	f107 0108 	add.w	r1, r7, #8
 800a3dc:	4610      	mov	r0, r2
 800a3de:	4798      	blx	r3
 800a3e0:	60f8      	str	r0, [r7, #12]
      break;
 800a3e2:	e112      	b.n	800a60a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	7c1b      	ldrb	r3, [r3, #16]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d10d      	bne.n	800a408 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a3f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3f4:	f107 0208 	add.w	r2, r7, #8
 800a3f8:	4610      	mov	r0, r2
 800a3fa:	4798      	blx	r3
 800a3fc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	3301      	adds	r3, #1
 800a402:	2202      	movs	r2, #2
 800a404:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a406:	e100      	b.n	800a60a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a40e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a410:	f107 0208 	add.w	r2, r7, #8
 800a414:	4610      	mov	r0, r2
 800a416:	4798      	blx	r3
 800a418:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	3301      	adds	r3, #1
 800a41e:	2202      	movs	r2, #2
 800a420:	701a      	strb	r2, [r3, #0]
      break;
 800a422:	e0f2      	b.n	800a60a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a424:	683b      	ldr	r3, [r7, #0]
 800a426:	885b      	ldrh	r3, [r3, #2]
 800a428:	b2db      	uxtb	r3, r3
 800a42a:	2b05      	cmp	r3, #5
 800a42c:	f200 80ac 	bhi.w	800a588 <USBD_GetDescriptor+0x204>
 800a430:	a201      	add	r2, pc, #4	; (adr r2, 800a438 <USBD_GetDescriptor+0xb4>)
 800a432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a436:	bf00      	nop
 800a438:	0800a451 	.word	0x0800a451
 800a43c:	0800a485 	.word	0x0800a485
 800a440:	0800a4b9 	.word	0x0800a4b9
 800a444:	0800a4ed 	.word	0x0800a4ed
 800a448:	0800a521 	.word	0x0800a521
 800a44c:	0800a555 	.word	0x0800a555
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a456:	685b      	ldr	r3, [r3, #4]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d00b      	beq.n	800a474 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a462:	685b      	ldr	r3, [r3, #4]
 800a464:	687a      	ldr	r2, [r7, #4]
 800a466:	7c12      	ldrb	r2, [r2, #16]
 800a468:	f107 0108 	add.w	r1, r7, #8
 800a46c:	4610      	mov	r0, r2
 800a46e:	4798      	blx	r3
 800a470:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a472:	e091      	b.n	800a598 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a474:	6839      	ldr	r1, [r7, #0]
 800a476:	6878      	ldr	r0, [r7, #4]
 800a478:	f000 fa97 	bl	800a9aa <USBD_CtlError>
            err++;
 800a47c:	7afb      	ldrb	r3, [r7, #11]
 800a47e:	3301      	adds	r3, #1
 800a480:	72fb      	strb	r3, [r7, #11]
          break;
 800a482:	e089      	b.n	800a598 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a48a:	689b      	ldr	r3, [r3, #8]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d00b      	beq.n	800a4a8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a496:	689b      	ldr	r3, [r3, #8]
 800a498:	687a      	ldr	r2, [r7, #4]
 800a49a:	7c12      	ldrb	r2, [r2, #16]
 800a49c:	f107 0108 	add.w	r1, r7, #8
 800a4a0:	4610      	mov	r0, r2
 800a4a2:	4798      	blx	r3
 800a4a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a4a6:	e077      	b.n	800a598 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a4a8:	6839      	ldr	r1, [r7, #0]
 800a4aa:	6878      	ldr	r0, [r7, #4]
 800a4ac:	f000 fa7d 	bl	800a9aa <USBD_CtlError>
            err++;
 800a4b0:	7afb      	ldrb	r3, [r7, #11]
 800a4b2:	3301      	adds	r3, #1
 800a4b4:	72fb      	strb	r3, [r7, #11]
          break;
 800a4b6:	e06f      	b.n	800a598 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a4be:	68db      	ldr	r3, [r3, #12]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d00b      	beq.n	800a4dc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a4ca:	68db      	ldr	r3, [r3, #12]
 800a4cc:	687a      	ldr	r2, [r7, #4]
 800a4ce:	7c12      	ldrb	r2, [r2, #16]
 800a4d0:	f107 0108 	add.w	r1, r7, #8
 800a4d4:	4610      	mov	r0, r2
 800a4d6:	4798      	blx	r3
 800a4d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a4da:	e05d      	b.n	800a598 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a4dc:	6839      	ldr	r1, [r7, #0]
 800a4de:	6878      	ldr	r0, [r7, #4]
 800a4e0:	f000 fa63 	bl	800a9aa <USBD_CtlError>
            err++;
 800a4e4:	7afb      	ldrb	r3, [r7, #11]
 800a4e6:	3301      	adds	r3, #1
 800a4e8:	72fb      	strb	r3, [r7, #11]
          break;
 800a4ea:	e055      	b.n	800a598 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a4f2:	691b      	ldr	r3, [r3, #16]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d00b      	beq.n	800a510 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a4fe:	691b      	ldr	r3, [r3, #16]
 800a500:	687a      	ldr	r2, [r7, #4]
 800a502:	7c12      	ldrb	r2, [r2, #16]
 800a504:	f107 0108 	add.w	r1, r7, #8
 800a508:	4610      	mov	r0, r2
 800a50a:	4798      	blx	r3
 800a50c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a50e:	e043      	b.n	800a598 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a510:	6839      	ldr	r1, [r7, #0]
 800a512:	6878      	ldr	r0, [r7, #4]
 800a514:	f000 fa49 	bl	800a9aa <USBD_CtlError>
            err++;
 800a518:	7afb      	ldrb	r3, [r7, #11]
 800a51a:	3301      	adds	r3, #1
 800a51c:	72fb      	strb	r3, [r7, #11]
          break;
 800a51e:	e03b      	b.n	800a598 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a526:	695b      	ldr	r3, [r3, #20]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d00b      	beq.n	800a544 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a532:	695b      	ldr	r3, [r3, #20]
 800a534:	687a      	ldr	r2, [r7, #4]
 800a536:	7c12      	ldrb	r2, [r2, #16]
 800a538:	f107 0108 	add.w	r1, r7, #8
 800a53c:	4610      	mov	r0, r2
 800a53e:	4798      	blx	r3
 800a540:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a542:	e029      	b.n	800a598 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a544:	6839      	ldr	r1, [r7, #0]
 800a546:	6878      	ldr	r0, [r7, #4]
 800a548:	f000 fa2f 	bl	800a9aa <USBD_CtlError>
            err++;
 800a54c:	7afb      	ldrb	r3, [r7, #11]
 800a54e:	3301      	adds	r3, #1
 800a550:	72fb      	strb	r3, [r7, #11]
          break;
 800a552:	e021      	b.n	800a598 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a55a:	699b      	ldr	r3, [r3, #24]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d00b      	beq.n	800a578 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a566:	699b      	ldr	r3, [r3, #24]
 800a568:	687a      	ldr	r2, [r7, #4]
 800a56a:	7c12      	ldrb	r2, [r2, #16]
 800a56c:	f107 0108 	add.w	r1, r7, #8
 800a570:	4610      	mov	r0, r2
 800a572:	4798      	blx	r3
 800a574:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a576:	e00f      	b.n	800a598 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a578:	6839      	ldr	r1, [r7, #0]
 800a57a:	6878      	ldr	r0, [r7, #4]
 800a57c:	f000 fa15 	bl	800a9aa <USBD_CtlError>
            err++;
 800a580:	7afb      	ldrb	r3, [r7, #11]
 800a582:	3301      	adds	r3, #1
 800a584:	72fb      	strb	r3, [r7, #11]
          break;
 800a586:	e007      	b.n	800a598 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800a588:	6839      	ldr	r1, [r7, #0]
 800a58a:	6878      	ldr	r0, [r7, #4]
 800a58c:	f000 fa0d 	bl	800a9aa <USBD_CtlError>
          err++;
 800a590:	7afb      	ldrb	r3, [r7, #11]
 800a592:	3301      	adds	r3, #1
 800a594:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800a596:	e038      	b.n	800a60a <USBD_GetDescriptor+0x286>
 800a598:	e037      	b.n	800a60a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	7c1b      	ldrb	r3, [r3, #16]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d109      	bne.n	800a5b6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a5a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5aa:	f107 0208 	add.w	r2, r7, #8
 800a5ae:	4610      	mov	r0, r2
 800a5b0:	4798      	blx	r3
 800a5b2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a5b4:	e029      	b.n	800a60a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a5b6:	6839      	ldr	r1, [r7, #0]
 800a5b8:	6878      	ldr	r0, [r7, #4]
 800a5ba:	f000 f9f6 	bl	800a9aa <USBD_CtlError>
        err++;
 800a5be:	7afb      	ldrb	r3, [r7, #11]
 800a5c0:	3301      	adds	r3, #1
 800a5c2:	72fb      	strb	r3, [r7, #11]
      break;
 800a5c4:	e021      	b.n	800a60a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	7c1b      	ldrb	r3, [r3, #16]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d10d      	bne.n	800a5ea <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a5d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5d6:	f107 0208 	add.w	r2, r7, #8
 800a5da:	4610      	mov	r0, r2
 800a5dc:	4798      	blx	r3
 800a5de:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	3301      	adds	r3, #1
 800a5e4:	2207      	movs	r2, #7
 800a5e6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a5e8:	e00f      	b.n	800a60a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a5ea:	6839      	ldr	r1, [r7, #0]
 800a5ec:	6878      	ldr	r0, [r7, #4]
 800a5ee:	f000 f9dc 	bl	800a9aa <USBD_CtlError>
        err++;
 800a5f2:	7afb      	ldrb	r3, [r7, #11]
 800a5f4:	3301      	adds	r3, #1
 800a5f6:	72fb      	strb	r3, [r7, #11]
      break;
 800a5f8:	e007      	b.n	800a60a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a5fa:	6839      	ldr	r1, [r7, #0]
 800a5fc:	6878      	ldr	r0, [r7, #4]
 800a5fe:	f000 f9d4 	bl	800a9aa <USBD_CtlError>
      err++;
 800a602:	7afb      	ldrb	r3, [r7, #11]
 800a604:	3301      	adds	r3, #1
 800a606:	72fb      	strb	r3, [r7, #11]
      break;
 800a608:	bf00      	nop
  }

  if (err != 0U)
 800a60a:	7afb      	ldrb	r3, [r7, #11]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d11c      	bne.n	800a64a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800a610:	893b      	ldrh	r3, [r7, #8]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d011      	beq.n	800a63a <USBD_GetDescriptor+0x2b6>
 800a616:	683b      	ldr	r3, [r7, #0]
 800a618:	88db      	ldrh	r3, [r3, #6]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d00d      	beq.n	800a63a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800a61e:	683b      	ldr	r3, [r7, #0]
 800a620:	88da      	ldrh	r2, [r3, #6]
 800a622:	893b      	ldrh	r3, [r7, #8]
 800a624:	4293      	cmp	r3, r2
 800a626:	bf28      	it	cs
 800a628:	4613      	movcs	r3, r2
 800a62a:	b29b      	uxth	r3, r3
 800a62c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a62e:	893b      	ldrh	r3, [r7, #8]
 800a630:	461a      	mov	r2, r3
 800a632:	68f9      	ldr	r1, [r7, #12]
 800a634:	6878      	ldr	r0, [r7, #4]
 800a636:	f000 fa22 	bl	800aa7e <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800a63a:	683b      	ldr	r3, [r7, #0]
 800a63c:	88db      	ldrh	r3, [r3, #6]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d104      	bne.n	800a64c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800a642:	6878      	ldr	r0, [r7, #4]
 800a644:	f000 fa79 	bl	800ab3a <USBD_CtlSendStatus>
 800a648:	e000      	b.n	800a64c <USBD_GetDescriptor+0x2c8>
    return;
 800a64a:	bf00      	nop
    }
  }
}
 800a64c:	3710      	adds	r7, #16
 800a64e:	46bd      	mov	sp, r7
 800a650:	bd80      	pop	{r7, pc}
 800a652:	bf00      	nop

0800a654 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a654:	b580      	push	{r7, lr}
 800a656:	b084      	sub	sp, #16
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
 800a65c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a65e:	683b      	ldr	r3, [r7, #0]
 800a660:	889b      	ldrh	r3, [r3, #4]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d130      	bne.n	800a6c8 <USBD_SetAddress+0x74>
 800a666:	683b      	ldr	r3, [r7, #0]
 800a668:	88db      	ldrh	r3, [r3, #6]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d12c      	bne.n	800a6c8 <USBD_SetAddress+0x74>
 800a66e:	683b      	ldr	r3, [r7, #0]
 800a670:	885b      	ldrh	r3, [r3, #2]
 800a672:	2b7f      	cmp	r3, #127	; 0x7f
 800a674:	d828      	bhi.n	800a6c8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a676:	683b      	ldr	r3, [r7, #0]
 800a678:	885b      	ldrh	r3, [r3, #2]
 800a67a:	b2db      	uxtb	r3, r3
 800a67c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a680:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a688:	2b03      	cmp	r3, #3
 800a68a:	d104      	bne.n	800a696 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800a68c:	6839      	ldr	r1, [r7, #0]
 800a68e:	6878      	ldr	r0, [r7, #4]
 800a690:	f000 f98b 	bl	800a9aa <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a694:	e01d      	b.n	800a6d2 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	7bfa      	ldrb	r2, [r7, #15]
 800a69a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a69e:	7bfb      	ldrb	r3, [r7, #15]
 800a6a0:	4619      	mov	r1, r3
 800a6a2:	6878      	ldr	r0, [r7, #4]
 800a6a4:	f7f8 f958 	bl	8002958 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800a6a8:	6878      	ldr	r0, [r7, #4]
 800a6aa:	f000 fa46 	bl	800ab3a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a6ae:	7bfb      	ldrb	r3, [r7, #15]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d004      	beq.n	800a6be <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	2202      	movs	r2, #2
 800a6b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a6bc:	e009      	b.n	800a6d2 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	2201      	movs	r2, #1
 800a6c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a6c6:	e004      	b.n	800a6d2 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a6c8:	6839      	ldr	r1, [r7, #0]
 800a6ca:	6878      	ldr	r0, [r7, #4]
 800a6cc:	f000 f96d 	bl	800a9aa <USBD_CtlError>
  }
}
 800a6d0:	bf00      	nop
 800a6d2:	bf00      	nop
 800a6d4:	3710      	adds	r7, #16
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	bd80      	pop	{r7, pc}
	...

0800a6dc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	b082      	sub	sp, #8
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
 800a6e4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a6e6:	683b      	ldr	r3, [r7, #0]
 800a6e8:	885b      	ldrh	r3, [r3, #2]
 800a6ea:	b2da      	uxtb	r2, r3
 800a6ec:	4b41      	ldr	r3, [pc, #260]	; (800a7f4 <USBD_SetConfig+0x118>)
 800a6ee:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a6f0:	4b40      	ldr	r3, [pc, #256]	; (800a7f4 <USBD_SetConfig+0x118>)
 800a6f2:	781b      	ldrb	r3, [r3, #0]
 800a6f4:	2b01      	cmp	r3, #1
 800a6f6:	d904      	bls.n	800a702 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800a6f8:	6839      	ldr	r1, [r7, #0]
 800a6fa:	6878      	ldr	r0, [r7, #4]
 800a6fc:	f000 f955 	bl	800a9aa <USBD_CtlError>
 800a700:	e075      	b.n	800a7ee <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a708:	2b02      	cmp	r3, #2
 800a70a:	d002      	beq.n	800a712 <USBD_SetConfig+0x36>
 800a70c:	2b03      	cmp	r3, #3
 800a70e:	d023      	beq.n	800a758 <USBD_SetConfig+0x7c>
 800a710:	e062      	b.n	800a7d8 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800a712:	4b38      	ldr	r3, [pc, #224]	; (800a7f4 <USBD_SetConfig+0x118>)
 800a714:	781b      	ldrb	r3, [r3, #0]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d01a      	beq.n	800a750 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800a71a:	4b36      	ldr	r3, [pc, #216]	; (800a7f4 <USBD_SetConfig+0x118>)
 800a71c:	781b      	ldrb	r3, [r3, #0]
 800a71e:	461a      	mov	r2, r3
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	2203      	movs	r2, #3
 800a728:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a72c:	4b31      	ldr	r3, [pc, #196]	; (800a7f4 <USBD_SetConfig+0x118>)
 800a72e:	781b      	ldrb	r3, [r3, #0]
 800a730:	4619      	mov	r1, r3
 800a732:	6878      	ldr	r0, [r7, #4]
 800a734:	f7ff f9e8 	bl	8009b08 <USBD_SetClassConfig>
 800a738:	4603      	mov	r3, r0
 800a73a:	2b02      	cmp	r3, #2
 800a73c:	d104      	bne.n	800a748 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800a73e:	6839      	ldr	r1, [r7, #0]
 800a740:	6878      	ldr	r0, [r7, #4]
 800a742:	f000 f932 	bl	800a9aa <USBD_CtlError>
            return;
 800a746:	e052      	b.n	800a7ee <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800a748:	6878      	ldr	r0, [r7, #4]
 800a74a:	f000 f9f6 	bl	800ab3a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a74e:	e04e      	b.n	800a7ee <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a750:	6878      	ldr	r0, [r7, #4]
 800a752:	f000 f9f2 	bl	800ab3a <USBD_CtlSendStatus>
        break;
 800a756:	e04a      	b.n	800a7ee <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800a758:	4b26      	ldr	r3, [pc, #152]	; (800a7f4 <USBD_SetConfig+0x118>)
 800a75a:	781b      	ldrb	r3, [r3, #0]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d112      	bne.n	800a786 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	2202      	movs	r2, #2
 800a764:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800a768:	4b22      	ldr	r3, [pc, #136]	; (800a7f4 <USBD_SetConfig+0x118>)
 800a76a:	781b      	ldrb	r3, [r3, #0]
 800a76c:	461a      	mov	r2, r3
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800a772:	4b20      	ldr	r3, [pc, #128]	; (800a7f4 <USBD_SetConfig+0x118>)
 800a774:	781b      	ldrb	r3, [r3, #0]
 800a776:	4619      	mov	r1, r3
 800a778:	6878      	ldr	r0, [r7, #4]
 800a77a:	f7ff f9e4 	bl	8009b46 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800a77e:	6878      	ldr	r0, [r7, #4]
 800a780:	f000 f9db 	bl	800ab3a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a784:	e033      	b.n	800a7ee <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800a786:	4b1b      	ldr	r3, [pc, #108]	; (800a7f4 <USBD_SetConfig+0x118>)
 800a788:	781b      	ldrb	r3, [r3, #0]
 800a78a:	461a      	mov	r2, r3
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	685b      	ldr	r3, [r3, #4]
 800a790:	429a      	cmp	r2, r3
 800a792:	d01d      	beq.n	800a7d0 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	685b      	ldr	r3, [r3, #4]
 800a798:	b2db      	uxtb	r3, r3
 800a79a:	4619      	mov	r1, r3
 800a79c:	6878      	ldr	r0, [r7, #4]
 800a79e:	f7ff f9d2 	bl	8009b46 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800a7a2:	4b14      	ldr	r3, [pc, #80]	; (800a7f4 <USBD_SetConfig+0x118>)
 800a7a4:	781b      	ldrb	r3, [r3, #0]
 800a7a6:	461a      	mov	r2, r3
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a7ac:	4b11      	ldr	r3, [pc, #68]	; (800a7f4 <USBD_SetConfig+0x118>)
 800a7ae:	781b      	ldrb	r3, [r3, #0]
 800a7b0:	4619      	mov	r1, r3
 800a7b2:	6878      	ldr	r0, [r7, #4]
 800a7b4:	f7ff f9a8 	bl	8009b08 <USBD_SetClassConfig>
 800a7b8:	4603      	mov	r3, r0
 800a7ba:	2b02      	cmp	r3, #2
 800a7bc:	d104      	bne.n	800a7c8 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800a7be:	6839      	ldr	r1, [r7, #0]
 800a7c0:	6878      	ldr	r0, [r7, #4]
 800a7c2:	f000 f8f2 	bl	800a9aa <USBD_CtlError>
            return;
 800a7c6:	e012      	b.n	800a7ee <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a7c8:	6878      	ldr	r0, [r7, #4]
 800a7ca:	f000 f9b6 	bl	800ab3a <USBD_CtlSendStatus>
        break;
 800a7ce:	e00e      	b.n	800a7ee <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a7d0:	6878      	ldr	r0, [r7, #4]
 800a7d2:	f000 f9b2 	bl	800ab3a <USBD_CtlSendStatus>
        break;
 800a7d6:	e00a      	b.n	800a7ee <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800a7d8:	6839      	ldr	r1, [r7, #0]
 800a7da:	6878      	ldr	r0, [r7, #4]
 800a7dc:	f000 f8e5 	bl	800a9aa <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800a7e0:	4b04      	ldr	r3, [pc, #16]	; (800a7f4 <USBD_SetConfig+0x118>)
 800a7e2:	781b      	ldrb	r3, [r3, #0]
 800a7e4:	4619      	mov	r1, r3
 800a7e6:	6878      	ldr	r0, [r7, #4]
 800a7e8:	f7ff f9ad 	bl	8009b46 <USBD_ClrClassConfig>
        break;
 800a7ec:	bf00      	nop
    }
  }
}
 800a7ee:	3708      	adds	r7, #8
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	bd80      	pop	{r7, pc}
 800a7f4:	20001654 	.word	0x20001654

0800a7f8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	b082      	sub	sp, #8
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]
 800a800:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a802:	683b      	ldr	r3, [r7, #0]
 800a804:	88db      	ldrh	r3, [r3, #6]
 800a806:	2b01      	cmp	r3, #1
 800a808:	d004      	beq.n	800a814 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a80a:	6839      	ldr	r1, [r7, #0]
 800a80c:	6878      	ldr	r0, [r7, #4]
 800a80e:	f000 f8cc 	bl	800a9aa <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a812:	e022      	b.n	800a85a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a81a:	2b02      	cmp	r3, #2
 800a81c:	dc02      	bgt.n	800a824 <USBD_GetConfig+0x2c>
 800a81e:	2b00      	cmp	r3, #0
 800a820:	dc03      	bgt.n	800a82a <USBD_GetConfig+0x32>
 800a822:	e015      	b.n	800a850 <USBD_GetConfig+0x58>
 800a824:	2b03      	cmp	r3, #3
 800a826:	d00b      	beq.n	800a840 <USBD_GetConfig+0x48>
 800a828:	e012      	b.n	800a850 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	2200      	movs	r2, #0
 800a82e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	3308      	adds	r3, #8
 800a834:	2201      	movs	r2, #1
 800a836:	4619      	mov	r1, r3
 800a838:	6878      	ldr	r0, [r7, #4]
 800a83a:	f000 f920 	bl	800aa7e <USBD_CtlSendData>
        break;
 800a83e:	e00c      	b.n	800a85a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	3304      	adds	r3, #4
 800a844:	2201      	movs	r2, #1
 800a846:	4619      	mov	r1, r3
 800a848:	6878      	ldr	r0, [r7, #4]
 800a84a:	f000 f918 	bl	800aa7e <USBD_CtlSendData>
        break;
 800a84e:	e004      	b.n	800a85a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800a850:	6839      	ldr	r1, [r7, #0]
 800a852:	6878      	ldr	r0, [r7, #4]
 800a854:	f000 f8a9 	bl	800a9aa <USBD_CtlError>
        break;
 800a858:	bf00      	nop
}
 800a85a:	bf00      	nop
 800a85c:	3708      	adds	r7, #8
 800a85e:	46bd      	mov	sp, r7
 800a860:	bd80      	pop	{r7, pc}

0800a862 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a862:	b580      	push	{r7, lr}
 800a864:	b082      	sub	sp, #8
 800a866:	af00      	add	r7, sp, #0
 800a868:	6078      	str	r0, [r7, #4]
 800a86a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a872:	3b01      	subs	r3, #1
 800a874:	2b02      	cmp	r3, #2
 800a876:	d81e      	bhi.n	800a8b6 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a878:	683b      	ldr	r3, [r7, #0]
 800a87a:	88db      	ldrh	r3, [r3, #6]
 800a87c:	2b02      	cmp	r3, #2
 800a87e:	d004      	beq.n	800a88a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800a880:	6839      	ldr	r1, [r7, #0]
 800a882:	6878      	ldr	r0, [r7, #4]
 800a884:	f000 f891 	bl	800a9aa <USBD_CtlError>
        break;
 800a888:	e01a      	b.n	800a8c0 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	2201      	movs	r2, #1
 800a88e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a896:	2b00      	cmp	r3, #0
 800a898:	d005      	beq.n	800a8a6 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	68db      	ldr	r3, [r3, #12]
 800a89e:	f043 0202 	orr.w	r2, r3, #2
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	330c      	adds	r3, #12
 800a8aa:	2202      	movs	r2, #2
 800a8ac:	4619      	mov	r1, r3
 800a8ae:	6878      	ldr	r0, [r7, #4]
 800a8b0:	f000 f8e5 	bl	800aa7e <USBD_CtlSendData>
      break;
 800a8b4:	e004      	b.n	800a8c0 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800a8b6:	6839      	ldr	r1, [r7, #0]
 800a8b8:	6878      	ldr	r0, [r7, #4]
 800a8ba:	f000 f876 	bl	800a9aa <USBD_CtlError>
      break;
 800a8be:	bf00      	nop
  }
}
 800a8c0:	bf00      	nop
 800a8c2:	3708      	adds	r7, #8
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	bd80      	pop	{r7, pc}

0800a8c8 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b082      	sub	sp, #8
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]
 800a8d0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a8d2:	683b      	ldr	r3, [r7, #0]
 800a8d4:	885b      	ldrh	r3, [r3, #2]
 800a8d6:	2b01      	cmp	r3, #1
 800a8d8:	d106      	bne.n	800a8e8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	2201      	movs	r2, #1
 800a8de:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800a8e2:	6878      	ldr	r0, [r7, #4]
 800a8e4:	f000 f929 	bl	800ab3a <USBD_CtlSendStatus>
  }
}
 800a8e8:	bf00      	nop
 800a8ea:	3708      	adds	r7, #8
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	bd80      	pop	{r7, pc}

0800a8f0 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b082      	sub	sp, #8
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
 800a8f8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a900:	3b01      	subs	r3, #1
 800a902:	2b02      	cmp	r3, #2
 800a904:	d80b      	bhi.n	800a91e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	885b      	ldrh	r3, [r3, #2]
 800a90a:	2b01      	cmp	r3, #1
 800a90c:	d10c      	bne.n	800a928 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	2200      	movs	r2, #0
 800a912:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800a916:	6878      	ldr	r0, [r7, #4]
 800a918:	f000 f90f 	bl	800ab3a <USBD_CtlSendStatus>
      }
      break;
 800a91c:	e004      	b.n	800a928 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800a91e:	6839      	ldr	r1, [r7, #0]
 800a920:	6878      	ldr	r0, [r7, #4]
 800a922:	f000 f842 	bl	800a9aa <USBD_CtlError>
      break;
 800a926:	e000      	b.n	800a92a <USBD_ClrFeature+0x3a>
      break;
 800a928:	bf00      	nop
  }
}
 800a92a:	bf00      	nop
 800a92c:	3708      	adds	r7, #8
 800a92e:	46bd      	mov	sp, r7
 800a930:	bd80      	pop	{r7, pc}

0800a932 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a932:	b480      	push	{r7}
 800a934:	b083      	sub	sp, #12
 800a936:	af00      	add	r7, sp, #0
 800a938:	6078      	str	r0, [r7, #4]
 800a93a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800a93c:	683b      	ldr	r3, [r7, #0]
 800a93e:	781a      	ldrb	r2, [r3, #0]
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800a944:	683b      	ldr	r3, [r7, #0]
 800a946:	785a      	ldrb	r2, [r3, #1]
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800a94c:	683b      	ldr	r3, [r7, #0]
 800a94e:	3302      	adds	r3, #2
 800a950:	781b      	ldrb	r3, [r3, #0]
 800a952:	b29a      	uxth	r2, r3
 800a954:	683b      	ldr	r3, [r7, #0]
 800a956:	3303      	adds	r3, #3
 800a958:	781b      	ldrb	r3, [r3, #0]
 800a95a:	b29b      	uxth	r3, r3
 800a95c:	021b      	lsls	r3, r3, #8
 800a95e:	b29b      	uxth	r3, r3
 800a960:	4413      	add	r3, r2
 800a962:	b29a      	uxth	r2, r3
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800a968:	683b      	ldr	r3, [r7, #0]
 800a96a:	3304      	adds	r3, #4
 800a96c:	781b      	ldrb	r3, [r3, #0]
 800a96e:	b29a      	uxth	r2, r3
 800a970:	683b      	ldr	r3, [r7, #0]
 800a972:	3305      	adds	r3, #5
 800a974:	781b      	ldrb	r3, [r3, #0]
 800a976:	b29b      	uxth	r3, r3
 800a978:	021b      	lsls	r3, r3, #8
 800a97a:	b29b      	uxth	r3, r3
 800a97c:	4413      	add	r3, r2
 800a97e:	b29a      	uxth	r2, r3
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800a984:	683b      	ldr	r3, [r7, #0]
 800a986:	3306      	adds	r3, #6
 800a988:	781b      	ldrb	r3, [r3, #0]
 800a98a:	b29a      	uxth	r2, r3
 800a98c:	683b      	ldr	r3, [r7, #0]
 800a98e:	3307      	adds	r3, #7
 800a990:	781b      	ldrb	r3, [r3, #0]
 800a992:	b29b      	uxth	r3, r3
 800a994:	021b      	lsls	r3, r3, #8
 800a996:	b29b      	uxth	r3, r3
 800a998:	4413      	add	r3, r2
 800a99a:	b29a      	uxth	r2, r3
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	80da      	strh	r2, [r3, #6]

}
 800a9a0:	bf00      	nop
 800a9a2:	370c      	adds	r7, #12
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	bc80      	pop	{r7}
 800a9a8:	4770      	bx	lr

0800a9aa <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800a9aa:	b580      	push	{r7, lr}
 800a9ac:	b082      	sub	sp, #8
 800a9ae:	af00      	add	r7, sp, #0
 800a9b0:	6078      	str	r0, [r7, #4]
 800a9b2:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800a9b4:	2180      	movs	r1, #128	; 0x80
 800a9b6:	6878      	ldr	r0, [r7, #4]
 800a9b8:	f7f7 ff64 	bl	8002884 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800a9bc:	2100      	movs	r1, #0
 800a9be:	6878      	ldr	r0, [r7, #4]
 800a9c0:	f7f7 ff60 	bl	8002884 <USBD_LL_StallEP>
}
 800a9c4:	bf00      	nop
 800a9c6:	3708      	adds	r7, #8
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	bd80      	pop	{r7, pc}

0800a9cc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b086      	sub	sp, #24
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	60f8      	str	r0, [r7, #12]
 800a9d4:	60b9      	str	r1, [r7, #8]
 800a9d6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a9d8:	2300      	movs	r3, #0
 800a9da:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d032      	beq.n	800aa48 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800a9e2:	68f8      	ldr	r0, [r7, #12]
 800a9e4:	f000 f834 	bl	800aa50 <USBD_GetLen>
 800a9e8:	4603      	mov	r3, r0
 800a9ea:	3301      	adds	r3, #1
 800a9ec:	b29b      	uxth	r3, r3
 800a9ee:	005b      	lsls	r3, r3, #1
 800a9f0:	b29a      	uxth	r2, r3
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a9f6:	7dfb      	ldrb	r3, [r7, #23]
 800a9f8:	1c5a      	adds	r2, r3, #1
 800a9fa:	75fa      	strb	r2, [r7, #23]
 800a9fc:	461a      	mov	r2, r3
 800a9fe:	68bb      	ldr	r3, [r7, #8]
 800aa00:	4413      	add	r3, r2
 800aa02:	687a      	ldr	r2, [r7, #4]
 800aa04:	7812      	ldrb	r2, [r2, #0]
 800aa06:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800aa08:	7dfb      	ldrb	r3, [r7, #23]
 800aa0a:	1c5a      	adds	r2, r3, #1
 800aa0c:	75fa      	strb	r2, [r7, #23]
 800aa0e:	461a      	mov	r2, r3
 800aa10:	68bb      	ldr	r3, [r7, #8]
 800aa12:	4413      	add	r3, r2
 800aa14:	2203      	movs	r2, #3
 800aa16:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800aa18:	e012      	b.n	800aa40 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	1c5a      	adds	r2, r3, #1
 800aa1e:	60fa      	str	r2, [r7, #12]
 800aa20:	7dfa      	ldrb	r2, [r7, #23]
 800aa22:	1c51      	adds	r1, r2, #1
 800aa24:	75f9      	strb	r1, [r7, #23]
 800aa26:	4611      	mov	r1, r2
 800aa28:	68ba      	ldr	r2, [r7, #8]
 800aa2a:	440a      	add	r2, r1
 800aa2c:	781b      	ldrb	r3, [r3, #0]
 800aa2e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800aa30:	7dfb      	ldrb	r3, [r7, #23]
 800aa32:	1c5a      	adds	r2, r3, #1
 800aa34:	75fa      	strb	r2, [r7, #23]
 800aa36:	461a      	mov	r2, r3
 800aa38:	68bb      	ldr	r3, [r7, #8]
 800aa3a:	4413      	add	r3, r2
 800aa3c:	2200      	movs	r2, #0
 800aa3e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	781b      	ldrb	r3, [r3, #0]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d1e8      	bne.n	800aa1a <USBD_GetString+0x4e>
    }
  }
}
 800aa48:	bf00      	nop
 800aa4a:	3718      	adds	r7, #24
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	bd80      	pop	{r7, pc}

0800aa50 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800aa50:	b480      	push	{r7}
 800aa52:	b085      	sub	sp, #20
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800aa58:	2300      	movs	r3, #0
 800aa5a:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800aa5c:	e005      	b.n	800aa6a <USBD_GetLen+0x1a>
  {
    len++;
 800aa5e:	7bfb      	ldrb	r3, [r7, #15]
 800aa60:	3301      	adds	r3, #1
 800aa62:	73fb      	strb	r3, [r7, #15]
    buf++;
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	3301      	adds	r3, #1
 800aa68:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	781b      	ldrb	r3, [r3, #0]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d1f5      	bne.n	800aa5e <USBD_GetLen+0xe>
  }

  return len;
 800aa72:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa74:	4618      	mov	r0, r3
 800aa76:	3714      	adds	r7, #20
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	bc80      	pop	{r7}
 800aa7c:	4770      	bx	lr

0800aa7e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800aa7e:	b580      	push	{r7, lr}
 800aa80:	b084      	sub	sp, #16
 800aa82:	af00      	add	r7, sp, #0
 800aa84:	60f8      	str	r0, [r7, #12]
 800aa86:	60b9      	str	r1, [r7, #8]
 800aa88:	4613      	mov	r3, r2
 800aa8a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	2202      	movs	r2, #2
 800aa90:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800aa94:	88fa      	ldrh	r2, [r7, #6]
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800aa9a:	88fa      	ldrh	r2, [r7, #6]
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800aaa0:	88fb      	ldrh	r3, [r7, #6]
 800aaa2:	68ba      	ldr	r2, [r7, #8]
 800aaa4:	2100      	movs	r1, #0
 800aaa6:	68f8      	ldr	r0, [r7, #12]
 800aaa8:	f7f7 ff75 	bl	8002996 <USBD_LL_Transmit>

  return USBD_OK;
 800aaac:	2300      	movs	r3, #0
}
 800aaae:	4618      	mov	r0, r3
 800aab0:	3710      	adds	r7, #16
 800aab2:	46bd      	mov	sp, r7
 800aab4:	bd80      	pop	{r7, pc}

0800aab6 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800aab6:	b580      	push	{r7, lr}
 800aab8:	b084      	sub	sp, #16
 800aaba:	af00      	add	r7, sp, #0
 800aabc:	60f8      	str	r0, [r7, #12]
 800aabe:	60b9      	str	r1, [r7, #8]
 800aac0:	4613      	mov	r3, r2
 800aac2:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800aac4:	88fb      	ldrh	r3, [r7, #6]
 800aac6:	68ba      	ldr	r2, [r7, #8]
 800aac8:	2100      	movs	r1, #0
 800aaca:	68f8      	ldr	r0, [r7, #12]
 800aacc:	f7f7 ff63 	bl	8002996 <USBD_LL_Transmit>

  return USBD_OK;
 800aad0:	2300      	movs	r3, #0
}
 800aad2:	4618      	mov	r0, r3
 800aad4:	3710      	adds	r7, #16
 800aad6:	46bd      	mov	sp, r7
 800aad8:	bd80      	pop	{r7, pc}

0800aada <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800aada:	b580      	push	{r7, lr}
 800aadc:	b084      	sub	sp, #16
 800aade:	af00      	add	r7, sp, #0
 800aae0:	60f8      	str	r0, [r7, #12]
 800aae2:	60b9      	str	r1, [r7, #8]
 800aae4:	4613      	mov	r3, r2
 800aae6:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	2203      	movs	r2, #3
 800aaec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800aaf0:	88fa      	ldrh	r2, [r7, #6]
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800aaf8:	88fa      	ldrh	r2, [r7, #6]
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ab00:	88fb      	ldrh	r3, [r7, #6]
 800ab02:	68ba      	ldr	r2, [r7, #8]
 800ab04:	2100      	movs	r1, #0
 800ab06:	68f8      	ldr	r0, [r7, #12]
 800ab08:	f7f7 ff68 	bl	80029dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ab0c:	2300      	movs	r3, #0
}
 800ab0e:	4618      	mov	r0, r3
 800ab10:	3710      	adds	r7, #16
 800ab12:	46bd      	mov	sp, r7
 800ab14:	bd80      	pop	{r7, pc}

0800ab16 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800ab16:	b580      	push	{r7, lr}
 800ab18:	b084      	sub	sp, #16
 800ab1a:	af00      	add	r7, sp, #0
 800ab1c:	60f8      	str	r0, [r7, #12]
 800ab1e:	60b9      	str	r1, [r7, #8]
 800ab20:	4613      	mov	r3, r2
 800ab22:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ab24:	88fb      	ldrh	r3, [r7, #6]
 800ab26:	68ba      	ldr	r2, [r7, #8]
 800ab28:	2100      	movs	r1, #0
 800ab2a:	68f8      	ldr	r0, [r7, #12]
 800ab2c:	f7f7 ff56 	bl	80029dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ab30:	2300      	movs	r3, #0
}
 800ab32:	4618      	mov	r0, r3
 800ab34:	3710      	adds	r7, #16
 800ab36:	46bd      	mov	sp, r7
 800ab38:	bd80      	pop	{r7, pc}

0800ab3a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ab3a:	b580      	push	{r7, lr}
 800ab3c:	b082      	sub	sp, #8
 800ab3e:	af00      	add	r7, sp, #0
 800ab40:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	2204      	movs	r2, #4
 800ab46:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	2200      	movs	r2, #0
 800ab4e:	2100      	movs	r1, #0
 800ab50:	6878      	ldr	r0, [r7, #4]
 800ab52:	f7f7 ff20 	bl	8002996 <USBD_LL_Transmit>

  return USBD_OK;
 800ab56:	2300      	movs	r3, #0
}
 800ab58:	4618      	mov	r0, r3
 800ab5a:	3708      	adds	r7, #8
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	bd80      	pop	{r7, pc}

0800ab60 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b082      	sub	sp, #8
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	2205      	movs	r2, #5
 800ab6c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ab70:	2300      	movs	r3, #0
 800ab72:	2200      	movs	r2, #0
 800ab74:	2100      	movs	r1, #0
 800ab76:	6878      	ldr	r0, [r7, #4]
 800ab78:	f7f7 ff30 	bl	80029dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ab7c:	2300      	movs	r3, #0
}
 800ab7e:	4618      	mov	r0, r3
 800ab80:	3708      	adds	r7, #8
 800ab82:	46bd      	mov	sp, r7
 800ab84:	bd80      	pop	{r7, pc}
	...

0800ab88 <__errno>:
 800ab88:	4b01      	ldr	r3, [pc, #4]	; (800ab90 <__errno+0x8>)
 800ab8a:	6818      	ldr	r0, [r3, #0]
 800ab8c:	4770      	bx	lr
 800ab8e:	bf00      	nop
 800ab90:	20000188 	.word	0x20000188

0800ab94 <__libc_init_array>:
 800ab94:	b570      	push	{r4, r5, r6, lr}
 800ab96:	2600      	movs	r6, #0
 800ab98:	4d0c      	ldr	r5, [pc, #48]	; (800abcc <__libc_init_array+0x38>)
 800ab9a:	4c0d      	ldr	r4, [pc, #52]	; (800abd0 <__libc_init_array+0x3c>)
 800ab9c:	1b64      	subs	r4, r4, r5
 800ab9e:	10a4      	asrs	r4, r4, #2
 800aba0:	42a6      	cmp	r6, r4
 800aba2:	d109      	bne.n	800abb8 <__libc_init_array+0x24>
 800aba4:	f002 ff72 	bl	800da8c <_init>
 800aba8:	2600      	movs	r6, #0
 800abaa:	4d0a      	ldr	r5, [pc, #40]	; (800abd4 <__libc_init_array+0x40>)
 800abac:	4c0a      	ldr	r4, [pc, #40]	; (800abd8 <__libc_init_array+0x44>)
 800abae:	1b64      	subs	r4, r4, r5
 800abb0:	10a4      	asrs	r4, r4, #2
 800abb2:	42a6      	cmp	r6, r4
 800abb4:	d105      	bne.n	800abc2 <__libc_init_array+0x2e>
 800abb6:	bd70      	pop	{r4, r5, r6, pc}
 800abb8:	f855 3b04 	ldr.w	r3, [r5], #4
 800abbc:	4798      	blx	r3
 800abbe:	3601      	adds	r6, #1
 800abc0:	e7ee      	b.n	800aba0 <__libc_init_array+0xc>
 800abc2:	f855 3b04 	ldr.w	r3, [r5], #4
 800abc6:	4798      	blx	r3
 800abc8:	3601      	adds	r6, #1
 800abca:	e7f2      	b.n	800abb2 <__libc_init_array+0x1e>
 800abcc:	0800e0b4 	.word	0x0800e0b4
 800abd0:	0800e0b4 	.word	0x0800e0b4
 800abd4:	0800e0b4 	.word	0x0800e0b4
 800abd8:	0800e0b8 	.word	0x0800e0b8

0800abdc <memset>:
 800abdc:	4603      	mov	r3, r0
 800abde:	4402      	add	r2, r0
 800abe0:	4293      	cmp	r3, r2
 800abe2:	d100      	bne.n	800abe6 <memset+0xa>
 800abe4:	4770      	bx	lr
 800abe6:	f803 1b01 	strb.w	r1, [r3], #1
 800abea:	e7f9      	b.n	800abe0 <memset+0x4>

0800abec <__cvt>:
 800abec:	2b00      	cmp	r3, #0
 800abee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800abf2:	461f      	mov	r7, r3
 800abf4:	bfbb      	ittet	lt
 800abf6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800abfa:	461f      	movlt	r7, r3
 800abfc:	2300      	movge	r3, #0
 800abfe:	232d      	movlt	r3, #45	; 0x2d
 800ac00:	b088      	sub	sp, #32
 800ac02:	4614      	mov	r4, r2
 800ac04:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ac06:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800ac08:	7013      	strb	r3, [r2, #0]
 800ac0a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ac0c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800ac10:	f023 0820 	bic.w	r8, r3, #32
 800ac14:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ac18:	d005      	beq.n	800ac26 <__cvt+0x3a>
 800ac1a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ac1e:	d100      	bne.n	800ac22 <__cvt+0x36>
 800ac20:	3501      	adds	r5, #1
 800ac22:	2302      	movs	r3, #2
 800ac24:	e000      	b.n	800ac28 <__cvt+0x3c>
 800ac26:	2303      	movs	r3, #3
 800ac28:	aa07      	add	r2, sp, #28
 800ac2a:	9204      	str	r2, [sp, #16]
 800ac2c:	aa06      	add	r2, sp, #24
 800ac2e:	e9cd a202 	strd	sl, r2, [sp, #8]
 800ac32:	e9cd 3500 	strd	r3, r5, [sp]
 800ac36:	4622      	mov	r2, r4
 800ac38:	463b      	mov	r3, r7
 800ac3a:	f000 fd11 	bl	800b660 <_dtoa_r>
 800ac3e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ac42:	4606      	mov	r6, r0
 800ac44:	d102      	bne.n	800ac4c <__cvt+0x60>
 800ac46:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ac48:	07db      	lsls	r3, r3, #31
 800ac4a:	d522      	bpl.n	800ac92 <__cvt+0xa6>
 800ac4c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ac50:	eb06 0905 	add.w	r9, r6, r5
 800ac54:	d110      	bne.n	800ac78 <__cvt+0x8c>
 800ac56:	7833      	ldrb	r3, [r6, #0]
 800ac58:	2b30      	cmp	r3, #48	; 0x30
 800ac5a:	d10a      	bne.n	800ac72 <__cvt+0x86>
 800ac5c:	2200      	movs	r2, #0
 800ac5e:	2300      	movs	r3, #0
 800ac60:	4620      	mov	r0, r4
 800ac62:	4639      	mov	r1, r7
 800ac64:	f7f5 fea0 	bl	80009a8 <__aeabi_dcmpeq>
 800ac68:	b918      	cbnz	r0, 800ac72 <__cvt+0x86>
 800ac6a:	f1c5 0501 	rsb	r5, r5, #1
 800ac6e:	f8ca 5000 	str.w	r5, [sl]
 800ac72:	f8da 3000 	ldr.w	r3, [sl]
 800ac76:	4499      	add	r9, r3
 800ac78:	2200      	movs	r2, #0
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	4620      	mov	r0, r4
 800ac7e:	4639      	mov	r1, r7
 800ac80:	f7f5 fe92 	bl	80009a8 <__aeabi_dcmpeq>
 800ac84:	b108      	cbz	r0, 800ac8a <__cvt+0x9e>
 800ac86:	f8cd 901c 	str.w	r9, [sp, #28]
 800ac8a:	2230      	movs	r2, #48	; 0x30
 800ac8c:	9b07      	ldr	r3, [sp, #28]
 800ac8e:	454b      	cmp	r3, r9
 800ac90:	d307      	bcc.n	800aca2 <__cvt+0xb6>
 800ac92:	4630      	mov	r0, r6
 800ac94:	9b07      	ldr	r3, [sp, #28]
 800ac96:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ac98:	1b9b      	subs	r3, r3, r6
 800ac9a:	6013      	str	r3, [r2, #0]
 800ac9c:	b008      	add	sp, #32
 800ac9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aca2:	1c59      	adds	r1, r3, #1
 800aca4:	9107      	str	r1, [sp, #28]
 800aca6:	701a      	strb	r2, [r3, #0]
 800aca8:	e7f0      	b.n	800ac8c <__cvt+0xa0>

0800acaa <__exponent>:
 800acaa:	4603      	mov	r3, r0
 800acac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800acae:	2900      	cmp	r1, #0
 800acb0:	f803 2b02 	strb.w	r2, [r3], #2
 800acb4:	bfb6      	itet	lt
 800acb6:	222d      	movlt	r2, #45	; 0x2d
 800acb8:	222b      	movge	r2, #43	; 0x2b
 800acba:	4249      	neglt	r1, r1
 800acbc:	2909      	cmp	r1, #9
 800acbe:	7042      	strb	r2, [r0, #1]
 800acc0:	dd2b      	ble.n	800ad1a <__exponent+0x70>
 800acc2:	f10d 0407 	add.w	r4, sp, #7
 800acc6:	46a4      	mov	ip, r4
 800acc8:	270a      	movs	r7, #10
 800acca:	fb91 f6f7 	sdiv	r6, r1, r7
 800acce:	460a      	mov	r2, r1
 800acd0:	46a6      	mov	lr, r4
 800acd2:	fb07 1516 	mls	r5, r7, r6, r1
 800acd6:	2a63      	cmp	r2, #99	; 0x63
 800acd8:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800acdc:	4631      	mov	r1, r6
 800acde:	f104 34ff 	add.w	r4, r4, #4294967295
 800ace2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800ace6:	dcf0      	bgt.n	800acca <__exponent+0x20>
 800ace8:	3130      	adds	r1, #48	; 0x30
 800acea:	f1ae 0502 	sub.w	r5, lr, #2
 800acee:	f804 1c01 	strb.w	r1, [r4, #-1]
 800acf2:	4629      	mov	r1, r5
 800acf4:	1c44      	adds	r4, r0, #1
 800acf6:	4561      	cmp	r1, ip
 800acf8:	d30a      	bcc.n	800ad10 <__exponent+0x66>
 800acfa:	f10d 0209 	add.w	r2, sp, #9
 800acfe:	eba2 020e 	sub.w	r2, r2, lr
 800ad02:	4565      	cmp	r5, ip
 800ad04:	bf88      	it	hi
 800ad06:	2200      	movhi	r2, #0
 800ad08:	4413      	add	r3, r2
 800ad0a:	1a18      	subs	r0, r3, r0
 800ad0c:	b003      	add	sp, #12
 800ad0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad10:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ad14:	f804 2f01 	strb.w	r2, [r4, #1]!
 800ad18:	e7ed      	b.n	800acf6 <__exponent+0x4c>
 800ad1a:	2330      	movs	r3, #48	; 0x30
 800ad1c:	3130      	adds	r1, #48	; 0x30
 800ad1e:	7083      	strb	r3, [r0, #2]
 800ad20:	70c1      	strb	r1, [r0, #3]
 800ad22:	1d03      	adds	r3, r0, #4
 800ad24:	e7f1      	b.n	800ad0a <__exponent+0x60>
	...

0800ad28 <_printf_float>:
 800ad28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad2c:	b091      	sub	sp, #68	; 0x44
 800ad2e:	460c      	mov	r4, r1
 800ad30:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800ad34:	4616      	mov	r6, r2
 800ad36:	461f      	mov	r7, r3
 800ad38:	4605      	mov	r5, r0
 800ad3a:	f001 fb75 	bl	800c428 <_localeconv_r>
 800ad3e:	6803      	ldr	r3, [r0, #0]
 800ad40:	4618      	mov	r0, r3
 800ad42:	9309      	str	r3, [sp, #36]	; 0x24
 800ad44:	f7f5 fa04 	bl	8000150 <strlen>
 800ad48:	2300      	movs	r3, #0
 800ad4a:	930e      	str	r3, [sp, #56]	; 0x38
 800ad4c:	f8d8 3000 	ldr.w	r3, [r8]
 800ad50:	900a      	str	r0, [sp, #40]	; 0x28
 800ad52:	3307      	adds	r3, #7
 800ad54:	f023 0307 	bic.w	r3, r3, #7
 800ad58:	f103 0208 	add.w	r2, r3, #8
 800ad5c:	f894 9018 	ldrb.w	r9, [r4, #24]
 800ad60:	f8d4 b000 	ldr.w	fp, [r4]
 800ad64:	f8c8 2000 	str.w	r2, [r8]
 800ad68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad6c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ad70:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800ad74:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800ad78:	930b      	str	r3, [sp, #44]	; 0x2c
 800ad7a:	f04f 32ff 	mov.w	r2, #4294967295
 800ad7e:	4640      	mov	r0, r8
 800ad80:	4b9c      	ldr	r3, [pc, #624]	; (800aff4 <_printf_float+0x2cc>)
 800ad82:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ad84:	f7f5 fe42 	bl	8000a0c <__aeabi_dcmpun>
 800ad88:	bb70      	cbnz	r0, 800ade8 <_printf_float+0xc0>
 800ad8a:	f04f 32ff 	mov.w	r2, #4294967295
 800ad8e:	4640      	mov	r0, r8
 800ad90:	4b98      	ldr	r3, [pc, #608]	; (800aff4 <_printf_float+0x2cc>)
 800ad92:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ad94:	f7f5 fe1c 	bl	80009d0 <__aeabi_dcmple>
 800ad98:	bb30      	cbnz	r0, 800ade8 <_printf_float+0xc0>
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	4640      	mov	r0, r8
 800ada0:	4651      	mov	r1, sl
 800ada2:	f7f5 fe0b 	bl	80009bc <__aeabi_dcmplt>
 800ada6:	b110      	cbz	r0, 800adae <_printf_float+0x86>
 800ada8:	232d      	movs	r3, #45	; 0x2d
 800adaa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800adae:	4b92      	ldr	r3, [pc, #584]	; (800aff8 <_printf_float+0x2d0>)
 800adb0:	4892      	ldr	r0, [pc, #584]	; (800affc <_printf_float+0x2d4>)
 800adb2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800adb6:	bf94      	ite	ls
 800adb8:	4698      	movls	r8, r3
 800adba:	4680      	movhi	r8, r0
 800adbc:	2303      	movs	r3, #3
 800adbe:	f04f 0a00 	mov.w	sl, #0
 800adc2:	6123      	str	r3, [r4, #16]
 800adc4:	f02b 0304 	bic.w	r3, fp, #4
 800adc8:	6023      	str	r3, [r4, #0]
 800adca:	4633      	mov	r3, r6
 800adcc:	4621      	mov	r1, r4
 800adce:	4628      	mov	r0, r5
 800add0:	9700      	str	r7, [sp, #0]
 800add2:	aa0f      	add	r2, sp, #60	; 0x3c
 800add4:	f000 f9d4 	bl	800b180 <_printf_common>
 800add8:	3001      	adds	r0, #1
 800adda:	f040 8090 	bne.w	800aefe <_printf_float+0x1d6>
 800adde:	f04f 30ff 	mov.w	r0, #4294967295
 800ade2:	b011      	add	sp, #68	; 0x44
 800ade4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ade8:	4642      	mov	r2, r8
 800adea:	4653      	mov	r3, sl
 800adec:	4640      	mov	r0, r8
 800adee:	4651      	mov	r1, sl
 800adf0:	f7f5 fe0c 	bl	8000a0c <__aeabi_dcmpun>
 800adf4:	b148      	cbz	r0, 800ae0a <_printf_float+0xe2>
 800adf6:	f1ba 0f00 	cmp.w	sl, #0
 800adfa:	bfb8      	it	lt
 800adfc:	232d      	movlt	r3, #45	; 0x2d
 800adfe:	4880      	ldr	r0, [pc, #512]	; (800b000 <_printf_float+0x2d8>)
 800ae00:	bfb8      	it	lt
 800ae02:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ae06:	4b7f      	ldr	r3, [pc, #508]	; (800b004 <_printf_float+0x2dc>)
 800ae08:	e7d3      	b.n	800adb2 <_printf_float+0x8a>
 800ae0a:	6863      	ldr	r3, [r4, #4]
 800ae0c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800ae10:	1c5a      	adds	r2, r3, #1
 800ae12:	d142      	bne.n	800ae9a <_printf_float+0x172>
 800ae14:	2306      	movs	r3, #6
 800ae16:	6063      	str	r3, [r4, #4]
 800ae18:	2200      	movs	r2, #0
 800ae1a:	9206      	str	r2, [sp, #24]
 800ae1c:	aa0e      	add	r2, sp, #56	; 0x38
 800ae1e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800ae22:	aa0d      	add	r2, sp, #52	; 0x34
 800ae24:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800ae28:	9203      	str	r2, [sp, #12]
 800ae2a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800ae2e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800ae32:	6023      	str	r3, [r4, #0]
 800ae34:	6863      	ldr	r3, [r4, #4]
 800ae36:	4642      	mov	r2, r8
 800ae38:	9300      	str	r3, [sp, #0]
 800ae3a:	4628      	mov	r0, r5
 800ae3c:	4653      	mov	r3, sl
 800ae3e:	910b      	str	r1, [sp, #44]	; 0x2c
 800ae40:	f7ff fed4 	bl	800abec <__cvt>
 800ae44:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ae46:	4680      	mov	r8, r0
 800ae48:	2947      	cmp	r1, #71	; 0x47
 800ae4a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800ae4c:	d108      	bne.n	800ae60 <_printf_float+0x138>
 800ae4e:	1cc8      	adds	r0, r1, #3
 800ae50:	db02      	blt.n	800ae58 <_printf_float+0x130>
 800ae52:	6863      	ldr	r3, [r4, #4]
 800ae54:	4299      	cmp	r1, r3
 800ae56:	dd40      	ble.n	800aeda <_printf_float+0x1b2>
 800ae58:	f1a9 0902 	sub.w	r9, r9, #2
 800ae5c:	fa5f f989 	uxtb.w	r9, r9
 800ae60:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800ae64:	d81f      	bhi.n	800aea6 <_printf_float+0x17e>
 800ae66:	464a      	mov	r2, r9
 800ae68:	3901      	subs	r1, #1
 800ae6a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ae6e:	910d      	str	r1, [sp, #52]	; 0x34
 800ae70:	f7ff ff1b 	bl	800acaa <__exponent>
 800ae74:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ae76:	4682      	mov	sl, r0
 800ae78:	1813      	adds	r3, r2, r0
 800ae7a:	2a01      	cmp	r2, #1
 800ae7c:	6123      	str	r3, [r4, #16]
 800ae7e:	dc02      	bgt.n	800ae86 <_printf_float+0x15e>
 800ae80:	6822      	ldr	r2, [r4, #0]
 800ae82:	07d2      	lsls	r2, r2, #31
 800ae84:	d501      	bpl.n	800ae8a <_printf_float+0x162>
 800ae86:	3301      	adds	r3, #1
 800ae88:	6123      	str	r3, [r4, #16]
 800ae8a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d09b      	beq.n	800adca <_printf_float+0xa2>
 800ae92:	232d      	movs	r3, #45	; 0x2d
 800ae94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ae98:	e797      	b.n	800adca <_printf_float+0xa2>
 800ae9a:	2947      	cmp	r1, #71	; 0x47
 800ae9c:	d1bc      	bne.n	800ae18 <_printf_float+0xf0>
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d1ba      	bne.n	800ae18 <_printf_float+0xf0>
 800aea2:	2301      	movs	r3, #1
 800aea4:	e7b7      	b.n	800ae16 <_printf_float+0xee>
 800aea6:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800aeaa:	d118      	bne.n	800aede <_printf_float+0x1b6>
 800aeac:	2900      	cmp	r1, #0
 800aeae:	6863      	ldr	r3, [r4, #4]
 800aeb0:	dd0b      	ble.n	800aeca <_printf_float+0x1a2>
 800aeb2:	6121      	str	r1, [r4, #16]
 800aeb4:	b913      	cbnz	r3, 800aebc <_printf_float+0x194>
 800aeb6:	6822      	ldr	r2, [r4, #0]
 800aeb8:	07d0      	lsls	r0, r2, #31
 800aeba:	d502      	bpl.n	800aec2 <_printf_float+0x19a>
 800aebc:	3301      	adds	r3, #1
 800aebe:	440b      	add	r3, r1
 800aec0:	6123      	str	r3, [r4, #16]
 800aec2:	f04f 0a00 	mov.w	sl, #0
 800aec6:	65a1      	str	r1, [r4, #88]	; 0x58
 800aec8:	e7df      	b.n	800ae8a <_printf_float+0x162>
 800aeca:	b913      	cbnz	r3, 800aed2 <_printf_float+0x1aa>
 800aecc:	6822      	ldr	r2, [r4, #0]
 800aece:	07d2      	lsls	r2, r2, #31
 800aed0:	d501      	bpl.n	800aed6 <_printf_float+0x1ae>
 800aed2:	3302      	adds	r3, #2
 800aed4:	e7f4      	b.n	800aec0 <_printf_float+0x198>
 800aed6:	2301      	movs	r3, #1
 800aed8:	e7f2      	b.n	800aec0 <_printf_float+0x198>
 800aeda:	f04f 0967 	mov.w	r9, #103	; 0x67
 800aede:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aee0:	4299      	cmp	r1, r3
 800aee2:	db05      	blt.n	800aef0 <_printf_float+0x1c8>
 800aee4:	6823      	ldr	r3, [r4, #0]
 800aee6:	6121      	str	r1, [r4, #16]
 800aee8:	07d8      	lsls	r0, r3, #31
 800aeea:	d5ea      	bpl.n	800aec2 <_printf_float+0x19a>
 800aeec:	1c4b      	adds	r3, r1, #1
 800aeee:	e7e7      	b.n	800aec0 <_printf_float+0x198>
 800aef0:	2900      	cmp	r1, #0
 800aef2:	bfcc      	ite	gt
 800aef4:	2201      	movgt	r2, #1
 800aef6:	f1c1 0202 	rsble	r2, r1, #2
 800aefa:	4413      	add	r3, r2
 800aefc:	e7e0      	b.n	800aec0 <_printf_float+0x198>
 800aefe:	6823      	ldr	r3, [r4, #0]
 800af00:	055a      	lsls	r2, r3, #21
 800af02:	d407      	bmi.n	800af14 <_printf_float+0x1ec>
 800af04:	6923      	ldr	r3, [r4, #16]
 800af06:	4642      	mov	r2, r8
 800af08:	4631      	mov	r1, r6
 800af0a:	4628      	mov	r0, r5
 800af0c:	47b8      	blx	r7
 800af0e:	3001      	adds	r0, #1
 800af10:	d12b      	bne.n	800af6a <_printf_float+0x242>
 800af12:	e764      	b.n	800adde <_printf_float+0xb6>
 800af14:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800af18:	f240 80dd 	bls.w	800b0d6 <_printf_float+0x3ae>
 800af1c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800af20:	2200      	movs	r2, #0
 800af22:	2300      	movs	r3, #0
 800af24:	f7f5 fd40 	bl	80009a8 <__aeabi_dcmpeq>
 800af28:	2800      	cmp	r0, #0
 800af2a:	d033      	beq.n	800af94 <_printf_float+0x26c>
 800af2c:	2301      	movs	r3, #1
 800af2e:	4631      	mov	r1, r6
 800af30:	4628      	mov	r0, r5
 800af32:	4a35      	ldr	r2, [pc, #212]	; (800b008 <_printf_float+0x2e0>)
 800af34:	47b8      	blx	r7
 800af36:	3001      	adds	r0, #1
 800af38:	f43f af51 	beq.w	800adde <_printf_float+0xb6>
 800af3c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800af40:	429a      	cmp	r2, r3
 800af42:	db02      	blt.n	800af4a <_printf_float+0x222>
 800af44:	6823      	ldr	r3, [r4, #0]
 800af46:	07d8      	lsls	r0, r3, #31
 800af48:	d50f      	bpl.n	800af6a <_printf_float+0x242>
 800af4a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800af4e:	4631      	mov	r1, r6
 800af50:	4628      	mov	r0, r5
 800af52:	47b8      	blx	r7
 800af54:	3001      	adds	r0, #1
 800af56:	f43f af42 	beq.w	800adde <_printf_float+0xb6>
 800af5a:	f04f 0800 	mov.w	r8, #0
 800af5e:	f104 091a 	add.w	r9, r4, #26
 800af62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800af64:	3b01      	subs	r3, #1
 800af66:	4543      	cmp	r3, r8
 800af68:	dc09      	bgt.n	800af7e <_printf_float+0x256>
 800af6a:	6823      	ldr	r3, [r4, #0]
 800af6c:	079b      	lsls	r3, r3, #30
 800af6e:	f100 8102 	bmi.w	800b176 <_printf_float+0x44e>
 800af72:	68e0      	ldr	r0, [r4, #12]
 800af74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800af76:	4298      	cmp	r0, r3
 800af78:	bfb8      	it	lt
 800af7a:	4618      	movlt	r0, r3
 800af7c:	e731      	b.n	800ade2 <_printf_float+0xba>
 800af7e:	2301      	movs	r3, #1
 800af80:	464a      	mov	r2, r9
 800af82:	4631      	mov	r1, r6
 800af84:	4628      	mov	r0, r5
 800af86:	47b8      	blx	r7
 800af88:	3001      	adds	r0, #1
 800af8a:	f43f af28 	beq.w	800adde <_printf_float+0xb6>
 800af8e:	f108 0801 	add.w	r8, r8, #1
 800af92:	e7e6      	b.n	800af62 <_printf_float+0x23a>
 800af94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800af96:	2b00      	cmp	r3, #0
 800af98:	dc38      	bgt.n	800b00c <_printf_float+0x2e4>
 800af9a:	2301      	movs	r3, #1
 800af9c:	4631      	mov	r1, r6
 800af9e:	4628      	mov	r0, r5
 800afa0:	4a19      	ldr	r2, [pc, #100]	; (800b008 <_printf_float+0x2e0>)
 800afa2:	47b8      	blx	r7
 800afa4:	3001      	adds	r0, #1
 800afa6:	f43f af1a 	beq.w	800adde <_printf_float+0xb6>
 800afaa:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800afae:	4313      	orrs	r3, r2
 800afb0:	d102      	bne.n	800afb8 <_printf_float+0x290>
 800afb2:	6823      	ldr	r3, [r4, #0]
 800afb4:	07d9      	lsls	r1, r3, #31
 800afb6:	d5d8      	bpl.n	800af6a <_printf_float+0x242>
 800afb8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800afbc:	4631      	mov	r1, r6
 800afbe:	4628      	mov	r0, r5
 800afc0:	47b8      	blx	r7
 800afc2:	3001      	adds	r0, #1
 800afc4:	f43f af0b 	beq.w	800adde <_printf_float+0xb6>
 800afc8:	f04f 0900 	mov.w	r9, #0
 800afcc:	f104 0a1a 	add.w	sl, r4, #26
 800afd0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800afd2:	425b      	negs	r3, r3
 800afd4:	454b      	cmp	r3, r9
 800afd6:	dc01      	bgt.n	800afdc <_printf_float+0x2b4>
 800afd8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800afda:	e794      	b.n	800af06 <_printf_float+0x1de>
 800afdc:	2301      	movs	r3, #1
 800afde:	4652      	mov	r2, sl
 800afe0:	4631      	mov	r1, r6
 800afe2:	4628      	mov	r0, r5
 800afe4:	47b8      	blx	r7
 800afe6:	3001      	adds	r0, #1
 800afe8:	f43f aef9 	beq.w	800adde <_printf_float+0xb6>
 800afec:	f109 0901 	add.w	r9, r9, #1
 800aff0:	e7ee      	b.n	800afd0 <_printf_float+0x2a8>
 800aff2:	bf00      	nop
 800aff4:	7fefffff 	.word	0x7fefffff
 800aff8:	0800dcdc 	.word	0x0800dcdc
 800affc:	0800dce0 	.word	0x0800dce0
 800b000:	0800dce8 	.word	0x0800dce8
 800b004:	0800dce4 	.word	0x0800dce4
 800b008:	0800dcec 	.word	0x0800dcec
 800b00c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b00e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b010:	429a      	cmp	r2, r3
 800b012:	bfa8      	it	ge
 800b014:	461a      	movge	r2, r3
 800b016:	2a00      	cmp	r2, #0
 800b018:	4691      	mov	r9, r2
 800b01a:	dc37      	bgt.n	800b08c <_printf_float+0x364>
 800b01c:	f04f 0b00 	mov.w	fp, #0
 800b020:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b024:	f104 021a 	add.w	r2, r4, #26
 800b028:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800b02c:	ebaa 0309 	sub.w	r3, sl, r9
 800b030:	455b      	cmp	r3, fp
 800b032:	dc33      	bgt.n	800b09c <_printf_float+0x374>
 800b034:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800b038:	429a      	cmp	r2, r3
 800b03a:	db3b      	blt.n	800b0b4 <_printf_float+0x38c>
 800b03c:	6823      	ldr	r3, [r4, #0]
 800b03e:	07da      	lsls	r2, r3, #31
 800b040:	d438      	bmi.n	800b0b4 <_printf_float+0x38c>
 800b042:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b044:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b046:	eba3 020a 	sub.w	r2, r3, sl
 800b04a:	eba3 0901 	sub.w	r9, r3, r1
 800b04e:	4591      	cmp	r9, r2
 800b050:	bfa8      	it	ge
 800b052:	4691      	movge	r9, r2
 800b054:	f1b9 0f00 	cmp.w	r9, #0
 800b058:	dc34      	bgt.n	800b0c4 <_printf_float+0x39c>
 800b05a:	f04f 0800 	mov.w	r8, #0
 800b05e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b062:	f104 0a1a 	add.w	sl, r4, #26
 800b066:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800b06a:	1a9b      	subs	r3, r3, r2
 800b06c:	eba3 0309 	sub.w	r3, r3, r9
 800b070:	4543      	cmp	r3, r8
 800b072:	f77f af7a 	ble.w	800af6a <_printf_float+0x242>
 800b076:	2301      	movs	r3, #1
 800b078:	4652      	mov	r2, sl
 800b07a:	4631      	mov	r1, r6
 800b07c:	4628      	mov	r0, r5
 800b07e:	47b8      	blx	r7
 800b080:	3001      	adds	r0, #1
 800b082:	f43f aeac 	beq.w	800adde <_printf_float+0xb6>
 800b086:	f108 0801 	add.w	r8, r8, #1
 800b08a:	e7ec      	b.n	800b066 <_printf_float+0x33e>
 800b08c:	4613      	mov	r3, r2
 800b08e:	4631      	mov	r1, r6
 800b090:	4642      	mov	r2, r8
 800b092:	4628      	mov	r0, r5
 800b094:	47b8      	blx	r7
 800b096:	3001      	adds	r0, #1
 800b098:	d1c0      	bne.n	800b01c <_printf_float+0x2f4>
 800b09a:	e6a0      	b.n	800adde <_printf_float+0xb6>
 800b09c:	2301      	movs	r3, #1
 800b09e:	4631      	mov	r1, r6
 800b0a0:	4628      	mov	r0, r5
 800b0a2:	920b      	str	r2, [sp, #44]	; 0x2c
 800b0a4:	47b8      	blx	r7
 800b0a6:	3001      	adds	r0, #1
 800b0a8:	f43f ae99 	beq.w	800adde <_printf_float+0xb6>
 800b0ac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b0ae:	f10b 0b01 	add.w	fp, fp, #1
 800b0b2:	e7b9      	b.n	800b028 <_printf_float+0x300>
 800b0b4:	4631      	mov	r1, r6
 800b0b6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b0ba:	4628      	mov	r0, r5
 800b0bc:	47b8      	blx	r7
 800b0be:	3001      	adds	r0, #1
 800b0c0:	d1bf      	bne.n	800b042 <_printf_float+0x31a>
 800b0c2:	e68c      	b.n	800adde <_printf_float+0xb6>
 800b0c4:	464b      	mov	r3, r9
 800b0c6:	4631      	mov	r1, r6
 800b0c8:	4628      	mov	r0, r5
 800b0ca:	eb08 020a 	add.w	r2, r8, sl
 800b0ce:	47b8      	blx	r7
 800b0d0:	3001      	adds	r0, #1
 800b0d2:	d1c2      	bne.n	800b05a <_printf_float+0x332>
 800b0d4:	e683      	b.n	800adde <_printf_float+0xb6>
 800b0d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b0d8:	2a01      	cmp	r2, #1
 800b0da:	dc01      	bgt.n	800b0e0 <_printf_float+0x3b8>
 800b0dc:	07db      	lsls	r3, r3, #31
 800b0de:	d537      	bpl.n	800b150 <_printf_float+0x428>
 800b0e0:	2301      	movs	r3, #1
 800b0e2:	4642      	mov	r2, r8
 800b0e4:	4631      	mov	r1, r6
 800b0e6:	4628      	mov	r0, r5
 800b0e8:	47b8      	blx	r7
 800b0ea:	3001      	adds	r0, #1
 800b0ec:	f43f ae77 	beq.w	800adde <_printf_float+0xb6>
 800b0f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b0f4:	4631      	mov	r1, r6
 800b0f6:	4628      	mov	r0, r5
 800b0f8:	47b8      	blx	r7
 800b0fa:	3001      	adds	r0, #1
 800b0fc:	f43f ae6f 	beq.w	800adde <_printf_float+0xb6>
 800b100:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b104:	2200      	movs	r2, #0
 800b106:	2300      	movs	r3, #0
 800b108:	f7f5 fc4e 	bl	80009a8 <__aeabi_dcmpeq>
 800b10c:	b9d8      	cbnz	r0, 800b146 <_printf_float+0x41e>
 800b10e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b110:	f108 0201 	add.w	r2, r8, #1
 800b114:	3b01      	subs	r3, #1
 800b116:	4631      	mov	r1, r6
 800b118:	4628      	mov	r0, r5
 800b11a:	47b8      	blx	r7
 800b11c:	3001      	adds	r0, #1
 800b11e:	d10e      	bne.n	800b13e <_printf_float+0x416>
 800b120:	e65d      	b.n	800adde <_printf_float+0xb6>
 800b122:	2301      	movs	r3, #1
 800b124:	464a      	mov	r2, r9
 800b126:	4631      	mov	r1, r6
 800b128:	4628      	mov	r0, r5
 800b12a:	47b8      	blx	r7
 800b12c:	3001      	adds	r0, #1
 800b12e:	f43f ae56 	beq.w	800adde <_printf_float+0xb6>
 800b132:	f108 0801 	add.w	r8, r8, #1
 800b136:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b138:	3b01      	subs	r3, #1
 800b13a:	4543      	cmp	r3, r8
 800b13c:	dcf1      	bgt.n	800b122 <_printf_float+0x3fa>
 800b13e:	4653      	mov	r3, sl
 800b140:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b144:	e6e0      	b.n	800af08 <_printf_float+0x1e0>
 800b146:	f04f 0800 	mov.w	r8, #0
 800b14a:	f104 091a 	add.w	r9, r4, #26
 800b14e:	e7f2      	b.n	800b136 <_printf_float+0x40e>
 800b150:	2301      	movs	r3, #1
 800b152:	4642      	mov	r2, r8
 800b154:	e7df      	b.n	800b116 <_printf_float+0x3ee>
 800b156:	2301      	movs	r3, #1
 800b158:	464a      	mov	r2, r9
 800b15a:	4631      	mov	r1, r6
 800b15c:	4628      	mov	r0, r5
 800b15e:	47b8      	blx	r7
 800b160:	3001      	adds	r0, #1
 800b162:	f43f ae3c 	beq.w	800adde <_printf_float+0xb6>
 800b166:	f108 0801 	add.w	r8, r8, #1
 800b16a:	68e3      	ldr	r3, [r4, #12]
 800b16c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b16e:	1a5b      	subs	r3, r3, r1
 800b170:	4543      	cmp	r3, r8
 800b172:	dcf0      	bgt.n	800b156 <_printf_float+0x42e>
 800b174:	e6fd      	b.n	800af72 <_printf_float+0x24a>
 800b176:	f04f 0800 	mov.w	r8, #0
 800b17a:	f104 0919 	add.w	r9, r4, #25
 800b17e:	e7f4      	b.n	800b16a <_printf_float+0x442>

0800b180 <_printf_common>:
 800b180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b184:	4616      	mov	r6, r2
 800b186:	4699      	mov	r9, r3
 800b188:	688a      	ldr	r2, [r1, #8]
 800b18a:	690b      	ldr	r3, [r1, #16]
 800b18c:	4607      	mov	r7, r0
 800b18e:	4293      	cmp	r3, r2
 800b190:	bfb8      	it	lt
 800b192:	4613      	movlt	r3, r2
 800b194:	6033      	str	r3, [r6, #0]
 800b196:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b19a:	460c      	mov	r4, r1
 800b19c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b1a0:	b10a      	cbz	r2, 800b1a6 <_printf_common+0x26>
 800b1a2:	3301      	adds	r3, #1
 800b1a4:	6033      	str	r3, [r6, #0]
 800b1a6:	6823      	ldr	r3, [r4, #0]
 800b1a8:	0699      	lsls	r1, r3, #26
 800b1aa:	bf42      	ittt	mi
 800b1ac:	6833      	ldrmi	r3, [r6, #0]
 800b1ae:	3302      	addmi	r3, #2
 800b1b0:	6033      	strmi	r3, [r6, #0]
 800b1b2:	6825      	ldr	r5, [r4, #0]
 800b1b4:	f015 0506 	ands.w	r5, r5, #6
 800b1b8:	d106      	bne.n	800b1c8 <_printf_common+0x48>
 800b1ba:	f104 0a19 	add.w	sl, r4, #25
 800b1be:	68e3      	ldr	r3, [r4, #12]
 800b1c0:	6832      	ldr	r2, [r6, #0]
 800b1c2:	1a9b      	subs	r3, r3, r2
 800b1c4:	42ab      	cmp	r3, r5
 800b1c6:	dc28      	bgt.n	800b21a <_printf_common+0x9a>
 800b1c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b1cc:	1e13      	subs	r3, r2, #0
 800b1ce:	6822      	ldr	r2, [r4, #0]
 800b1d0:	bf18      	it	ne
 800b1d2:	2301      	movne	r3, #1
 800b1d4:	0692      	lsls	r2, r2, #26
 800b1d6:	d42d      	bmi.n	800b234 <_printf_common+0xb4>
 800b1d8:	4649      	mov	r1, r9
 800b1da:	4638      	mov	r0, r7
 800b1dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b1e0:	47c0      	blx	r8
 800b1e2:	3001      	adds	r0, #1
 800b1e4:	d020      	beq.n	800b228 <_printf_common+0xa8>
 800b1e6:	6823      	ldr	r3, [r4, #0]
 800b1e8:	68e5      	ldr	r5, [r4, #12]
 800b1ea:	f003 0306 	and.w	r3, r3, #6
 800b1ee:	2b04      	cmp	r3, #4
 800b1f0:	bf18      	it	ne
 800b1f2:	2500      	movne	r5, #0
 800b1f4:	6832      	ldr	r2, [r6, #0]
 800b1f6:	f04f 0600 	mov.w	r6, #0
 800b1fa:	68a3      	ldr	r3, [r4, #8]
 800b1fc:	bf08      	it	eq
 800b1fe:	1aad      	subeq	r5, r5, r2
 800b200:	6922      	ldr	r2, [r4, #16]
 800b202:	bf08      	it	eq
 800b204:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b208:	4293      	cmp	r3, r2
 800b20a:	bfc4      	itt	gt
 800b20c:	1a9b      	subgt	r3, r3, r2
 800b20e:	18ed      	addgt	r5, r5, r3
 800b210:	341a      	adds	r4, #26
 800b212:	42b5      	cmp	r5, r6
 800b214:	d11a      	bne.n	800b24c <_printf_common+0xcc>
 800b216:	2000      	movs	r0, #0
 800b218:	e008      	b.n	800b22c <_printf_common+0xac>
 800b21a:	2301      	movs	r3, #1
 800b21c:	4652      	mov	r2, sl
 800b21e:	4649      	mov	r1, r9
 800b220:	4638      	mov	r0, r7
 800b222:	47c0      	blx	r8
 800b224:	3001      	adds	r0, #1
 800b226:	d103      	bne.n	800b230 <_printf_common+0xb0>
 800b228:	f04f 30ff 	mov.w	r0, #4294967295
 800b22c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b230:	3501      	adds	r5, #1
 800b232:	e7c4      	b.n	800b1be <_printf_common+0x3e>
 800b234:	2030      	movs	r0, #48	; 0x30
 800b236:	18e1      	adds	r1, r4, r3
 800b238:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b23c:	1c5a      	adds	r2, r3, #1
 800b23e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b242:	4422      	add	r2, r4
 800b244:	3302      	adds	r3, #2
 800b246:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b24a:	e7c5      	b.n	800b1d8 <_printf_common+0x58>
 800b24c:	2301      	movs	r3, #1
 800b24e:	4622      	mov	r2, r4
 800b250:	4649      	mov	r1, r9
 800b252:	4638      	mov	r0, r7
 800b254:	47c0      	blx	r8
 800b256:	3001      	adds	r0, #1
 800b258:	d0e6      	beq.n	800b228 <_printf_common+0xa8>
 800b25a:	3601      	adds	r6, #1
 800b25c:	e7d9      	b.n	800b212 <_printf_common+0x92>
	...

0800b260 <_printf_i>:
 800b260:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b264:	7e0f      	ldrb	r7, [r1, #24]
 800b266:	4691      	mov	r9, r2
 800b268:	2f78      	cmp	r7, #120	; 0x78
 800b26a:	4680      	mov	r8, r0
 800b26c:	460c      	mov	r4, r1
 800b26e:	469a      	mov	sl, r3
 800b270:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b272:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b276:	d807      	bhi.n	800b288 <_printf_i+0x28>
 800b278:	2f62      	cmp	r7, #98	; 0x62
 800b27a:	d80a      	bhi.n	800b292 <_printf_i+0x32>
 800b27c:	2f00      	cmp	r7, #0
 800b27e:	f000 80d9 	beq.w	800b434 <_printf_i+0x1d4>
 800b282:	2f58      	cmp	r7, #88	; 0x58
 800b284:	f000 80a4 	beq.w	800b3d0 <_printf_i+0x170>
 800b288:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b28c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b290:	e03a      	b.n	800b308 <_printf_i+0xa8>
 800b292:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b296:	2b15      	cmp	r3, #21
 800b298:	d8f6      	bhi.n	800b288 <_printf_i+0x28>
 800b29a:	a101      	add	r1, pc, #4	; (adr r1, 800b2a0 <_printf_i+0x40>)
 800b29c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b2a0:	0800b2f9 	.word	0x0800b2f9
 800b2a4:	0800b30d 	.word	0x0800b30d
 800b2a8:	0800b289 	.word	0x0800b289
 800b2ac:	0800b289 	.word	0x0800b289
 800b2b0:	0800b289 	.word	0x0800b289
 800b2b4:	0800b289 	.word	0x0800b289
 800b2b8:	0800b30d 	.word	0x0800b30d
 800b2bc:	0800b289 	.word	0x0800b289
 800b2c0:	0800b289 	.word	0x0800b289
 800b2c4:	0800b289 	.word	0x0800b289
 800b2c8:	0800b289 	.word	0x0800b289
 800b2cc:	0800b41b 	.word	0x0800b41b
 800b2d0:	0800b33d 	.word	0x0800b33d
 800b2d4:	0800b3fd 	.word	0x0800b3fd
 800b2d8:	0800b289 	.word	0x0800b289
 800b2dc:	0800b289 	.word	0x0800b289
 800b2e0:	0800b43d 	.word	0x0800b43d
 800b2e4:	0800b289 	.word	0x0800b289
 800b2e8:	0800b33d 	.word	0x0800b33d
 800b2ec:	0800b289 	.word	0x0800b289
 800b2f0:	0800b289 	.word	0x0800b289
 800b2f4:	0800b405 	.word	0x0800b405
 800b2f8:	682b      	ldr	r3, [r5, #0]
 800b2fa:	1d1a      	adds	r2, r3, #4
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	602a      	str	r2, [r5, #0]
 800b300:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b304:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b308:	2301      	movs	r3, #1
 800b30a:	e0a4      	b.n	800b456 <_printf_i+0x1f6>
 800b30c:	6820      	ldr	r0, [r4, #0]
 800b30e:	6829      	ldr	r1, [r5, #0]
 800b310:	0606      	lsls	r6, r0, #24
 800b312:	f101 0304 	add.w	r3, r1, #4
 800b316:	d50a      	bpl.n	800b32e <_printf_i+0xce>
 800b318:	680e      	ldr	r6, [r1, #0]
 800b31a:	602b      	str	r3, [r5, #0]
 800b31c:	2e00      	cmp	r6, #0
 800b31e:	da03      	bge.n	800b328 <_printf_i+0xc8>
 800b320:	232d      	movs	r3, #45	; 0x2d
 800b322:	4276      	negs	r6, r6
 800b324:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b328:	230a      	movs	r3, #10
 800b32a:	485e      	ldr	r0, [pc, #376]	; (800b4a4 <_printf_i+0x244>)
 800b32c:	e019      	b.n	800b362 <_printf_i+0x102>
 800b32e:	680e      	ldr	r6, [r1, #0]
 800b330:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b334:	602b      	str	r3, [r5, #0]
 800b336:	bf18      	it	ne
 800b338:	b236      	sxthne	r6, r6
 800b33a:	e7ef      	b.n	800b31c <_printf_i+0xbc>
 800b33c:	682b      	ldr	r3, [r5, #0]
 800b33e:	6820      	ldr	r0, [r4, #0]
 800b340:	1d19      	adds	r1, r3, #4
 800b342:	6029      	str	r1, [r5, #0]
 800b344:	0601      	lsls	r1, r0, #24
 800b346:	d501      	bpl.n	800b34c <_printf_i+0xec>
 800b348:	681e      	ldr	r6, [r3, #0]
 800b34a:	e002      	b.n	800b352 <_printf_i+0xf2>
 800b34c:	0646      	lsls	r6, r0, #25
 800b34e:	d5fb      	bpl.n	800b348 <_printf_i+0xe8>
 800b350:	881e      	ldrh	r6, [r3, #0]
 800b352:	2f6f      	cmp	r7, #111	; 0x6f
 800b354:	bf0c      	ite	eq
 800b356:	2308      	moveq	r3, #8
 800b358:	230a      	movne	r3, #10
 800b35a:	4852      	ldr	r0, [pc, #328]	; (800b4a4 <_printf_i+0x244>)
 800b35c:	2100      	movs	r1, #0
 800b35e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b362:	6865      	ldr	r5, [r4, #4]
 800b364:	2d00      	cmp	r5, #0
 800b366:	bfa8      	it	ge
 800b368:	6821      	ldrge	r1, [r4, #0]
 800b36a:	60a5      	str	r5, [r4, #8]
 800b36c:	bfa4      	itt	ge
 800b36e:	f021 0104 	bicge.w	r1, r1, #4
 800b372:	6021      	strge	r1, [r4, #0]
 800b374:	b90e      	cbnz	r6, 800b37a <_printf_i+0x11a>
 800b376:	2d00      	cmp	r5, #0
 800b378:	d04d      	beq.n	800b416 <_printf_i+0x1b6>
 800b37a:	4615      	mov	r5, r2
 800b37c:	fbb6 f1f3 	udiv	r1, r6, r3
 800b380:	fb03 6711 	mls	r7, r3, r1, r6
 800b384:	5dc7      	ldrb	r7, [r0, r7]
 800b386:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b38a:	4637      	mov	r7, r6
 800b38c:	42bb      	cmp	r3, r7
 800b38e:	460e      	mov	r6, r1
 800b390:	d9f4      	bls.n	800b37c <_printf_i+0x11c>
 800b392:	2b08      	cmp	r3, #8
 800b394:	d10b      	bne.n	800b3ae <_printf_i+0x14e>
 800b396:	6823      	ldr	r3, [r4, #0]
 800b398:	07de      	lsls	r6, r3, #31
 800b39a:	d508      	bpl.n	800b3ae <_printf_i+0x14e>
 800b39c:	6923      	ldr	r3, [r4, #16]
 800b39e:	6861      	ldr	r1, [r4, #4]
 800b3a0:	4299      	cmp	r1, r3
 800b3a2:	bfde      	ittt	le
 800b3a4:	2330      	movle	r3, #48	; 0x30
 800b3a6:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b3aa:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b3ae:	1b52      	subs	r2, r2, r5
 800b3b0:	6122      	str	r2, [r4, #16]
 800b3b2:	464b      	mov	r3, r9
 800b3b4:	4621      	mov	r1, r4
 800b3b6:	4640      	mov	r0, r8
 800b3b8:	f8cd a000 	str.w	sl, [sp]
 800b3bc:	aa03      	add	r2, sp, #12
 800b3be:	f7ff fedf 	bl	800b180 <_printf_common>
 800b3c2:	3001      	adds	r0, #1
 800b3c4:	d14c      	bne.n	800b460 <_printf_i+0x200>
 800b3c6:	f04f 30ff 	mov.w	r0, #4294967295
 800b3ca:	b004      	add	sp, #16
 800b3cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3d0:	4834      	ldr	r0, [pc, #208]	; (800b4a4 <_printf_i+0x244>)
 800b3d2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b3d6:	6829      	ldr	r1, [r5, #0]
 800b3d8:	6823      	ldr	r3, [r4, #0]
 800b3da:	f851 6b04 	ldr.w	r6, [r1], #4
 800b3de:	6029      	str	r1, [r5, #0]
 800b3e0:	061d      	lsls	r5, r3, #24
 800b3e2:	d514      	bpl.n	800b40e <_printf_i+0x1ae>
 800b3e4:	07df      	lsls	r7, r3, #31
 800b3e6:	bf44      	itt	mi
 800b3e8:	f043 0320 	orrmi.w	r3, r3, #32
 800b3ec:	6023      	strmi	r3, [r4, #0]
 800b3ee:	b91e      	cbnz	r6, 800b3f8 <_printf_i+0x198>
 800b3f0:	6823      	ldr	r3, [r4, #0]
 800b3f2:	f023 0320 	bic.w	r3, r3, #32
 800b3f6:	6023      	str	r3, [r4, #0]
 800b3f8:	2310      	movs	r3, #16
 800b3fa:	e7af      	b.n	800b35c <_printf_i+0xfc>
 800b3fc:	6823      	ldr	r3, [r4, #0]
 800b3fe:	f043 0320 	orr.w	r3, r3, #32
 800b402:	6023      	str	r3, [r4, #0]
 800b404:	2378      	movs	r3, #120	; 0x78
 800b406:	4828      	ldr	r0, [pc, #160]	; (800b4a8 <_printf_i+0x248>)
 800b408:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b40c:	e7e3      	b.n	800b3d6 <_printf_i+0x176>
 800b40e:	0659      	lsls	r1, r3, #25
 800b410:	bf48      	it	mi
 800b412:	b2b6      	uxthmi	r6, r6
 800b414:	e7e6      	b.n	800b3e4 <_printf_i+0x184>
 800b416:	4615      	mov	r5, r2
 800b418:	e7bb      	b.n	800b392 <_printf_i+0x132>
 800b41a:	682b      	ldr	r3, [r5, #0]
 800b41c:	6826      	ldr	r6, [r4, #0]
 800b41e:	1d18      	adds	r0, r3, #4
 800b420:	6961      	ldr	r1, [r4, #20]
 800b422:	6028      	str	r0, [r5, #0]
 800b424:	0635      	lsls	r5, r6, #24
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	d501      	bpl.n	800b42e <_printf_i+0x1ce>
 800b42a:	6019      	str	r1, [r3, #0]
 800b42c:	e002      	b.n	800b434 <_printf_i+0x1d4>
 800b42e:	0670      	lsls	r0, r6, #25
 800b430:	d5fb      	bpl.n	800b42a <_printf_i+0x1ca>
 800b432:	8019      	strh	r1, [r3, #0]
 800b434:	2300      	movs	r3, #0
 800b436:	4615      	mov	r5, r2
 800b438:	6123      	str	r3, [r4, #16]
 800b43a:	e7ba      	b.n	800b3b2 <_printf_i+0x152>
 800b43c:	682b      	ldr	r3, [r5, #0]
 800b43e:	2100      	movs	r1, #0
 800b440:	1d1a      	adds	r2, r3, #4
 800b442:	602a      	str	r2, [r5, #0]
 800b444:	681d      	ldr	r5, [r3, #0]
 800b446:	6862      	ldr	r2, [r4, #4]
 800b448:	4628      	mov	r0, r5
 800b44a:	f000 fffd 	bl	800c448 <memchr>
 800b44e:	b108      	cbz	r0, 800b454 <_printf_i+0x1f4>
 800b450:	1b40      	subs	r0, r0, r5
 800b452:	6060      	str	r0, [r4, #4]
 800b454:	6863      	ldr	r3, [r4, #4]
 800b456:	6123      	str	r3, [r4, #16]
 800b458:	2300      	movs	r3, #0
 800b45a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b45e:	e7a8      	b.n	800b3b2 <_printf_i+0x152>
 800b460:	462a      	mov	r2, r5
 800b462:	4649      	mov	r1, r9
 800b464:	4640      	mov	r0, r8
 800b466:	6923      	ldr	r3, [r4, #16]
 800b468:	47d0      	blx	sl
 800b46a:	3001      	adds	r0, #1
 800b46c:	d0ab      	beq.n	800b3c6 <_printf_i+0x166>
 800b46e:	6823      	ldr	r3, [r4, #0]
 800b470:	079b      	lsls	r3, r3, #30
 800b472:	d413      	bmi.n	800b49c <_printf_i+0x23c>
 800b474:	68e0      	ldr	r0, [r4, #12]
 800b476:	9b03      	ldr	r3, [sp, #12]
 800b478:	4298      	cmp	r0, r3
 800b47a:	bfb8      	it	lt
 800b47c:	4618      	movlt	r0, r3
 800b47e:	e7a4      	b.n	800b3ca <_printf_i+0x16a>
 800b480:	2301      	movs	r3, #1
 800b482:	4632      	mov	r2, r6
 800b484:	4649      	mov	r1, r9
 800b486:	4640      	mov	r0, r8
 800b488:	47d0      	blx	sl
 800b48a:	3001      	adds	r0, #1
 800b48c:	d09b      	beq.n	800b3c6 <_printf_i+0x166>
 800b48e:	3501      	adds	r5, #1
 800b490:	68e3      	ldr	r3, [r4, #12]
 800b492:	9903      	ldr	r1, [sp, #12]
 800b494:	1a5b      	subs	r3, r3, r1
 800b496:	42ab      	cmp	r3, r5
 800b498:	dcf2      	bgt.n	800b480 <_printf_i+0x220>
 800b49a:	e7eb      	b.n	800b474 <_printf_i+0x214>
 800b49c:	2500      	movs	r5, #0
 800b49e:	f104 0619 	add.w	r6, r4, #25
 800b4a2:	e7f5      	b.n	800b490 <_printf_i+0x230>
 800b4a4:	0800dcee 	.word	0x0800dcee
 800b4a8:	0800dcff 	.word	0x0800dcff

0800b4ac <iprintf>:
 800b4ac:	b40f      	push	{r0, r1, r2, r3}
 800b4ae:	4b0a      	ldr	r3, [pc, #40]	; (800b4d8 <iprintf+0x2c>)
 800b4b0:	b513      	push	{r0, r1, r4, lr}
 800b4b2:	681c      	ldr	r4, [r3, #0]
 800b4b4:	b124      	cbz	r4, 800b4c0 <iprintf+0x14>
 800b4b6:	69a3      	ldr	r3, [r4, #24]
 800b4b8:	b913      	cbnz	r3, 800b4c0 <iprintf+0x14>
 800b4ba:	4620      	mov	r0, r4
 800b4bc:	f000 ff16 	bl	800c2ec <__sinit>
 800b4c0:	ab05      	add	r3, sp, #20
 800b4c2:	4620      	mov	r0, r4
 800b4c4:	9a04      	ldr	r2, [sp, #16]
 800b4c6:	68a1      	ldr	r1, [r4, #8]
 800b4c8:	9301      	str	r3, [sp, #4]
 800b4ca:	f001 fdcf 	bl	800d06c <_vfiprintf_r>
 800b4ce:	b002      	add	sp, #8
 800b4d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b4d4:	b004      	add	sp, #16
 800b4d6:	4770      	bx	lr
 800b4d8:	20000188 	.word	0x20000188

0800b4dc <putchar>:
 800b4dc:	b538      	push	{r3, r4, r5, lr}
 800b4de:	4b08      	ldr	r3, [pc, #32]	; (800b500 <putchar+0x24>)
 800b4e0:	4605      	mov	r5, r0
 800b4e2:	681c      	ldr	r4, [r3, #0]
 800b4e4:	b124      	cbz	r4, 800b4f0 <putchar+0x14>
 800b4e6:	69a3      	ldr	r3, [r4, #24]
 800b4e8:	b913      	cbnz	r3, 800b4f0 <putchar+0x14>
 800b4ea:	4620      	mov	r0, r4
 800b4ec:	f000 fefe 	bl	800c2ec <__sinit>
 800b4f0:	4629      	mov	r1, r5
 800b4f2:	4620      	mov	r0, r4
 800b4f4:	68a2      	ldr	r2, [r4, #8]
 800b4f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b4fa:	f001 bee7 	b.w	800d2cc <_putc_r>
 800b4fe:	bf00      	nop
 800b500:	20000188 	.word	0x20000188

0800b504 <siprintf>:
 800b504:	b40e      	push	{r1, r2, r3}
 800b506:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b50a:	b500      	push	{lr}
 800b50c:	b09c      	sub	sp, #112	; 0x70
 800b50e:	ab1d      	add	r3, sp, #116	; 0x74
 800b510:	9002      	str	r0, [sp, #8]
 800b512:	9006      	str	r0, [sp, #24]
 800b514:	9107      	str	r1, [sp, #28]
 800b516:	9104      	str	r1, [sp, #16]
 800b518:	4808      	ldr	r0, [pc, #32]	; (800b53c <siprintf+0x38>)
 800b51a:	4909      	ldr	r1, [pc, #36]	; (800b540 <siprintf+0x3c>)
 800b51c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b520:	9105      	str	r1, [sp, #20]
 800b522:	6800      	ldr	r0, [r0, #0]
 800b524:	a902      	add	r1, sp, #8
 800b526:	9301      	str	r3, [sp, #4]
 800b528:	f001 fc78 	bl	800ce1c <_svfiprintf_r>
 800b52c:	2200      	movs	r2, #0
 800b52e:	9b02      	ldr	r3, [sp, #8]
 800b530:	701a      	strb	r2, [r3, #0]
 800b532:	b01c      	add	sp, #112	; 0x70
 800b534:	f85d eb04 	ldr.w	lr, [sp], #4
 800b538:	b003      	add	sp, #12
 800b53a:	4770      	bx	lr
 800b53c:	20000188 	.word	0x20000188
 800b540:	ffff0208 	.word	0xffff0208

0800b544 <quorem>:
 800b544:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b548:	6903      	ldr	r3, [r0, #16]
 800b54a:	690c      	ldr	r4, [r1, #16]
 800b54c:	4607      	mov	r7, r0
 800b54e:	42a3      	cmp	r3, r4
 800b550:	f2c0 8082 	blt.w	800b658 <quorem+0x114>
 800b554:	3c01      	subs	r4, #1
 800b556:	f100 0514 	add.w	r5, r0, #20
 800b55a:	f101 0814 	add.w	r8, r1, #20
 800b55e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b562:	9301      	str	r3, [sp, #4]
 800b564:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b568:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b56c:	3301      	adds	r3, #1
 800b56e:	429a      	cmp	r2, r3
 800b570:	fbb2 f6f3 	udiv	r6, r2, r3
 800b574:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b578:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b57c:	d331      	bcc.n	800b5e2 <quorem+0x9e>
 800b57e:	f04f 0e00 	mov.w	lr, #0
 800b582:	4640      	mov	r0, r8
 800b584:	46ac      	mov	ip, r5
 800b586:	46f2      	mov	sl, lr
 800b588:	f850 2b04 	ldr.w	r2, [r0], #4
 800b58c:	b293      	uxth	r3, r2
 800b58e:	fb06 e303 	mla	r3, r6, r3, lr
 800b592:	0c12      	lsrs	r2, r2, #16
 800b594:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b598:	b29b      	uxth	r3, r3
 800b59a:	fb06 e202 	mla	r2, r6, r2, lr
 800b59e:	ebaa 0303 	sub.w	r3, sl, r3
 800b5a2:	f8dc a000 	ldr.w	sl, [ip]
 800b5a6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b5aa:	fa1f fa8a 	uxth.w	sl, sl
 800b5ae:	4453      	add	r3, sl
 800b5b0:	f8dc a000 	ldr.w	sl, [ip]
 800b5b4:	b292      	uxth	r2, r2
 800b5b6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b5ba:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b5be:	b29b      	uxth	r3, r3
 800b5c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b5c4:	4581      	cmp	r9, r0
 800b5c6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b5ca:	f84c 3b04 	str.w	r3, [ip], #4
 800b5ce:	d2db      	bcs.n	800b588 <quorem+0x44>
 800b5d0:	f855 300b 	ldr.w	r3, [r5, fp]
 800b5d4:	b92b      	cbnz	r3, 800b5e2 <quorem+0x9e>
 800b5d6:	9b01      	ldr	r3, [sp, #4]
 800b5d8:	3b04      	subs	r3, #4
 800b5da:	429d      	cmp	r5, r3
 800b5dc:	461a      	mov	r2, r3
 800b5de:	d32f      	bcc.n	800b640 <quorem+0xfc>
 800b5e0:	613c      	str	r4, [r7, #16]
 800b5e2:	4638      	mov	r0, r7
 800b5e4:	f001 f9ca 	bl	800c97c <__mcmp>
 800b5e8:	2800      	cmp	r0, #0
 800b5ea:	db25      	blt.n	800b638 <quorem+0xf4>
 800b5ec:	4628      	mov	r0, r5
 800b5ee:	f04f 0c00 	mov.w	ip, #0
 800b5f2:	3601      	adds	r6, #1
 800b5f4:	f858 1b04 	ldr.w	r1, [r8], #4
 800b5f8:	f8d0 e000 	ldr.w	lr, [r0]
 800b5fc:	b28b      	uxth	r3, r1
 800b5fe:	ebac 0303 	sub.w	r3, ip, r3
 800b602:	fa1f f28e 	uxth.w	r2, lr
 800b606:	4413      	add	r3, r2
 800b608:	0c0a      	lsrs	r2, r1, #16
 800b60a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b60e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b612:	b29b      	uxth	r3, r3
 800b614:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b618:	45c1      	cmp	r9, r8
 800b61a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b61e:	f840 3b04 	str.w	r3, [r0], #4
 800b622:	d2e7      	bcs.n	800b5f4 <quorem+0xb0>
 800b624:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b628:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b62c:	b922      	cbnz	r2, 800b638 <quorem+0xf4>
 800b62e:	3b04      	subs	r3, #4
 800b630:	429d      	cmp	r5, r3
 800b632:	461a      	mov	r2, r3
 800b634:	d30a      	bcc.n	800b64c <quorem+0x108>
 800b636:	613c      	str	r4, [r7, #16]
 800b638:	4630      	mov	r0, r6
 800b63a:	b003      	add	sp, #12
 800b63c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b640:	6812      	ldr	r2, [r2, #0]
 800b642:	3b04      	subs	r3, #4
 800b644:	2a00      	cmp	r2, #0
 800b646:	d1cb      	bne.n	800b5e0 <quorem+0x9c>
 800b648:	3c01      	subs	r4, #1
 800b64a:	e7c6      	b.n	800b5da <quorem+0x96>
 800b64c:	6812      	ldr	r2, [r2, #0]
 800b64e:	3b04      	subs	r3, #4
 800b650:	2a00      	cmp	r2, #0
 800b652:	d1f0      	bne.n	800b636 <quorem+0xf2>
 800b654:	3c01      	subs	r4, #1
 800b656:	e7eb      	b.n	800b630 <quorem+0xec>
 800b658:	2000      	movs	r0, #0
 800b65a:	e7ee      	b.n	800b63a <quorem+0xf6>
 800b65c:	0000      	movs	r0, r0
	...

0800b660 <_dtoa_r>:
 800b660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b664:	4616      	mov	r6, r2
 800b666:	461f      	mov	r7, r3
 800b668:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800b66a:	b099      	sub	sp, #100	; 0x64
 800b66c:	4605      	mov	r5, r0
 800b66e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b672:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800b676:	b974      	cbnz	r4, 800b696 <_dtoa_r+0x36>
 800b678:	2010      	movs	r0, #16
 800b67a:	f000 fedd 	bl	800c438 <malloc>
 800b67e:	4602      	mov	r2, r0
 800b680:	6268      	str	r0, [r5, #36]	; 0x24
 800b682:	b920      	cbnz	r0, 800b68e <_dtoa_r+0x2e>
 800b684:	21ea      	movs	r1, #234	; 0xea
 800b686:	4ba8      	ldr	r3, [pc, #672]	; (800b928 <_dtoa_r+0x2c8>)
 800b688:	48a8      	ldr	r0, [pc, #672]	; (800b92c <_dtoa_r+0x2cc>)
 800b68a:	f001 ff8d 	bl	800d5a8 <__assert_func>
 800b68e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b692:	6004      	str	r4, [r0, #0]
 800b694:	60c4      	str	r4, [r0, #12]
 800b696:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b698:	6819      	ldr	r1, [r3, #0]
 800b69a:	b151      	cbz	r1, 800b6b2 <_dtoa_r+0x52>
 800b69c:	685a      	ldr	r2, [r3, #4]
 800b69e:	2301      	movs	r3, #1
 800b6a0:	4093      	lsls	r3, r2
 800b6a2:	604a      	str	r2, [r1, #4]
 800b6a4:	608b      	str	r3, [r1, #8]
 800b6a6:	4628      	mov	r0, r5
 800b6a8:	f000 ff2a 	bl	800c500 <_Bfree>
 800b6ac:	2200      	movs	r2, #0
 800b6ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b6b0:	601a      	str	r2, [r3, #0]
 800b6b2:	1e3b      	subs	r3, r7, #0
 800b6b4:	bfaf      	iteee	ge
 800b6b6:	2300      	movge	r3, #0
 800b6b8:	2201      	movlt	r2, #1
 800b6ba:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b6be:	9305      	strlt	r3, [sp, #20]
 800b6c0:	bfa8      	it	ge
 800b6c2:	f8c8 3000 	strge.w	r3, [r8]
 800b6c6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800b6ca:	4b99      	ldr	r3, [pc, #612]	; (800b930 <_dtoa_r+0x2d0>)
 800b6cc:	bfb8      	it	lt
 800b6ce:	f8c8 2000 	strlt.w	r2, [r8]
 800b6d2:	ea33 0309 	bics.w	r3, r3, r9
 800b6d6:	d119      	bne.n	800b70c <_dtoa_r+0xac>
 800b6d8:	f242 730f 	movw	r3, #9999	; 0x270f
 800b6dc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b6de:	6013      	str	r3, [r2, #0]
 800b6e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b6e4:	4333      	orrs	r3, r6
 800b6e6:	f000 857f 	beq.w	800c1e8 <_dtoa_r+0xb88>
 800b6ea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b6ec:	b953      	cbnz	r3, 800b704 <_dtoa_r+0xa4>
 800b6ee:	4b91      	ldr	r3, [pc, #580]	; (800b934 <_dtoa_r+0x2d4>)
 800b6f0:	e022      	b.n	800b738 <_dtoa_r+0xd8>
 800b6f2:	4b91      	ldr	r3, [pc, #580]	; (800b938 <_dtoa_r+0x2d8>)
 800b6f4:	9303      	str	r3, [sp, #12]
 800b6f6:	3308      	adds	r3, #8
 800b6f8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800b6fa:	6013      	str	r3, [r2, #0]
 800b6fc:	9803      	ldr	r0, [sp, #12]
 800b6fe:	b019      	add	sp, #100	; 0x64
 800b700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b704:	4b8b      	ldr	r3, [pc, #556]	; (800b934 <_dtoa_r+0x2d4>)
 800b706:	9303      	str	r3, [sp, #12]
 800b708:	3303      	adds	r3, #3
 800b70a:	e7f5      	b.n	800b6f8 <_dtoa_r+0x98>
 800b70c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800b710:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800b714:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b718:	2200      	movs	r2, #0
 800b71a:	2300      	movs	r3, #0
 800b71c:	f7f5 f944 	bl	80009a8 <__aeabi_dcmpeq>
 800b720:	4680      	mov	r8, r0
 800b722:	b158      	cbz	r0, 800b73c <_dtoa_r+0xdc>
 800b724:	2301      	movs	r3, #1
 800b726:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b728:	6013      	str	r3, [r2, #0]
 800b72a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	f000 8558 	beq.w	800c1e2 <_dtoa_r+0xb82>
 800b732:	4882      	ldr	r0, [pc, #520]	; (800b93c <_dtoa_r+0x2dc>)
 800b734:	6018      	str	r0, [r3, #0]
 800b736:	1e43      	subs	r3, r0, #1
 800b738:	9303      	str	r3, [sp, #12]
 800b73a:	e7df      	b.n	800b6fc <_dtoa_r+0x9c>
 800b73c:	ab16      	add	r3, sp, #88	; 0x58
 800b73e:	9301      	str	r3, [sp, #4]
 800b740:	ab17      	add	r3, sp, #92	; 0x5c
 800b742:	9300      	str	r3, [sp, #0]
 800b744:	4628      	mov	r0, r5
 800b746:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800b74a:	f001 f9bf 	bl	800cacc <__d2b>
 800b74e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800b752:	4683      	mov	fp, r0
 800b754:	2c00      	cmp	r4, #0
 800b756:	d07f      	beq.n	800b858 <_dtoa_r+0x1f8>
 800b758:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b75c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b75e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800b762:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b766:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800b76a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800b76e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800b772:	2200      	movs	r2, #0
 800b774:	4b72      	ldr	r3, [pc, #456]	; (800b940 <_dtoa_r+0x2e0>)
 800b776:	f7f4 fcf7 	bl	8000168 <__aeabi_dsub>
 800b77a:	a365      	add	r3, pc, #404	; (adr r3, 800b910 <_dtoa_r+0x2b0>)
 800b77c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b780:	f7f4 feaa 	bl	80004d8 <__aeabi_dmul>
 800b784:	a364      	add	r3, pc, #400	; (adr r3, 800b918 <_dtoa_r+0x2b8>)
 800b786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b78a:	f7f4 fcef 	bl	800016c <__adddf3>
 800b78e:	4606      	mov	r6, r0
 800b790:	4620      	mov	r0, r4
 800b792:	460f      	mov	r7, r1
 800b794:	f7f4 fe36 	bl	8000404 <__aeabi_i2d>
 800b798:	a361      	add	r3, pc, #388	; (adr r3, 800b920 <_dtoa_r+0x2c0>)
 800b79a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b79e:	f7f4 fe9b 	bl	80004d8 <__aeabi_dmul>
 800b7a2:	4602      	mov	r2, r0
 800b7a4:	460b      	mov	r3, r1
 800b7a6:	4630      	mov	r0, r6
 800b7a8:	4639      	mov	r1, r7
 800b7aa:	f7f4 fcdf 	bl	800016c <__adddf3>
 800b7ae:	4606      	mov	r6, r0
 800b7b0:	460f      	mov	r7, r1
 800b7b2:	f7f5 f941 	bl	8000a38 <__aeabi_d2iz>
 800b7b6:	2200      	movs	r2, #0
 800b7b8:	4682      	mov	sl, r0
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	4630      	mov	r0, r6
 800b7be:	4639      	mov	r1, r7
 800b7c0:	f7f5 f8fc 	bl	80009bc <__aeabi_dcmplt>
 800b7c4:	b148      	cbz	r0, 800b7da <_dtoa_r+0x17a>
 800b7c6:	4650      	mov	r0, sl
 800b7c8:	f7f4 fe1c 	bl	8000404 <__aeabi_i2d>
 800b7cc:	4632      	mov	r2, r6
 800b7ce:	463b      	mov	r3, r7
 800b7d0:	f7f5 f8ea 	bl	80009a8 <__aeabi_dcmpeq>
 800b7d4:	b908      	cbnz	r0, 800b7da <_dtoa_r+0x17a>
 800b7d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b7da:	f1ba 0f16 	cmp.w	sl, #22
 800b7de:	d858      	bhi.n	800b892 <_dtoa_r+0x232>
 800b7e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b7e4:	4b57      	ldr	r3, [pc, #348]	; (800b944 <_dtoa_r+0x2e4>)
 800b7e6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b7ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7ee:	f7f5 f8e5 	bl	80009bc <__aeabi_dcmplt>
 800b7f2:	2800      	cmp	r0, #0
 800b7f4:	d04f      	beq.n	800b896 <_dtoa_r+0x236>
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b7fc:	930f      	str	r3, [sp, #60]	; 0x3c
 800b7fe:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b800:	1b1c      	subs	r4, r3, r4
 800b802:	1e63      	subs	r3, r4, #1
 800b804:	9309      	str	r3, [sp, #36]	; 0x24
 800b806:	bf49      	itett	mi
 800b808:	f1c4 0301 	rsbmi	r3, r4, #1
 800b80c:	2300      	movpl	r3, #0
 800b80e:	9306      	strmi	r3, [sp, #24]
 800b810:	2300      	movmi	r3, #0
 800b812:	bf54      	ite	pl
 800b814:	9306      	strpl	r3, [sp, #24]
 800b816:	9309      	strmi	r3, [sp, #36]	; 0x24
 800b818:	f1ba 0f00 	cmp.w	sl, #0
 800b81c:	db3d      	blt.n	800b89a <_dtoa_r+0x23a>
 800b81e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b820:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800b824:	4453      	add	r3, sl
 800b826:	9309      	str	r3, [sp, #36]	; 0x24
 800b828:	2300      	movs	r3, #0
 800b82a:	930a      	str	r3, [sp, #40]	; 0x28
 800b82c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b82e:	2b09      	cmp	r3, #9
 800b830:	f200 808c 	bhi.w	800b94c <_dtoa_r+0x2ec>
 800b834:	2b05      	cmp	r3, #5
 800b836:	bfc4      	itt	gt
 800b838:	3b04      	subgt	r3, #4
 800b83a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800b83c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b83e:	bfc8      	it	gt
 800b840:	2400      	movgt	r4, #0
 800b842:	f1a3 0302 	sub.w	r3, r3, #2
 800b846:	bfd8      	it	le
 800b848:	2401      	movle	r4, #1
 800b84a:	2b03      	cmp	r3, #3
 800b84c:	f200 808a 	bhi.w	800b964 <_dtoa_r+0x304>
 800b850:	e8df f003 	tbb	[pc, r3]
 800b854:	5b4d4f2d 	.word	0x5b4d4f2d
 800b858:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800b85c:	441c      	add	r4, r3
 800b85e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800b862:	2b20      	cmp	r3, #32
 800b864:	bfc3      	ittte	gt
 800b866:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b86a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800b86e:	fa09 f303 	lslgt.w	r3, r9, r3
 800b872:	f1c3 0320 	rsble	r3, r3, #32
 800b876:	bfc6      	itte	gt
 800b878:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b87c:	4318      	orrgt	r0, r3
 800b87e:	fa06 f003 	lslle.w	r0, r6, r3
 800b882:	f7f4 fdaf 	bl	80003e4 <__aeabi_ui2d>
 800b886:	2301      	movs	r3, #1
 800b888:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800b88c:	3c01      	subs	r4, #1
 800b88e:	9313      	str	r3, [sp, #76]	; 0x4c
 800b890:	e76f      	b.n	800b772 <_dtoa_r+0x112>
 800b892:	2301      	movs	r3, #1
 800b894:	e7b2      	b.n	800b7fc <_dtoa_r+0x19c>
 800b896:	900f      	str	r0, [sp, #60]	; 0x3c
 800b898:	e7b1      	b.n	800b7fe <_dtoa_r+0x19e>
 800b89a:	9b06      	ldr	r3, [sp, #24]
 800b89c:	eba3 030a 	sub.w	r3, r3, sl
 800b8a0:	9306      	str	r3, [sp, #24]
 800b8a2:	f1ca 0300 	rsb	r3, sl, #0
 800b8a6:	930a      	str	r3, [sp, #40]	; 0x28
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	930e      	str	r3, [sp, #56]	; 0x38
 800b8ac:	e7be      	b.n	800b82c <_dtoa_r+0x1cc>
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	930b      	str	r3, [sp, #44]	; 0x2c
 800b8b2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	dc58      	bgt.n	800b96a <_dtoa_r+0x30a>
 800b8b8:	f04f 0901 	mov.w	r9, #1
 800b8bc:	464b      	mov	r3, r9
 800b8be:	f8cd 9020 	str.w	r9, [sp, #32]
 800b8c2:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800b8c6:	2200      	movs	r2, #0
 800b8c8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800b8ca:	6042      	str	r2, [r0, #4]
 800b8cc:	2204      	movs	r2, #4
 800b8ce:	f102 0614 	add.w	r6, r2, #20
 800b8d2:	429e      	cmp	r6, r3
 800b8d4:	6841      	ldr	r1, [r0, #4]
 800b8d6:	d94e      	bls.n	800b976 <_dtoa_r+0x316>
 800b8d8:	4628      	mov	r0, r5
 800b8da:	f000 fdd1 	bl	800c480 <_Balloc>
 800b8de:	9003      	str	r0, [sp, #12]
 800b8e0:	2800      	cmp	r0, #0
 800b8e2:	d14c      	bne.n	800b97e <_dtoa_r+0x31e>
 800b8e4:	4602      	mov	r2, r0
 800b8e6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b8ea:	4b17      	ldr	r3, [pc, #92]	; (800b948 <_dtoa_r+0x2e8>)
 800b8ec:	e6cc      	b.n	800b688 <_dtoa_r+0x28>
 800b8ee:	2301      	movs	r3, #1
 800b8f0:	e7de      	b.n	800b8b0 <_dtoa_r+0x250>
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	930b      	str	r3, [sp, #44]	; 0x2c
 800b8f6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b8f8:	eb0a 0903 	add.w	r9, sl, r3
 800b8fc:	f109 0301 	add.w	r3, r9, #1
 800b900:	2b01      	cmp	r3, #1
 800b902:	9308      	str	r3, [sp, #32]
 800b904:	bfb8      	it	lt
 800b906:	2301      	movlt	r3, #1
 800b908:	e7dd      	b.n	800b8c6 <_dtoa_r+0x266>
 800b90a:	2301      	movs	r3, #1
 800b90c:	e7f2      	b.n	800b8f4 <_dtoa_r+0x294>
 800b90e:	bf00      	nop
 800b910:	636f4361 	.word	0x636f4361
 800b914:	3fd287a7 	.word	0x3fd287a7
 800b918:	8b60c8b3 	.word	0x8b60c8b3
 800b91c:	3fc68a28 	.word	0x3fc68a28
 800b920:	509f79fb 	.word	0x509f79fb
 800b924:	3fd34413 	.word	0x3fd34413
 800b928:	0800dd1d 	.word	0x0800dd1d
 800b92c:	0800dd34 	.word	0x0800dd34
 800b930:	7ff00000 	.word	0x7ff00000
 800b934:	0800dd19 	.word	0x0800dd19
 800b938:	0800dd10 	.word	0x0800dd10
 800b93c:	0800dced 	.word	0x0800dced
 800b940:	3ff80000 	.word	0x3ff80000
 800b944:	0800de88 	.word	0x0800de88
 800b948:	0800dd8f 	.word	0x0800dd8f
 800b94c:	2401      	movs	r4, #1
 800b94e:	2300      	movs	r3, #0
 800b950:	940b      	str	r4, [sp, #44]	; 0x2c
 800b952:	9322      	str	r3, [sp, #136]	; 0x88
 800b954:	f04f 39ff 	mov.w	r9, #4294967295
 800b958:	2200      	movs	r2, #0
 800b95a:	2312      	movs	r3, #18
 800b95c:	f8cd 9020 	str.w	r9, [sp, #32]
 800b960:	9223      	str	r2, [sp, #140]	; 0x8c
 800b962:	e7b0      	b.n	800b8c6 <_dtoa_r+0x266>
 800b964:	2301      	movs	r3, #1
 800b966:	930b      	str	r3, [sp, #44]	; 0x2c
 800b968:	e7f4      	b.n	800b954 <_dtoa_r+0x2f4>
 800b96a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800b96e:	464b      	mov	r3, r9
 800b970:	f8cd 9020 	str.w	r9, [sp, #32]
 800b974:	e7a7      	b.n	800b8c6 <_dtoa_r+0x266>
 800b976:	3101      	adds	r1, #1
 800b978:	6041      	str	r1, [r0, #4]
 800b97a:	0052      	lsls	r2, r2, #1
 800b97c:	e7a7      	b.n	800b8ce <_dtoa_r+0x26e>
 800b97e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b980:	9a03      	ldr	r2, [sp, #12]
 800b982:	601a      	str	r2, [r3, #0]
 800b984:	9b08      	ldr	r3, [sp, #32]
 800b986:	2b0e      	cmp	r3, #14
 800b988:	f200 80a8 	bhi.w	800badc <_dtoa_r+0x47c>
 800b98c:	2c00      	cmp	r4, #0
 800b98e:	f000 80a5 	beq.w	800badc <_dtoa_r+0x47c>
 800b992:	f1ba 0f00 	cmp.w	sl, #0
 800b996:	dd34      	ble.n	800ba02 <_dtoa_r+0x3a2>
 800b998:	4a9a      	ldr	r2, [pc, #616]	; (800bc04 <_dtoa_r+0x5a4>)
 800b99a:	f00a 030f 	and.w	r3, sl, #15
 800b99e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b9a2:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800b9a6:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b9aa:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800b9ae:	ea4f 142a 	mov.w	r4, sl, asr #4
 800b9b2:	d016      	beq.n	800b9e2 <_dtoa_r+0x382>
 800b9b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b9b8:	4b93      	ldr	r3, [pc, #588]	; (800bc08 <_dtoa_r+0x5a8>)
 800b9ba:	2703      	movs	r7, #3
 800b9bc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b9c0:	f7f4 feb4 	bl	800072c <__aeabi_ddiv>
 800b9c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b9c8:	f004 040f 	and.w	r4, r4, #15
 800b9cc:	4e8e      	ldr	r6, [pc, #568]	; (800bc08 <_dtoa_r+0x5a8>)
 800b9ce:	b954      	cbnz	r4, 800b9e6 <_dtoa_r+0x386>
 800b9d0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b9d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b9d8:	f7f4 fea8 	bl	800072c <__aeabi_ddiv>
 800b9dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b9e0:	e029      	b.n	800ba36 <_dtoa_r+0x3d6>
 800b9e2:	2702      	movs	r7, #2
 800b9e4:	e7f2      	b.n	800b9cc <_dtoa_r+0x36c>
 800b9e6:	07e1      	lsls	r1, r4, #31
 800b9e8:	d508      	bpl.n	800b9fc <_dtoa_r+0x39c>
 800b9ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b9ee:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b9f2:	f7f4 fd71 	bl	80004d8 <__aeabi_dmul>
 800b9f6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b9fa:	3701      	adds	r7, #1
 800b9fc:	1064      	asrs	r4, r4, #1
 800b9fe:	3608      	adds	r6, #8
 800ba00:	e7e5      	b.n	800b9ce <_dtoa_r+0x36e>
 800ba02:	f000 80a5 	beq.w	800bb50 <_dtoa_r+0x4f0>
 800ba06:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ba0a:	f1ca 0400 	rsb	r4, sl, #0
 800ba0e:	4b7d      	ldr	r3, [pc, #500]	; (800bc04 <_dtoa_r+0x5a4>)
 800ba10:	f004 020f 	and.w	r2, r4, #15
 800ba14:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ba18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba1c:	f7f4 fd5c 	bl	80004d8 <__aeabi_dmul>
 800ba20:	2702      	movs	r7, #2
 800ba22:	2300      	movs	r3, #0
 800ba24:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ba28:	4e77      	ldr	r6, [pc, #476]	; (800bc08 <_dtoa_r+0x5a8>)
 800ba2a:	1124      	asrs	r4, r4, #4
 800ba2c:	2c00      	cmp	r4, #0
 800ba2e:	f040 8084 	bne.w	800bb3a <_dtoa_r+0x4da>
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d1d2      	bne.n	800b9dc <_dtoa_r+0x37c>
 800ba36:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	f000 808b 	beq.w	800bb54 <_dtoa_r+0x4f4>
 800ba3e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800ba42:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800ba46:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ba4a:	2200      	movs	r2, #0
 800ba4c:	4b6f      	ldr	r3, [pc, #444]	; (800bc0c <_dtoa_r+0x5ac>)
 800ba4e:	f7f4 ffb5 	bl	80009bc <__aeabi_dcmplt>
 800ba52:	2800      	cmp	r0, #0
 800ba54:	d07e      	beq.n	800bb54 <_dtoa_r+0x4f4>
 800ba56:	9b08      	ldr	r3, [sp, #32]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d07b      	beq.n	800bb54 <_dtoa_r+0x4f4>
 800ba5c:	f1b9 0f00 	cmp.w	r9, #0
 800ba60:	dd38      	ble.n	800bad4 <_dtoa_r+0x474>
 800ba62:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ba66:	2200      	movs	r2, #0
 800ba68:	4b69      	ldr	r3, [pc, #420]	; (800bc10 <_dtoa_r+0x5b0>)
 800ba6a:	f7f4 fd35 	bl	80004d8 <__aeabi_dmul>
 800ba6e:	464c      	mov	r4, r9
 800ba70:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ba74:	f10a 38ff 	add.w	r8, sl, #4294967295
 800ba78:	3701      	adds	r7, #1
 800ba7a:	4638      	mov	r0, r7
 800ba7c:	f7f4 fcc2 	bl	8000404 <__aeabi_i2d>
 800ba80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ba84:	f7f4 fd28 	bl	80004d8 <__aeabi_dmul>
 800ba88:	2200      	movs	r2, #0
 800ba8a:	4b62      	ldr	r3, [pc, #392]	; (800bc14 <_dtoa_r+0x5b4>)
 800ba8c:	f7f4 fb6e 	bl	800016c <__adddf3>
 800ba90:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800ba94:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ba98:	9611      	str	r6, [sp, #68]	; 0x44
 800ba9a:	2c00      	cmp	r4, #0
 800ba9c:	d15d      	bne.n	800bb5a <_dtoa_r+0x4fa>
 800ba9e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800baa2:	2200      	movs	r2, #0
 800baa4:	4b5c      	ldr	r3, [pc, #368]	; (800bc18 <_dtoa_r+0x5b8>)
 800baa6:	f7f4 fb5f 	bl	8000168 <__aeabi_dsub>
 800baaa:	4602      	mov	r2, r0
 800baac:	460b      	mov	r3, r1
 800baae:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bab2:	4633      	mov	r3, r6
 800bab4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bab6:	f7f4 ff9f 	bl	80009f8 <__aeabi_dcmpgt>
 800baba:	2800      	cmp	r0, #0
 800babc:	f040 829c 	bne.w	800bff8 <_dtoa_r+0x998>
 800bac0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bac4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bac6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800baca:	f7f4 ff77 	bl	80009bc <__aeabi_dcmplt>
 800bace:	2800      	cmp	r0, #0
 800bad0:	f040 8290 	bne.w	800bff4 <_dtoa_r+0x994>
 800bad4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800bad8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800badc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bade:	2b00      	cmp	r3, #0
 800bae0:	f2c0 8152 	blt.w	800bd88 <_dtoa_r+0x728>
 800bae4:	f1ba 0f0e 	cmp.w	sl, #14
 800bae8:	f300 814e 	bgt.w	800bd88 <_dtoa_r+0x728>
 800baec:	4b45      	ldr	r3, [pc, #276]	; (800bc04 <_dtoa_r+0x5a4>)
 800baee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800baf2:	e9d3 3400 	ldrd	r3, r4, [r3]
 800baf6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800bafa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	f280 80db 	bge.w	800bcb8 <_dtoa_r+0x658>
 800bb02:	9b08      	ldr	r3, [sp, #32]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	f300 80d7 	bgt.w	800bcb8 <_dtoa_r+0x658>
 800bb0a:	f040 8272 	bne.w	800bff2 <_dtoa_r+0x992>
 800bb0e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bb12:	2200      	movs	r2, #0
 800bb14:	4b40      	ldr	r3, [pc, #256]	; (800bc18 <_dtoa_r+0x5b8>)
 800bb16:	f7f4 fcdf 	bl	80004d8 <__aeabi_dmul>
 800bb1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bb1e:	f7f4 ff61 	bl	80009e4 <__aeabi_dcmpge>
 800bb22:	9c08      	ldr	r4, [sp, #32]
 800bb24:	4626      	mov	r6, r4
 800bb26:	2800      	cmp	r0, #0
 800bb28:	f040 8248 	bne.w	800bfbc <_dtoa_r+0x95c>
 800bb2c:	2331      	movs	r3, #49	; 0x31
 800bb2e:	9f03      	ldr	r7, [sp, #12]
 800bb30:	f10a 0a01 	add.w	sl, sl, #1
 800bb34:	f807 3b01 	strb.w	r3, [r7], #1
 800bb38:	e244      	b.n	800bfc4 <_dtoa_r+0x964>
 800bb3a:	07e2      	lsls	r2, r4, #31
 800bb3c:	d505      	bpl.n	800bb4a <_dtoa_r+0x4ea>
 800bb3e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bb42:	f7f4 fcc9 	bl	80004d8 <__aeabi_dmul>
 800bb46:	2301      	movs	r3, #1
 800bb48:	3701      	adds	r7, #1
 800bb4a:	1064      	asrs	r4, r4, #1
 800bb4c:	3608      	adds	r6, #8
 800bb4e:	e76d      	b.n	800ba2c <_dtoa_r+0x3cc>
 800bb50:	2702      	movs	r7, #2
 800bb52:	e770      	b.n	800ba36 <_dtoa_r+0x3d6>
 800bb54:	46d0      	mov	r8, sl
 800bb56:	9c08      	ldr	r4, [sp, #32]
 800bb58:	e78f      	b.n	800ba7a <_dtoa_r+0x41a>
 800bb5a:	9903      	ldr	r1, [sp, #12]
 800bb5c:	4b29      	ldr	r3, [pc, #164]	; (800bc04 <_dtoa_r+0x5a4>)
 800bb5e:	4421      	add	r1, r4
 800bb60:	9112      	str	r1, [sp, #72]	; 0x48
 800bb62:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bb64:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bb68:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800bb6c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bb70:	2900      	cmp	r1, #0
 800bb72:	d055      	beq.n	800bc20 <_dtoa_r+0x5c0>
 800bb74:	2000      	movs	r0, #0
 800bb76:	4929      	ldr	r1, [pc, #164]	; (800bc1c <_dtoa_r+0x5bc>)
 800bb78:	f7f4 fdd8 	bl	800072c <__aeabi_ddiv>
 800bb7c:	463b      	mov	r3, r7
 800bb7e:	4632      	mov	r2, r6
 800bb80:	f7f4 faf2 	bl	8000168 <__aeabi_dsub>
 800bb84:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800bb88:	9f03      	ldr	r7, [sp, #12]
 800bb8a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bb8e:	f7f4 ff53 	bl	8000a38 <__aeabi_d2iz>
 800bb92:	4604      	mov	r4, r0
 800bb94:	f7f4 fc36 	bl	8000404 <__aeabi_i2d>
 800bb98:	4602      	mov	r2, r0
 800bb9a:	460b      	mov	r3, r1
 800bb9c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bba0:	f7f4 fae2 	bl	8000168 <__aeabi_dsub>
 800bba4:	4602      	mov	r2, r0
 800bba6:	460b      	mov	r3, r1
 800bba8:	3430      	adds	r4, #48	; 0x30
 800bbaa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bbae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bbb2:	f807 4b01 	strb.w	r4, [r7], #1
 800bbb6:	f7f4 ff01 	bl	80009bc <__aeabi_dcmplt>
 800bbba:	2800      	cmp	r0, #0
 800bbbc:	d174      	bne.n	800bca8 <_dtoa_r+0x648>
 800bbbe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bbc2:	2000      	movs	r0, #0
 800bbc4:	4911      	ldr	r1, [pc, #68]	; (800bc0c <_dtoa_r+0x5ac>)
 800bbc6:	f7f4 facf 	bl	8000168 <__aeabi_dsub>
 800bbca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bbce:	f7f4 fef5 	bl	80009bc <__aeabi_dcmplt>
 800bbd2:	2800      	cmp	r0, #0
 800bbd4:	f040 80b7 	bne.w	800bd46 <_dtoa_r+0x6e6>
 800bbd8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bbda:	429f      	cmp	r7, r3
 800bbdc:	f43f af7a 	beq.w	800bad4 <_dtoa_r+0x474>
 800bbe0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bbe4:	2200      	movs	r2, #0
 800bbe6:	4b0a      	ldr	r3, [pc, #40]	; (800bc10 <_dtoa_r+0x5b0>)
 800bbe8:	f7f4 fc76 	bl	80004d8 <__aeabi_dmul>
 800bbec:	2200      	movs	r2, #0
 800bbee:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800bbf2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bbf6:	4b06      	ldr	r3, [pc, #24]	; (800bc10 <_dtoa_r+0x5b0>)
 800bbf8:	f7f4 fc6e 	bl	80004d8 <__aeabi_dmul>
 800bbfc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bc00:	e7c3      	b.n	800bb8a <_dtoa_r+0x52a>
 800bc02:	bf00      	nop
 800bc04:	0800de88 	.word	0x0800de88
 800bc08:	0800de60 	.word	0x0800de60
 800bc0c:	3ff00000 	.word	0x3ff00000
 800bc10:	40240000 	.word	0x40240000
 800bc14:	401c0000 	.word	0x401c0000
 800bc18:	40140000 	.word	0x40140000
 800bc1c:	3fe00000 	.word	0x3fe00000
 800bc20:	4630      	mov	r0, r6
 800bc22:	4639      	mov	r1, r7
 800bc24:	f7f4 fc58 	bl	80004d8 <__aeabi_dmul>
 800bc28:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bc2a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800bc2e:	9c03      	ldr	r4, [sp, #12]
 800bc30:	9314      	str	r3, [sp, #80]	; 0x50
 800bc32:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bc36:	f7f4 feff 	bl	8000a38 <__aeabi_d2iz>
 800bc3a:	9015      	str	r0, [sp, #84]	; 0x54
 800bc3c:	f7f4 fbe2 	bl	8000404 <__aeabi_i2d>
 800bc40:	4602      	mov	r2, r0
 800bc42:	460b      	mov	r3, r1
 800bc44:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bc48:	f7f4 fa8e 	bl	8000168 <__aeabi_dsub>
 800bc4c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bc4e:	4606      	mov	r6, r0
 800bc50:	3330      	adds	r3, #48	; 0x30
 800bc52:	f804 3b01 	strb.w	r3, [r4], #1
 800bc56:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bc58:	460f      	mov	r7, r1
 800bc5a:	429c      	cmp	r4, r3
 800bc5c:	f04f 0200 	mov.w	r2, #0
 800bc60:	d124      	bne.n	800bcac <_dtoa_r+0x64c>
 800bc62:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bc66:	4bb0      	ldr	r3, [pc, #704]	; (800bf28 <_dtoa_r+0x8c8>)
 800bc68:	f7f4 fa80 	bl	800016c <__adddf3>
 800bc6c:	4602      	mov	r2, r0
 800bc6e:	460b      	mov	r3, r1
 800bc70:	4630      	mov	r0, r6
 800bc72:	4639      	mov	r1, r7
 800bc74:	f7f4 fec0 	bl	80009f8 <__aeabi_dcmpgt>
 800bc78:	2800      	cmp	r0, #0
 800bc7a:	d163      	bne.n	800bd44 <_dtoa_r+0x6e4>
 800bc7c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bc80:	2000      	movs	r0, #0
 800bc82:	49a9      	ldr	r1, [pc, #676]	; (800bf28 <_dtoa_r+0x8c8>)
 800bc84:	f7f4 fa70 	bl	8000168 <__aeabi_dsub>
 800bc88:	4602      	mov	r2, r0
 800bc8a:	460b      	mov	r3, r1
 800bc8c:	4630      	mov	r0, r6
 800bc8e:	4639      	mov	r1, r7
 800bc90:	f7f4 fe94 	bl	80009bc <__aeabi_dcmplt>
 800bc94:	2800      	cmp	r0, #0
 800bc96:	f43f af1d 	beq.w	800bad4 <_dtoa_r+0x474>
 800bc9a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800bc9c:	1e7b      	subs	r3, r7, #1
 800bc9e:	9314      	str	r3, [sp, #80]	; 0x50
 800bca0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800bca4:	2b30      	cmp	r3, #48	; 0x30
 800bca6:	d0f8      	beq.n	800bc9a <_dtoa_r+0x63a>
 800bca8:	46c2      	mov	sl, r8
 800bcaa:	e03b      	b.n	800bd24 <_dtoa_r+0x6c4>
 800bcac:	4b9f      	ldr	r3, [pc, #636]	; (800bf2c <_dtoa_r+0x8cc>)
 800bcae:	f7f4 fc13 	bl	80004d8 <__aeabi_dmul>
 800bcb2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bcb6:	e7bc      	b.n	800bc32 <_dtoa_r+0x5d2>
 800bcb8:	9f03      	ldr	r7, [sp, #12]
 800bcba:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800bcbe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bcc2:	4640      	mov	r0, r8
 800bcc4:	4649      	mov	r1, r9
 800bcc6:	f7f4 fd31 	bl	800072c <__aeabi_ddiv>
 800bcca:	f7f4 feb5 	bl	8000a38 <__aeabi_d2iz>
 800bcce:	4604      	mov	r4, r0
 800bcd0:	f7f4 fb98 	bl	8000404 <__aeabi_i2d>
 800bcd4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bcd8:	f7f4 fbfe 	bl	80004d8 <__aeabi_dmul>
 800bcdc:	4602      	mov	r2, r0
 800bcde:	460b      	mov	r3, r1
 800bce0:	4640      	mov	r0, r8
 800bce2:	4649      	mov	r1, r9
 800bce4:	f7f4 fa40 	bl	8000168 <__aeabi_dsub>
 800bce8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800bcec:	f807 6b01 	strb.w	r6, [r7], #1
 800bcf0:	9e03      	ldr	r6, [sp, #12]
 800bcf2:	f8dd c020 	ldr.w	ip, [sp, #32]
 800bcf6:	1bbe      	subs	r6, r7, r6
 800bcf8:	45b4      	cmp	ip, r6
 800bcfa:	4602      	mov	r2, r0
 800bcfc:	460b      	mov	r3, r1
 800bcfe:	d136      	bne.n	800bd6e <_dtoa_r+0x70e>
 800bd00:	f7f4 fa34 	bl	800016c <__adddf3>
 800bd04:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bd08:	4680      	mov	r8, r0
 800bd0a:	4689      	mov	r9, r1
 800bd0c:	f7f4 fe74 	bl	80009f8 <__aeabi_dcmpgt>
 800bd10:	bb58      	cbnz	r0, 800bd6a <_dtoa_r+0x70a>
 800bd12:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bd16:	4640      	mov	r0, r8
 800bd18:	4649      	mov	r1, r9
 800bd1a:	f7f4 fe45 	bl	80009a8 <__aeabi_dcmpeq>
 800bd1e:	b108      	cbz	r0, 800bd24 <_dtoa_r+0x6c4>
 800bd20:	07e1      	lsls	r1, r4, #31
 800bd22:	d422      	bmi.n	800bd6a <_dtoa_r+0x70a>
 800bd24:	4628      	mov	r0, r5
 800bd26:	4659      	mov	r1, fp
 800bd28:	f000 fbea 	bl	800c500 <_Bfree>
 800bd2c:	2300      	movs	r3, #0
 800bd2e:	703b      	strb	r3, [r7, #0]
 800bd30:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800bd32:	f10a 0001 	add.w	r0, sl, #1
 800bd36:	6018      	str	r0, [r3, #0]
 800bd38:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	f43f acde 	beq.w	800b6fc <_dtoa_r+0x9c>
 800bd40:	601f      	str	r7, [r3, #0]
 800bd42:	e4db      	b.n	800b6fc <_dtoa_r+0x9c>
 800bd44:	4627      	mov	r7, r4
 800bd46:	463b      	mov	r3, r7
 800bd48:	461f      	mov	r7, r3
 800bd4a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bd4e:	2a39      	cmp	r2, #57	; 0x39
 800bd50:	d107      	bne.n	800bd62 <_dtoa_r+0x702>
 800bd52:	9a03      	ldr	r2, [sp, #12]
 800bd54:	429a      	cmp	r2, r3
 800bd56:	d1f7      	bne.n	800bd48 <_dtoa_r+0x6e8>
 800bd58:	2230      	movs	r2, #48	; 0x30
 800bd5a:	9903      	ldr	r1, [sp, #12]
 800bd5c:	f108 0801 	add.w	r8, r8, #1
 800bd60:	700a      	strb	r2, [r1, #0]
 800bd62:	781a      	ldrb	r2, [r3, #0]
 800bd64:	3201      	adds	r2, #1
 800bd66:	701a      	strb	r2, [r3, #0]
 800bd68:	e79e      	b.n	800bca8 <_dtoa_r+0x648>
 800bd6a:	46d0      	mov	r8, sl
 800bd6c:	e7eb      	b.n	800bd46 <_dtoa_r+0x6e6>
 800bd6e:	2200      	movs	r2, #0
 800bd70:	4b6e      	ldr	r3, [pc, #440]	; (800bf2c <_dtoa_r+0x8cc>)
 800bd72:	f7f4 fbb1 	bl	80004d8 <__aeabi_dmul>
 800bd76:	2200      	movs	r2, #0
 800bd78:	2300      	movs	r3, #0
 800bd7a:	4680      	mov	r8, r0
 800bd7c:	4689      	mov	r9, r1
 800bd7e:	f7f4 fe13 	bl	80009a8 <__aeabi_dcmpeq>
 800bd82:	2800      	cmp	r0, #0
 800bd84:	d09b      	beq.n	800bcbe <_dtoa_r+0x65e>
 800bd86:	e7cd      	b.n	800bd24 <_dtoa_r+0x6c4>
 800bd88:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bd8a:	2a00      	cmp	r2, #0
 800bd8c:	f000 80d0 	beq.w	800bf30 <_dtoa_r+0x8d0>
 800bd90:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800bd92:	2a01      	cmp	r2, #1
 800bd94:	f300 80ae 	bgt.w	800bef4 <_dtoa_r+0x894>
 800bd98:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800bd9a:	2a00      	cmp	r2, #0
 800bd9c:	f000 80a6 	beq.w	800beec <_dtoa_r+0x88c>
 800bda0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bda4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800bda6:	9f06      	ldr	r7, [sp, #24]
 800bda8:	9a06      	ldr	r2, [sp, #24]
 800bdaa:	2101      	movs	r1, #1
 800bdac:	441a      	add	r2, r3
 800bdae:	9206      	str	r2, [sp, #24]
 800bdb0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bdb2:	4628      	mov	r0, r5
 800bdb4:	441a      	add	r2, r3
 800bdb6:	9209      	str	r2, [sp, #36]	; 0x24
 800bdb8:	f000 fc58 	bl	800c66c <__i2b>
 800bdbc:	4606      	mov	r6, r0
 800bdbe:	2f00      	cmp	r7, #0
 800bdc0:	dd0c      	ble.n	800bddc <_dtoa_r+0x77c>
 800bdc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	dd09      	ble.n	800bddc <_dtoa_r+0x77c>
 800bdc8:	42bb      	cmp	r3, r7
 800bdca:	bfa8      	it	ge
 800bdcc:	463b      	movge	r3, r7
 800bdce:	9a06      	ldr	r2, [sp, #24]
 800bdd0:	1aff      	subs	r7, r7, r3
 800bdd2:	1ad2      	subs	r2, r2, r3
 800bdd4:	9206      	str	r2, [sp, #24]
 800bdd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bdd8:	1ad3      	subs	r3, r2, r3
 800bdda:	9309      	str	r3, [sp, #36]	; 0x24
 800bddc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bdde:	b1f3      	cbz	r3, 800be1e <_dtoa_r+0x7be>
 800bde0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	f000 80a8 	beq.w	800bf38 <_dtoa_r+0x8d8>
 800bde8:	2c00      	cmp	r4, #0
 800bdea:	dd10      	ble.n	800be0e <_dtoa_r+0x7ae>
 800bdec:	4631      	mov	r1, r6
 800bdee:	4622      	mov	r2, r4
 800bdf0:	4628      	mov	r0, r5
 800bdf2:	f000 fcf9 	bl	800c7e8 <__pow5mult>
 800bdf6:	465a      	mov	r2, fp
 800bdf8:	4601      	mov	r1, r0
 800bdfa:	4606      	mov	r6, r0
 800bdfc:	4628      	mov	r0, r5
 800bdfe:	f000 fc4b 	bl	800c698 <__multiply>
 800be02:	4680      	mov	r8, r0
 800be04:	4659      	mov	r1, fp
 800be06:	4628      	mov	r0, r5
 800be08:	f000 fb7a 	bl	800c500 <_Bfree>
 800be0c:	46c3      	mov	fp, r8
 800be0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be10:	1b1a      	subs	r2, r3, r4
 800be12:	d004      	beq.n	800be1e <_dtoa_r+0x7be>
 800be14:	4659      	mov	r1, fp
 800be16:	4628      	mov	r0, r5
 800be18:	f000 fce6 	bl	800c7e8 <__pow5mult>
 800be1c:	4683      	mov	fp, r0
 800be1e:	2101      	movs	r1, #1
 800be20:	4628      	mov	r0, r5
 800be22:	f000 fc23 	bl	800c66c <__i2b>
 800be26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800be28:	4604      	mov	r4, r0
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	f340 8086 	ble.w	800bf3c <_dtoa_r+0x8dc>
 800be30:	461a      	mov	r2, r3
 800be32:	4601      	mov	r1, r0
 800be34:	4628      	mov	r0, r5
 800be36:	f000 fcd7 	bl	800c7e8 <__pow5mult>
 800be3a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800be3c:	4604      	mov	r4, r0
 800be3e:	2b01      	cmp	r3, #1
 800be40:	dd7f      	ble.n	800bf42 <_dtoa_r+0x8e2>
 800be42:	f04f 0800 	mov.w	r8, #0
 800be46:	6923      	ldr	r3, [r4, #16]
 800be48:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800be4c:	6918      	ldr	r0, [r3, #16]
 800be4e:	f000 fbbf 	bl	800c5d0 <__hi0bits>
 800be52:	f1c0 0020 	rsb	r0, r0, #32
 800be56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be58:	4418      	add	r0, r3
 800be5a:	f010 001f 	ands.w	r0, r0, #31
 800be5e:	f000 8092 	beq.w	800bf86 <_dtoa_r+0x926>
 800be62:	f1c0 0320 	rsb	r3, r0, #32
 800be66:	2b04      	cmp	r3, #4
 800be68:	f340 808a 	ble.w	800bf80 <_dtoa_r+0x920>
 800be6c:	f1c0 001c 	rsb	r0, r0, #28
 800be70:	9b06      	ldr	r3, [sp, #24]
 800be72:	4407      	add	r7, r0
 800be74:	4403      	add	r3, r0
 800be76:	9306      	str	r3, [sp, #24]
 800be78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be7a:	4403      	add	r3, r0
 800be7c:	9309      	str	r3, [sp, #36]	; 0x24
 800be7e:	9b06      	ldr	r3, [sp, #24]
 800be80:	2b00      	cmp	r3, #0
 800be82:	dd05      	ble.n	800be90 <_dtoa_r+0x830>
 800be84:	4659      	mov	r1, fp
 800be86:	461a      	mov	r2, r3
 800be88:	4628      	mov	r0, r5
 800be8a:	f000 fd07 	bl	800c89c <__lshift>
 800be8e:	4683      	mov	fp, r0
 800be90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be92:	2b00      	cmp	r3, #0
 800be94:	dd05      	ble.n	800bea2 <_dtoa_r+0x842>
 800be96:	4621      	mov	r1, r4
 800be98:	461a      	mov	r2, r3
 800be9a:	4628      	mov	r0, r5
 800be9c:	f000 fcfe 	bl	800c89c <__lshift>
 800bea0:	4604      	mov	r4, r0
 800bea2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d070      	beq.n	800bf8a <_dtoa_r+0x92a>
 800bea8:	4621      	mov	r1, r4
 800beaa:	4658      	mov	r0, fp
 800beac:	f000 fd66 	bl	800c97c <__mcmp>
 800beb0:	2800      	cmp	r0, #0
 800beb2:	da6a      	bge.n	800bf8a <_dtoa_r+0x92a>
 800beb4:	2300      	movs	r3, #0
 800beb6:	4659      	mov	r1, fp
 800beb8:	220a      	movs	r2, #10
 800beba:	4628      	mov	r0, r5
 800bebc:	f000 fb42 	bl	800c544 <__multadd>
 800bec0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bec2:	4683      	mov	fp, r0
 800bec4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bec8:	2b00      	cmp	r3, #0
 800beca:	f000 8194 	beq.w	800c1f6 <_dtoa_r+0xb96>
 800bece:	4631      	mov	r1, r6
 800bed0:	2300      	movs	r3, #0
 800bed2:	220a      	movs	r2, #10
 800bed4:	4628      	mov	r0, r5
 800bed6:	f000 fb35 	bl	800c544 <__multadd>
 800beda:	f1b9 0f00 	cmp.w	r9, #0
 800bede:	4606      	mov	r6, r0
 800bee0:	f300 8093 	bgt.w	800c00a <_dtoa_r+0x9aa>
 800bee4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bee6:	2b02      	cmp	r3, #2
 800bee8:	dc57      	bgt.n	800bf9a <_dtoa_r+0x93a>
 800beea:	e08e      	b.n	800c00a <_dtoa_r+0x9aa>
 800beec:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800beee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800bef2:	e757      	b.n	800bda4 <_dtoa_r+0x744>
 800bef4:	9b08      	ldr	r3, [sp, #32]
 800bef6:	1e5c      	subs	r4, r3, #1
 800bef8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800befa:	42a3      	cmp	r3, r4
 800befc:	bfb7      	itett	lt
 800befe:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800bf00:	1b1c      	subge	r4, r3, r4
 800bf02:	1ae2      	sublt	r2, r4, r3
 800bf04:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800bf06:	bfbe      	ittt	lt
 800bf08:	940a      	strlt	r4, [sp, #40]	; 0x28
 800bf0a:	189b      	addlt	r3, r3, r2
 800bf0c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800bf0e:	9b08      	ldr	r3, [sp, #32]
 800bf10:	bfb8      	it	lt
 800bf12:	2400      	movlt	r4, #0
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	bfbb      	ittet	lt
 800bf18:	9b06      	ldrlt	r3, [sp, #24]
 800bf1a:	9a08      	ldrlt	r2, [sp, #32]
 800bf1c:	9f06      	ldrge	r7, [sp, #24]
 800bf1e:	1a9f      	sublt	r7, r3, r2
 800bf20:	bfac      	ite	ge
 800bf22:	9b08      	ldrge	r3, [sp, #32]
 800bf24:	2300      	movlt	r3, #0
 800bf26:	e73f      	b.n	800bda8 <_dtoa_r+0x748>
 800bf28:	3fe00000 	.word	0x3fe00000
 800bf2c:	40240000 	.word	0x40240000
 800bf30:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800bf32:	9f06      	ldr	r7, [sp, #24]
 800bf34:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800bf36:	e742      	b.n	800bdbe <_dtoa_r+0x75e>
 800bf38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bf3a:	e76b      	b.n	800be14 <_dtoa_r+0x7b4>
 800bf3c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bf3e:	2b01      	cmp	r3, #1
 800bf40:	dc19      	bgt.n	800bf76 <_dtoa_r+0x916>
 800bf42:	9b04      	ldr	r3, [sp, #16]
 800bf44:	b9bb      	cbnz	r3, 800bf76 <_dtoa_r+0x916>
 800bf46:	9b05      	ldr	r3, [sp, #20]
 800bf48:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bf4c:	b99b      	cbnz	r3, 800bf76 <_dtoa_r+0x916>
 800bf4e:	9b05      	ldr	r3, [sp, #20]
 800bf50:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bf54:	0d1b      	lsrs	r3, r3, #20
 800bf56:	051b      	lsls	r3, r3, #20
 800bf58:	b183      	cbz	r3, 800bf7c <_dtoa_r+0x91c>
 800bf5a:	f04f 0801 	mov.w	r8, #1
 800bf5e:	9b06      	ldr	r3, [sp, #24]
 800bf60:	3301      	adds	r3, #1
 800bf62:	9306      	str	r3, [sp, #24]
 800bf64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf66:	3301      	adds	r3, #1
 800bf68:	9309      	str	r3, [sp, #36]	; 0x24
 800bf6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	f47f af6a 	bne.w	800be46 <_dtoa_r+0x7e6>
 800bf72:	2001      	movs	r0, #1
 800bf74:	e76f      	b.n	800be56 <_dtoa_r+0x7f6>
 800bf76:	f04f 0800 	mov.w	r8, #0
 800bf7a:	e7f6      	b.n	800bf6a <_dtoa_r+0x90a>
 800bf7c:	4698      	mov	r8, r3
 800bf7e:	e7f4      	b.n	800bf6a <_dtoa_r+0x90a>
 800bf80:	f43f af7d 	beq.w	800be7e <_dtoa_r+0x81e>
 800bf84:	4618      	mov	r0, r3
 800bf86:	301c      	adds	r0, #28
 800bf88:	e772      	b.n	800be70 <_dtoa_r+0x810>
 800bf8a:	9b08      	ldr	r3, [sp, #32]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	dc36      	bgt.n	800bffe <_dtoa_r+0x99e>
 800bf90:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bf92:	2b02      	cmp	r3, #2
 800bf94:	dd33      	ble.n	800bffe <_dtoa_r+0x99e>
 800bf96:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bf9a:	f1b9 0f00 	cmp.w	r9, #0
 800bf9e:	d10d      	bne.n	800bfbc <_dtoa_r+0x95c>
 800bfa0:	4621      	mov	r1, r4
 800bfa2:	464b      	mov	r3, r9
 800bfa4:	2205      	movs	r2, #5
 800bfa6:	4628      	mov	r0, r5
 800bfa8:	f000 facc 	bl	800c544 <__multadd>
 800bfac:	4601      	mov	r1, r0
 800bfae:	4604      	mov	r4, r0
 800bfb0:	4658      	mov	r0, fp
 800bfb2:	f000 fce3 	bl	800c97c <__mcmp>
 800bfb6:	2800      	cmp	r0, #0
 800bfb8:	f73f adb8 	bgt.w	800bb2c <_dtoa_r+0x4cc>
 800bfbc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800bfbe:	9f03      	ldr	r7, [sp, #12]
 800bfc0:	ea6f 0a03 	mvn.w	sl, r3
 800bfc4:	f04f 0800 	mov.w	r8, #0
 800bfc8:	4621      	mov	r1, r4
 800bfca:	4628      	mov	r0, r5
 800bfcc:	f000 fa98 	bl	800c500 <_Bfree>
 800bfd0:	2e00      	cmp	r6, #0
 800bfd2:	f43f aea7 	beq.w	800bd24 <_dtoa_r+0x6c4>
 800bfd6:	f1b8 0f00 	cmp.w	r8, #0
 800bfda:	d005      	beq.n	800bfe8 <_dtoa_r+0x988>
 800bfdc:	45b0      	cmp	r8, r6
 800bfde:	d003      	beq.n	800bfe8 <_dtoa_r+0x988>
 800bfe0:	4641      	mov	r1, r8
 800bfe2:	4628      	mov	r0, r5
 800bfe4:	f000 fa8c 	bl	800c500 <_Bfree>
 800bfe8:	4631      	mov	r1, r6
 800bfea:	4628      	mov	r0, r5
 800bfec:	f000 fa88 	bl	800c500 <_Bfree>
 800bff0:	e698      	b.n	800bd24 <_dtoa_r+0x6c4>
 800bff2:	2400      	movs	r4, #0
 800bff4:	4626      	mov	r6, r4
 800bff6:	e7e1      	b.n	800bfbc <_dtoa_r+0x95c>
 800bff8:	46c2      	mov	sl, r8
 800bffa:	4626      	mov	r6, r4
 800bffc:	e596      	b.n	800bb2c <_dtoa_r+0x4cc>
 800bffe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c000:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c004:	2b00      	cmp	r3, #0
 800c006:	f000 80fd 	beq.w	800c204 <_dtoa_r+0xba4>
 800c00a:	2f00      	cmp	r7, #0
 800c00c:	dd05      	ble.n	800c01a <_dtoa_r+0x9ba>
 800c00e:	4631      	mov	r1, r6
 800c010:	463a      	mov	r2, r7
 800c012:	4628      	mov	r0, r5
 800c014:	f000 fc42 	bl	800c89c <__lshift>
 800c018:	4606      	mov	r6, r0
 800c01a:	f1b8 0f00 	cmp.w	r8, #0
 800c01e:	d05c      	beq.n	800c0da <_dtoa_r+0xa7a>
 800c020:	4628      	mov	r0, r5
 800c022:	6871      	ldr	r1, [r6, #4]
 800c024:	f000 fa2c 	bl	800c480 <_Balloc>
 800c028:	4607      	mov	r7, r0
 800c02a:	b928      	cbnz	r0, 800c038 <_dtoa_r+0x9d8>
 800c02c:	4602      	mov	r2, r0
 800c02e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c032:	4b7f      	ldr	r3, [pc, #508]	; (800c230 <_dtoa_r+0xbd0>)
 800c034:	f7ff bb28 	b.w	800b688 <_dtoa_r+0x28>
 800c038:	6932      	ldr	r2, [r6, #16]
 800c03a:	f106 010c 	add.w	r1, r6, #12
 800c03e:	3202      	adds	r2, #2
 800c040:	0092      	lsls	r2, r2, #2
 800c042:	300c      	adds	r0, #12
 800c044:	f000 fa0e 	bl	800c464 <memcpy>
 800c048:	2201      	movs	r2, #1
 800c04a:	4639      	mov	r1, r7
 800c04c:	4628      	mov	r0, r5
 800c04e:	f000 fc25 	bl	800c89c <__lshift>
 800c052:	46b0      	mov	r8, r6
 800c054:	4606      	mov	r6, r0
 800c056:	9b03      	ldr	r3, [sp, #12]
 800c058:	3301      	adds	r3, #1
 800c05a:	9308      	str	r3, [sp, #32]
 800c05c:	9b03      	ldr	r3, [sp, #12]
 800c05e:	444b      	add	r3, r9
 800c060:	930a      	str	r3, [sp, #40]	; 0x28
 800c062:	9b04      	ldr	r3, [sp, #16]
 800c064:	f003 0301 	and.w	r3, r3, #1
 800c068:	9309      	str	r3, [sp, #36]	; 0x24
 800c06a:	9b08      	ldr	r3, [sp, #32]
 800c06c:	4621      	mov	r1, r4
 800c06e:	3b01      	subs	r3, #1
 800c070:	4658      	mov	r0, fp
 800c072:	9304      	str	r3, [sp, #16]
 800c074:	f7ff fa66 	bl	800b544 <quorem>
 800c078:	4603      	mov	r3, r0
 800c07a:	4641      	mov	r1, r8
 800c07c:	3330      	adds	r3, #48	; 0x30
 800c07e:	9006      	str	r0, [sp, #24]
 800c080:	4658      	mov	r0, fp
 800c082:	930b      	str	r3, [sp, #44]	; 0x2c
 800c084:	f000 fc7a 	bl	800c97c <__mcmp>
 800c088:	4632      	mov	r2, r6
 800c08a:	4681      	mov	r9, r0
 800c08c:	4621      	mov	r1, r4
 800c08e:	4628      	mov	r0, r5
 800c090:	f000 fc90 	bl	800c9b4 <__mdiff>
 800c094:	68c2      	ldr	r2, [r0, #12]
 800c096:	4607      	mov	r7, r0
 800c098:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c09a:	bb02      	cbnz	r2, 800c0de <_dtoa_r+0xa7e>
 800c09c:	4601      	mov	r1, r0
 800c09e:	4658      	mov	r0, fp
 800c0a0:	f000 fc6c 	bl	800c97c <__mcmp>
 800c0a4:	4602      	mov	r2, r0
 800c0a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c0a8:	4639      	mov	r1, r7
 800c0aa:	4628      	mov	r0, r5
 800c0ac:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800c0b0:	f000 fa26 	bl	800c500 <_Bfree>
 800c0b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c0b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c0b8:	9f08      	ldr	r7, [sp, #32]
 800c0ba:	ea43 0102 	orr.w	r1, r3, r2
 800c0be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0c0:	430b      	orrs	r3, r1
 800c0c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c0c4:	d10d      	bne.n	800c0e2 <_dtoa_r+0xa82>
 800c0c6:	2b39      	cmp	r3, #57	; 0x39
 800c0c8:	d029      	beq.n	800c11e <_dtoa_r+0xabe>
 800c0ca:	f1b9 0f00 	cmp.w	r9, #0
 800c0ce:	dd01      	ble.n	800c0d4 <_dtoa_r+0xa74>
 800c0d0:	9b06      	ldr	r3, [sp, #24]
 800c0d2:	3331      	adds	r3, #49	; 0x31
 800c0d4:	9a04      	ldr	r2, [sp, #16]
 800c0d6:	7013      	strb	r3, [r2, #0]
 800c0d8:	e776      	b.n	800bfc8 <_dtoa_r+0x968>
 800c0da:	4630      	mov	r0, r6
 800c0dc:	e7b9      	b.n	800c052 <_dtoa_r+0x9f2>
 800c0de:	2201      	movs	r2, #1
 800c0e0:	e7e2      	b.n	800c0a8 <_dtoa_r+0xa48>
 800c0e2:	f1b9 0f00 	cmp.w	r9, #0
 800c0e6:	db06      	blt.n	800c0f6 <_dtoa_r+0xa96>
 800c0e8:	9922      	ldr	r1, [sp, #136]	; 0x88
 800c0ea:	ea41 0909 	orr.w	r9, r1, r9
 800c0ee:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c0f0:	ea59 0101 	orrs.w	r1, r9, r1
 800c0f4:	d120      	bne.n	800c138 <_dtoa_r+0xad8>
 800c0f6:	2a00      	cmp	r2, #0
 800c0f8:	ddec      	ble.n	800c0d4 <_dtoa_r+0xa74>
 800c0fa:	4659      	mov	r1, fp
 800c0fc:	2201      	movs	r2, #1
 800c0fe:	4628      	mov	r0, r5
 800c100:	9308      	str	r3, [sp, #32]
 800c102:	f000 fbcb 	bl	800c89c <__lshift>
 800c106:	4621      	mov	r1, r4
 800c108:	4683      	mov	fp, r0
 800c10a:	f000 fc37 	bl	800c97c <__mcmp>
 800c10e:	2800      	cmp	r0, #0
 800c110:	9b08      	ldr	r3, [sp, #32]
 800c112:	dc02      	bgt.n	800c11a <_dtoa_r+0xaba>
 800c114:	d1de      	bne.n	800c0d4 <_dtoa_r+0xa74>
 800c116:	07da      	lsls	r2, r3, #31
 800c118:	d5dc      	bpl.n	800c0d4 <_dtoa_r+0xa74>
 800c11a:	2b39      	cmp	r3, #57	; 0x39
 800c11c:	d1d8      	bne.n	800c0d0 <_dtoa_r+0xa70>
 800c11e:	2339      	movs	r3, #57	; 0x39
 800c120:	9a04      	ldr	r2, [sp, #16]
 800c122:	7013      	strb	r3, [r2, #0]
 800c124:	463b      	mov	r3, r7
 800c126:	461f      	mov	r7, r3
 800c128:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800c12c:	3b01      	subs	r3, #1
 800c12e:	2a39      	cmp	r2, #57	; 0x39
 800c130:	d050      	beq.n	800c1d4 <_dtoa_r+0xb74>
 800c132:	3201      	adds	r2, #1
 800c134:	701a      	strb	r2, [r3, #0]
 800c136:	e747      	b.n	800bfc8 <_dtoa_r+0x968>
 800c138:	2a00      	cmp	r2, #0
 800c13a:	dd03      	ble.n	800c144 <_dtoa_r+0xae4>
 800c13c:	2b39      	cmp	r3, #57	; 0x39
 800c13e:	d0ee      	beq.n	800c11e <_dtoa_r+0xabe>
 800c140:	3301      	adds	r3, #1
 800c142:	e7c7      	b.n	800c0d4 <_dtoa_r+0xa74>
 800c144:	9a08      	ldr	r2, [sp, #32]
 800c146:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c148:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c14c:	428a      	cmp	r2, r1
 800c14e:	d02a      	beq.n	800c1a6 <_dtoa_r+0xb46>
 800c150:	4659      	mov	r1, fp
 800c152:	2300      	movs	r3, #0
 800c154:	220a      	movs	r2, #10
 800c156:	4628      	mov	r0, r5
 800c158:	f000 f9f4 	bl	800c544 <__multadd>
 800c15c:	45b0      	cmp	r8, r6
 800c15e:	4683      	mov	fp, r0
 800c160:	f04f 0300 	mov.w	r3, #0
 800c164:	f04f 020a 	mov.w	r2, #10
 800c168:	4641      	mov	r1, r8
 800c16a:	4628      	mov	r0, r5
 800c16c:	d107      	bne.n	800c17e <_dtoa_r+0xb1e>
 800c16e:	f000 f9e9 	bl	800c544 <__multadd>
 800c172:	4680      	mov	r8, r0
 800c174:	4606      	mov	r6, r0
 800c176:	9b08      	ldr	r3, [sp, #32]
 800c178:	3301      	adds	r3, #1
 800c17a:	9308      	str	r3, [sp, #32]
 800c17c:	e775      	b.n	800c06a <_dtoa_r+0xa0a>
 800c17e:	f000 f9e1 	bl	800c544 <__multadd>
 800c182:	4631      	mov	r1, r6
 800c184:	4680      	mov	r8, r0
 800c186:	2300      	movs	r3, #0
 800c188:	220a      	movs	r2, #10
 800c18a:	4628      	mov	r0, r5
 800c18c:	f000 f9da 	bl	800c544 <__multadd>
 800c190:	4606      	mov	r6, r0
 800c192:	e7f0      	b.n	800c176 <_dtoa_r+0xb16>
 800c194:	f1b9 0f00 	cmp.w	r9, #0
 800c198:	bfcc      	ite	gt
 800c19a:	464f      	movgt	r7, r9
 800c19c:	2701      	movle	r7, #1
 800c19e:	f04f 0800 	mov.w	r8, #0
 800c1a2:	9a03      	ldr	r2, [sp, #12]
 800c1a4:	4417      	add	r7, r2
 800c1a6:	4659      	mov	r1, fp
 800c1a8:	2201      	movs	r2, #1
 800c1aa:	4628      	mov	r0, r5
 800c1ac:	9308      	str	r3, [sp, #32]
 800c1ae:	f000 fb75 	bl	800c89c <__lshift>
 800c1b2:	4621      	mov	r1, r4
 800c1b4:	4683      	mov	fp, r0
 800c1b6:	f000 fbe1 	bl	800c97c <__mcmp>
 800c1ba:	2800      	cmp	r0, #0
 800c1bc:	dcb2      	bgt.n	800c124 <_dtoa_r+0xac4>
 800c1be:	d102      	bne.n	800c1c6 <_dtoa_r+0xb66>
 800c1c0:	9b08      	ldr	r3, [sp, #32]
 800c1c2:	07db      	lsls	r3, r3, #31
 800c1c4:	d4ae      	bmi.n	800c124 <_dtoa_r+0xac4>
 800c1c6:	463b      	mov	r3, r7
 800c1c8:	461f      	mov	r7, r3
 800c1ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c1ce:	2a30      	cmp	r2, #48	; 0x30
 800c1d0:	d0fa      	beq.n	800c1c8 <_dtoa_r+0xb68>
 800c1d2:	e6f9      	b.n	800bfc8 <_dtoa_r+0x968>
 800c1d4:	9a03      	ldr	r2, [sp, #12]
 800c1d6:	429a      	cmp	r2, r3
 800c1d8:	d1a5      	bne.n	800c126 <_dtoa_r+0xac6>
 800c1da:	2331      	movs	r3, #49	; 0x31
 800c1dc:	f10a 0a01 	add.w	sl, sl, #1
 800c1e0:	e779      	b.n	800c0d6 <_dtoa_r+0xa76>
 800c1e2:	4b14      	ldr	r3, [pc, #80]	; (800c234 <_dtoa_r+0xbd4>)
 800c1e4:	f7ff baa8 	b.w	800b738 <_dtoa_r+0xd8>
 800c1e8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	f47f aa81 	bne.w	800b6f2 <_dtoa_r+0x92>
 800c1f0:	4b11      	ldr	r3, [pc, #68]	; (800c238 <_dtoa_r+0xbd8>)
 800c1f2:	f7ff baa1 	b.w	800b738 <_dtoa_r+0xd8>
 800c1f6:	f1b9 0f00 	cmp.w	r9, #0
 800c1fa:	dc03      	bgt.n	800c204 <_dtoa_r+0xba4>
 800c1fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c1fe:	2b02      	cmp	r3, #2
 800c200:	f73f aecb 	bgt.w	800bf9a <_dtoa_r+0x93a>
 800c204:	9f03      	ldr	r7, [sp, #12]
 800c206:	4621      	mov	r1, r4
 800c208:	4658      	mov	r0, fp
 800c20a:	f7ff f99b 	bl	800b544 <quorem>
 800c20e:	9a03      	ldr	r2, [sp, #12]
 800c210:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800c214:	f807 3b01 	strb.w	r3, [r7], #1
 800c218:	1aba      	subs	r2, r7, r2
 800c21a:	4591      	cmp	r9, r2
 800c21c:	ddba      	ble.n	800c194 <_dtoa_r+0xb34>
 800c21e:	4659      	mov	r1, fp
 800c220:	2300      	movs	r3, #0
 800c222:	220a      	movs	r2, #10
 800c224:	4628      	mov	r0, r5
 800c226:	f000 f98d 	bl	800c544 <__multadd>
 800c22a:	4683      	mov	fp, r0
 800c22c:	e7eb      	b.n	800c206 <_dtoa_r+0xba6>
 800c22e:	bf00      	nop
 800c230:	0800dd8f 	.word	0x0800dd8f
 800c234:	0800dcec 	.word	0x0800dcec
 800c238:	0800dd10 	.word	0x0800dd10

0800c23c <std>:
 800c23c:	2300      	movs	r3, #0
 800c23e:	b510      	push	{r4, lr}
 800c240:	4604      	mov	r4, r0
 800c242:	e9c0 3300 	strd	r3, r3, [r0]
 800c246:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c24a:	6083      	str	r3, [r0, #8]
 800c24c:	8181      	strh	r1, [r0, #12]
 800c24e:	6643      	str	r3, [r0, #100]	; 0x64
 800c250:	81c2      	strh	r2, [r0, #14]
 800c252:	6183      	str	r3, [r0, #24]
 800c254:	4619      	mov	r1, r3
 800c256:	2208      	movs	r2, #8
 800c258:	305c      	adds	r0, #92	; 0x5c
 800c25a:	f7fe fcbf 	bl	800abdc <memset>
 800c25e:	4b05      	ldr	r3, [pc, #20]	; (800c274 <std+0x38>)
 800c260:	6224      	str	r4, [r4, #32]
 800c262:	6263      	str	r3, [r4, #36]	; 0x24
 800c264:	4b04      	ldr	r3, [pc, #16]	; (800c278 <std+0x3c>)
 800c266:	62a3      	str	r3, [r4, #40]	; 0x28
 800c268:	4b04      	ldr	r3, [pc, #16]	; (800c27c <std+0x40>)
 800c26a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c26c:	4b04      	ldr	r3, [pc, #16]	; (800c280 <std+0x44>)
 800c26e:	6323      	str	r3, [r4, #48]	; 0x30
 800c270:	bd10      	pop	{r4, pc}
 800c272:	bf00      	nop
 800c274:	0800d37d 	.word	0x0800d37d
 800c278:	0800d39f 	.word	0x0800d39f
 800c27c:	0800d3d7 	.word	0x0800d3d7
 800c280:	0800d3fb 	.word	0x0800d3fb

0800c284 <_cleanup_r>:
 800c284:	4901      	ldr	r1, [pc, #4]	; (800c28c <_cleanup_r+0x8>)
 800c286:	f000 b8af 	b.w	800c3e8 <_fwalk_reent>
 800c28a:	bf00      	nop
 800c28c:	0800d709 	.word	0x0800d709

0800c290 <__sfmoreglue>:
 800c290:	2268      	movs	r2, #104	; 0x68
 800c292:	b570      	push	{r4, r5, r6, lr}
 800c294:	1e4d      	subs	r5, r1, #1
 800c296:	4355      	muls	r5, r2
 800c298:	460e      	mov	r6, r1
 800c29a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c29e:	f000 fced 	bl	800cc7c <_malloc_r>
 800c2a2:	4604      	mov	r4, r0
 800c2a4:	b140      	cbz	r0, 800c2b8 <__sfmoreglue+0x28>
 800c2a6:	2100      	movs	r1, #0
 800c2a8:	e9c0 1600 	strd	r1, r6, [r0]
 800c2ac:	300c      	adds	r0, #12
 800c2ae:	60a0      	str	r0, [r4, #8]
 800c2b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c2b4:	f7fe fc92 	bl	800abdc <memset>
 800c2b8:	4620      	mov	r0, r4
 800c2ba:	bd70      	pop	{r4, r5, r6, pc}

0800c2bc <__sfp_lock_acquire>:
 800c2bc:	4801      	ldr	r0, [pc, #4]	; (800c2c4 <__sfp_lock_acquire+0x8>)
 800c2be:	f000 b8b8 	b.w	800c432 <__retarget_lock_acquire_recursive>
 800c2c2:	bf00      	nop
 800c2c4:	20001656 	.word	0x20001656

0800c2c8 <__sfp_lock_release>:
 800c2c8:	4801      	ldr	r0, [pc, #4]	; (800c2d0 <__sfp_lock_release+0x8>)
 800c2ca:	f000 b8b3 	b.w	800c434 <__retarget_lock_release_recursive>
 800c2ce:	bf00      	nop
 800c2d0:	20001656 	.word	0x20001656

0800c2d4 <__sinit_lock_acquire>:
 800c2d4:	4801      	ldr	r0, [pc, #4]	; (800c2dc <__sinit_lock_acquire+0x8>)
 800c2d6:	f000 b8ac 	b.w	800c432 <__retarget_lock_acquire_recursive>
 800c2da:	bf00      	nop
 800c2dc:	20001657 	.word	0x20001657

0800c2e0 <__sinit_lock_release>:
 800c2e0:	4801      	ldr	r0, [pc, #4]	; (800c2e8 <__sinit_lock_release+0x8>)
 800c2e2:	f000 b8a7 	b.w	800c434 <__retarget_lock_release_recursive>
 800c2e6:	bf00      	nop
 800c2e8:	20001657 	.word	0x20001657

0800c2ec <__sinit>:
 800c2ec:	b510      	push	{r4, lr}
 800c2ee:	4604      	mov	r4, r0
 800c2f0:	f7ff fff0 	bl	800c2d4 <__sinit_lock_acquire>
 800c2f4:	69a3      	ldr	r3, [r4, #24]
 800c2f6:	b11b      	cbz	r3, 800c300 <__sinit+0x14>
 800c2f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c2fc:	f7ff bff0 	b.w	800c2e0 <__sinit_lock_release>
 800c300:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c304:	6523      	str	r3, [r4, #80]	; 0x50
 800c306:	4b13      	ldr	r3, [pc, #76]	; (800c354 <__sinit+0x68>)
 800c308:	4a13      	ldr	r2, [pc, #76]	; (800c358 <__sinit+0x6c>)
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	62a2      	str	r2, [r4, #40]	; 0x28
 800c30e:	42a3      	cmp	r3, r4
 800c310:	bf08      	it	eq
 800c312:	2301      	moveq	r3, #1
 800c314:	4620      	mov	r0, r4
 800c316:	bf08      	it	eq
 800c318:	61a3      	streq	r3, [r4, #24]
 800c31a:	f000 f81f 	bl	800c35c <__sfp>
 800c31e:	6060      	str	r0, [r4, #4]
 800c320:	4620      	mov	r0, r4
 800c322:	f000 f81b 	bl	800c35c <__sfp>
 800c326:	60a0      	str	r0, [r4, #8]
 800c328:	4620      	mov	r0, r4
 800c32a:	f000 f817 	bl	800c35c <__sfp>
 800c32e:	2200      	movs	r2, #0
 800c330:	2104      	movs	r1, #4
 800c332:	60e0      	str	r0, [r4, #12]
 800c334:	6860      	ldr	r0, [r4, #4]
 800c336:	f7ff ff81 	bl	800c23c <std>
 800c33a:	2201      	movs	r2, #1
 800c33c:	2109      	movs	r1, #9
 800c33e:	68a0      	ldr	r0, [r4, #8]
 800c340:	f7ff ff7c 	bl	800c23c <std>
 800c344:	2202      	movs	r2, #2
 800c346:	2112      	movs	r1, #18
 800c348:	68e0      	ldr	r0, [r4, #12]
 800c34a:	f7ff ff77 	bl	800c23c <std>
 800c34e:	2301      	movs	r3, #1
 800c350:	61a3      	str	r3, [r4, #24]
 800c352:	e7d1      	b.n	800c2f8 <__sinit+0xc>
 800c354:	0800dcd8 	.word	0x0800dcd8
 800c358:	0800c285 	.word	0x0800c285

0800c35c <__sfp>:
 800c35c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c35e:	4607      	mov	r7, r0
 800c360:	f7ff ffac 	bl	800c2bc <__sfp_lock_acquire>
 800c364:	4b1e      	ldr	r3, [pc, #120]	; (800c3e0 <__sfp+0x84>)
 800c366:	681e      	ldr	r6, [r3, #0]
 800c368:	69b3      	ldr	r3, [r6, #24]
 800c36a:	b913      	cbnz	r3, 800c372 <__sfp+0x16>
 800c36c:	4630      	mov	r0, r6
 800c36e:	f7ff ffbd 	bl	800c2ec <__sinit>
 800c372:	3648      	adds	r6, #72	; 0x48
 800c374:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c378:	3b01      	subs	r3, #1
 800c37a:	d503      	bpl.n	800c384 <__sfp+0x28>
 800c37c:	6833      	ldr	r3, [r6, #0]
 800c37e:	b30b      	cbz	r3, 800c3c4 <__sfp+0x68>
 800c380:	6836      	ldr	r6, [r6, #0]
 800c382:	e7f7      	b.n	800c374 <__sfp+0x18>
 800c384:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c388:	b9d5      	cbnz	r5, 800c3c0 <__sfp+0x64>
 800c38a:	4b16      	ldr	r3, [pc, #88]	; (800c3e4 <__sfp+0x88>)
 800c38c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c390:	60e3      	str	r3, [r4, #12]
 800c392:	6665      	str	r5, [r4, #100]	; 0x64
 800c394:	f000 f84c 	bl	800c430 <__retarget_lock_init_recursive>
 800c398:	f7ff ff96 	bl	800c2c8 <__sfp_lock_release>
 800c39c:	2208      	movs	r2, #8
 800c39e:	4629      	mov	r1, r5
 800c3a0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c3a4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c3a8:	6025      	str	r5, [r4, #0]
 800c3aa:	61a5      	str	r5, [r4, #24]
 800c3ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c3b0:	f7fe fc14 	bl	800abdc <memset>
 800c3b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c3b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c3bc:	4620      	mov	r0, r4
 800c3be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c3c0:	3468      	adds	r4, #104	; 0x68
 800c3c2:	e7d9      	b.n	800c378 <__sfp+0x1c>
 800c3c4:	2104      	movs	r1, #4
 800c3c6:	4638      	mov	r0, r7
 800c3c8:	f7ff ff62 	bl	800c290 <__sfmoreglue>
 800c3cc:	4604      	mov	r4, r0
 800c3ce:	6030      	str	r0, [r6, #0]
 800c3d0:	2800      	cmp	r0, #0
 800c3d2:	d1d5      	bne.n	800c380 <__sfp+0x24>
 800c3d4:	f7ff ff78 	bl	800c2c8 <__sfp_lock_release>
 800c3d8:	230c      	movs	r3, #12
 800c3da:	603b      	str	r3, [r7, #0]
 800c3dc:	e7ee      	b.n	800c3bc <__sfp+0x60>
 800c3de:	bf00      	nop
 800c3e0:	0800dcd8 	.word	0x0800dcd8
 800c3e4:	ffff0001 	.word	0xffff0001

0800c3e8 <_fwalk_reent>:
 800c3e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c3ec:	4606      	mov	r6, r0
 800c3ee:	4688      	mov	r8, r1
 800c3f0:	2700      	movs	r7, #0
 800c3f2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c3f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c3fa:	f1b9 0901 	subs.w	r9, r9, #1
 800c3fe:	d505      	bpl.n	800c40c <_fwalk_reent+0x24>
 800c400:	6824      	ldr	r4, [r4, #0]
 800c402:	2c00      	cmp	r4, #0
 800c404:	d1f7      	bne.n	800c3f6 <_fwalk_reent+0xe>
 800c406:	4638      	mov	r0, r7
 800c408:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c40c:	89ab      	ldrh	r3, [r5, #12]
 800c40e:	2b01      	cmp	r3, #1
 800c410:	d907      	bls.n	800c422 <_fwalk_reent+0x3a>
 800c412:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c416:	3301      	adds	r3, #1
 800c418:	d003      	beq.n	800c422 <_fwalk_reent+0x3a>
 800c41a:	4629      	mov	r1, r5
 800c41c:	4630      	mov	r0, r6
 800c41e:	47c0      	blx	r8
 800c420:	4307      	orrs	r7, r0
 800c422:	3568      	adds	r5, #104	; 0x68
 800c424:	e7e9      	b.n	800c3fa <_fwalk_reent+0x12>
	...

0800c428 <_localeconv_r>:
 800c428:	4800      	ldr	r0, [pc, #0]	; (800c42c <_localeconv_r+0x4>)
 800c42a:	4770      	bx	lr
 800c42c:	200002dc 	.word	0x200002dc

0800c430 <__retarget_lock_init_recursive>:
 800c430:	4770      	bx	lr

0800c432 <__retarget_lock_acquire_recursive>:
 800c432:	4770      	bx	lr

0800c434 <__retarget_lock_release_recursive>:
 800c434:	4770      	bx	lr
	...

0800c438 <malloc>:
 800c438:	4b02      	ldr	r3, [pc, #8]	; (800c444 <malloc+0xc>)
 800c43a:	4601      	mov	r1, r0
 800c43c:	6818      	ldr	r0, [r3, #0]
 800c43e:	f000 bc1d 	b.w	800cc7c <_malloc_r>
 800c442:	bf00      	nop
 800c444:	20000188 	.word	0x20000188

0800c448 <memchr>:
 800c448:	4603      	mov	r3, r0
 800c44a:	b510      	push	{r4, lr}
 800c44c:	b2c9      	uxtb	r1, r1
 800c44e:	4402      	add	r2, r0
 800c450:	4293      	cmp	r3, r2
 800c452:	4618      	mov	r0, r3
 800c454:	d101      	bne.n	800c45a <memchr+0x12>
 800c456:	2000      	movs	r0, #0
 800c458:	e003      	b.n	800c462 <memchr+0x1a>
 800c45a:	7804      	ldrb	r4, [r0, #0]
 800c45c:	3301      	adds	r3, #1
 800c45e:	428c      	cmp	r4, r1
 800c460:	d1f6      	bne.n	800c450 <memchr+0x8>
 800c462:	bd10      	pop	{r4, pc}

0800c464 <memcpy>:
 800c464:	440a      	add	r2, r1
 800c466:	4291      	cmp	r1, r2
 800c468:	f100 33ff 	add.w	r3, r0, #4294967295
 800c46c:	d100      	bne.n	800c470 <memcpy+0xc>
 800c46e:	4770      	bx	lr
 800c470:	b510      	push	{r4, lr}
 800c472:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c476:	4291      	cmp	r1, r2
 800c478:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c47c:	d1f9      	bne.n	800c472 <memcpy+0xe>
 800c47e:	bd10      	pop	{r4, pc}

0800c480 <_Balloc>:
 800c480:	b570      	push	{r4, r5, r6, lr}
 800c482:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c484:	4604      	mov	r4, r0
 800c486:	460d      	mov	r5, r1
 800c488:	b976      	cbnz	r6, 800c4a8 <_Balloc+0x28>
 800c48a:	2010      	movs	r0, #16
 800c48c:	f7ff ffd4 	bl	800c438 <malloc>
 800c490:	4602      	mov	r2, r0
 800c492:	6260      	str	r0, [r4, #36]	; 0x24
 800c494:	b920      	cbnz	r0, 800c4a0 <_Balloc+0x20>
 800c496:	2166      	movs	r1, #102	; 0x66
 800c498:	4b17      	ldr	r3, [pc, #92]	; (800c4f8 <_Balloc+0x78>)
 800c49a:	4818      	ldr	r0, [pc, #96]	; (800c4fc <_Balloc+0x7c>)
 800c49c:	f001 f884 	bl	800d5a8 <__assert_func>
 800c4a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c4a4:	6006      	str	r6, [r0, #0]
 800c4a6:	60c6      	str	r6, [r0, #12]
 800c4a8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c4aa:	68f3      	ldr	r3, [r6, #12]
 800c4ac:	b183      	cbz	r3, 800c4d0 <_Balloc+0x50>
 800c4ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c4b0:	68db      	ldr	r3, [r3, #12]
 800c4b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c4b6:	b9b8      	cbnz	r0, 800c4e8 <_Balloc+0x68>
 800c4b8:	2101      	movs	r1, #1
 800c4ba:	fa01 f605 	lsl.w	r6, r1, r5
 800c4be:	1d72      	adds	r2, r6, #5
 800c4c0:	4620      	mov	r0, r4
 800c4c2:	0092      	lsls	r2, r2, #2
 800c4c4:	f000 fb5e 	bl	800cb84 <_calloc_r>
 800c4c8:	b160      	cbz	r0, 800c4e4 <_Balloc+0x64>
 800c4ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c4ce:	e00e      	b.n	800c4ee <_Balloc+0x6e>
 800c4d0:	2221      	movs	r2, #33	; 0x21
 800c4d2:	2104      	movs	r1, #4
 800c4d4:	4620      	mov	r0, r4
 800c4d6:	f000 fb55 	bl	800cb84 <_calloc_r>
 800c4da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c4dc:	60f0      	str	r0, [r6, #12]
 800c4de:	68db      	ldr	r3, [r3, #12]
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d1e4      	bne.n	800c4ae <_Balloc+0x2e>
 800c4e4:	2000      	movs	r0, #0
 800c4e6:	bd70      	pop	{r4, r5, r6, pc}
 800c4e8:	6802      	ldr	r2, [r0, #0]
 800c4ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c4ee:	2300      	movs	r3, #0
 800c4f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c4f4:	e7f7      	b.n	800c4e6 <_Balloc+0x66>
 800c4f6:	bf00      	nop
 800c4f8:	0800dd1d 	.word	0x0800dd1d
 800c4fc:	0800de00 	.word	0x0800de00

0800c500 <_Bfree>:
 800c500:	b570      	push	{r4, r5, r6, lr}
 800c502:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c504:	4605      	mov	r5, r0
 800c506:	460c      	mov	r4, r1
 800c508:	b976      	cbnz	r6, 800c528 <_Bfree+0x28>
 800c50a:	2010      	movs	r0, #16
 800c50c:	f7ff ff94 	bl	800c438 <malloc>
 800c510:	4602      	mov	r2, r0
 800c512:	6268      	str	r0, [r5, #36]	; 0x24
 800c514:	b920      	cbnz	r0, 800c520 <_Bfree+0x20>
 800c516:	218a      	movs	r1, #138	; 0x8a
 800c518:	4b08      	ldr	r3, [pc, #32]	; (800c53c <_Bfree+0x3c>)
 800c51a:	4809      	ldr	r0, [pc, #36]	; (800c540 <_Bfree+0x40>)
 800c51c:	f001 f844 	bl	800d5a8 <__assert_func>
 800c520:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c524:	6006      	str	r6, [r0, #0]
 800c526:	60c6      	str	r6, [r0, #12]
 800c528:	b13c      	cbz	r4, 800c53a <_Bfree+0x3a>
 800c52a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c52c:	6862      	ldr	r2, [r4, #4]
 800c52e:	68db      	ldr	r3, [r3, #12]
 800c530:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c534:	6021      	str	r1, [r4, #0]
 800c536:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c53a:	bd70      	pop	{r4, r5, r6, pc}
 800c53c:	0800dd1d 	.word	0x0800dd1d
 800c540:	0800de00 	.word	0x0800de00

0800c544 <__multadd>:
 800c544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c548:	4607      	mov	r7, r0
 800c54a:	460c      	mov	r4, r1
 800c54c:	461e      	mov	r6, r3
 800c54e:	2000      	movs	r0, #0
 800c550:	690d      	ldr	r5, [r1, #16]
 800c552:	f101 0c14 	add.w	ip, r1, #20
 800c556:	f8dc 3000 	ldr.w	r3, [ip]
 800c55a:	3001      	adds	r0, #1
 800c55c:	b299      	uxth	r1, r3
 800c55e:	fb02 6101 	mla	r1, r2, r1, r6
 800c562:	0c1e      	lsrs	r6, r3, #16
 800c564:	0c0b      	lsrs	r3, r1, #16
 800c566:	fb02 3306 	mla	r3, r2, r6, r3
 800c56a:	b289      	uxth	r1, r1
 800c56c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c570:	4285      	cmp	r5, r0
 800c572:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c576:	f84c 1b04 	str.w	r1, [ip], #4
 800c57a:	dcec      	bgt.n	800c556 <__multadd+0x12>
 800c57c:	b30e      	cbz	r6, 800c5c2 <__multadd+0x7e>
 800c57e:	68a3      	ldr	r3, [r4, #8]
 800c580:	42ab      	cmp	r3, r5
 800c582:	dc19      	bgt.n	800c5b8 <__multadd+0x74>
 800c584:	6861      	ldr	r1, [r4, #4]
 800c586:	4638      	mov	r0, r7
 800c588:	3101      	adds	r1, #1
 800c58a:	f7ff ff79 	bl	800c480 <_Balloc>
 800c58e:	4680      	mov	r8, r0
 800c590:	b928      	cbnz	r0, 800c59e <__multadd+0x5a>
 800c592:	4602      	mov	r2, r0
 800c594:	21b5      	movs	r1, #181	; 0xb5
 800c596:	4b0c      	ldr	r3, [pc, #48]	; (800c5c8 <__multadd+0x84>)
 800c598:	480c      	ldr	r0, [pc, #48]	; (800c5cc <__multadd+0x88>)
 800c59a:	f001 f805 	bl	800d5a8 <__assert_func>
 800c59e:	6922      	ldr	r2, [r4, #16]
 800c5a0:	f104 010c 	add.w	r1, r4, #12
 800c5a4:	3202      	adds	r2, #2
 800c5a6:	0092      	lsls	r2, r2, #2
 800c5a8:	300c      	adds	r0, #12
 800c5aa:	f7ff ff5b 	bl	800c464 <memcpy>
 800c5ae:	4621      	mov	r1, r4
 800c5b0:	4638      	mov	r0, r7
 800c5b2:	f7ff ffa5 	bl	800c500 <_Bfree>
 800c5b6:	4644      	mov	r4, r8
 800c5b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c5bc:	3501      	adds	r5, #1
 800c5be:	615e      	str	r6, [r3, #20]
 800c5c0:	6125      	str	r5, [r4, #16]
 800c5c2:	4620      	mov	r0, r4
 800c5c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5c8:	0800dd8f 	.word	0x0800dd8f
 800c5cc:	0800de00 	.word	0x0800de00

0800c5d0 <__hi0bits>:
 800c5d0:	0c02      	lsrs	r2, r0, #16
 800c5d2:	0412      	lsls	r2, r2, #16
 800c5d4:	4603      	mov	r3, r0
 800c5d6:	b9ca      	cbnz	r2, 800c60c <__hi0bits+0x3c>
 800c5d8:	0403      	lsls	r3, r0, #16
 800c5da:	2010      	movs	r0, #16
 800c5dc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800c5e0:	bf04      	itt	eq
 800c5e2:	021b      	lsleq	r3, r3, #8
 800c5e4:	3008      	addeq	r0, #8
 800c5e6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800c5ea:	bf04      	itt	eq
 800c5ec:	011b      	lsleq	r3, r3, #4
 800c5ee:	3004      	addeq	r0, #4
 800c5f0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800c5f4:	bf04      	itt	eq
 800c5f6:	009b      	lsleq	r3, r3, #2
 800c5f8:	3002      	addeq	r0, #2
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	db05      	blt.n	800c60a <__hi0bits+0x3a>
 800c5fe:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800c602:	f100 0001 	add.w	r0, r0, #1
 800c606:	bf08      	it	eq
 800c608:	2020      	moveq	r0, #32
 800c60a:	4770      	bx	lr
 800c60c:	2000      	movs	r0, #0
 800c60e:	e7e5      	b.n	800c5dc <__hi0bits+0xc>

0800c610 <__lo0bits>:
 800c610:	6803      	ldr	r3, [r0, #0]
 800c612:	4602      	mov	r2, r0
 800c614:	f013 0007 	ands.w	r0, r3, #7
 800c618:	d00b      	beq.n	800c632 <__lo0bits+0x22>
 800c61a:	07d9      	lsls	r1, r3, #31
 800c61c:	d421      	bmi.n	800c662 <__lo0bits+0x52>
 800c61e:	0798      	lsls	r0, r3, #30
 800c620:	bf49      	itett	mi
 800c622:	085b      	lsrmi	r3, r3, #1
 800c624:	089b      	lsrpl	r3, r3, #2
 800c626:	2001      	movmi	r0, #1
 800c628:	6013      	strmi	r3, [r2, #0]
 800c62a:	bf5c      	itt	pl
 800c62c:	2002      	movpl	r0, #2
 800c62e:	6013      	strpl	r3, [r2, #0]
 800c630:	4770      	bx	lr
 800c632:	b299      	uxth	r1, r3
 800c634:	b909      	cbnz	r1, 800c63a <__lo0bits+0x2a>
 800c636:	2010      	movs	r0, #16
 800c638:	0c1b      	lsrs	r3, r3, #16
 800c63a:	b2d9      	uxtb	r1, r3
 800c63c:	b909      	cbnz	r1, 800c642 <__lo0bits+0x32>
 800c63e:	3008      	adds	r0, #8
 800c640:	0a1b      	lsrs	r3, r3, #8
 800c642:	0719      	lsls	r1, r3, #28
 800c644:	bf04      	itt	eq
 800c646:	091b      	lsreq	r3, r3, #4
 800c648:	3004      	addeq	r0, #4
 800c64a:	0799      	lsls	r1, r3, #30
 800c64c:	bf04      	itt	eq
 800c64e:	089b      	lsreq	r3, r3, #2
 800c650:	3002      	addeq	r0, #2
 800c652:	07d9      	lsls	r1, r3, #31
 800c654:	d403      	bmi.n	800c65e <__lo0bits+0x4e>
 800c656:	085b      	lsrs	r3, r3, #1
 800c658:	f100 0001 	add.w	r0, r0, #1
 800c65c:	d003      	beq.n	800c666 <__lo0bits+0x56>
 800c65e:	6013      	str	r3, [r2, #0]
 800c660:	4770      	bx	lr
 800c662:	2000      	movs	r0, #0
 800c664:	4770      	bx	lr
 800c666:	2020      	movs	r0, #32
 800c668:	4770      	bx	lr
	...

0800c66c <__i2b>:
 800c66c:	b510      	push	{r4, lr}
 800c66e:	460c      	mov	r4, r1
 800c670:	2101      	movs	r1, #1
 800c672:	f7ff ff05 	bl	800c480 <_Balloc>
 800c676:	4602      	mov	r2, r0
 800c678:	b928      	cbnz	r0, 800c686 <__i2b+0x1a>
 800c67a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c67e:	4b04      	ldr	r3, [pc, #16]	; (800c690 <__i2b+0x24>)
 800c680:	4804      	ldr	r0, [pc, #16]	; (800c694 <__i2b+0x28>)
 800c682:	f000 ff91 	bl	800d5a8 <__assert_func>
 800c686:	2301      	movs	r3, #1
 800c688:	6144      	str	r4, [r0, #20]
 800c68a:	6103      	str	r3, [r0, #16]
 800c68c:	bd10      	pop	{r4, pc}
 800c68e:	bf00      	nop
 800c690:	0800dd8f 	.word	0x0800dd8f
 800c694:	0800de00 	.word	0x0800de00

0800c698 <__multiply>:
 800c698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c69c:	4691      	mov	r9, r2
 800c69e:	690a      	ldr	r2, [r1, #16]
 800c6a0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c6a4:	460c      	mov	r4, r1
 800c6a6:	429a      	cmp	r2, r3
 800c6a8:	bfbe      	ittt	lt
 800c6aa:	460b      	movlt	r3, r1
 800c6ac:	464c      	movlt	r4, r9
 800c6ae:	4699      	movlt	r9, r3
 800c6b0:	6927      	ldr	r7, [r4, #16]
 800c6b2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c6b6:	68a3      	ldr	r3, [r4, #8]
 800c6b8:	6861      	ldr	r1, [r4, #4]
 800c6ba:	eb07 060a 	add.w	r6, r7, sl
 800c6be:	42b3      	cmp	r3, r6
 800c6c0:	b085      	sub	sp, #20
 800c6c2:	bfb8      	it	lt
 800c6c4:	3101      	addlt	r1, #1
 800c6c6:	f7ff fedb 	bl	800c480 <_Balloc>
 800c6ca:	b930      	cbnz	r0, 800c6da <__multiply+0x42>
 800c6cc:	4602      	mov	r2, r0
 800c6ce:	f240 115d 	movw	r1, #349	; 0x15d
 800c6d2:	4b43      	ldr	r3, [pc, #268]	; (800c7e0 <__multiply+0x148>)
 800c6d4:	4843      	ldr	r0, [pc, #268]	; (800c7e4 <__multiply+0x14c>)
 800c6d6:	f000 ff67 	bl	800d5a8 <__assert_func>
 800c6da:	f100 0514 	add.w	r5, r0, #20
 800c6de:	462b      	mov	r3, r5
 800c6e0:	2200      	movs	r2, #0
 800c6e2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c6e6:	4543      	cmp	r3, r8
 800c6e8:	d321      	bcc.n	800c72e <__multiply+0x96>
 800c6ea:	f104 0314 	add.w	r3, r4, #20
 800c6ee:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c6f2:	f109 0314 	add.w	r3, r9, #20
 800c6f6:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c6fa:	9202      	str	r2, [sp, #8]
 800c6fc:	1b3a      	subs	r2, r7, r4
 800c6fe:	3a15      	subs	r2, #21
 800c700:	f022 0203 	bic.w	r2, r2, #3
 800c704:	3204      	adds	r2, #4
 800c706:	f104 0115 	add.w	r1, r4, #21
 800c70a:	428f      	cmp	r7, r1
 800c70c:	bf38      	it	cc
 800c70e:	2204      	movcc	r2, #4
 800c710:	9201      	str	r2, [sp, #4]
 800c712:	9a02      	ldr	r2, [sp, #8]
 800c714:	9303      	str	r3, [sp, #12]
 800c716:	429a      	cmp	r2, r3
 800c718:	d80c      	bhi.n	800c734 <__multiply+0x9c>
 800c71a:	2e00      	cmp	r6, #0
 800c71c:	dd03      	ble.n	800c726 <__multiply+0x8e>
 800c71e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c722:	2b00      	cmp	r3, #0
 800c724:	d059      	beq.n	800c7da <__multiply+0x142>
 800c726:	6106      	str	r6, [r0, #16]
 800c728:	b005      	add	sp, #20
 800c72a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c72e:	f843 2b04 	str.w	r2, [r3], #4
 800c732:	e7d8      	b.n	800c6e6 <__multiply+0x4e>
 800c734:	f8b3 a000 	ldrh.w	sl, [r3]
 800c738:	f1ba 0f00 	cmp.w	sl, #0
 800c73c:	d023      	beq.n	800c786 <__multiply+0xee>
 800c73e:	46a9      	mov	r9, r5
 800c740:	f04f 0c00 	mov.w	ip, #0
 800c744:	f104 0e14 	add.w	lr, r4, #20
 800c748:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c74c:	f8d9 1000 	ldr.w	r1, [r9]
 800c750:	fa1f fb82 	uxth.w	fp, r2
 800c754:	b289      	uxth	r1, r1
 800c756:	fb0a 110b 	mla	r1, sl, fp, r1
 800c75a:	4461      	add	r1, ip
 800c75c:	f8d9 c000 	ldr.w	ip, [r9]
 800c760:	0c12      	lsrs	r2, r2, #16
 800c762:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800c766:	fb0a c202 	mla	r2, sl, r2, ip
 800c76a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c76e:	b289      	uxth	r1, r1
 800c770:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c774:	4577      	cmp	r7, lr
 800c776:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c77a:	f849 1b04 	str.w	r1, [r9], #4
 800c77e:	d8e3      	bhi.n	800c748 <__multiply+0xb0>
 800c780:	9a01      	ldr	r2, [sp, #4]
 800c782:	f845 c002 	str.w	ip, [r5, r2]
 800c786:	9a03      	ldr	r2, [sp, #12]
 800c788:	3304      	adds	r3, #4
 800c78a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c78e:	f1b9 0f00 	cmp.w	r9, #0
 800c792:	d020      	beq.n	800c7d6 <__multiply+0x13e>
 800c794:	46ae      	mov	lr, r5
 800c796:	f04f 0a00 	mov.w	sl, #0
 800c79a:	6829      	ldr	r1, [r5, #0]
 800c79c:	f104 0c14 	add.w	ip, r4, #20
 800c7a0:	f8bc b000 	ldrh.w	fp, [ip]
 800c7a4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c7a8:	b289      	uxth	r1, r1
 800c7aa:	fb09 220b 	mla	r2, r9, fp, r2
 800c7ae:	4492      	add	sl, r2
 800c7b0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c7b4:	f84e 1b04 	str.w	r1, [lr], #4
 800c7b8:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c7bc:	f8be 1000 	ldrh.w	r1, [lr]
 800c7c0:	0c12      	lsrs	r2, r2, #16
 800c7c2:	fb09 1102 	mla	r1, r9, r2, r1
 800c7c6:	4567      	cmp	r7, ip
 800c7c8:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c7cc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c7d0:	d8e6      	bhi.n	800c7a0 <__multiply+0x108>
 800c7d2:	9a01      	ldr	r2, [sp, #4]
 800c7d4:	50a9      	str	r1, [r5, r2]
 800c7d6:	3504      	adds	r5, #4
 800c7d8:	e79b      	b.n	800c712 <__multiply+0x7a>
 800c7da:	3e01      	subs	r6, #1
 800c7dc:	e79d      	b.n	800c71a <__multiply+0x82>
 800c7de:	bf00      	nop
 800c7e0:	0800dd8f 	.word	0x0800dd8f
 800c7e4:	0800de00 	.word	0x0800de00

0800c7e8 <__pow5mult>:
 800c7e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c7ec:	4615      	mov	r5, r2
 800c7ee:	f012 0203 	ands.w	r2, r2, #3
 800c7f2:	4606      	mov	r6, r0
 800c7f4:	460f      	mov	r7, r1
 800c7f6:	d007      	beq.n	800c808 <__pow5mult+0x20>
 800c7f8:	4c25      	ldr	r4, [pc, #148]	; (800c890 <__pow5mult+0xa8>)
 800c7fa:	3a01      	subs	r2, #1
 800c7fc:	2300      	movs	r3, #0
 800c7fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c802:	f7ff fe9f 	bl	800c544 <__multadd>
 800c806:	4607      	mov	r7, r0
 800c808:	10ad      	asrs	r5, r5, #2
 800c80a:	d03d      	beq.n	800c888 <__pow5mult+0xa0>
 800c80c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c80e:	b97c      	cbnz	r4, 800c830 <__pow5mult+0x48>
 800c810:	2010      	movs	r0, #16
 800c812:	f7ff fe11 	bl	800c438 <malloc>
 800c816:	4602      	mov	r2, r0
 800c818:	6270      	str	r0, [r6, #36]	; 0x24
 800c81a:	b928      	cbnz	r0, 800c828 <__pow5mult+0x40>
 800c81c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c820:	4b1c      	ldr	r3, [pc, #112]	; (800c894 <__pow5mult+0xac>)
 800c822:	481d      	ldr	r0, [pc, #116]	; (800c898 <__pow5mult+0xb0>)
 800c824:	f000 fec0 	bl	800d5a8 <__assert_func>
 800c828:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c82c:	6004      	str	r4, [r0, #0]
 800c82e:	60c4      	str	r4, [r0, #12]
 800c830:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c834:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c838:	b94c      	cbnz	r4, 800c84e <__pow5mult+0x66>
 800c83a:	f240 2171 	movw	r1, #625	; 0x271
 800c83e:	4630      	mov	r0, r6
 800c840:	f7ff ff14 	bl	800c66c <__i2b>
 800c844:	2300      	movs	r3, #0
 800c846:	4604      	mov	r4, r0
 800c848:	f8c8 0008 	str.w	r0, [r8, #8]
 800c84c:	6003      	str	r3, [r0, #0]
 800c84e:	f04f 0900 	mov.w	r9, #0
 800c852:	07eb      	lsls	r3, r5, #31
 800c854:	d50a      	bpl.n	800c86c <__pow5mult+0x84>
 800c856:	4639      	mov	r1, r7
 800c858:	4622      	mov	r2, r4
 800c85a:	4630      	mov	r0, r6
 800c85c:	f7ff ff1c 	bl	800c698 <__multiply>
 800c860:	4680      	mov	r8, r0
 800c862:	4639      	mov	r1, r7
 800c864:	4630      	mov	r0, r6
 800c866:	f7ff fe4b 	bl	800c500 <_Bfree>
 800c86a:	4647      	mov	r7, r8
 800c86c:	106d      	asrs	r5, r5, #1
 800c86e:	d00b      	beq.n	800c888 <__pow5mult+0xa0>
 800c870:	6820      	ldr	r0, [r4, #0]
 800c872:	b938      	cbnz	r0, 800c884 <__pow5mult+0x9c>
 800c874:	4622      	mov	r2, r4
 800c876:	4621      	mov	r1, r4
 800c878:	4630      	mov	r0, r6
 800c87a:	f7ff ff0d 	bl	800c698 <__multiply>
 800c87e:	6020      	str	r0, [r4, #0]
 800c880:	f8c0 9000 	str.w	r9, [r0]
 800c884:	4604      	mov	r4, r0
 800c886:	e7e4      	b.n	800c852 <__pow5mult+0x6a>
 800c888:	4638      	mov	r0, r7
 800c88a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c88e:	bf00      	nop
 800c890:	0800df50 	.word	0x0800df50
 800c894:	0800dd1d 	.word	0x0800dd1d
 800c898:	0800de00 	.word	0x0800de00

0800c89c <__lshift>:
 800c89c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c8a0:	460c      	mov	r4, r1
 800c8a2:	4607      	mov	r7, r0
 800c8a4:	4691      	mov	r9, r2
 800c8a6:	6923      	ldr	r3, [r4, #16]
 800c8a8:	6849      	ldr	r1, [r1, #4]
 800c8aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c8ae:	68a3      	ldr	r3, [r4, #8]
 800c8b0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c8b4:	f108 0601 	add.w	r6, r8, #1
 800c8b8:	42b3      	cmp	r3, r6
 800c8ba:	db0b      	blt.n	800c8d4 <__lshift+0x38>
 800c8bc:	4638      	mov	r0, r7
 800c8be:	f7ff fddf 	bl	800c480 <_Balloc>
 800c8c2:	4605      	mov	r5, r0
 800c8c4:	b948      	cbnz	r0, 800c8da <__lshift+0x3e>
 800c8c6:	4602      	mov	r2, r0
 800c8c8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c8cc:	4b29      	ldr	r3, [pc, #164]	; (800c974 <__lshift+0xd8>)
 800c8ce:	482a      	ldr	r0, [pc, #168]	; (800c978 <__lshift+0xdc>)
 800c8d0:	f000 fe6a 	bl	800d5a8 <__assert_func>
 800c8d4:	3101      	adds	r1, #1
 800c8d6:	005b      	lsls	r3, r3, #1
 800c8d8:	e7ee      	b.n	800c8b8 <__lshift+0x1c>
 800c8da:	2300      	movs	r3, #0
 800c8dc:	f100 0114 	add.w	r1, r0, #20
 800c8e0:	f100 0210 	add.w	r2, r0, #16
 800c8e4:	4618      	mov	r0, r3
 800c8e6:	4553      	cmp	r3, sl
 800c8e8:	db37      	blt.n	800c95a <__lshift+0xbe>
 800c8ea:	6920      	ldr	r0, [r4, #16]
 800c8ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c8f0:	f104 0314 	add.w	r3, r4, #20
 800c8f4:	f019 091f 	ands.w	r9, r9, #31
 800c8f8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c8fc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c900:	d02f      	beq.n	800c962 <__lshift+0xc6>
 800c902:	468a      	mov	sl, r1
 800c904:	f04f 0c00 	mov.w	ip, #0
 800c908:	f1c9 0e20 	rsb	lr, r9, #32
 800c90c:	681a      	ldr	r2, [r3, #0]
 800c90e:	fa02 f209 	lsl.w	r2, r2, r9
 800c912:	ea42 020c 	orr.w	r2, r2, ip
 800c916:	f84a 2b04 	str.w	r2, [sl], #4
 800c91a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c91e:	4298      	cmp	r0, r3
 800c920:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c924:	d8f2      	bhi.n	800c90c <__lshift+0x70>
 800c926:	1b03      	subs	r3, r0, r4
 800c928:	3b15      	subs	r3, #21
 800c92a:	f023 0303 	bic.w	r3, r3, #3
 800c92e:	3304      	adds	r3, #4
 800c930:	f104 0215 	add.w	r2, r4, #21
 800c934:	4290      	cmp	r0, r2
 800c936:	bf38      	it	cc
 800c938:	2304      	movcc	r3, #4
 800c93a:	f841 c003 	str.w	ip, [r1, r3]
 800c93e:	f1bc 0f00 	cmp.w	ip, #0
 800c942:	d001      	beq.n	800c948 <__lshift+0xac>
 800c944:	f108 0602 	add.w	r6, r8, #2
 800c948:	3e01      	subs	r6, #1
 800c94a:	4638      	mov	r0, r7
 800c94c:	4621      	mov	r1, r4
 800c94e:	612e      	str	r6, [r5, #16]
 800c950:	f7ff fdd6 	bl	800c500 <_Bfree>
 800c954:	4628      	mov	r0, r5
 800c956:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c95a:	f842 0f04 	str.w	r0, [r2, #4]!
 800c95e:	3301      	adds	r3, #1
 800c960:	e7c1      	b.n	800c8e6 <__lshift+0x4a>
 800c962:	3904      	subs	r1, #4
 800c964:	f853 2b04 	ldr.w	r2, [r3], #4
 800c968:	4298      	cmp	r0, r3
 800c96a:	f841 2f04 	str.w	r2, [r1, #4]!
 800c96e:	d8f9      	bhi.n	800c964 <__lshift+0xc8>
 800c970:	e7ea      	b.n	800c948 <__lshift+0xac>
 800c972:	bf00      	nop
 800c974:	0800dd8f 	.word	0x0800dd8f
 800c978:	0800de00 	.word	0x0800de00

0800c97c <__mcmp>:
 800c97c:	4603      	mov	r3, r0
 800c97e:	690a      	ldr	r2, [r1, #16]
 800c980:	6900      	ldr	r0, [r0, #16]
 800c982:	b530      	push	{r4, r5, lr}
 800c984:	1a80      	subs	r0, r0, r2
 800c986:	d10d      	bne.n	800c9a4 <__mcmp+0x28>
 800c988:	3314      	adds	r3, #20
 800c98a:	3114      	adds	r1, #20
 800c98c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c990:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c994:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c998:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c99c:	4295      	cmp	r5, r2
 800c99e:	d002      	beq.n	800c9a6 <__mcmp+0x2a>
 800c9a0:	d304      	bcc.n	800c9ac <__mcmp+0x30>
 800c9a2:	2001      	movs	r0, #1
 800c9a4:	bd30      	pop	{r4, r5, pc}
 800c9a6:	42a3      	cmp	r3, r4
 800c9a8:	d3f4      	bcc.n	800c994 <__mcmp+0x18>
 800c9aa:	e7fb      	b.n	800c9a4 <__mcmp+0x28>
 800c9ac:	f04f 30ff 	mov.w	r0, #4294967295
 800c9b0:	e7f8      	b.n	800c9a4 <__mcmp+0x28>
	...

0800c9b4 <__mdiff>:
 800c9b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9b8:	460d      	mov	r5, r1
 800c9ba:	4607      	mov	r7, r0
 800c9bc:	4611      	mov	r1, r2
 800c9be:	4628      	mov	r0, r5
 800c9c0:	4614      	mov	r4, r2
 800c9c2:	f7ff ffdb 	bl	800c97c <__mcmp>
 800c9c6:	1e06      	subs	r6, r0, #0
 800c9c8:	d111      	bne.n	800c9ee <__mdiff+0x3a>
 800c9ca:	4631      	mov	r1, r6
 800c9cc:	4638      	mov	r0, r7
 800c9ce:	f7ff fd57 	bl	800c480 <_Balloc>
 800c9d2:	4602      	mov	r2, r0
 800c9d4:	b928      	cbnz	r0, 800c9e2 <__mdiff+0x2e>
 800c9d6:	f240 2132 	movw	r1, #562	; 0x232
 800c9da:	4b3a      	ldr	r3, [pc, #232]	; (800cac4 <__mdiff+0x110>)
 800c9dc:	483a      	ldr	r0, [pc, #232]	; (800cac8 <__mdiff+0x114>)
 800c9de:	f000 fde3 	bl	800d5a8 <__assert_func>
 800c9e2:	2301      	movs	r3, #1
 800c9e4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800c9e8:	4610      	mov	r0, r2
 800c9ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9ee:	bfa4      	itt	ge
 800c9f0:	4623      	movge	r3, r4
 800c9f2:	462c      	movge	r4, r5
 800c9f4:	4638      	mov	r0, r7
 800c9f6:	6861      	ldr	r1, [r4, #4]
 800c9f8:	bfa6      	itte	ge
 800c9fa:	461d      	movge	r5, r3
 800c9fc:	2600      	movge	r6, #0
 800c9fe:	2601      	movlt	r6, #1
 800ca00:	f7ff fd3e 	bl	800c480 <_Balloc>
 800ca04:	4602      	mov	r2, r0
 800ca06:	b918      	cbnz	r0, 800ca10 <__mdiff+0x5c>
 800ca08:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ca0c:	4b2d      	ldr	r3, [pc, #180]	; (800cac4 <__mdiff+0x110>)
 800ca0e:	e7e5      	b.n	800c9dc <__mdiff+0x28>
 800ca10:	f102 0814 	add.w	r8, r2, #20
 800ca14:	46c2      	mov	sl, r8
 800ca16:	f04f 0c00 	mov.w	ip, #0
 800ca1a:	6927      	ldr	r7, [r4, #16]
 800ca1c:	60c6      	str	r6, [r0, #12]
 800ca1e:	692e      	ldr	r6, [r5, #16]
 800ca20:	f104 0014 	add.w	r0, r4, #20
 800ca24:	f105 0914 	add.w	r9, r5, #20
 800ca28:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800ca2c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ca30:	3410      	adds	r4, #16
 800ca32:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800ca36:	f859 3b04 	ldr.w	r3, [r9], #4
 800ca3a:	fa1f f18b 	uxth.w	r1, fp
 800ca3e:	448c      	add	ip, r1
 800ca40:	b299      	uxth	r1, r3
 800ca42:	0c1b      	lsrs	r3, r3, #16
 800ca44:	ebac 0101 	sub.w	r1, ip, r1
 800ca48:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ca4c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800ca50:	b289      	uxth	r1, r1
 800ca52:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800ca56:	454e      	cmp	r6, r9
 800ca58:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800ca5c:	f84a 3b04 	str.w	r3, [sl], #4
 800ca60:	d8e7      	bhi.n	800ca32 <__mdiff+0x7e>
 800ca62:	1b73      	subs	r3, r6, r5
 800ca64:	3b15      	subs	r3, #21
 800ca66:	f023 0303 	bic.w	r3, r3, #3
 800ca6a:	3515      	adds	r5, #21
 800ca6c:	3304      	adds	r3, #4
 800ca6e:	42ae      	cmp	r6, r5
 800ca70:	bf38      	it	cc
 800ca72:	2304      	movcc	r3, #4
 800ca74:	4418      	add	r0, r3
 800ca76:	4443      	add	r3, r8
 800ca78:	461e      	mov	r6, r3
 800ca7a:	4605      	mov	r5, r0
 800ca7c:	4575      	cmp	r5, lr
 800ca7e:	d30e      	bcc.n	800ca9e <__mdiff+0xea>
 800ca80:	f10e 0103 	add.w	r1, lr, #3
 800ca84:	1a09      	subs	r1, r1, r0
 800ca86:	f021 0103 	bic.w	r1, r1, #3
 800ca8a:	3803      	subs	r0, #3
 800ca8c:	4586      	cmp	lr, r0
 800ca8e:	bf38      	it	cc
 800ca90:	2100      	movcc	r1, #0
 800ca92:	4419      	add	r1, r3
 800ca94:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800ca98:	b18b      	cbz	r3, 800cabe <__mdiff+0x10a>
 800ca9a:	6117      	str	r7, [r2, #16]
 800ca9c:	e7a4      	b.n	800c9e8 <__mdiff+0x34>
 800ca9e:	f855 8b04 	ldr.w	r8, [r5], #4
 800caa2:	fa1f f188 	uxth.w	r1, r8
 800caa6:	4461      	add	r1, ip
 800caa8:	140c      	asrs	r4, r1, #16
 800caaa:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800caae:	b289      	uxth	r1, r1
 800cab0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800cab4:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800cab8:	f846 1b04 	str.w	r1, [r6], #4
 800cabc:	e7de      	b.n	800ca7c <__mdiff+0xc8>
 800cabe:	3f01      	subs	r7, #1
 800cac0:	e7e8      	b.n	800ca94 <__mdiff+0xe0>
 800cac2:	bf00      	nop
 800cac4:	0800dd8f 	.word	0x0800dd8f
 800cac8:	0800de00 	.word	0x0800de00

0800cacc <__d2b>:
 800cacc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800cad0:	2101      	movs	r1, #1
 800cad2:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800cad6:	4690      	mov	r8, r2
 800cad8:	461d      	mov	r5, r3
 800cada:	f7ff fcd1 	bl	800c480 <_Balloc>
 800cade:	4604      	mov	r4, r0
 800cae0:	b930      	cbnz	r0, 800caf0 <__d2b+0x24>
 800cae2:	4602      	mov	r2, r0
 800cae4:	f240 310a 	movw	r1, #778	; 0x30a
 800cae8:	4b24      	ldr	r3, [pc, #144]	; (800cb7c <__d2b+0xb0>)
 800caea:	4825      	ldr	r0, [pc, #148]	; (800cb80 <__d2b+0xb4>)
 800caec:	f000 fd5c 	bl	800d5a8 <__assert_func>
 800caf0:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800caf4:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800caf8:	bb2d      	cbnz	r5, 800cb46 <__d2b+0x7a>
 800cafa:	9301      	str	r3, [sp, #4]
 800cafc:	f1b8 0300 	subs.w	r3, r8, #0
 800cb00:	d026      	beq.n	800cb50 <__d2b+0x84>
 800cb02:	4668      	mov	r0, sp
 800cb04:	9300      	str	r3, [sp, #0]
 800cb06:	f7ff fd83 	bl	800c610 <__lo0bits>
 800cb0a:	9900      	ldr	r1, [sp, #0]
 800cb0c:	b1f0      	cbz	r0, 800cb4c <__d2b+0x80>
 800cb0e:	9a01      	ldr	r2, [sp, #4]
 800cb10:	f1c0 0320 	rsb	r3, r0, #32
 800cb14:	fa02 f303 	lsl.w	r3, r2, r3
 800cb18:	430b      	orrs	r3, r1
 800cb1a:	40c2      	lsrs	r2, r0
 800cb1c:	6163      	str	r3, [r4, #20]
 800cb1e:	9201      	str	r2, [sp, #4]
 800cb20:	9b01      	ldr	r3, [sp, #4]
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	bf14      	ite	ne
 800cb26:	2102      	movne	r1, #2
 800cb28:	2101      	moveq	r1, #1
 800cb2a:	61a3      	str	r3, [r4, #24]
 800cb2c:	6121      	str	r1, [r4, #16]
 800cb2e:	b1c5      	cbz	r5, 800cb62 <__d2b+0x96>
 800cb30:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800cb34:	4405      	add	r5, r0
 800cb36:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800cb3a:	603d      	str	r5, [r7, #0]
 800cb3c:	6030      	str	r0, [r6, #0]
 800cb3e:	4620      	mov	r0, r4
 800cb40:	b002      	add	sp, #8
 800cb42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cb4a:	e7d6      	b.n	800cafa <__d2b+0x2e>
 800cb4c:	6161      	str	r1, [r4, #20]
 800cb4e:	e7e7      	b.n	800cb20 <__d2b+0x54>
 800cb50:	a801      	add	r0, sp, #4
 800cb52:	f7ff fd5d 	bl	800c610 <__lo0bits>
 800cb56:	2101      	movs	r1, #1
 800cb58:	9b01      	ldr	r3, [sp, #4]
 800cb5a:	6121      	str	r1, [r4, #16]
 800cb5c:	6163      	str	r3, [r4, #20]
 800cb5e:	3020      	adds	r0, #32
 800cb60:	e7e5      	b.n	800cb2e <__d2b+0x62>
 800cb62:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800cb66:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cb6a:	6038      	str	r0, [r7, #0]
 800cb6c:	6918      	ldr	r0, [r3, #16]
 800cb6e:	f7ff fd2f 	bl	800c5d0 <__hi0bits>
 800cb72:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800cb76:	6031      	str	r1, [r6, #0]
 800cb78:	e7e1      	b.n	800cb3e <__d2b+0x72>
 800cb7a:	bf00      	nop
 800cb7c:	0800dd8f 	.word	0x0800dd8f
 800cb80:	0800de00 	.word	0x0800de00

0800cb84 <_calloc_r>:
 800cb84:	b570      	push	{r4, r5, r6, lr}
 800cb86:	fba1 5402 	umull	r5, r4, r1, r2
 800cb8a:	b934      	cbnz	r4, 800cb9a <_calloc_r+0x16>
 800cb8c:	4629      	mov	r1, r5
 800cb8e:	f000 f875 	bl	800cc7c <_malloc_r>
 800cb92:	4606      	mov	r6, r0
 800cb94:	b928      	cbnz	r0, 800cba2 <_calloc_r+0x1e>
 800cb96:	4630      	mov	r0, r6
 800cb98:	bd70      	pop	{r4, r5, r6, pc}
 800cb9a:	220c      	movs	r2, #12
 800cb9c:	2600      	movs	r6, #0
 800cb9e:	6002      	str	r2, [r0, #0]
 800cba0:	e7f9      	b.n	800cb96 <_calloc_r+0x12>
 800cba2:	462a      	mov	r2, r5
 800cba4:	4621      	mov	r1, r4
 800cba6:	f7fe f819 	bl	800abdc <memset>
 800cbaa:	e7f4      	b.n	800cb96 <_calloc_r+0x12>

0800cbac <_free_r>:
 800cbac:	b538      	push	{r3, r4, r5, lr}
 800cbae:	4605      	mov	r5, r0
 800cbb0:	2900      	cmp	r1, #0
 800cbb2:	d040      	beq.n	800cc36 <_free_r+0x8a>
 800cbb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cbb8:	1f0c      	subs	r4, r1, #4
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	bfb8      	it	lt
 800cbbe:	18e4      	addlt	r4, r4, r3
 800cbc0:	f000 fe94 	bl	800d8ec <__malloc_lock>
 800cbc4:	4a1c      	ldr	r2, [pc, #112]	; (800cc38 <_free_r+0x8c>)
 800cbc6:	6813      	ldr	r3, [r2, #0]
 800cbc8:	b933      	cbnz	r3, 800cbd8 <_free_r+0x2c>
 800cbca:	6063      	str	r3, [r4, #4]
 800cbcc:	6014      	str	r4, [r2, #0]
 800cbce:	4628      	mov	r0, r5
 800cbd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cbd4:	f000 be90 	b.w	800d8f8 <__malloc_unlock>
 800cbd8:	42a3      	cmp	r3, r4
 800cbda:	d908      	bls.n	800cbee <_free_r+0x42>
 800cbdc:	6820      	ldr	r0, [r4, #0]
 800cbde:	1821      	adds	r1, r4, r0
 800cbe0:	428b      	cmp	r3, r1
 800cbe2:	bf01      	itttt	eq
 800cbe4:	6819      	ldreq	r1, [r3, #0]
 800cbe6:	685b      	ldreq	r3, [r3, #4]
 800cbe8:	1809      	addeq	r1, r1, r0
 800cbea:	6021      	streq	r1, [r4, #0]
 800cbec:	e7ed      	b.n	800cbca <_free_r+0x1e>
 800cbee:	461a      	mov	r2, r3
 800cbf0:	685b      	ldr	r3, [r3, #4]
 800cbf2:	b10b      	cbz	r3, 800cbf8 <_free_r+0x4c>
 800cbf4:	42a3      	cmp	r3, r4
 800cbf6:	d9fa      	bls.n	800cbee <_free_r+0x42>
 800cbf8:	6811      	ldr	r1, [r2, #0]
 800cbfa:	1850      	adds	r0, r2, r1
 800cbfc:	42a0      	cmp	r0, r4
 800cbfe:	d10b      	bne.n	800cc18 <_free_r+0x6c>
 800cc00:	6820      	ldr	r0, [r4, #0]
 800cc02:	4401      	add	r1, r0
 800cc04:	1850      	adds	r0, r2, r1
 800cc06:	4283      	cmp	r3, r0
 800cc08:	6011      	str	r1, [r2, #0]
 800cc0a:	d1e0      	bne.n	800cbce <_free_r+0x22>
 800cc0c:	6818      	ldr	r0, [r3, #0]
 800cc0e:	685b      	ldr	r3, [r3, #4]
 800cc10:	4401      	add	r1, r0
 800cc12:	6011      	str	r1, [r2, #0]
 800cc14:	6053      	str	r3, [r2, #4]
 800cc16:	e7da      	b.n	800cbce <_free_r+0x22>
 800cc18:	d902      	bls.n	800cc20 <_free_r+0x74>
 800cc1a:	230c      	movs	r3, #12
 800cc1c:	602b      	str	r3, [r5, #0]
 800cc1e:	e7d6      	b.n	800cbce <_free_r+0x22>
 800cc20:	6820      	ldr	r0, [r4, #0]
 800cc22:	1821      	adds	r1, r4, r0
 800cc24:	428b      	cmp	r3, r1
 800cc26:	bf01      	itttt	eq
 800cc28:	6819      	ldreq	r1, [r3, #0]
 800cc2a:	685b      	ldreq	r3, [r3, #4]
 800cc2c:	1809      	addeq	r1, r1, r0
 800cc2e:	6021      	streq	r1, [r4, #0]
 800cc30:	6063      	str	r3, [r4, #4]
 800cc32:	6054      	str	r4, [r2, #4]
 800cc34:	e7cb      	b.n	800cbce <_free_r+0x22>
 800cc36:	bd38      	pop	{r3, r4, r5, pc}
 800cc38:	20001658 	.word	0x20001658

0800cc3c <sbrk_aligned>:
 800cc3c:	b570      	push	{r4, r5, r6, lr}
 800cc3e:	4e0e      	ldr	r6, [pc, #56]	; (800cc78 <sbrk_aligned+0x3c>)
 800cc40:	460c      	mov	r4, r1
 800cc42:	6831      	ldr	r1, [r6, #0]
 800cc44:	4605      	mov	r5, r0
 800cc46:	b911      	cbnz	r1, 800cc4e <sbrk_aligned+0x12>
 800cc48:	f000 fb88 	bl	800d35c <_sbrk_r>
 800cc4c:	6030      	str	r0, [r6, #0]
 800cc4e:	4621      	mov	r1, r4
 800cc50:	4628      	mov	r0, r5
 800cc52:	f000 fb83 	bl	800d35c <_sbrk_r>
 800cc56:	1c43      	adds	r3, r0, #1
 800cc58:	d00a      	beq.n	800cc70 <sbrk_aligned+0x34>
 800cc5a:	1cc4      	adds	r4, r0, #3
 800cc5c:	f024 0403 	bic.w	r4, r4, #3
 800cc60:	42a0      	cmp	r0, r4
 800cc62:	d007      	beq.n	800cc74 <sbrk_aligned+0x38>
 800cc64:	1a21      	subs	r1, r4, r0
 800cc66:	4628      	mov	r0, r5
 800cc68:	f000 fb78 	bl	800d35c <_sbrk_r>
 800cc6c:	3001      	adds	r0, #1
 800cc6e:	d101      	bne.n	800cc74 <sbrk_aligned+0x38>
 800cc70:	f04f 34ff 	mov.w	r4, #4294967295
 800cc74:	4620      	mov	r0, r4
 800cc76:	bd70      	pop	{r4, r5, r6, pc}
 800cc78:	2000165c 	.word	0x2000165c

0800cc7c <_malloc_r>:
 800cc7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc80:	1ccd      	adds	r5, r1, #3
 800cc82:	f025 0503 	bic.w	r5, r5, #3
 800cc86:	3508      	adds	r5, #8
 800cc88:	2d0c      	cmp	r5, #12
 800cc8a:	bf38      	it	cc
 800cc8c:	250c      	movcc	r5, #12
 800cc8e:	2d00      	cmp	r5, #0
 800cc90:	4607      	mov	r7, r0
 800cc92:	db01      	blt.n	800cc98 <_malloc_r+0x1c>
 800cc94:	42a9      	cmp	r1, r5
 800cc96:	d905      	bls.n	800cca4 <_malloc_r+0x28>
 800cc98:	230c      	movs	r3, #12
 800cc9a:	2600      	movs	r6, #0
 800cc9c:	603b      	str	r3, [r7, #0]
 800cc9e:	4630      	mov	r0, r6
 800cca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cca4:	4e2e      	ldr	r6, [pc, #184]	; (800cd60 <_malloc_r+0xe4>)
 800cca6:	f000 fe21 	bl	800d8ec <__malloc_lock>
 800ccaa:	6833      	ldr	r3, [r6, #0]
 800ccac:	461c      	mov	r4, r3
 800ccae:	bb34      	cbnz	r4, 800ccfe <_malloc_r+0x82>
 800ccb0:	4629      	mov	r1, r5
 800ccb2:	4638      	mov	r0, r7
 800ccb4:	f7ff ffc2 	bl	800cc3c <sbrk_aligned>
 800ccb8:	1c43      	adds	r3, r0, #1
 800ccba:	4604      	mov	r4, r0
 800ccbc:	d14d      	bne.n	800cd5a <_malloc_r+0xde>
 800ccbe:	6834      	ldr	r4, [r6, #0]
 800ccc0:	4626      	mov	r6, r4
 800ccc2:	2e00      	cmp	r6, #0
 800ccc4:	d140      	bne.n	800cd48 <_malloc_r+0xcc>
 800ccc6:	6823      	ldr	r3, [r4, #0]
 800ccc8:	4631      	mov	r1, r6
 800ccca:	4638      	mov	r0, r7
 800cccc:	eb04 0803 	add.w	r8, r4, r3
 800ccd0:	f000 fb44 	bl	800d35c <_sbrk_r>
 800ccd4:	4580      	cmp	r8, r0
 800ccd6:	d13a      	bne.n	800cd4e <_malloc_r+0xd2>
 800ccd8:	6821      	ldr	r1, [r4, #0]
 800ccda:	3503      	adds	r5, #3
 800ccdc:	1a6d      	subs	r5, r5, r1
 800ccde:	f025 0503 	bic.w	r5, r5, #3
 800cce2:	3508      	adds	r5, #8
 800cce4:	2d0c      	cmp	r5, #12
 800cce6:	bf38      	it	cc
 800cce8:	250c      	movcc	r5, #12
 800ccea:	4638      	mov	r0, r7
 800ccec:	4629      	mov	r1, r5
 800ccee:	f7ff ffa5 	bl	800cc3c <sbrk_aligned>
 800ccf2:	3001      	adds	r0, #1
 800ccf4:	d02b      	beq.n	800cd4e <_malloc_r+0xd2>
 800ccf6:	6823      	ldr	r3, [r4, #0]
 800ccf8:	442b      	add	r3, r5
 800ccfa:	6023      	str	r3, [r4, #0]
 800ccfc:	e00e      	b.n	800cd1c <_malloc_r+0xa0>
 800ccfe:	6822      	ldr	r2, [r4, #0]
 800cd00:	1b52      	subs	r2, r2, r5
 800cd02:	d41e      	bmi.n	800cd42 <_malloc_r+0xc6>
 800cd04:	2a0b      	cmp	r2, #11
 800cd06:	d916      	bls.n	800cd36 <_malloc_r+0xba>
 800cd08:	1961      	adds	r1, r4, r5
 800cd0a:	42a3      	cmp	r3, r4
 800cd0c:	6025      	str	r5, [r4, #0]
 800cd0e:	bf18      	it	ne
 800cd10:	6059      	strne	r1, [r3, #4]
 800cd12:	6863      	ldr	r3, [r4, #4]
 800cd14:	bf08      	it	eq
 800cd16:	6031      	streq	r1, [r6, #0]
 800cd18:	5162      	str	r2, [r4, r5]
 800cd1a:	604b      	str	r3, [r1, #4]
 800cd1c:	4638      	mov	r0, r7
 800cd1e:	f104 060b 	add.w	r6, r4, #11
 800cd22:	f000 fde9 	bl	800d8f8 <__malloc_unlock>
 800cd26:	f026 0607 	bic.w	r6, r6, #7
 800cd2a:	1d23      	adds	r3, r4, #4
 800cd2c:	1af2      	subs	r2, r6, r3
 800cd2e:	d0b6      	beq.n	800cc9e <_malloc_r+0x22>
 800cd30:	1b9b      	subs	r3, r3, r6
 800cd32:	50a3      	str	r3, [r4, r2]
 800cd34:	e7b3      	b.n	800cc9e <_malloc_r+0x22>
 800cd36:	6862      	ldr	r2, [r4, #4]
 800cd38:	42a3      	cmp	r3, r4
 800cd3a:	bf0c      	ite	eq
 800cd3c:	6032      	streq	r2, [r6, #0]
 800cd3e:	605a      	strne	r2, [r3, #4]
 800cd40:	e7ec      	b.n	800cd1c <_malloc_r+0xa0>
 800cd42:	4623      	mov	r3, r4
 800cd44:	6864      	ldr	r4, [r4, #4]
 800cd46:	e7b2      	b.n	800ccae <_malloc_r+0x32>
 800cd48:	4634      	mov	r4, r6
 800cd4a:	6876      	ldr	r6, [r6, #4]
 800cd4c:	e7b9      	b.n	800ccc2 <_malloc_r+0x46>
 800cd4e:	230c      	movs	r3, #12
 800cd50:	4638      	mov	r0, r7
 800cd52:	603b      	str	r3, [r7, #0]
 800cd54:	f000 fdd0 	bl	800d8f8 <__malloc_unlock>
 800cd58:	e7a1      	b.n	800cc9e <_malloc_r+0x22>
 800cd5a:	6025      	str	r5, [r4, #0]
 800cd5c:	e7de      	b.n	800cd1c <_malloc_r+0xa0>
 800cd5e:	bf00      	nop
 800cd60:	20001658 	.word	0x20001658

0800cd64 <__ssputs_r>:
 800cd64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd68:	688e      	ldr	r6, [r1, #8]
 800cd6a:	4682      	mov	sl, r0
 800cd6c:	429e      	cmp	r6, r3
 800cd6e:	460c      	mov	r4, r1
 800cd70:	4690      	mov	r8, r2
 800cd72:	461f      	mov	r7, r3
 800cd74:	d838      	bhi.n	800cde8 <__ssputs_r+0x84>
 800cd76:	898a      	ldrh	r2, [r1, #12]
 800cd78:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cd7c:	d032      	beq.n	800cde4 <__ssputs_r+0x80>
 800cd7e:	6825      	ldr	r5, [r4, #0]
 800cd80:	6909      	ldr	r1, [r1, #16]
 800cd82:	3301      	adds	r3, #1
 800cd84:	eba5 0901 	sub.w	r9, r5, r1
 800cd88:	6965      	ldr	r5, [r4, #20]
 800cd8a:	444b      	add	r3, r9
 800cd8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cd90:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cd94:	106d      	asrs	r5, r5, #1
 800cd96:	429d      	cmp	r5, r3
 800cd98:	bf38      	it	cc
 800cd9a:	461d      	movcc	r5, r3
 800cd9c:	0553      	lsls	r3, r2, #21
 800cd9e:	d531      	bpl.n	800ce04 <__ssputs_r+0xa0>
 800cda0:	4629      	mov	r1, r5
 800cda2:	f7ff ff6b 	bl	800cc7c <_malloc_r>
 800cda6:	4606      	mov	r6, r0
 800cda8:	b950      	cbnz	r0, 800cdc0 <__ssputs_r+0x5c>
 800cdaa:	230c      	movs	r3, #12
 800cdac:	f04f 30ff 	mov.w	r0, #4294967295
 800cdb0:	f8ca 3000 	str.w	r3, [sl]
 800cdb4:	89a3      	ldrh	r3, [r4, #12]
 800cdb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cdba:	81a3      	strh	r3, [r4, #12]
 800cdbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cdc0:	464a      	mov	r2, r9
 800cdc2:	6921      	ldr	r1, [r4, #16]
 800cdc4:	f7ff fb4e 	bl	800c464 <memcpy>
 800cdc8:	89a3      	ldrh	r3, [r4, #12]
 800cdca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cdce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cdd2:	81a3      	strh	r3, [r4, #12]
 800cdd4:	6126      	str	r6, [r4, #16]
 800cdd6:	444e      	add	r6, r9
 800cdd8:	6026      	str	r6, [r4, #0]
 800cdda:	463e      	mov	r6, r7
 800cddc:	6165      	str	r5, [r4, #20]
 800cdde:	eba5 0509 	sub.w	r5, r5, r9
 800cde2:	60a5      	str	r5, [r4, #8]
 800cde4:	42be      	cmp	r6, r7
 800cde6:	d900      	bls.n	800cdea <__ssputs_r+0x86>
 800cde8:	463e      	mov	r6, r7
 800cdea:	4632      	mov	r2, r6
 800cdec:	4641      	mov	r1, r8
 800cdee:	6820      	ldr	r0, [r4, #0]
 800cdf0:	f000 fd62 	bl	800d8b8 <memmove>
 800cdf4:	68a3      	ldr	r3, [r4, #8]
 800cdf6:	2000      	movs	r0, #0
 800cdf8:	1b9b      	subs	r3, r3, r6
 800cdfa:	60a3      	str	r3, [r4, #8]
 800cdfc:	6823      	ldr	r3, [r4, #0]
 800cdfe:	4433      	add	r3, r6
 800ce00:	6023      	str	r3, [r4, #0]
 800ce02:	e7db      	b.n	800cdbc <__ssputs_r+0x58>
 800ce04:	462a      	mov	r2, r5
 800ce06:	f000 fd7d 	bl	800d904 <_realloc_r>
 800ce0a:	4606      	mov	r6, r0
 800ce0c:	2800      	cmp	r0, #0
 800ce0e:	d1e1      	bne.n	800cdd4 <__ssputs_r+0x70>
 800ce10:	4650      	mov	r0, sl
 800ce12:	6921      	ldr	r1, [r4, #16]
 800ce14:	f7ff feca 	bl	800cbac <_free_r>
 800ce18:	e7c7      	b.n	800cdaa <__ssputs_r+0x46>
	...

0800ce1c <_svfiprintf_r>:
 800ce1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce20:	4698      	mov	r8, r3
 800ce22:	898b      	ldrh	r3, [r1, #12]
 800ce24:	4607      	mov	r7, r0
 800ce26:	061b      	lsls	r3, r3, #24
 800ce28:	460d      	mov	r5, r1
 800ce2a:	4614      	mov	r4, r2
 800ce2c:	b09d      	sub	sp, #116	; 0x74
 800ce2e:	d50e      	bpl.n	800ce4e <_svfiprintf_r+0x32>
 800ce30:	690b      	ldr	r3, [r1, #16]
 800ce32:	b963      	cbnz	r3, 800ce4e <_svfiprintf_r+0x32>
 800ce34:	2140      	movs	r1, #64	; 0x40
 800ce36:	f7ff ff21 	bl	800cc7c <_malloc_r>
 800ce3a:	6028      	str	r0, [r5, #0]
 800ce3c:	6128      	str	r0, [r5, #16]
 800ce3e:	b920      	cbnz	r0, 800ce4a <_svfiprintf_r+0x2e>
 800ce40:	230c      	movs	r3, #12
 800ce42:	603b      	str	r3, [r7, #0]
 800ce44:	f04f 30ff 	mov.w	r0, #4294967295
 800ce48:	e0d1      	b.n	800cfee <_svfiprintf_r+0x1d2>
 800ce4a:	2340      	movs	r3, #64	; 0x40
 800ce4c:	616b      	str	r3, [r5, #20]
 800ce4e:	2300      	movs	r3, #0
 800ce50:	9309      	str	r3, [sp, #36]	; 0x24
 800ce52:	2320      	movs	r3, #32
 800ce54:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ce58:	2330      	movs	r3, #48	; 0x30
 800ce5a:	f04f 0901 	mov.w	r9, #1
 800ce5e:	f8cd 800c 	str.w	r8, [sp, #12]
 800ce62:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d008 <_svfiprintf_r+0x1ec>
 800ce66:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ce6a:	4623      	mov	r3, r4
 800ce6c:	469a      	mov	sl, r3
 800ce6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ce72:	b10a      	cbz	r2, 800ce78 <_svfiprintf_r+0x5c>
 800ce74:	2a25      	cmp	r2, #37	; 0x25
 800ce76:	d1f9      	bne.n	800ce6c <_svfiprintf_r+0x50>
 800ce78:	ebba 0b04 	subs.w	fp, sl, r4
 800ce7c:	d00b      	beq.n	800ce96 <_svfiprintf_r+0x7a>
 800ce7e:	465b      	mov	r3, fp
 800ce80:	4622      	mov	r2, r4
 800ce82:	4629      	mov	r1, r5
 800ce84:	4638      	mov	r0, r7
 800ce86:	f7ff ff6d 	bl	800cd64 <__ssputs_r>
 800ce8a:	3001      	adds	r0, #1
 800ce8c:	f000 80aa 	beq.w	800cfe4 <_svfiprintf_r+0x1c8>
 800ce90:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ce92:	445a      	add	r2, fp
 800ce94:	9209      	str	r2, [sp, #36]	; 0x24
 800ce96:	f89a 3000 	ldrb.w	r3, [sl]
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	f000 80a2 	beq.w	800cfe4 <_svfiprintf_r+0x1c8>
 800cea0:	2300      	movs	r3, #0
 800cea2:	f04f 32ff 	mov.w	r2, #4294967295
 800cea6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ceaa:	f10a 0a01 	add.w	sl, sl, #1
 800ceae:	9304      	str	r3, [sp, #16]
 800ceb0:	9307      	str	r3, [sp, #28]
 800ceb2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ceb6:	931a      	str	r3, [sp, #104]	; 0x68
 800ceb8:	4654      	mov	r4, sl
 800ceba:	2205      	movs	r2, #5
 800cebc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cec0:	4851      	ldr	r0, [pc, #324]	; (800d008 <_svfiprintf_r+0x1ec>)
 800cec2:	f7ff fac1 	bl	800c448 <memchr>
 800cec6:	9a04      	ldr	r2, [sp, #16]
 800cec8:	b9d8      	cbnz	r0, 800cf02 <_svfiprintf_r+0xe6>
 800ceca:	06d0      	lsls	r0, r2, #27
 800cecc:	bf44      	itt	mi
 800cece:	2320      	movmi	r3, #32
 800ced0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ced4:	0711      	lsls	r1, r2, #28
 800ced6:	bf44      	itt	mi
 800ced8:	232b      	movmi	r3, #43	; 0x2b
 800ceda:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cede:	f89a 3000 	ldrb.w	r3, [sl]
 800cee2:	2b2a      	cmp	r3, #42	; 0x2a
 800cee4:	d015      	beq.n	800cf12 <_svfiprintf_r+0xf6>
 800cee6:	4654      	mov	r4, sl
 800cee8:	2000      	movs	r0, #0
 800ceea:	f04f 0c0a 	mov.w	ip, #10
 800ceee:	9a07      	ldr	r2, [sp, #28]
 800cef0:	4621      	mov	r1, r4
 800cef2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cef6:	3b30      	subs	r3, #48	; 0x30
 800cef8:	2b09      	cmp	r3, #9
 800cefa:	d94e      	bls.n	800cf9a <_svfiprintf_r+0x17e>
 800cefc:	b1b0      	cbz	r0, 800cf2c <_svfiprintf_r+0x110>
 800cefe:	9207      	str	r2, [sp, #28]
 800cf00:	e014      	b.n	800cf2c <_svfiprintf_r+0x110>
 800cf02:	eba0 0308 	sub.w	r3, r0, r8
 800cf06:	fa09 f303 	lsl.w	r3, r9, r3
 800cf0a:	4313      	orrs	r3, r2
 800cf0c:	46a2      	mov	sl, r4
 800cf0e:	9304      	str	r3, [sp, #16]
 800cf10:	e7d2      	b.n	800ceb8 <_svfiprintf_r+0x9c>
 800cf12:	9b03      	ldr	r3, [sp, #12]
 800cf14:	1d19      	adds	r1, r3, #4
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	9103      	str	r1, [sp, #12]
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	bfbb      	ittet	lt
 800cf1e:	425b      	neglt	r3, r3
 800cf20:	f042 0202 	orrlt.w	r2, r2, #2
 800cf24:	9307      	strge	r3, [sp, #28]
 800cf26:	9307      	strlt	r3, [sp, #28]
 800cf28:	bfb8      	it	lt
 800cf2a:	9204      	strlt	r2, [sp, #16]
 800cf2c:	7823      	ldrb	r3, [r4, #0]
 800cf2e:	2b2e      	cmp	r3, #46	; 0x2e
 800cf30:	d10c      	bne.n	800cf4c <_svfiprintf_r+0x130>
 800cf32:	7863      	ldrb	r3, [r4, #1]
 800cf34:	2b2a      	cmp	r3, #42	; 0x2a
 800cf36:	d135      	bne.n	800cfa4 <_svfiprintf_r+0x188>
 800cf38:	9b03      	ldr	r3, [sp, #12]
 800cf3a:	3402      	adds	r4, #2
 800cf3c:	1d1a      	adds	r2, r3, #4
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	9203      	str	r2, [sp, #12]
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	bfb8      	it	lt
 800cf46:	f04f 33ff 	movlt.w	r3, #4294967295
 800cf4a:	9305      	str	r3, [sp, #20]
 800cf4c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800d00c <_svfiprintf_r+0x1f0>
 800cf50:	2203      	movs	r2, #3
 800cf52:	4650      	mov	r0, sl
 800cf54:	7821      	ldrb	r1, [r4, #0]
 800cf56:	f7ff fa77 	bl	800c448 <memchr>
 800cf5a:	b140      	cbz	r0, 800cf6e <_svfiprintf_r+0x152>
 800cf5c:	2340      	movs	r3, #64	; 0x40
 800cf5e:	eba0 000a 	sub.w	r0, r0, sl
 800cf62:	fa03 f000 	lsl.w	r0, r3, r0
 800cf66:	9b04      	ldr	r3, [sp, #16]
 800cf68:	3401      	adds	r4, #1
 800cf6a:	4303      	orrs	r3, r0
 800cf6c:	9304      	str	r3, [sp, #16]
 800cf6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf72:	2206      	movs	r2, #6
 800cf74:	4826      	ldr	r0, [pc, #152]	; (800d010 <_svfiprintf_r+0x1f4>)
 800cf76:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cf7a:	f7ff fa65 	bl	800c448 <memchr>
 800cf7e:	2800      	cmp	r0, #0
 800cf80:	d038      	beq.n	800cff4 <_svfiprintf_r+0x1d8>
 800cf82:	4b24      	ldr	r3, [pc, #144]	; (800d014 <_svfiprintf_r+0x1f8>)
 800cf84:	bb1b      	cbnz	r3, 800cfce <_svfiprintf_r+0x1b2>
 800cf86:	9b03      	ldr	r3, [sp, #12]
 800cf88:	3307      	adds	r3, #7
 800cf8a:	f023 0307 	bic.w	r3, r3, #7
 800cf8e:	3308      	adds	r3, #8
 800cf90:	9303      	str	r3, [sp, #12]
 800cf92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf94:	4433      	add	r3, r6
 800cf96:	9309      	str	r3, [sp, #36]	; 0x24
 800cf98:	e767      	b.n	800ce6a <_svfiprintf_r+0x4e>
 800cf9a:	460c      	mov	r4, r1
 800cf9c:	2001      	movs	r0, #1
 800cf9e:	fb0c 3202 	mla	r2, ip, r2, r3
 800cfa2:	e7a5      	b.n	800cef0 <_svfiprintf_r+0xd4>
 800cfa4:	2300      	movs	r3, #0
 800cfa6:	f04f 0c0a 	mov.w	ip, #10
 800cfaa:	4619      	mov	r1, r3
 800cfac:	3401      	adds	r4, #1
 800cfae:	9305      	str	r3, [sp, #20]
 800cfb0:	4620      	mov	r0, r4
 800cfb2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cfb6:	3a30      	subs	r2, #48	; 0x30
 800cfb8:	2a09      	cmp	r2, #9
 800cfba:	d903      	bls.n	800cfc4 <_svfiprintf_r+0x1a8>
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d0c5      	beq.n	800cf4c <_svfiprintf_r+0x130>
 800cfc0:	9105      	str	r1, [sp, #20]
 800cfc2:	e7c3      	b.n	800cf4c <_svfiprintf_r+0x130>
 800cfc4:	4604      	mov	r4, r0
 800cfc6:	2301      	movs	r3, #1
 800cfc8:	fb0c 2101 	mla	r1, ip, r1, r2
 800cfcc:	e7f0      	b.n	800cfb0 <_svfiprintf_r+0x194>
 800cfce:	ab03      	add	r3, sp, #12
 800cfd0:	9300      	str	r3, [sp, #0]
 800cfd2:	462a      	mov	r2, r5
 800cfd4:	4638      	mov	r0, r7
 800cfd6:	4b10      	ldr	r3, [pc, #64]	; (800d018 <_svfiprintf_r+0x1fc>)
 800cfd8:	a904      	add	r1, sp, #16
 800cfda:	f7fd fea5 	bl	800ad28 <_printf_float>
 800cfde:	1c42      	adds	r2, r0, #1
 800cfe0:	4606      	mov	r6, r0
 800cfe2:	d1d6      	bne.n	800cf92 <_svfiprintf_r+0x176>
 800cfe4:	89ab      	ldrh	r3, [r5, #12]
 800cfe6:	065b      	lsls	r3, r3, #25
 800cfe8:	f53f af2c 	bmi.w	800ce44 <_svfiprintf_r+0x28>
 800cfec:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cfee:	b01d      	add	sp, #116	; 0x74
 800cff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cff4:	ab03      	add	r3, sp, #12
 800cff6:	9300      	str	r3, [sp, #0]
 800cff8:	462a      	mov	r2, r5
 800cffa:	4638      	mov	r0, r7
 800cffc:	4b06      	ldr	r3, [pc, #24]	; (800d018 <_svfiprintf_r+0x1fc>)
 800cffe:	a904      	add	r1, sp, #16
 800d000:	f7fe f92e 	bl	800b260 <_printf_i>
 800d004:	e7eb      	b.n	800cfde <_svfiprintf_r+0x1c2>
 800d006:	bf00      	nop
 800d008:	0800df5c 	.word	0x0800df5c
 800d00c:	0800df62 	.word	0x0800df62
 800d010:	0800df66 	.word	0x0800df66
 800d014:	0800ad29 	.word	0x0800ad29
 800d018:	0800cd65 	.word	0x0800cd65

0800d01c <__sfputc_r>:
 800d01c:	6893      	ldr	r3, [r2, #8]
 800d01e:	b410      	push	{r4}
 800d020:	3b01      	subs	r3, #1
 800d022:	2b00      	cmp	r3, #0
 800d024:	6093      	str	r3, [r2, #8]
 800d026:	da07      	bge.n	800d038 <__sfputc_r+0x1c>
 800d028:	6994      	ldr	r4, [r2, #24]
 800d02a:	42a3      	cmp	r3, r4
 800d02c:	db01      	blt.n	800d032 <__sfputc_r+0x16>
 800d02e:	290a      	cmp	r1, #10
 800d030:	d102      	bne.n	800d038 <__sfputc_r+0x1c>
 800d032:	bc10      	pop	{r4}
 800d034:	f000 b9e6 	b.w	800d404 <__swbuf_r>
 800d038:	6813      	ldr	r3, [r2, #0]
 800d03a:	1c58      	adds	r0, r3, #1
 800d03c:	6010      	str	r0, [r2, #0]
 800d03e:	7019      	strb	r1, [r3, #0]
 800d040:	4608      	mov	r0, r1
 800d042:	bc10      	pop	{r4}
 800d044:	4770      	bx	lr

0800d046 <__sfputs_r>:
 800d046:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d048:	4606      	mov	r6, r0
 800d04a:	460f      	mov	r7, r1
 800d04c:	4614      	mov	r4, r2
 800d04e:	18d5      	adds	r5, r2, r3
 800d050:	42ac      	cmp	r4, r5
 800d052:	d101      	bne.n	800d058 <__sfputs_r+0x12>
 800d054:	2000      	movs	r0, #0
 800d056:	e007      	b.n	800d068 <__sfputs_r+0x22>
 800d058:	463a      	mov	r2, r7
 800d05a:	4630      	mov	r0, r6
 800d05c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d060:	f7ff ffdc 	bl	800d01c <__sfputc_r>
 800d064:	1c43      	adds	r3, r0, #1
 800d066:	d1f3      	bne.n	800d050 <__sfputs_r+0xa>
 800d068:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d06c <_vfiprintf_r>:
 800d06c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d070:	460d      	mov	r5, r1
 800d072:	4614      	mov	r4, r2
 800d074:	4698      	mov	r8, r3
 800d076:	4606      	mov	r6, r0
 800d078:	b09d      	sub	sp, #116	; 0x74
 800d07a:	b118      	cbz	r0, 800d084 <_vfiprintf_r+0x18>
 800d07c:	6983      	ldr	r3, [r0, #24]
 800d07e:	b90b      	cbnz	r3, 800d084 <_vfiprintf_r+0x18>
 800d080:	f7ff f934 	bl	800c2ec <__sinit>
 800d084:	4b89      	ldr	r3, [pc, #548]	; (800d2ac <_vfiprintf_r+0x240>)
 800d086:	429d      	cmp	r5, r3
 800d088:	d11b      	bne.n	800d0c2 <_vfiprintf_r+0x56>
 800d08a:	6875      	ldr	r5, [r6, #4]
 800d08c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d08e:	07d9      	lsls	r1, r3, #31
 800d090:	d405      	bmi.n	800d09e <_vfiprintf_r+0x32>
 800d092:	89ab      	ldrh	r3, [r5, #12]
 800d094:	059a      	lsls	r2, r3, #22
 800d096:	d402      	bmi.n	800d09e <_vfiprintf_r+0x32>
 800d098:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d09a:	f7ff f9ca 	bl	800c432 <__retarget_lock_acquire_recursive>
 800d09e:	89ab      	ldrh	r3, [r5, #12]
 800d0a0:	071b      	lsls	r3, r3, #28
 800d0a2:	d501      	bpl.n	800d0a8 <_vfiprintf_r+0x3c>
 800d0a4:	692b      	ldr	r3, [r5, #16]
 800d0a6:	b9eb      	cbnz	r3, 800d0e4 <_vfiprintf_r+0x78>
 800d0a8:	4629      	mov	r1, r5
 800d0aa:	4630      	mov	r0, r6
 800d0ac:	f000 fa0e 	bl	800d4cc <__swsetup_r>
 800d0b0:	b1c0      	cbz	r0, 800d0e4 <_vfiprintf_r+0x78>
 800d0b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d0b4:	07dc      	lsls	r4, r3, #31
 800d0b6:	d50e      	bpl.n	800d0d6 <_vfiprintf_r+0x6a>
 800d0b8:	f04f 30ff 	mov.w	r0, #4294967295
 800d0bc:	b01d      	add	sp, #116	; 0x74
 800d0be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0c2:	4b7b      	ldr	r3, [pc, #492]	; (800d2b0 <_vfiprintf_r+0x244>)
 800d0c4:	429d      	cmp	r5, r3
 800d0c6:	d101      	bne.n	800d0cc <_vfiprintf_r+0x60>
 800d0c8:	68b5      	ldr	r5, [r6, #8]
 800d0ca:	e7df      	b.n	800d08c <_vfiprintf_r+0x20>
 800d0cc:	4b79      	ldr	r3, [pc, #484]	; (800d2b4 <_vfiprintf_r+0x248>)
 800d0ce:	429d      	cmp	r5, r3
 800d0d0:	bf08      	it	eq
 800d0d2:	68f5      	ldreq	r5, [r6, #12]
 800d0d4:	e7da      	b.n	800d08c <_vfiprintf_r+0x20>
 800d0d6:	89ab      	ldrh	r3, [r5, #12]
 800d0d8:	0598      	lsls	r0, r3, #22
 800d0da:	d4ed      	bmi.n	800d0b8 <_vfiprintf_r+0x4c>
 800d0dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d0de:	f7ff f9a9 	bl	800c434 <__retarget_lock_release_recursive>
 800d0e2:	e7e9      	b.n	800d0b8 <_vfiprintf_r+0x4c>
 800d0e4:	2300      	movs	r3, #0
 800d0e6:	9309      	str	r3, [sp, #36]	; 0x24
 800d0e8:	2320      	movs	r3, #32
 800d0ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d0ee:	2330      	movs	r3, #48	; 0x30
 800d0f0:	f04f 0901 	mov.w	r9, #1
 800d0f4:	f8cd 800c 	str.w	r8, [sp, #12]
 800d0f8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800d2b8 <_vfiprintf_r+0x24c>
 800d0fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d100:	4623      	mov	r3, r4
 800d102:	469a      	mov	sl, r3
 800d104:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d108:	b10a      	cbz	r2, 800d10e <_vfiprintf_r+0xa2>
 800d10a:	2a25      	cmp	r2, #37	; 0x25
 800d10c:	d1f9      	bne.n	800d102 <_vfiprintf_r+0x96>
 800d10e:	ebba 0b04 	subs.w	fp, sl, r4
 800d112:	d00b      	beq.n	800d12c <_vfiprintf_r+0xc0>
 800d114:	465b      	mov	r3, fp
 800d116:	4622      	mov	r2, r4
 800d118:	4629      	mov	r1, r5
 800d11a:	4630      	mov	r0, r6
 800d11c:	f7ff ff93 	bl	800d046 <__sfputs_r>
 800d120:	3001      	adds	r0, #1
 800d122:	f000 80aa 	beq.w	800d27a <_vfiprintf_r+0x20e>
 800d126:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d128:	445a      	add	r2, fp
 800d12a:	9209      	str	r2, [sp, #36]	; 0x24
 800d12c:	f89a 3000 	ldrb.w	r3, [sl]
 800d130:	2b00      	cmp	r3, #0
 800d132:	f000 80a2 	beq.w	800d27a <_vfiprintf_r+0x20e>
 800d136:	2300      	movs	r3, #0
 800d138:	f04f 32ff 	mov.w	r2, #4294967295
 800d13c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d140:	f10a 0a01 	add.w	sl, sl, #1
 800d144:	9304      	str	r3, [sp, #16]
 800d146:	9307      	str	r3, [sp, #28]
 800d148:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d14c:	931a      	str	r3, [sp, #104]	; 0x68
 800d14e:	4654      	mov	r4, sl
 800d150:	2205      	movs	r2, #5
 800d152:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d156:	4858      	ldr	r0, [pc, #352]	; (800d2b8 <_vfiprintf_r+0x24c>)
 800d158:	f7ff f976 	bl	800c448 <memchr>
 800d15c:	9a04      	ldr	r2, [sp, #16]
 800d15e:	b9d8      	cbnz	r0, 800d198 <_vfiprintf_r+0x12c>
 800d160:	06d1      	lsls	r1, r2, #27
 800d162:	bf44      	itt	mi
 800d164:	2320      	movmi	r3, #32
 800d166:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d16a:	0713      	lsls	r3, r2, #28
 800d16c:	bf44      	itt	mi
 800d16e:	232b      	movmi	r3, #43	; 0x2b
 800d170:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d174:	f89a 3000 	ldrb.w	r3, [sl]
 800d178:	2b2a      	cmp	r3, #42	; 0x2a
 800d17a:	d015      	beq.n	800d1a8 <_vfiprintf_r+0x13c>
 800d17c:	4654      	mov	r4, sl
 800d17e:	2000      	movs	r0, #0
 800d180:	f04f 0c0a 	mov.w	ip, #10
 800d184:	9a07      	ldr	r2, [sp, #28]
 800d186:	4621      	mov	r1, r4
 800d188:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d18c:	3b30      	subs	r3, #48	; 0x30
 800d18e:	2b09      	cmp	r3, #9
 800d190:	d94e      	bls.n	800d230 <_vfiprintf_r+0x1c4>
 800d192:	b1b0      	cbz	r0, 800d1c2 <_vfiprintf_r+0x156>
 800d194:	9207      	str	r2, [sp, #28]
 800d196:	e014      	b.n	800d1c2 <_vfiprintf_r+0x156>
 800d198:	eba0 0308 	sub.w	r3, r0, r8
 800d19c:	fa09 f303 	lsl.w	r3, r9, r3
 800d1a0:	4313      	orrs	r3, r2
 800d1a2:	46a2      	mov	sl, r4
 800d1a4:	9304      	str	r3, [sp, #16]
 800d1a6:	e7d2      	b.n	800d14e <_vfiprintf_r+0xe2>
 800d1a8:	9b03      	ldr	r3, [sp, #12]
 800d1aa:	1d19      	adds	r1, r3, #4
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	9103      	str	r1, [sp, #12]
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	bfbb      	ittet	lt
 800d1b4:	425b      	neglt	r3, r3
 800d1b6:	f042 0202 	orrlt.w	r2, r2, #2
 800d1ba:	9307      	strge	r3, [sp, #28]
 800d1bc:	9307      	strlt	r3, [sp, #28]
 800d1be:	bfb8      	it	lt
 800d1c0:	9204      	strlt	r2, [sp, #16]
 800d1c2:	7823      	ldrb	r3, [r4, #0]
 800d1c4:	2b2e      	cmp	r3, #46	; 0x2e
 800d1c6:	d10c      	bne.n	800d1e2 <_vfiprintf_r+0x176>
 800d1c8:	7863      	ldrb	r3, [r4, #1]
 800d1ca:	2b2a      	cmp	r3, #42	; 0x2a
 800d1cc:	d135      	bne.n	800d23a <_vfiprintf_r+0x1ce>
 800d1ce:	9b03      	ldr	r3, [sp, #12]
 800d1d0:	3402      	adds	r4, #2
 800d1d2:	1d1a      	adds	r2, r3, #4
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	9203      	str	r2, [sp, #12]
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	bfb8      	it	lt
 800d1dc:	f04f 33ff 	movlt.w	r3, #4294967295
 800d1e0:	9305      	str	r3, [sp, #20]
 800d1e2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800d2bc <_vfiprintf_r+0x250>
 800d1e6:	2203      	movs	r2, #3
 800d1e8:	4650      	mov	r0, sl
 800d1ea:	7821      	ldrb	r1, [r4, #0]
 800d1ec:	f7ff f92c 	bl	800c448 <memchr>
 800d1f0:	b140      	cbz	r0, 800d204 <_vfiprintf_r+0x198>
 800d1f2:	2340      	movs	r3, #64	; 0x40
 800d1f4:	eba0 000a 	sub.w	r0, r0, sl
 800d1f8:	fa03 f000 	lsl.w	r0, r3, r0
 800d1fc:	9b04      	ldr	r3, [sp, #16]
 800d1fe:	3401      	adds	r4, #1
 800d200:	4303      	orrs	r3, r0
 800d202:	9304      	str	r3, [sp, #16]
 800d204:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d208:	2206      	movs	r2, #6
 800d20a:	482d      	ldr	r0, [pc, #180]	; (800d2c0 <_vfiprintf_r+0x254>)
 800d20c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d210:	f7ff f91a 	bl	800c448 <memchr>
 800d214:	2800      	cmp	r0, #0
 800d216:	d03f      	beq.n	800d298 <_vfiprintf_r+0x22c>
 800d218:	4b2a      	ldr	r3, [pc, #168]	; (800d2c4 <_vfiprintf_r+0x258>)
 800d21a:	bb1b      	cbnz	r3, 800d264 <_vfiprintf_r+0x1f8>
 800d21c:	9b03      	ldr	r3, [sp, #12]
 800d21e:	3307      	adds	r3, #7
 800d220:	f023 0307 	bic.w	r3, r3, #7
 800d224:	3308      	adds	r3, #8
 800d226:	9303      	str	r3, [sp, #12]
 800d228:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d22a:	443b      	add	r3, r7
 800d22c:	9309      	str	r3, [sp, #36]	; 0x24
 800d22e:	e767      	b.n	800d100 <_vfiprintf_r+0x94>
 800d230:	460c      	mov	r4, r1
 800d232:	2001      	movs	r0, #1
 800d234:	fb0c 3202 	mla	r2, ip, r2, r3
 800d238:	e7a5      	b.n	800d186 <_vfiprintf_r+0x11a>
 800d23a:	2300      	movs	r3, #0
 800d23c:	f04f 0c0a 	mov.w	ip, #10
 800d240:	4619      	mov	r1, r3
 800d242:	3401      	adds	r4, #1
 800d244:	9305      	str	r3, [sp, #20]
 800d246:	4620      	mov	r0, r4
 800d248:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d24c:	3a30      	subs	r2, #48	; 0x30
 800d24e:	2a09      	cmp	r2, #9
 800d250:	d903      	bls.n	800d25a <_vfiprintf_r+0x1ee>
 800d252:	2b00      	cmp	r3, #0
 800d254:	d0c5      	beq.n	800d1e2 <_vfiprintf_r+0x176>
 800d256:	9105      	str	r1, [sp, #20]
 800d258:	e7c3      	b.n	800d1e2 <_vfiprintf_r+0x176>
 800d25a:	4604      	mov	r4, r0
 800d25c:	2301      	movs	r3, #1
 800d25e:	fb0c 2101 	mla	r1, ip, r1, r2
 800d262:	e7f0      	b.n	800d246 <_vfiprintf_r+0x1da>
 800d264:	ab03      	add	r3, sp, #12
 800d266:	9300      	str	r3, [sp, #0]
 800d268:	462a      	mov	r2, r5
 800d26a:	4630      	mov	r0, r6
 800d26c:	4b16      	ldr	r3, [pc, #88]	; (800d2c8 <_vfiprintf_r+0x25c>)
 800d26e:	a904      	add	r1, sp, #16
 800d270:	f7fd fd5a 	bl	800ad28 <_printf_float>
 800d274:	4607      	mov	r7, r0
 800d276:	1c78      	adds	r0, r7, #1
 800d278:	d1d6      	bne.n	800d228 <_vfiprintf_r+0x1bc>
 800d27a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d27c:	07d9      	lsls	r1, r3, #31
 800d27e:	d405      	bmi.n	800d28c <_vfiprintf_r+0x220>
 800d280:	89ab      	ldrh	r3, [r5, #12]
 800d282:	059a      	lsls	r2, r3, #22
 800d284:	d402      	bmi.n	800d28c <_vfiprintf_r+0x220>
 800d286:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d288:	f7ff f8d4 	bl	800c434 <__retarget_lock_release_recursive>
 800d28c:	89ab      	ldrh	r3, [r5, #12]
 800d28e:	065b      	lsls	r3, r3, #25
 800d290:	f53f af12 	bmi.w	800d0b8 <_vfiprintf_r+0x4c>
 800d294:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d296:	e711      	b.n	800d0bc <_vfiprintf_r+0x50>
 800d298:	ab03      	add	r3, sp, #12
 800d29a:	9300      	str	r3, [sp, #0]
 800d29c:	462a      	mov	r2, r5
 800d29e:	4630      	mov	r0, r6
 800d2a0:	4b09      	ldr	r3, [pc, #36]	; (800d2c8 <_vfiprintf_r+0x25c>)
 800d2a2:	a904      	add	r1, sp, #16
 800d2a4:	f7fd ffdc 	bl	800b260 <_printf_i>
 800d2a8:	e7e4      	b.n	800d274 <_vfiprintf_r+0x208>
 800d2aa:	bf00      	nop
 800d2ac:	0800ddc0 	.word	0x0800ddc0
 800d2b0:	0800dde0 	.word	0x0800dde0
 800d2b4:	0800dda0 	.word	0x0800dda0
 800d2b8:	0800df5c 	.word	0x0800df5c
 800d2bc:	0800df62 	.word	0x0800df62
 800d2c0:	0800df66 	.word	0x0800df66
 800d2c4:	0800ad29 	.word	0x0800ad29
 800d2c8:	0800d047 	.word	0x0800d047

0800d2cc <_putc_r>:
 800d2cc:	b570      	push	{r4, r5, r6, lr}
 800d2ce:	460d      	mov	r5, r1
 800d2d0:	4614      	mov	r4, r2
 800d2d2:	4606      	mov	r6, r0
 800d2d4:	b118      	cbz	r0, 800d2de <_putc_r+0x12>
 800d2d6:	6983      	ldr	r3, [r0, #24]
 800d2d8:	b90b      	cbnz	r3, 800d2de <_putc_r+0x12>
 800d2da:	f7ff f807 	bl	800c2ec <__sinit>
 800d2de:	4b1c      	ldr	r3, [pc, #112]	; (800d350 <_putc_r+0x84>)
 800d2e0:	429c      	cmp	r4, r3
 800d2e2:	d124      	bne.n	800d32e <_putc_r+0x62>
 800d2e4:	6874      	ldr	r4, [r6, #4]
 800d2e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d2e8:	07d8      	lsls	r0, r3, #31
 800d2ea:	d405      	bmi.n	800d2f8 <_putc_r+0x2c>
 800d2ec:	89a3      	ldrh	r3, [r4, #12]
 800d2ee:	0599      	lsls	r1, r3, #22
 800d2f0:	d402      	bmi.n	800d2f8 <_putc_r+0x2c>
 800d2f2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d2f4:	f7ff f89d 	bl	800c432 <__retarget_lock_acquire_recursive>
 800d2f8:	68a3      	ldr	r3, [r4, #8]
 800d2fa:	3b01      	subs	r3, #1
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	60a3      	str	r3, [r4, #8]
 800d300:	da05      	bge.n	800d30e <_putc_r+0x42>
 800d302:	69a2      	ldr	r2, [r4, #24]
 800d304:	4293      	cmp	r3, r2
 800d306:	db1c      	blt.n	800d342 <_putc_r+0x76>
 800d308:	b2eb      	uxtb	r3, r5
 800d30a:	2b0a      	cmp	r3, #10
 800d30c:	d019      	beq.n	800d342 <_putc_r+0x76>
 800d30e:	6823      	ldr	r3, [r4, #0]
 800d310:	1c5a      	adds	r2, r3, #1
 800d312:	6022      	str	r2, [r4, #0]
 800d314:	701d      	strb	r5, [r3, #0]
 800d316:	b2ed      	uxtb	r5, r5
 800d318:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d31a:	07da      	lsls	r2, r3, #31
 800d31c:	d405      	bmi.n	800d32a <_putc_r+0x5e>
 800d31e:	89a3      	ldrh	r3, [r4, #12]
 800d320:	059b      	lsls	r3, r3, #22
 800d322:	d402      	bmi.n	800d32a <_putc_r+0x5e>
 800d324:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d326:	f7ff f885 	bl	800c434 <__retarget_lock_release_recursive>
 800d32a:	4628      	mov	r0, r5
 800d32c:	bd70      	pop	{r4, r5, r6, pc}
 800d32e:	4b09      	ldr	r3, [pc, #36]	; (800d354 <_putc_r+0x88>)
 800d330:	429c      	cmp	r4, r3
 800d332:	d101      	bne.n	800d338 <_putc_r+0x6c>
 800d334:	68b4      	ldr	r4, [r6, #8]
 800d336:	e7d6      	b.n	800d2e6 <_putc_r+0x1a>
 800d338:	4b07      	ldr	r3, [pc, #28]	; (800d358 <_putc_r+0x8c>)
 800d33a:	429c      	cmp	r4, r3
 800d33c:	bf08      	it	eq
 800d33e:	68f4      	ldreq	r4, [r6, #12]
 800d340:	e7d1      	b.n	800d2e6 <_putc_r+0x1a>
 800d342:	4629      	mov	r1, r5
 800d344:	4622      	mov	r2, r4
 800d346:	4630      	mov	r0, r6
 800d348:	f000 f85c 	bl	800d404 <__swbuf_r>
 800d34c:	4605      	mov	r5, r0
 800d34e:	e7e3      	b.n	800d318 <_putc_r+0x4c>
 800d350:	0800ddc0 	.word	0x0800ddc0
 800d354:	0800dde0 	.word	0x0800dde0
 800d358:	0800dda0 	.word	0x0800dda0

0800d35c <_sbrk_r>:
 800d35c:	b538      	push	{r3, r4, r5, lr}
 800d35e:	2300      	movs	r3, #0
 800d360:	4d05      	ldr	r5, [pc, #20]	; (800d378 <_sbrk_r+0x1c>)
 800d362:	4604      	mov	r4, r0
 800d364:	4608      	mov	r0, r1
 800d366:	602b      	str	r3, [r5, #0]
 800d368:	f7f4 feba 	bl	80020e0 <_sbrk>
 800d36c:	1c43      	adds	r3, r0, #1
 800d36e:	d102      	bne.n	800d376 <_sbrk_r+0x1a>
 800d370:	682b      	ldr	r3, [r5, #0]
 800d372:	b103      	cbz	r3, 800d376 <_sbrk_r+0x1a>
 800d374:	6023      	str	r3, [r4, #0]
 800d376:	bd38      	pop	{r3, r4, r5, pc}
 800d378:	20001660 	.word	0x20001660

0800d37c <__sread>:
 800d37c:	b510      	push	{r4, lr}
 800d37e:	460c      	mov	r4, r1
 800d380:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d384:	f000 faee 	bl	800d964 <_read_r>
 800d388:	2800      	cmp	r0, #0
 800d38a:	bfab      	itete	ge
 800d38c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d38e:	89a3      	ldrhlt	r3, [r4, #12]
 800d390:	181b      	addge	r3, r3, r0
 800d392:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d396:	bfac      	ite	ge
 800d398:	6563      	strge	r3, [r4, #84]	; 0x54
 800d39a:	81a3      	strhlt	r3, [r4, #12]
 800d39c:	bd10      	pop	{r4, pc}

0800d39e <__swrite>:
 800d39e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3a2:	461f      	mov	r7, r3
 800d3a4:	898b      	ldrh	r3, [r1, #12]
 800d3a6:	4605      	mov	r5, r0
 800d3a8:	05db      	lsls	r3, r3, #23
 800d3aa:	460c      	mov	r4, r1
 800d3ac:	4616      	mov	r6, r2
 800d3ae:	d505      	bpl.n	800d3bc <__swrite+0x1e>
 800d3b0:	2302      	movs	r3, #2
 800d3b2:	2200      	movs	r2, #0
 800d3b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d3b8:	f000 f9f4 	bl	800d7a4 <_lseek_r>
 800d3bc:	89a3      	ldrh	r3, [r4, #12]
 800d3be:	4632      	mov	r2, r6
 800d3c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d3c4:	81a3      	strh	r3, [r4, #12]
 800d3c6:	4628      	mov	r0, r5
 800d3c8:	463b      	mov	r3, r7
 800d3ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d3ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d3d2:	f000 b869 	b.w	800d4a8 <_write_r>

0800d3d6 <__sseek>:
 800d3d6:	b510      	push	{r4, lr}
 800d3d8:	460c      	mov	r4, r1
 800d3da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d3de:	f000 f9e1 	bl	800d7a4 <_lseek_r>
 800d3e2:	1c43      	adds	r3, r0, #1
 800d3e4:	89a3      	ldrh	r3, [r4, #12]
 800d3e6:	bf15      	itete	ne
 800d3e8:	6560      	strne	r0, [r4, #84]	; 0x54
 800d3ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d3ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d3f2:	81a3      	strheq	r3, [r4, #12]
 800d3f4:	bf18      	it	ne
 800d3f6:	81a3      	strhne	r3, [r4, #12]
 800d3f8:	bd10      	pop	{r4, pc}

0800d3fa <__sclose>:
 800d3fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d3fe:	f000 b8f1 	b.w	800d5e4 <_close_r>
	...

0800d404 <__swbuf_r>:
 800d404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d406:	460e      	mov	r6, r1
 800d408:	4614      	mov	r4, r2
 800d40a:	4605      	mov	r5, r0
 800d40c:	b118      	cbz	r0, 800d416 <__swbuf_r+0x12>
 800d40e:	6983      	ldr	r3, [r0, #24]
 800d410:	b90b      	cbnz	r3, 800d416 <__swbuf_r+0x12>
 800d412:	f7fe ff6b 	bl	800c2ec <__sinit>
 800d416:	4b21      	ldr	r3, [pc, #132]	; (800d49c <__swbuf_r+0x98>)
 800d418:	429c      	cmp	r4, r3
 800d41a:	d12b      	bne.n	800d474 <__swbuf_r+0x70>
 800d41c:	686c      	ldr	r4, [r5, #4]
 800d41e:	69a3      	ldr	r3, [r4, #24]
 800d420:	60a3      	str	r3, [r4, #8]
 800d422:	89a3      	ldrh	r3, [r4, #12]
 800d424:	071a      	lsls	r2, r3, #28
 800d426:	d52f      	bpl.n	800d488 <__swbuf_r+0x84>
 800d428:	6923      	ldr	r3, [r4, #16]
 800d42a:	b36b      	cbz	r3, 800d488 <__swbuf_r+0x84>
 800d42c:	6923      	ldr	r3, [r4, #16]
 800d42e:	6820      	ldr	r0, [r4, #0]
 800d430:	b2f6      	uxtb	r6, r6
 800d432:	1ac0      	subs	r0, r0, r3
 800d434:	6963      	ldr	r3, [r4, #20]
 800d436:	4637      	mov	r7, r6
 800d438:	4283      	cmp	r3, r0
 800d43a:	dc04      	bgt.n	800d446 <__swbuf_r+0x42>
 800d43c:	4621      	mov	r1, r4
 800d43e:	4628      	mov	r0, r5
 800d440:	f000 f962 	bl	800d708 <_fflush_r>
 800d444:	bb30      	cbnz	r0, 800d494 <__swbuf_r+0x90>
 800d446:	68a3      	ldr	r3, [r4, #8]
 800d448:	3001      	adds	r0, #1
 800d44a:	3b01      	subs	r3, #1
 800d44c:	60a3      	str	r3, [r4, #8]
 800d44e:	6823      	ldr	r3, [r4, #0]
 800d450:	1c5a      	adds	r2, r3, #1
 800d452:	6022      	str	r2, [r4, #0]
 800d454:	701e      	strb	r6, [r3, #0]
 800d456:	6963      	ldr	r3, [r4, #20]
 800d458:	4283      	cmp	r3, r0
 800d45a:	d004      	beq.n	800d466 <__swbuf_r+0x62>
 800d45c:	89a3      	ldrh	r3, [r4, #12]
 800d45e:	07db      	lsls	r3, r3, #31
 800d460:	d506      	bpl.n	800d470 <__swbuf_r+0x6c>
 800d462:	2e0a      	cmp	r6, #10
 800d464:	d104      	bne.n	800d470 <__swbuf_r+0x6c>
 800d466:	4621      	mov	r1, r4
 800d468:	4628      	mov	r0, r5
 800d46a:	f000 f94d 	bl	800d708 <_fflush_r>
 800d46e:	b988      	cbnz	r0, 800d494 <__swbuf_r+0x90>
 800d470:	4638      	mov	r0, r7
 800d472:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d474:	4b0a      	ldr	r3, [pc, #40]	; (800d4a0 <__swbuf_r+0x9c>)
 800d476:	429c      	cmp	r4, r3
 800d478:	d101      	bne.n	800d47e <__swbuf_r+0x7a>
 800d47a:	68ac      	ldr	r4, [r5, #8]
 800d47c:	e7cf      	b.n	800d41e <__swbuf_r+0x1a>
 800d47e:	4b09      	ldr	r3, [pc, #36]	; (800d4a4 <__swbuf_r+0xa0>)
 800d480:	429c      	cmp	r4, r3
 800d482:	bf08      	it	eq
 800d484:	68ec      	ldreq	r4, [r5, #12]
 800d486:	e7ca      	b.n	800d41e <__swbuf_r+0x1a>
 800d488:	4621      	mov	r1, r4
 800d48a:	4628      	mov	r0, r5
 800d48c:	f000 f81e 	bl	800d4cc <__swsetup_r>
 800d490:	2800      	cmp	r0, #0
 800d492:	d0cb      	beq.n	800d42c <__swbuf_r+0x28>
 800d494:	f04f 37ff 	mov.w	r7, #4294967295
 800d498:	e7ea      	b.n	800d470 <__swbuf_r+0x6c>
 800d49a:	bf00      	nop
 800d49c:	0800ddc0 	.word	0x0800ddc0
 800d4a0:	0800dde0 	.word	0x0800dde0
 800d4a4:	0800dda0 	.word	0x0800dda0

0800d4a8 <_write_r>:
 800d4a8:	b538      	push	{r3, r4, r5, lr}
 800d4aa:	4604      	mov	r4, r0
 800d4ac:	4608      	mov	r0, r1
 800d4ae:	4611      	mov	r1, r2
 800d4b0:	2200      	movs	r2, #0
 800d4b2:	4d05      	ldr	r5, [pc, #20]	; (800d4c8 <_write_r+0x20>)
 800d4b4:	602a      	str	r2, [r5, #0]
 800d4b6:	461a      	mov	r2, r3
 800d4b8:	f7f4 fdc6 	bl	8002048 <_write>
 800d4bc:	1c43      	adds	r3, r0, #1
 800d4be:	d102      	bne.n	800d4c6 <_write_r+0x1e>
 800d4c0:	682b      	ldr	r3, [r5, #0]
 800d4c2:	b103      	cbz	r3, 800d4c6 <_write_r+0x1e>
 800d4c4:	6023      	str	r3, [r4, #0]
 800d4c6:	bd38      	pop	{r3, r4, r5, pc}
 800d4c8:	20001660 	.word	0x20001660

0800d4cc <__swsetup_r>:
 800d4cc:	4b32      	ldr	r3, [pc, #200]	; (800d598 <__swsetup_r+0xcc>)
 800d4ce:	b570      	push	{r4, r5, r6, lr}
 800d4d0:	681d      	ldr	r5, [r3, #0]
 800d4d2:	4606      	mov	r6, r0
 800d4d4:	460c      	mov	r4, r1
 800d4d6:	b125      	cbz	r5, 800d4e2 <__swsetup_r+0x16>
 800d4d8:	69ab      	ldr	r3, [r5, #24]
 800d4da:	b913      	cbnz	r3, 800d4e2 <__swsetup_r+0x16>
 800d4dc:	4628      	mov	r0, r5
 800d4de:	f7fe ff05 	bl	800c2ec <__sinit>
 800d4e2:	4b2e      	ldr	r3, [pc, #184]	; (800d59c <__swsetup_r+0xd0>)
 800d4e4:	429c      	cmp	r4, r3
 800d4e6:	d10f      	bne.n	800d508 <__swsetup_r+0x3c>
 800d4e8:	686c      	ldr	r4, [r5, #4]
 800d4ea:	89a3      	ldrh	r3, [r4, #12]
 800d4ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d4f0:	0719      	lsls	r1, r3, #28
 800d4f2:	d42c      	bmi.n	800d54e <__swsetup_r+0x82>
 800d4f4:	06dd      	lsls	r5, r3, #27
 800d4f6:	d411      	bmi.n	800d51c <__swsetup_r+0x50>
 800d4f8:	2309      	movs	r3, #9
 800d4fa:	6033      	str	r3, [r6, #0]
 800d4fc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d500:	f04f 30ff 	mov.w	r0, #4294967295
 800d504:	81a3      	strh	r3, [r4, #12]
 800d506:	e03e      	b.n	800d586 <__swsetup_r+0xba>
 800d508:	4b25      	ldr	r3, [pc, #148]	; (800d5a0 <__swsetup_r+0xd4>)
 800d50a:	429c      	cmp	r4, r3
 800d50c:	d101      	bne.n	800d512 <__swsetup_r+0x46>
 800d50e:	68ac      	ldr	r4, [r5, #8]
 800d510:	e7eb      	b.n	800d4ea <__swsetup_r+0x1e>
 800d512:	4b24      	ldr	r3, [pc, #144]	; (800d5a4 <__swsetup_r+0xd8>)
 800d514:	429c      	cmp	r4, r3
 800d516:	bf08      	it	eq
 800d518:	68ec      	ldreq	r4, [r5, #12]
 800d51a:	e7e6      	b.n	800d4ea <__swsetup_r+0x1e>
 800d51c:	0758      	lsls	r0, r3, #29
 800d51e:	d512      	bpl.n	800d546 <__swsetup_r+0x7a>
 800d520:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d522:	b141      	cbz	r1, 800d536 <__swsetup_r+0x6a>
 800d524:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d528:	4299      	cmp	r1, r3
 800d52a:	d002      	beq.n	800d532 <__swsetup_r+0x66>
 800d52c:	4630      	mov	r0, r6
 800d52e:	f7ff fb3d 	bl	800cbac <_free_r>
 800d532:	2300      	movs	r3, #0
 800d534:	6363      	str	r3, [r4, #52]	; 0x34
 800d536:	89a3      	ldrh	r3, [r4, #12]
 800d538:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d53c:	81a3      	strh	r3, [r4, #12]
 800d53e:	2300      	movs	r3, #0
 800d540:	6063      	str	r3, [r4, #4]
 800d542:	6923      	ldr	r3, [r4, #16]
 800d544:	6023      	str	r3, [r4, #0]
 800d546:	89a3      	ldrh	r3, [r4, #12]
 800d548:	f043 0308 	orr.w	r3, r3, #8
 800d54c:	81a3      	strh	r3, [r4, #12]
 800d54e:	6923      	ldr	r3, [r4, #16]
 800d550:	b94b      	cbnz	r3, 800d566 <__swsetup_r+0x9a>
 800d552:	89a3      	ldrh	r3, [r4, #12]
 800d554:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d558:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d55c:	d003      	beq.n	800d566 <__swsetup_r+0x9a>
 800d55e:	4621      	mov	r1, r4
 800d560:	4630      	mov	r0, r6
 800d562:	f000 f957 	bl	800d814 <__smakebuf_r>
 800d566:	89a0      	ldrh	r0, [r4, #12]
 800d568:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d56c:	f010 0301 	ands.w	r3, r0, #1
 800d570:	d00a      	beq.n	800d588 <__swsetup_r+0xbc>
 800d572:	2300      	movs	r3, #0
 800d574:	60a3      	str	r3, [r4, #8]
 800d576:	6963      	ldr	r3, [r4, #20]
 800d578:	425b      	negs	r3, r3
 800d57a:	61a3      	str	r3, [r4, #24]
 800d57c:	6923      	ldr	r3, [r4, #16]
 800d57e:	b943      	cbnz	r3, 800d592 <__swsetup_r+0xc6>
 800d580:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d584:	d1ba      	bne.n	800d4fc <__swsetup_r+0x30>
 800d586:	bd70      	pop	{r4, r5, r6, pc}
 800d588:	0781      	lsls	r1, r0, #30
 800d58a:	bf58      	it	pl
 800d58c:	6963      	ldrpl	r3, [r4, #20]
 800d58e:	60a3      	str	r3, [r4, #8]
 800d590:	e7f4      	b.n	800d57c <__swsetup_r+0xb0>
 800d592:	2000      	movs	r0, #0
 800d594:	e7f7      	b.n	800d586 <__swsetup_r+0xba>
 800d596:	bf00      	nop
 800d598:	20000188 	.word	0x20000188
 800d59c:	0800ddc0 	.word	0x0800ddc0
 800d5a0:	0800dde0 	.word	0x0800dde0
 800d5a4:	0800dda0 	.word	0x0800dda0

0800d5a8 <__assert_func>:
 800d5a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d5aa:	4614      	mov	r4, r2
 800d5ac:	461a      	mov	r2, r3
 800d5ae:	4b09      	ldr	r3, [pc, #36]	; (800d5d4 <__assert_func+0x2c>)
 800d5b0:	4605      	mov	r5, r0
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	68d8      	ldr	r0, [r3, #12]
 800d5b6:	b14c      	cbz	r4, 800d5cc <__assert_func+0x24>
 800d5b8:	4b07      	ldr	r3, [pc, #28]	; (800d5d8 <__assert_func+0x30>)
 800d5ba:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d5be:	9100      	str	r1, [sp, #0]
 800d5c0:	462b      	mov	r3, r5
 800d5c2:	4906      	ldr	r1, [pc, #24]	; (800d5dc <__assert_func+0x34>)
 800d5c4:	f000 f8dc 	bl	800d780 <fiprintf>
 800d5c8:	f000 f9eb 	bl	800d9a2 <abort>
 800d5cc:	4b04      	ldr	r3, [pc, #16]	; (800d5e0 <__assert_func+0x38>)
 800d5ce:	461c      	mov	r4, r3
 800d5d0:	e7f3      	b.n	800d5ba <__assert_func+0x12>
 800d5d2:	bf00      	nop
 800d5d4:	20000188 	.word	0x20000188
 800d5d8:	0800df6d 	.word	0x0800df6d
 800d5dc:	0800df7a 	.word	0x0800df7a
 800d5e0:	0800dfa8 	.word	0x0800dfa8

0800d5e4 <_close_r>:
 800d5e4:	b538      	push	{r3, r4, r5, lr}
 800d5e6:	2300      	movs	r3, #0
 800d5e8:	4d05      	ldr	r5, [pc, #20]	; (800d600 <_close_r+0x1c>)
 800d5ea:	4604      	mov	r4, r0
 800d5ec:	4608      	mov	r0, r1
 800d5ee:	602b      	str	r3, [r5, #0]
 800d5f0:	f7f4 fd46 	bl	8002080 <_close>
 800d5f4:	1c43      	adds	r3, r0, #1
 800d5f6:	d102      	bne.n	800d5fe <_close_r+0x1a>
 800d5f8:	682b      	ldr	r3, [r5, #0]
 800d5fa:	b103      	cbz	r3, 800d5fe <_close_r+0x1a>
 800d5fc:	6023      	str	r3, [r4, #0]
 800d5fe:	bd38      	pop	{r3, r4, r5, pc}
 800d600:	20001660 	.word	0x20001660

0800d604 <__sflush_r>:
 800d604:	898a      	ldrh	r2, [r1, #12]
 800d606:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d608:	4605      	mov	r5, r0
 800d60a:	0710      	lsls	r0, r2, #28
 800d60c:	460c      	mov	r4, r1
 800d60e:	d457      	bmi.n	800d6c0 <__sflush_r+0xbc>
 800d610:	684b      	ldr	r3, [r1, #4]
 800d612:	2b00      	cmp	r3, #0
 800d614:	dc04      	bgt.n	800d620 <__sflush_r+0x1c>
 800d616:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d618:	2b00      	cmp	r3, #0
 800d61a:	dc01      	bgt.n	800d620 <__sflush_r+0x1c>
 800d61c:	2000      	movs	r0, #0
 800d61e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d620:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d622:	2e00      	cmp	r6, #0
 800d624:	d0fa      	beq.n	800d61c <__sflush_r+0x18>
 800d626:	2300      	movs	r3, #0
 800d628:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d62c:	682f      	ldr	r7, [r5, #0]
 800d62e:	602b      	str	r3, [r5, #0]
 800d630:	d032      	beq.n	800d698 <__sflush_r+0x94>
 800d632:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d634:	89a3      	ldrh	r3, [r4, #12]
 800d636:	075a      	lsls	r2, r3, #29
 800d638:	d505      	bpl.n	800d646 <__sflush_r+0x42>
 800d63a:	6863      	ldr	r3, [r4, #4]
 800d63c:	1ac0      	subs	r0, r0, r3
 800d63e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d640:	b10b      	cbz	r3, 800d646 <__sflush_r+0x42>
 800d642:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d644:	1ac0      	subs	r0, r0, r3
 800d646:	2300      	movs	r3, #0
 800d648:	4602      	mov	r2, r0
 800d64a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d64c:	4628      	mov	r0, r5
 800d64e:	6a21      	ldr	r1, [r4, #32]
 800d650:	47b0      	blx	r6
 800d652:	1c43      	adds	r3, r0, #1
 800d654:	89a3      	ldrh	r3, [r4, #12]
 800d656:	d106      	bne.n	800d666 <__sflush_r+0x62>
 800d658:	6829      	ldr	r1, [r5, #0]
 800d65a:	291d      	cmp	r1, #29
 800d65c:	d82c      	bhi.n	800d6b8 <__sflush_r+0xb4>
 800d65e:	4a29      	ldr	r2, [pc, #164]	; (800d704 <__sflush_r+0x100>)
 800d660:	40ca      	lsrs	r2, r1
 800d662:	07d6      	lsls	r6, r2, #31
 800d664:	d528      	bpl.n	800d6b8 <__sflush_r+0xb4>
 800d666:	2200      	movs	r2, #0
 800d668:	6062      	str	r2, [r4, #4]
 800d66a:	6922      	ldr	r2, [r4, #16]
 800d66c:	04d9      	lsls	r1, r3, #19
 800d66e:	6022      	str	r2, [r4, #0]
 800d670:	d504      	bpl.n	800d67c <__sflush_r+0x78>
 800d672:	1c42      	adds	r2, r0, #1
 800d674:	d101      	bne.n	800d67a <__sflush_r+0x76>
 800d676:	682b      	ldr	r3, [r5, #0]
 800d678:	b903      	cbnz	r3, 800d67c <__sflush_r+0x78>
 800d67a:	6560      	str	r0, [r4, #84]	; 0x54
 800d67c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d67e:	602f      	str	r7, [r5, #0]
 800d680:	2900      	cmp	r1, #0
 800d682:	d0cb      	beq.n	800d61c <__sflush_r+0x18>
 800d684:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d688:	4299      	cmp	r1, r3
 800d68a:	d002      	beq.n	800d692 <__sflush_r+0x8e>
 800d68c:	4628      	mov	r0, r5
 800d68e:	f7ff fa8d 	bl	800cbac <_free_r>
 800d692:	2000      	movs	r0, #0
 800d694:	6360      	str	r0, [r4, #52]	; 0x34
 800d696:	e7c2      	b.n	800d61e <__sflush_r+0x1a>
 800d698:	6a21      	ldr	r1, [r4, #32]
 800d69a:	2301      	movs	r3, #1
 800d69c:	4628      	mov	r0, r5
 800d69e:	47b0      	blx	r6
 800d6a0:	1c41      	adds	r1, r0, #1
 800d6a2:	d1c7      	bne.n	800d634 <__sflush_r+0x30>
 800d6a4:	682b      	ldr	r3, [r5, #0]
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d0c4      	beq.n	800d634 <__sflush_r+0x30>
 800d6aa:	2b1d      	cmp	r3, #29
 800d6ac:	d001      	beq.n	800d6b2 <__sflush_r+0xae>
 800d6ae:	2b16      	cmp	r3, #22
 800d6b0:	d101      	bne.n	800d6b6 <__sflush_r+0xb2>
 800d6b2:	602f      	str	r7, [r5, #0]
 800d6b4:	e7b2      	b.n	800d61c <__sflush_r+0x18>
 800d6b6:	89a3      	ldrh	r3, [r4, #12]
 800d6b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d6bc:	81a3      	strh	r3, [r4, #12]
 800d6be:	e7ae      	b.n	800d61e <__sflush_r+0x1a>
 800d6c0:	690f      	ldr	r7, [r1, #16]
 800d6c2:	2f00      	cmp	r7, #0
 800d6c4:	d0aa      	beq.n	800d61c <__sflush_r+0x18>
 800d6c6:	0793      	lsls	r3, r2, #30
 800d6c8:	bf18      	it	ne
 800d6ca:	2300      	movne	r3, #0
 800d6cc:	680e      	ldr	r6, [r1, #0]
 800d6ce:	bf08      	it	eq
 800d6d0:	694b      	ldreq	r3, [r1, #20]
 800d6d2:	1bf6      	subs	r6, r6, r7
 800d6d4:	600f      	str	r7, [r1, #0]
 800d6d6:	608b      	str	r3, [r1, #8]
 800d6d8:	2e00      	cmp	r6, #0
 800d6da:	dd9f      	ble.n	800d61c <__sflush_r+0x18>
 800d6dc:	4633      	mov	r3, r6
 800d6de:	463a      	mov	r2, r7
 800d6e0:	4628      	mov	r0, r5
 800d6e2:	6a21      	ldr	r1, [r4, #32]
 800d6e4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800d6e8:	47e0      	blx	ip
 800d6ea:	2800      	cmp	r0, #0
 800d6ec:	dc06      	bgt.n	800d6fc <__sflush_r+0xf8>
 800d6ee:	89a3      	ldrh	r3, [r4, #12]
 800d6f0:	f04f 30ff 	mov.w	r0, #4294967295
 800d6f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d6f8:	81a3      	strh	r3, [r4, #12]
 800d6fa:	e790      	b.n	800d61e <__sflush_r+0x1a>
 800d6fc:	4407      	add	r7, r0
 800d6fe:	1a36      	subs	r6, r6, r0
 800d700:	e7ea      	b.n	800d6d8 <__sflush_r+0xd4>
 800d702:	bf00      	nop
 800d704:	20400001 	.word	0x20400001

0800d708 <_fflush_r>:
 800d708:	b538      	push	{r3, r4, r5, lr}
 800d70a:	690b      	ldr	r3, [r1, #16]
 800d70c:	4605      	mov	r5, r0
 800d70e:	460c      	mov	r4, r1
 800d710:	b913      	cbnz	r3, 800d718 <_fflush_r+0x10>
 800d712:	2500      	movs	r5, #0
 800d714:	4628      	mov	r0, r5
 800d716:	bd38      	pop	{r3, r4, r5, pc}
 800d718:	b118      	cbz	r0, 800d722 <_fflush_r+0x1a>
 800d71a:	6983      	ldr	r3, [r0, #24]
 800d71c:	b90b      	cbnz	r3, 800d722 <_fflush_r+0x1a>
 800d71e:	f7fe fde5 	bl	800c2ec <__sinit>
 800d722:	4b14      	ldr	r3, [pc, #80]	; (800d774 <_fflush_r+0x6c>)
 800d724:	429c      	cmp	r4, r3
 800d726:	d11b      	bne.n	800d760 <_fflush_r+0x58>
 800d728:	686c      	ldr	r4, [r5, #4]
 800d72a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d0ef      	beq.n	800d712 <_fflush_r+0xa>
 800d732:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d734:	07d0      	lsls	r0, r2, #31
 800d736:	d404      	bmi.n	800d742 <_fflush_r+0x3a>
 800d738:	0599      	lsls	r1, r3, #22
 800d73a:	d402      	bmi.n	800d742 <_fflush_r+0x3a>
 800d73c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d73e:	f7fe fe78 	bl	800c432 <__retarget_lock_acquire_recursive>
 800d742:	4628      	mov	r0, r5
 800d744:	4621      	mov	r1, r4
 800d746:	f7ff ff5d 	bl	800d604 <__sflush_r>
 800d74a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d74c:	4605      	mov	r5, r0
 800d74e:	07da      	lsls	r2, r3, #31
 800d750:	d4e0      	bmi.n	800d714 <_fflush_r+0xc>
 800d752:	89a3      	ldrh	r3, [r4, #12]
 800d754:	059b      	lsls	r3, r3, #22
 800d756:	d4dd      	bmi.n	800d714 <_fflush_r+0xc>
 800d758:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d75a:	f7fe fe6b 	bl	800c434 <__retarget_lock_release_recursive>
 800d75e:	e7d9      	b.n	800d714 <_fflush_r+0xc>
 800d760:	4b05      	ldr	r3, [pc, #20]	; (800d778 <_fflush_r+0x70>)
 800d762:	429c      	cmp	r4, r3
 800d764:	d101      	bne.n	800d76a <_fflush_r+0x62>
 800d766:	68ac      	ldr	r4, [r5, #8]
 800d768:	e7df      	b.n	800d72a <_fflush_r+0x22>
 800d76a:	4b04      	ldr	r3, [pc, #16]	; (800d77c <_fflush_r+0x74>)
 800d76c:	429c      	cmp	r4, r3
 800d76e:	bf08      	it	eq
 800d770:	68ec      	ldreq	r4, [r5, #12]
 800d772:	e7da      	b.n	800d72a <_fflush_r+0x22>
 800d774:	0800ddc0 	.word	0x0800ddc0
 800d778:	0800dde0 	.word	0x0800dde0
 800d77c:	0800dda0 	.word	0x0800dda0

0800d780 <fiprintf>:
 800d780:	b40e      	push	{r1, r2, r3}
 800d782:	b503      	push	{r0, r1, lr}
 800d784:	4601      	mov	r1, r0
 800d786:	ab03      	add	r3, sp, #12
 800d788:	4805      	ldr	r0, [pc, #20]	; (800d7a0 <fiprintf+0x20>)
 800d78a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d78e:	6800      	ldr	r0, [r0, #0]
 800d790:	9301      	str	r3, [sp, #4]
 800d792:	f7ff fc6b 	bl	800d06c <_vfiprintf_r>
 800d796:	b002      	add	sp, #8
 800d798:	f85d eb04 	ldr.w	lr, [sp], #4
 800d79c:	b003      	add	sp, #12
 800d79e:	4770      	bx	lr
 800d7a0:	20000188 	.word	0x20000188

0800d7a4 <_lseek_r>:
 800d7a4:	b538      	push	{r3, r4, r5, lr}
 800d7a6:	4604      	mov	r4, r0
 800d7a8:	4608      	mov	r0, r1
 800d7aa:	4611      	mov	r1, r2
 800d7ac:	2200      	movs	r2, #0
 800d7ae:	4d05      	ldr	r5, [pc, #20]	; (800d7c4 <_lseek_r+0x20>)
 800d7b0:	602a      	str	r2, [r5, #0]
 800d7b2:	461a      	mov	r2, r3
 800d7b4:	f7f4 fc88 	bl	80020c8 <_lseek>
 800d7b8:	1c43      	adds	r3, r0, #1
 800d7ba:	d102      	bne.n	800d7c2 <_lseek_r+0x1e>
 800d7bc:	682b      	ldr	r3, [r5, #0]
 800d7be:	b103      	cbz	r3, 800d7c2 <_lseek_r+0x1e>
 800d7c0:	6023      	str	r3, [r4, #0]
 800d7c2:	bd38      	pop	{r3, r4, r5, pc}
 800d7c4:	20001660 	.word	0x20001660

0800d7c8 <__swhatbuf_r>:
 800d7c8:	b570      	push	{r4, r5, r6, lr}
 800d7ca:	460e      	mov	r6, r1
 800d7cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d7d0:	4614      	mov	r4, r2
 800d7d2:	2900      	cmp	r1, #0
 800d7d4:	461d      	mov	r5, r3
 800d7d6:	b096      	sub	sp, #88	; 0x58
 800d7d8:	da08      	bge.n	800d7ec <__swhatbuf_r+0x24>
 800d7da:	2200      	movs	r2, #0
 800d7dc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d7e0:	602a      	str	r2, [r5, #0]
 800d7e2:	061a      	lsls	r2, r3, #24
 800d7e4:	d410      	bmi.n	800d808 <__swhatbuf_r+0x40>
 800d7e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d7ea:	e00e      	b.n	800d80a <__swhatbuf_r+0x42>
 800d7ec:	466a      	mov	r2, sp
 800d7ee:	f000 f8df 	bl	800d9b0 <_fstat_r>
 800d7f2:	2800      	cmp	r0, #0
 800d7f4:	dbf1      	blt.n	800d7da <__swhatbuf_r+0x12>
 800d7f6:	9a01      	ldr	r2, [sp, #4]
 800d7f8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d7fc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d800:	425a      	negs	r2, r3
 800d802:	415a      	adcs	r2, r3
 800d804:	602a      	str	r2, [r5, #0]
 800d806:	e7ee      	b.n	800d7e6 <__swhatbuf_r+0x1e>
 800d808:	2340      	movs	r3, #64	; 0x40
 800d80a:	2000      	movs	r0, #0
 800d80c:	6023      	str	r3, [r4, #0]
 800d80e:	b016      	add	sp, #88	; 0x58
 800d810:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d814 <__smakebuf_r>:
 800d814:	898b      	ldrh	r3, [r1, #12]
 800d816:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d818:	079d      	lsls	r5, r3, #30
 800d81a:	4606      	mov	r6, r0
 800d81c:	460c      	mov	r4, r1
 800d81e:	d507      	bpl.n	800d830 <__smakebuf_r+0x1c>
 800d820:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d824:	6023      	str	r3, [r4, #0]
 800d826:	6123      	str	r3, [r4, #16]
 800d828:	2301      	movs	r3, #1
 800d82a:	6163      	str	r3, [r4, #20]
 800d82c:	b002      	add	sp, #8
 800d82e:	bd70      	pop	{r4, r5, r6, pc}
 800d830:	466a      	mov	r2, sp
 800d832:	ab01      	add	r3, sp, #4
 800d834:	f7ff ffc8 	bl	800d7c8 <__swhatbuf_r>
 800d838:	9900      	ldr	r1, [sp, #0]
 800d83a:	4605      	mov	r5, r0
 800d83c:	4630      	mov	r0, r6
 800d83e:	f7ff fa1d 	bl	800cc7c <_malloc_r>
 800d842:	b948      	cbnz	r0, 800d858 <__smakebuf_r+0x44>
 800d844:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d848:	059a      	lsls	r2, r3, #22
 800d84a:	d4ef      	bmi.n	800d82c <__smakebuf_r+0x18>
 800d84c:	f023 0303 	bic.w	r3, r3, #3
 800d850:	f043 0302 	orr.w	r3, r3, #2
 800d854:	81a3      	strh	r3, [r4, #12]
 800d856:	e7e3      	b.n	800d820 <__smakebuf_r+0xc>
 800d858:	4b0d      	ldr	r3, [pc, #52]	; (800d890 <__smakebuf_r+0x7c>)
 800d85a:	62b3      	str	r3, [r6, #40]	; 0x28
 800d85c:	89a3      	ldrh	r3, [r4, #12]
 800d85e:	6020      	str	r0, [r4, #0]
 800d860:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d864:	81a3      	strh	r3, [r4, #12]
 800d866:	9b00      	ldr	r3, [sp, #0]
 800d868:	6120      	str	r0, [r4, #16]
 800d86a:	6163      	str	r3, [r4, #20]
 800d86c:	9b01      	ldr	r3, [sp, #4]
 800d86e:	b15b      	cbz	r3, 800d888 <__smakebuf_r+0x74>
 800d870:	4630      	mov	r0, r6
 800d872:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d876:	f000 f8ad 	bl	800d9d4 <_isatty_r>
 800d87a:	b128      	cbz	r0, 800d888 <__smakebuf_r+0x74>
 800d87c:	89a3      	ldrh	r3, [r4, #12]
 800d87e:	f023 0303 	bic.w	r3, r3, #3
 800d882:	f043 0301 	orr.w	r3, r3, #1
 800d886:	81a3      	strh	r3, [r4, #12]
 800d888:	89a0      	ldrh	r0, [r4, #12]
 800d88a:	4305      	orrs	r5, r0
 800d88c:	81a5      	strh	r5, [r4, #12]
 800d88e:	e7cd      	b.n	800d82c <__smakebuf_r+0x18>
 800d890:	0800c285 	.word	0x0800c285

0800d894 <__ascii_mbtowc>:
 800d894:	b082      	sub	sp, #8
 800d896:	b901      	cbnz	r1, 800d89a <__ascii_mbtowc+0x6>
 800d898:	a901      	add	r1, sp, #4
 800d89a:	b142      	cbz	r2, 800d8ae <__ascii_mbtowc+0x1a>
 800d89c:	b14b      	cbz	r3, 800d8b2 <__ascii_mbtowc+0x1e>
 800d89e:	7813      	ldrb	r3, [r2, #0]
 800d8a0:	600b      	str	r3, [r1, #0]
 800d8a2:	7812      	ldrb	r2, [r2, #0]
 800d8a4:	1e10      	subs	r0, r2, #0
 800d8a6:	bf18      	it	ne
 800d8a8:	2001      	movne	r0, #1
 800d8aa:	b002      	add	sp, #8
 800d8ac:	4770      	bx	lr
 800d8ae:	4610      	mov	r0, r2
 800d8b0:	e7fb      	b.n	800d8aa <__ascii_mbtowc+0x16>
 800d8b2:	f06f 0001 	mvn.w	r0, #1
 800d8b6:	e7f8      	b.n	800d8aa <__ascii_mbtowc+0x16>

0800d8b8 <memmove>:
 800d8b8:	4288      	cmp	r0, r1
 800d8ba:	b510      	push	{r4, lr}
 800d8bc:	eb01 0402 	add.w	r4, r1, r2
 800d8c0:	d902      	bls.n	800d8c8 <memmove+0x10>
 800d8c2:	4284      	cmp	r4, r0
 800d8c4:	4623      	mov	r3, r4
 800d8c6:	d807      	bhi.n	800d8d8 <memmove+0x20>
 800d8c8:	1e43      	subs	r3, r0, #1
 800d8ca:	42a1      	cmp	r1, r4
 800d8cc:	d008      	beq.n	800d8e0 <memmove+0x28>
 800d8ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d8d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d8d6:	e7f8      	b.n	800d8ca <memmove+0x12>
 800d8d8:	4601      	mov	r1, r0
 800d8da:	4402      	add	r2, r0
 800d8dc:	428a      	cmp	r2, r1
 800d8de:	d100      	bne.n	800d8e2 <memmove+0x2a>
 800d8e0:	bd10      	pop	{r4, pc}
 800d8e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d8e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d8ea:	e7f7      	b.n	800d8dc <memmove+0x24>

0800d8ec <__malloc_lock>:
 800d8ec:	4801      	ldr	r0, [pc, #4]	; (800d8f4 <__malloc_lock+0x8>)
 800d8ee:	f7fe bda0 	b.w	800c432 <__retarget_lock_acquire_recursive>
 800d8f2:	bf00      	nop
 800d8f4:	20001655 	.word	0x20001655

0800d8f8 <__malloc_unlock>:
 800d8f8:	4801      	ldr	r0, [pc, #4]	; (800d900 <__malloc_unlock+0x8>)
 800d8fa:	f7fe bd9b 	b.w	800c434 <__retarget_lock_release_recursive>
 800d8fe:	bf00      	nop
 800d900:	20001655 	.word	0x20001655

0800d904 <_realloc_r>:
 800d904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d908:	4680      	mov	r8, r0
 800d90a:	4614      	mov	r4, r2
 800d90c:	460e      	mov	r6, r1
 800d90e:	b921      	cbnz	r1, 800d91a <_realloc_r+0x16>
 800d910:	4611      	mov	r1, r2
 800d912:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d916:	f7ff b9b1 	b.w	800cc7c <_malloc_r>
 800d91a:	b92a      	cbnz	r2, 800d928 <_realloc_r+0x24>
 800d91c:	f7ff f946 	bl	800cbac <_free_r>
 800d920:	4625      	mov	r5, r4
 800d922:	4628      	mov	r0, r5
 800d924:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d928:	f000 f864 	bl	800d9f4 <_malloc_usable_size_r>
 800d92c:	4284      	cmp	r4, r0
 800d92e:	4607      	mov	r7, r0
 800d930:	d802      	bhi.n	800d938 <_realloc_r+0x34>
 800d932:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d936:	d812      	bhi.n	800d95e <_realloc_r+0x5a>
 800d938:	4621      	mov	r1, r4
 800d93a:	4640      	mov	r0, r8
 800d93c:	f7ff f99e 	bl	800cc7c <_malloc_r>
 800d940:	4605      	mov	r5, r0
 800d942:	2800      	cmp	r0, #0
 800d944:	d0ed      	beq.n	800d922 <_realloc_r+0x1e>
 800d946:	42bc      	cmp	r4, r7
 800d948:	4622      	mov	r2, r4
 800d94a:	4631      	mov	r1, r6
 800d94c:	bf28      	it	cs
 800d94e:	463a      	movcs	r2, r7
 800d950:	f7fe fd88 	bl	800c464 <memcpy>
 800d954:	4631      	mov	r1, r6
 800d956:	4640      	mov	r0, r8
 800d958:	f7ff f928 	bl	800cbac <_free_r>
 800d95c:	e7e1      	b.n	800d922 <_realloc_r+0x1e>
 800d95e:	4635      	mov	r5, r6
 800d960:	e7df      	b.n	800d922 <_realloc_r+0x1e>
	...

0800d964 <_read_r>:
 800d964:	b538      	push	{r3, r4, r5, lr}
 800d966:	4604      	mov	r4, r0
 800d968:	4608      	mov	r0, r1
 800d96a:	4611      	mov	r1, r2
 800d96c:	2200      	movs	r2, #0
 800d96e:	4d05      	ldr	r5, [pc, #20]	; (800d984 <_read_r+0x20>)
 800d970:	602a      	str	r2, [r5, #0]
 800d972:	461a      	mov	r2, r3
 800d974:	f7f4 fb4b 	bl	800200e <_read>
 800d978:	1c43      	adds	r3, r0, #1
 800d97a:	d102      	bne.n	800d982 <_read_r+0x1e>
 800d97c:	682b      	ldr	r3, [r5, #0]
 800d97e:	b103      	cbz	r3, 800d982 <_read_r+0x1e>
 800d980:	6023      	str	r3, [r4, #0]
 800d982:	bd38      	pop	{r3, r4, r5, pc}
 800d984:	20001660 	.word	0x20001660

0800d988 <__ascii_wctomb>:
 800d988:	4603      	mov	r3, r0
 800d98a:	4608      	mov	r0, r1
 800d98c:	b141      	cbz	r1, 800d9a0 <__ascii_wctomb+0x18>
 800d98e:	2aff      	cmp	r2, #255	; 0xff
 800d990:	d904      	bls.n	800d99c <__ascii_wctomb+0x14>
 800d992:	228a      	movs	r2, #138	; 0x8a
 800d994:	f04f 30ff 	mov.w	r0, #4294967295
 800d998:	601a      	str	r2, [r3, #0]
 800d99a:	4770      	bx	lr
 800d99c:	2001      	movs	r0, #1
 800d99e:	700a      	strb	r2, [r1, #0]
 800d9a0:	4770      	bx	lr

0800d9a2 <abort>:
 800d9a2:	2006      	movs	r0, #6
 800d9a4:	b508      	push	{r3, lr}
 800d9a6:	f000 f855 	bl	800da54 <raise>
 800d9aa:	2001      	movs	r0, #1
 800d9ac:	f7f4 fb25 	bl	8001ffa <_exit>

0800d9b0 <_fstat_r>:
 800d9b0:	b538      	push	{r3, r4, r5, lr}
 800d9b2:	2300      	movs	r3, #0
 800d9b4:	4d06      	ldr	r5, [pc, #24]	; (800d9d0 <_fstat_r+0x20>)
 800d9b6:	4604      	mov	r4, r0
 800d9b8:	4608      	mov	r0, r1
 800d9ba:	4611      	mov	r1, r2
 800d9bc:	602b      	str	r3, [r5, #0]
 800d9be:	f7f4 fb6a 	bl	8002096 <_fstat>
 800d9c2:	1c43      	adds	r3, r0, #1
 800d9c4:	d102      	bne.n	800d9cc <_fstat_r+0x1c>
 800d9c6:	682b      	ldr	r3, [r5, #0]
 800d9c8:	b103      	cbz	r3, 800d9cc <_fstat_r+0x1c>
 800d9ca:	6023      	str	r3, [r4, #0]
 800d9cc:	bd38      	pop	{r3, r4, r5, pc}
 800d9ce:	bf00      	nop
 800d9d0:	20001660 	.word	0x20001660

0800d9d4 <_isatty_r>:
 800d9d4:	b538      	push	{r3, r4, r5, lr}
 800d9d6:	2300      	movs	r3, #0
 800d9d8:	4d05      	ldr	r5, [pc, #20]	; (800d9f0 <_isatty_r+0x1c>)
 800d9da:	4604      	mov	r4, r0
 800d9dc:	4608      	mov	r0, r1
 800d9de:	602b      	str	r3, [r5, #0]
 800d9e0:	f7f4 fb68 	bl	80020b4 <_isatty>
 800d9e4:	1c43      	adds	r3, r0, #1
 800d9e6:	d102      	bne.n	800d9ee <_isatty_r+0x1a>
 800d9e8:	682b      	ldr	r3, [r5, #0]
 800d9ea:	b103      	cbz	r3, 800d9ee <_isatty_r+0x1a>
 800d9ec:	6023      	str	r3, [r4, #0]
 800d9ee:	bd38      	pop	{r3, r4, r5, pc}
 800d9f0:	20001660 	.word	0x20001660

0800d9f4 <_malloc_usable_size_r>:
 800d9f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d9f8:	1f18      	subs	r0, r3, #4
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	bfbc      	itt	lt
 800d9fe:	580b      	ldrlt	r3, [r1, r0]
 800da00:	18c0      	addlt	r0, r0, r3
 800da02:	4770      	bx	lr

0800da04 <_raise_r>:
 800da04:	291f      	cmp	r1, #31
 800da06:	b538      	push	{r3, r4, r5, lr}
 800da08:	4604      	mov	r4, r0
 800da0a:	460d      	mov	r5, r1
 800da0c:	d904      	bls.n	800da18 <_raise_r+0x14>
 800da0e:	2316      	movs	r3, #22
 800da10:	6003      	str	r3, [r0, #0]
 800da12:	f04f 30ff 	mov.w	r0, #4294967295
 800da16:	bd38      	pop	{r3, r4, r5, pc}
 800da18:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800da1a:	b112      	cbz	r2, 800da22 <_raise_r+0x1e>
 800da1c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800da20:	b94b      	cbnz	r3, 800da36 <_raise_r+0x32>
 800da22:	4620      	mov	r0, r4
 800da24:	f000 f830 	bl	800da88 <_getpid_r>
 800da28:	462a      	mov	r2, r5
 800da2a:	4601      	mov	r1, r0
 800da2c:	4620      	mov	r0, r4
 800da2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800da32:	f000 b817 	b.w	800da64 <_kill_r>
 800da36:	2b01      	cmp	r3, #1
 800da38:	d00a      	beq.n	800da50 <_raise_r+0x4c>
 800da3a:	1c59      	adds	r1, r3, #1
 800da3c:	d103      	bne.n	800da46 <_raise_r+0x42>
 800da3e:	2316      	movs	r3, #22
 800da40:	6003      	str	r3, [r0, #0]
 800da42:	2001      	movs	r0, #1
 800da44:	e7e7      	b.n	800da16 <_raise_r+0x12>
 800da46:	2400      	movs	r4, #0
 800da48:	4628      	mov	r0, r5
 800da4a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800da4e:	4798      	blx	r3
 800da50:	2000      	movs	r0, #0
 800da52:	e7e0      	b.n	800da16 <_raise_r+0x12>

0800da54 <raise>:
 800da54:	4b02      	ldr	r3, [pc, #8]	; (800da60 <raise+0xc>)
 800da56:	4601      	mov	r1, r0
 800da58:	6818      	ldr	r0, [r3, #0]
 800da5a:	f7ff bfd3 	b.w	800da04 <_raise_r>
 800da5e:	bf00      	nop
 800da60:	20000188 	.word	0x20000188

0800da64 <_kill_r>:
 800da64:	b538      	push	{r3, r4, r5, lr}
 800da66:	2300      	movs	r3, #0
 800da68:	4d06      	ldr	r5, [pc, #24]	; (800da84 <_kill_r+0x20>)
 800da6a:	4604      	mov	r4, r0
 800da6c:	4608      	mov	r0, r1
 800da6e:	4611      	mov	r1, r2
 800da70:	602b      	str	r3, [r5, #0]
 800da72:	f7f4 fab2 	bl	8001fda <_kill>
 800da76:	1c43      	adds	r3, r0, #1
 800da78:	d102      	bne.n	800da80 <_kill_r+0x1c>
 800da7a:	682b      	ldr	r3, [r5, #0]
 800da7c:	b103      	cbz	r3, 800da80 <_kill_r+0x1c>
 800da7e:	6023      	str	r3, [r4, #0]
 800da80:	bd38      	pop	{r3, r4, r5, pc}
 800da82:	bf00      	nop
 800da84:	20001660 	.word	0x20001660

0800da88 <_getpid_r>:
 800da88:	f7f4 baa0 	b.w	8001fcc <_getpid>

0800da8c <_init>:
 800da8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da8e:	bf00      	nop
 800da90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da92:	bc08      	pop	{r3}
 800da94:	469e      	mov	lr, r3
 800da96:	4770      	bx	lr

0800da98 <_fini>:
 800da98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da9a:	bf00      	nop
 800da9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da9e:	bc08      	pop	{r3}
 800daa0:	469e      	mov	lr, r3
 800daa2:	4770      	bx	lr
