
configs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d7f4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005a4  0800d908  0800d908  0001d908  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800deac  0800deac  00020358  2**0
                  CONTENTS
  4 .ARM          00000000  0800deac  0800deac  00020358  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800deac  0800deac  00020358  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800deac  0800deac  0001deac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800deb0  0800deb0  0001deb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000358  20000000  0800deb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001310  20000358  0800e20c  00020358  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001668  0800e20c  00021668  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020358  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012aeb  00000000  00000000  00020381  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031e9  00000000  00000000  00032e6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001130  00000000  00000000  00036058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fa8  00000000  00000000  00037188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b17d  00000000  00000000  00038130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000143fa  00000000  00000000  000532ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ea50  00000000  00000000  000676a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f60f7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005950  00000000  00000000  000f6148  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000358 	.word	0x20000358
 800012c:	00000000 	.word	0x00000000
 8000130:	0800d8ec 	.word	0x0800d8ec

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000035c 	.word	0x2000035c
 800014c:	0800d8ec 	.word	0x0800d8ec

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__aeabi_f2iz>:
 8000f44:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f48:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f4c:	d30f      	bcc.n	8000f6e <__aeabi_f2iz+0x2a>
 8000f4e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f52:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f56:	d90d      	bls.n	8000f74 <__aeabi_f2iz+0x30>
 8000f58:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f60:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000f64:	fa23 f002 	lsr.w	r0, r3, r2
 8000f68:	bf18      	it	ne
 8000f6a:	4240      	negne	r0, r0
 8000f6c:	4770      	bx	lr
 8000f6e:	f04f 0000 	mov.w	r0, #0
 8000f72:	4770      	bx	lr
 8000f74:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f78:	d101      	bne.n	8000f7e <__aeabi_f2iz+0x3a>
 8000f7a:	0242      	lsls	r2, r0, #9
 8000f7c:	d105      	bne.n	8000f8a <__aeabi_f2iz+0x46>
 8000f7e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000f82:	bf08      	it	eq
 8000f84:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000f88:	4770      	bx	lr
 8000f8a:	f04f 0000 	mov.w	r0, #0
 8000f8e:	4770      	bx	lr

08000f90 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000f94:	f001 fcf2 	bl	800297c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000f98:	f000 f862 	bl	8001060 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000f9c:	f000 fad0 	bl	8001540 <MX_GPIO_Init>
	MX_TIM2_Init();
 8000fa0:	f000 f92c 	bl	80011fc <MX_TIM2_Init>
	MX_TIM1_Init();
 8000fa4:	f000 f8b6 	bl	8001114 <MX_TIM1_Init>
	MX_USB_DEVICE_Init();
 8000fa8:	f001 f83e 	bl	8002028 <MX_USB_DEVICE_Init>
	MX_TIM3_Init();
 8000fac:	f000 f996 	bl	80012dc <MX_TIM3_Init>
	MX_TIM4_Init();
 8000fb0:	f000 fa2e 	bl	8001410 <MX_TIM4_Init>
	/* USER CODE BEGIN 2 */

	TIM1->CCR1 = 50;
 8000fb4:	4b25      	ldr	r3, [pc, #148]	; (800104c <main+0xbc>)
 8000fb6:	2232      	movs	r2, #50	; 0x32
 8000fb8:	635a      	str	r2, [r3, #52]	; 0x34
	//Frequency measurement on TIM1_CHANNEL_1
	//HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1); //dead pin
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000fba:	2100      	movs	r1, #0
 8000fbc:	4824      	ldr	r0, [pc, #144]	; (8001050 <main+0xc0>)
 8000fbe:	f004 fb11 	bl	80055e4 <HAL_TIM_IC_Start_IT>

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //closest to AIR (FIRST)
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	4823      	ldr	r0, [pc, #140]	; (8001054 <main+0xc4>)
 8000fc6:	f004 fa13 	bl	80053f0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000fca:	2104      	movs	r1, #4
 8000fcc:	4821      	ldr	r0, [pc, #132]	; (8001054 <main+0xc4>)
 8000fce:	f004 fa0f 	bl	80053f0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000fd2:	2108      	movs	r1, #8
 8000fd4:	481f      	ldr	r0, [pc, #124]	; (8001054 <main+0xc4>)
 8000fd6:	f004 fa0b 	bl	80053f0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000fda:	210c      	movs	r1, #12
 8000fdc:	481d      	ldr	r0, [pc, #116]	; (8001054 <main+0xc4>)
 8000fde:	f004 fa07 	bl	80053f0 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	481c      	ldr	r0, [pc, #112]	; (8001058 <main+0xc8>)
 8000fe6:	f004 fa03 	bl	80053f0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000fea:	2104      	movs	r1, #4
 8000fec:	481a      	ldr	r0, [pc, #104]	; (8001058 <main+0xc8>)
 8000fee:	f004 f9ff 	bl	80053f0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3); //closest to END (LAST)
 8000ff2:	2108      	movs	r1, #8
 8000ff4:	4818      	ldr	r0, [pc, #96]	; (8001058 <main+0xc8>)
 8000ff6:	f004 f9fb 	bl	80053f0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8000ffa:	210c      	movs	r1, #12
 8000ffc:	4816      	ldr	r0, [pc, #88]	; (8001058 <main+0xc8>)
 8000ffe:	f004 f9f7 	bl	80053f0 <HAL_TIM_PWM_Start>

	//Initialize ALL servo-motor positions to closed
	htim3.Instance->CCR1 = FRONT_ROW_CLOSE_POS;
 8001002:	4b14      	ldr	r3, [pc, #80]	; (8001054 <main+0xc4>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	2228      	movs	r2, #40	; 0x28
 8001008:	635a      	str	r2, [r3, #52]	; 0x34
	htim3.Instance->CCR2 = FRONT_ROW_CLOSE_POS;
 800100a:	4b12      	ldr	r3, [pc, #72]	; (8001054 <main+0xc4>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	2228      	movs	r2, #40	; 0x28
 8001010:	639a      	str	r2, [r3, #56]	; 0x38
	htim3.Instance->CCR3 = BACK_ROW_CLOSE_POS;
 8001012:	4b10      	ldr	r3, [pc, #64]	; (8001054 <main+0xc4>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	2219      	movs	r2, #25
 8001018:	63da      	str	r2, [r3, #60]	; 0x3c
	htim3.Instance->CCR4 = FRONT_ROW_CLOSE_POS;
 800101a:	4b0e      	ldr	r3, [pc, #56]	; (8001054 <main+0xc4>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	2228      	movs	r2, #40	; 0x28
 8001020:	641a      	str	r2, [r3, #64]	; 0x40

	htim4.Instance->CCR1 = BACK_ROW_CLOSE_POS;
 8001022:	4b0d      	ldr	r3, [pc, #52]	; (8001058 <main+0xc8>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	2219      	movs	r2, #25
 8001028:	635a      	str	r2, [r3, #52]	; 0x34
	htim4.Instance->CCR2 = FRONT_ROW_CLOSE_POS;
 800102a:	4b0b      	ldr	r3, [pc, #44]	; (8001058 <main+0xc8>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	2228      	movs	r2, #40	; 0x28
 8001030:	639a      	str	r2, [r3, #56]	; 0x38
	htim4.Instance->CCR3 = BACK_ROW_CLOSE_POS;
 8001032:	4b09      	ldr	r3, [pc, #36]	; (8001058 <main+0xc8>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	2219      	movs	r2, #25
 8001038:	63da      	str	r2, [r3, #60]	; 0x3c
		 }
		 //Play instrument
		 else {*/
		//HAL_GPIO_WritePin(GPIOB, B14_GREEN_PITCH_LED_Pin, GPIO_PIN_RESET);
		//HAL_GPIO_WritePin(GPIOB, B13_RED_PITCH_LED_Pin, GPIO_PIN_RESET);
		if (finished_one_measurement == 1) {
 800103a:	4b08      	ldr	r3, [pc, #32]	; (800105c <main+0xcc>)
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	2b01      	cmp	r3, #1
 8001040:	d1fb      	bne.n	800103a <main+0xaa>
			play_music();
 8001042:	f000 fb61 	bl	8001708 <play_music>
			print_to_com_port();
 8001046:	f000 fc4d 	bl	80018e4 <print_to_com_port>
		if (finished_one_measurement == 1) {
 800104a:	e7f6      	b.n	800103a <main+0xaa>
 800104c:	40012c00 	.word	0x40012c00
 8001050:	200003bc 	.word	0x200003bc
 8001054:	20000404 	.word	0x20000404
 8001058:	2000044c 	.word	0x2000044c
 800105c:	200004a8 	.word	0x200004a8

08001060 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001060:	b580      	push	{r7, lr}
 8001062:	b094      	sub	sp, #80	; 0x50
 8001064:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001066:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800106a:	2228      	movs	r2, #40	; 0x28
 800106c:	2100      	movs	r1, #0
 800106e:	4618      	mov	r0, r3
 8001070:	f009 fce6 	bl	800aa40 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001074:	f107 0314 	add.w	r3, r7, #20
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	605a      	str	r2, [r3, #4]
 800107e:	609a      	str	r2, [r3, #8]
 8001080:	60da      	str	r2, [r3, #12]
 8001082:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8001084:	1d3b      	adds	r3, r7, #4
 8001086:	2200      	movs	r2, #0
 8001088:	601a      	str	r2, [r3, #0]
 800108a:	605a      	str	r2, [r3, #4]
 800108c:	609a      	str	r2, [r3, #8]
 800108e:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001090:	2301      	movs	r3, #1
 8001092:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001094:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001098:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800109a:	2300      	movs	r3, #0
 800109c:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800109e:	2301      	movs	r3, #1
 80010a0:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010a2:	2302      	movs	r3, #2
 80010a4:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010aa:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80010ac:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80010b0:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80010b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010b6:	4618      	mov	r0, r3
 80010b8:	f003 fc54 	bl	8004964 <HAL_RCC_OscConfig>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <SystemClock_Config+0x66>
		Error_Handler();
 80010c2:	f000 fcc3 	bl	8001a4c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80010c6:	230f      	movs	r3, #15
 80010c8:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010ca:	2302      	movs	r3, #2
 80010cc:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010ce:	2300      	movs	r3, #0
 80010d0:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010d6:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010d8:	2300      	movs	r3, #0
 80010da:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80010dc:	f107 0314 	add.w	r3, r7, #20
 80010e0:	2102      	movs	r1, #2
 80010e2:	4618      	mov	r0, r3
 80010e4:	f003 fec0 	bl	8004e68 <HAL_RCC_ClockConfig>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <SystemClock_Config+0x92>
		Error_Handler();
 80010ee:	f000 fcad 	bl	8001a4c <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80010f2:	2310      	movs	r3, #16
 80010f4:	607b      	str	r3, [r7, #4]
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80010f6:	2300      	movs	r3, #0
 80010f8:	613b      	str	r3, [r7, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80010fa:	1d3b      	adds	r3, r7, #4
 80010fc:	4618      	mov	r0, r3
 80010fe:	f004 f819 	bl	8005134 <HAL_RCCEx_PeriphCLKConfig>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <SystemClock_Config+0xac>
		Error_Handler();
 8001108:	f000 fca0 	bl	8001a4c <Error_Handler>
	}
}
 800110c:	bf00      	nop
 800110e:	3750      	adds	r7, #80	; 0x50
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8001114:	b580      	push	{r7, lr}
 8001116:	b08a      	sub	sp, #40	; 0x28
 8001118:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800111a:	f107 0318 	add.w	r3, r7, #24
 800111e:	2200      	movs	r2, #0
 8001120:	601a      	str	r2, [r3, #0]
 8001122:	605a      	str	r2, [r3, #4]
 8001124:	609a      	str	r2, [r3, #8]
 8001126:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001128:	f107 0310 	add.w	r3, r7, #16
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 8001132:	463b      	mov	r3, r7
 8001134:	2200      	movs	r2, #0
 8001136:	601a      	str	r2, [r3, #0]
 8001138:	605a      	str	r2, [r3, #4]
 800113a:	609a      	str	r2, [r3, #8]
 800113c:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 800113e:	4b2d      	ldr	r3, [pc, #180]	; (80011f4 <MX_TIM1_Init+0xe0>)
 8001140:	4a2d      	ldr	r2, [pc, #180]	; (80011f8 <MX_TIM1_Init+0xe4>)
 8001142:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8001144:	4b2b      	ldr	r3, [pc, #172]	; (80011f4 <MX_TIM1_Init+0xe0>)
 8001146:	2200      	movs	r2, #0
 8001148:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800114a:	4b2a      	ldr	r3, [pc, #168]	; (80011f4 <MX_TIM1_Init+0xe0>)
 800114c:	2200      	movs	r2, #0
 800114e:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65536 - 1;
 8001150:	4b28      	ldr	r3, [pc, #160]	; (80011f4 <MX_TIM1_Init+0xe0>)
 8001152:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001156:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001158:	4b26      	ldr	r3, [pc, #152]	; (80011f4 <MX_TIM1_Init+0xe0>)
 800115a:	2200      	movs	r2, #0
 800115c:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 800115e:	4b25      	ldr	r3, [pc, #148]	; (80011f4 <MX_TIM1_Init+0xe0>)
 8001160:	2200      	movs	r2, #0
 8001162:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001164:	4b23      	ldr	r3, [pc, #140]	; (80011f4 <MX_TIM1_Init+0xe0>)
 8001166:	2200      	movs	r2, #0
 8001168:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 800116a:	4822      	ldr	r0, [pc, #136]	; (80011f4 <MX_TIM1_Init+0xe0>)
 800116c:	f004 f898 	bl	80052a0 <HAL_TIM_Base_Init>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <MX_TIM1_Init+0x66>
		Error_Handler();
 8001176:	f000 fc69 	bl	8001a4c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800117a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800117e:	61bb      	str	r3, [r7, #24]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8001180:	f107 0318 	add.w	r3, r7, #24
 8001184:	4619      	mov	r1, r3
 8001186:	481b      	ldr	r0, [pc, #108]	; (80011f4 <MX_TIM1_Init+0xe0>)
 8001188:	f004 fd8c 	bl	8005ca4 <HAL_TIM_ConfigClockSource>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <MX_TIM1_Init+0x82>
		Error_Handler();
 8001192:	f000 fc5b 	bl	8001a4c <Error_Handler>
	}
	if (HAL_TIM_IC_Init(&htim1) != HAL_OK) {
 8001196:	4817      	ldr	r0, [pc, #92]	; (80011f4 <MX_TIM1_Init+0xe0>)
 8001198:	f004 f9cc 	bl	8005534 <HAL_TIM_IC_Init>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_TIM1_Init+0x92>
		Error_Handler();
 80011a2:	f000 fc53 	bl	8001a4c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011a6:	2300      	movs	r3, #0
 80011a8:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011aa:	2300      	movs	r3, #0
 80011ac:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 80011ae:	f107 0310 	add.w	r3, r7, #16
 80011b2:	4619      	mov	r1, r3
 80011b4:	480f      	ldr	r0, [pc, #60]	; (80011f4 <MX_TIM1_Init+0xe0>)
 80011b6:	f005 fa53 	bl	8006660 <HAL_TIMEx_MasterConfigSynchronization>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <MX_TIM1_Init+0xb0>
			!= HAL_OK) {
		Error_Handler();
 80011c0:	f000 fc44 	bl	8001a4c <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80011c4:	2300      	movs	r3, #0
 80011c6:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80011c8:	2301      	movs	r3, #1
 80011ca:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80011cc:	2300      	movs	r3, #0
 80011ce:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 0;
 80011d0:	2300      	movs	r3, #0
 80011d2:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 80011d4:	463b      	mov	r3, r7
 80011d6:	2200      	movs	r2, #0
 80011d8:	4619      	mov	r1, r3
 80011da:	4806      	ldr	r0, [pc, #24]	; (80011f4 <MX_TIM1_Init+0xe0>)
 80011dc:	f004 fc10 	bl	8005a00 <HAL_TIM_IC_ConfigChannel>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <MX_TIM1_Init+0xd6>
		Error_Handler();
 80011e6:	f000 fc31 	bl	8001a4c <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 80011ea:	bf00      	nop
 80011ec:	3728      	adds	r7, #40	; 0x28
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	20000374 	.word	0x20000374
 80011f8:	40012c00 	.word	0x40012c00

080011fc <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b08a      	sub	sp, #40	; 0x28
 8001200:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001202:	f107 0318 	add.w	r3, r7, #24
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]
 800120a:	605a      	str	r2, [r3, #4]
 800120c:	609a      	str	r2, [r3, #8]
 800120e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001210:	f107 0310 	add.w	r3, r7, #16
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 800121a:	463b      	mov	r3, r7
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	605a      	str	r2, [r3, #4]
 8001222:	609a      	str	r2, [r3, #8]
 8001224:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001226:	4b2c      	ldr	r3, [pc, #176]	; (80012d8 <MX_TIM2_Init+0xdc>)
 8001228:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800122c:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 800122e:	4b2a      	ldr	r3, [pc, #168]	; (80012d8 <MX_TIM2_Init+0xdc>)
 8001230:	2200      	movs	r2, #0
 8001232:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001234:	4b28      	ldr	r3, [pc, #160]	; (80012d8 <MX_TIM2_Init+0xdc>)
 8001236:	2200      	movs	r2, #0
 8001238:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65536 - 1;
 800123a:	4b27      	ldr	r3, [pc, #156]	; (80012d8 <MX_TIM2_Init+0xdc>)
 800123c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001240:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001242:	4b25      	ldr	r3, [pc, #148]	; (80012d8 <MX_TIM2_Init+0xdc>)
 8001244:	2200      	movs	r2, #0
 8001246:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001248:	4b23      	ldr	r3, [pc, #140]	; (80012d8 <MX_TIM2_Init+0xdc>)
 800124a:	2200      	movs	r2, #0
 800124c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 800124e:	4822      	ldr	r0, [pc, #136]	; (80012d8 <MX_TIM2_Init+0xdc>)
 8001250:	f004 f826 	bl	80052a0 <HAL_TIM_Base_Init>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <MX_TIM2_Init+0x62>
		Error_Handler();
 800125a:	f000 fbf7 	bl	8001a4c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800125e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001262:	61bb      	str	r3, [r7, #24]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8001264:	f107 0318 	add.w	r3, r7, #24
 8001268:	4619      	mov	r1, r3
 800126a:	481b      	ldr	r0, [pc, #108]	; (80012d8 <MX_TIM2_Init+0xdc>)
 800126c:	f004 fd1a 	bl	8005ca4 <HAL_TIM_ConfigClockSource>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_TIM2_Init+0x7e>
		Error_Handler();
 8001276:	f000 fbe9 	bl	8001a4c <Error_Handler>
	}
	if (HAL_TIM_IC_Init(&htim2) != HAL_OK) {
 800127a:	4817      	ldr	r0, [pc, #92]	; (80012d8 <MX_TIM2_Init+0xdc>)
 800127c:	f004 f95a 	bl	8005534 <HAL_TIM_IC_Init>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_TIM2_Init+0x8e>
		Error_Handler();
 8001286:	f000 fbe1 	bl	8001a4c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800128a:	2300      	movs	r3, #0
 800128c:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800128e:	2300      	movs	r3, #0
 8001290:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8001292:	f107 0310 	add.w	r3, r7, #16
 8001296:	4619      	mov	r1, r3
 8001298:	480f      	ldr	r0, [pc, #60]	; (80012d8 <MX_TIM2_Init+0xdc>)
 800129a:	f005 f9e1 	bl	8006660 <HAL_TIMEx_MasterConfigSynchronization>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_TIM2_Init+0xac>
			!= HAL_OK) {
		Error_Handler();
 80012a4:	f000 fbd2 	bl	8001a4c <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80012a8:	2300      	movs	r3, #0
 80012aa:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80012ac:	2301      	movs	r3, #1
 80012ae:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80012b0:	2300      	movs	r3, #0
 80012b2:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 0;
 80012b4:	2300      	movs	r3, #0
 80012b6:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 80012b8:	463b      	mov	r3, r7
 80012ba:	2200      	movs	r2, #0
 80012bc:	4619      	mov	r1, r3
 80012be:	4806      	ldr	r0, [pc, #24]	; (80012d8 <MX_TIM2_Init+0xdc>)
 80012c0:	f004 fb9e 	bl	8005a00 <HAL_TIM_IC_ConfigChannel>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <MX_TIM2_Init+0xd2>
		Error_Handler();
 80012ca:	f000 fbbf 	bl	8001a4c <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 80012ce:	bf00      	nop
 80012d0:	3728      	adds	r7, #40	; 0x28
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	200003bc 	.word	0x200003bc

080012dc <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 80012dc:	b580      	push	{r7, lr}
 80012de:	b08e      	sub	sp, #56	; 0x38
 80012e0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80012e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012e6:	2200      	movs	r2, #0
 80012e8:	601a      	str	r2, [r3, #0]
 80012ea:	605a      	str	r2, [r3, #4]
 80012ec:	609a      	str	r2, [r3, #8]
 80012ee:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80012f0:	f107 0320 	add.w	r3, r7, #32
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80012fa:	1d3b      	adds	r3, r7, #4
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	605a      	str	r2, [r3, #4]
 8001302:	609a      	str	r2, [r3, #8]
 8001304:	60da      	str	r2, [r3, #12]
 8001306:	611a      	str	r2, [r3, #16]
 8001308:	615a      	str	r2, [r3, #20]
 800130a:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 800130c:	4b3e      	ldr	r3, [pc, #248]	; (8001408 <MX_TIM3_Init+0x12c>)
 800130e:	4a3f      	ldr	r2, [pc, #252]	; (800140c <MX_TIM3_Init+0x130>)
 8001310:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 1440 - 1;
 8001312:	4b3d      	ldr	r3, [pc, #244]	; (8001408 <MX_TIM3_Init+0x12c>)
 8001314:	f240 529f 	movw	r2, #1439	; 0x59f
 8001318:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800131a:	4b3b      	ldr	r3, [pc, #236]	; (8001408 <MX_TIM3_Init+0x12c>)
 800131c:	2200      	movs	r2, #0
 800131e:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 1000 - 1;
 8001320:	4b39      	ldr	r3, [pc, #228]	; (8001408 <MX_TIM3_Init+0x12c>)
 8001322:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001326:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001328:	4b37      	ldr	r3, [pc, #220]	; (8001408 <MX_TIM3_Init+0x12c>)
 800132a:	2200      	movs	r2, #0
 800132c:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800132e:	4b36      	ldr	r3, [pc, #216]	; (8001408 <MX_TIM3_Init+0x12c>)
 8001330:	2200      	movs	r2, #0
 8001332:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8001334:	4834      	ldr	r0, [pc, #208]	; (8001408 <MX_TIM3_Init+0x12c>)
 8001336:	f003 ffb3 	bl	80052a0 <HAL_TIM_Base_Init>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_TIM3_Init+0x68>
		Error_Handler();
 8001340:	f000 fb84 	bl	8001a4c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001344:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001348:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 800134a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800134e:	4619      	mov	r1, r3
 8001350:	482d      	ldr	r0, [pc, #180]	; (8001408 <MX_TIM3_Init+0x12c>)
 8001352:	f004 fca7 	bl	8005ca4 <HAL_TIM_ConfigClockSource>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <MX_TIM3_Init+0x84>
		Error_Handler();
 800135c:	f000 fb76 	bl	8001a4c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8001360:	4829      	ldr	r0, [pc, #164]	; (8001408 <MX_TIM3_Init+0x12c>)
 8001362:	f003 ffec 	bl	800533e <HAL_TIM_PWM_Init>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_TIM3_Init+0x94>
		Error_Handler();
 800136c:	f000 fb6e 	bl	8001a4c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001370:	2300      	movs	r3, #0
 8001372:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001374:	2300      	movs	r3, #0
 8001376:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8001378:	f107 0320 	add.w	r3, r7, #32
 800137c:	4619      	mov	r1, r3
 800137e:	4822      	ldr	r0, [pc, #136]	; (8001408 <MX_TIM3_Init+0x12c>)
 8001380:	f005 f96e 	bl	8006660 <HAL_TIMEx_MasterConfigSynchronization>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_TIM3_Init+0xb2>
			!= HAL_OK) {
		Error_Handler();
 800138a:	f000 fb5f 	bl	8001a4c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800138e:	2360      	movs	r3, #96	; 0x60
 8001390:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 75;
 8001392:	234b      	movs	r3, #75	; 0x4b
 8001394:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001396:	2300      	movs	r3, #0
 8001398:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800139a:	2300      	movs	r3, #0
 800139c:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)
 800139e:	1d3b      	adds	r3, r7, #4
 80013a0:	2200      	movs	r2, #0
 80013a2:	4619      	mov	r1, r3
 80013a4:	4818      	ldr	r0, [pc, #96]	; (8001408 <MX_TIM3_Init+0x12c>)
 80013a6:	f004 fbbf 	bl	8005b28 <HAL_TIM_PWM_ConfigChannel>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <MX_TIM3_Init+0xd8>
			!= HAL_OK) {
		Error_Handler();
 80013b0:	f000 fb4c 	bl	8001a4c <Error_Handler>
	}
	sConfigOC.Pulse = 0;
 80013b4:	2300      	movs	r3, #0
 80013b6:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2)
 80013b8:	1d3b      	adds	r3, r7, #4
 80013ba:	2204      	movs	r2, #4
 80013bc:	4619      	mov	r1, r3
 80013be:	4812      	ldr	r0, [pc, #72]	; (8001408 <MX_TIM3_Init+0x12c>)
 80013c0:	f004 fbb2 	bl	8005b28 <HAL_TIM_PWM_ConfigChannel>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <MX_TIM3_Init+0xf2>
			!= HAL_OK) {
		Error_Handler();
 80013ca:	f000 fb3f 	bl	8001a4c <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3)
 80013ce:	1d3b      	adds	r3, r7, #4
 80013d0:	2208      	movs	r2, #8
 80013d2:	4619      	mov	r1, r3
 80013d4:	480c      	ldr	r0, [pc, #48]	; (8001408 <MX_TIM3_Init+0x12c>)
 80013d6:	f004 fba7 	bl	8005b28 <HAL_TIM_PWM_ConfigChannel>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_TIM3_Init+0x108>
			!= HAL_OK) {
		Error_Handler();
 80013e0:	f000 fb34 	bl	8001a4c <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4)
 80013e4:	1d3b      	adds	r3, r7, #4
 80013e6:	220c      	movs	r2, #12
 80013e8:	4619      	mov	r1, r3
 80013ea:	4807      	ldr	r0, [pc, #28]	; (8001408 <MX_TIM3_Init+0x12c>)
 80013ec:	f004 fb9c 	bl	8005b28 <HAL_TIM_PWM_ConfigChannel>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <MX_TIM3_Init+0x11e>
			!= HAL_OK) {
		Error_Handler();
 80013f6:	f000 fb29 	bl	8001a4c <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 80013fa:	4803      	ldr	r0, [pc, #12]	; (8001408 <MX_TIM3_Init+0x12c>)
 80013fc:	f000 fc38 	bl	8001c70 <HAL_TIM_MspPostInit>

}
 8001400:	bf00      	nop
 8001402:	3738      	adds	r7, #56	; 0x38
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	20000404 	.word	0x20000404
 800140c:	40000400 	.word	0x40000400

08001410 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8001410:	b580      	push	{r7, lr}
 8001412:	b08e      	sub	sp, #56	; 0x38
 8001414:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001416:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800141a:	2200      	movs	r2, #0
 800141c:	601a      	str	r2, [r3, #0]
 800141e:	605a      	str	r2, [r3, #4]
 8001420:	609a      	str	r2, [r3, #8]
 8001422:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001424:	f107 0320 	add.w	r3, r7, #32
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800142e:	1d3b      	adds	r3, r7, #4
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	605a      	str	r2, [r3, #4]
 8001436:	609a      	str	r2, [r3, #8]
 8001438:	60da      	str	r2, [r3, #12]
 800143a:	611a      	str	r2, [r3, #16]
 800143c:	615a      	str	r2, [r3, #20]
 800143e:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8001440:	4b3d      	ldr	r3, [pc, #244]	; (8001538 <MX_TIM4_Init+0x128>)
 8001442:	4a3e      	ldr	r2, [pc, #248]	; (800153c <MX_TIM4_Init+0x12c>)
 8001444:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 1440 - 1;
 8001446:	4b3c      	ldr	r3, [pc, #240]	; (8001538 <MX_TIM4_Init+0x128>)
 8001448:	f240 529f 	movw	r2, #1439	; 0x59f
 800144c:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800144e:	4b3a      	ldr	r3, [pc, #232]	; (8001538 <MX_TIM4_Init+0x128>)
 8001450:	2200      	movs	r2, #0
 8001452:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 1000 - 1;
 8001454:	4b38      	ldr	r3, [pc, #224]	; (8001538 <MX_TIM4_Init+0x128>)
 8001456:	f240 32e7 	movw	r2, #999	; 0x3e7
 800145a:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800145c:	4b36      	ldr	r3, [pc, #216]	; (8001538 <MX_TIM4_Init+0x128>)
 800145e:	2200      	movs	r2, #0
 8001460:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001462:	4b35      	ldr	r3, [pc, #212]	; (8001538 <MX_TIM4_Init+0x128>)
 8001464:	2200      	movs	r2, #0
 8001466:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 8001468:	4833      	ldr	r0, [pc, #204]	; (8001538 <MX_TIM4_Init+0x128>)
 800146a:	f003 ff19 	bl	80052a0 <HAL_TIM_Base_Init>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <MX_TIM4_Init+0x68>
		Error_Handler();
 8001474:	f000 faea 	bl	8001a4c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001478:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800147c:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 800147e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001482:	4619      	mov	r1, r3
 8001484:	482c      	ldr	r0, [pc, #176]	; (8001538 <MX_TIM4_Init+0x128>)
 8001486:	f004 fc0d 	bl	8005ca4 <HAL_TIM_ConfigClockSource>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_TIM4_Init+0x84>
		Error_Handler();
 8001490:	f000 fadc 	bl	8001a4c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK) {
 8001494:	4828      	ldr	r0, [pc, #160]	; (8001538 <MX_TIM4_Init+0x128>)
 8001496:	f003 ff52 	bl	800533e <HAL_TIM_PWM_Init>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <MX_TIM4_Init+0x94>
		Error_Handler();
 80014a0:	f000 fad4 	bl	8001a4c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014a4:	2300      	movs	r3, #0
 80014a6:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014a8:	2300      	movs	r3, #0
 80014aa:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 80014ac:	f107 0320 	add.w	r3, r7, #32
 80014b0:	4619      	mov	r1, r3
 80014b2:	4821      	ldr	r0, [pc, #132]	; (8001538 <MX_TIM4_Init+0x128>)
 80014b4:	f005 f8d4 	bl	8006660 <HAL_TIMEx_MasterConfigSynchronization>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <MX_TIM4_Init+0xb2>
			!= HAL_OK) {
		Error_Handler();
 80014be:	f000 fac5 	bl	8001a4c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014c2:	2360      	movs	r3, #96	; 0x60
 80014c4:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 80014c6:	2300      	movs	r3, #0
 80014c8:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014ca:	2300      	movs	r3, #0
 80014cc:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014ce:	2300      	movs	r3, #0
 80014d0:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1)
 80014d2:	1d3b      	adds	r3, r7, #4
 80014d4:	2200      	movs	r2, #0
 80014d6:	4619      	mov	r1, r3
 80014d8:	4817      	ldr	r0, [pc, #92]	; (8001538 <MX_TIM4_Init+0x128>)
 80014da:	f004 fb25 	bl	8005b28 <HAL_TIM_PWM_ConfigChannel>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <MX_TIM4_Init+0xd8>
			!= HAL_OK) {
		Error_Handler();
 80014e4:	f000 fab2 	bl	8001a4c <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2)
 80014e8:	1d3b      	adds	r3, r7, #4
 80014ea:	2204      	movs	r2, #4
 80014ec:	4619      	mov	r1, r3
 80014ee:	4812      	ldr	r0, [pc, #72]	; (8001538 <MX_TIM4_Init+0x128>)
 80014f0:	f004 fb1a 	bl	8005b28 <HAL_TIM_PWM_ConfigChannel>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_TIM4_Init+0xee>
			!= HAL_OK) {
		Error_Handler();
 80014fa:	f000 faa7 	bl	8001a4c <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3)
 80014fe:	1d3b      	adds	r3, r7, #4
 8001500:	2208      	movs	r2, #8
 8001502:	4619      	mov	r1, r3
 8001504:	480c      	ldr	r0, [pc, #48]	; (8001538 <MX_TIM4_Init+0x128>)
 8001506:	f004 fb0f 	bl	8005b28 <HAL_TIM_PWM_ConfigChannel>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <MX_TIM4_Init+0x104>
			!= HAL_OK) {
		Error_Handler();
 8001510:	f000 fa9c 	bl	8001a4c <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4)
 8001514:	1d3b      	adds	r3, r7, #4
 8001516:	220c      	movs	r2, #12
 8001518:	4619      	mov	r1, r3
 800151a:	4807      	ldr	r0, [pc, #28]	; (8001538 <MX_TIM4_Init+0x128>)
 800151c:	f004 fb04 	bl	8005b28 <HAL_TIM_PWM_ConfigChannel>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <MX_TIM4_Init+0x11a>
			!= HAL_OK) {
		Error_Handler();
 8001526:	f000 fa91 	bl	8001a4c <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */
	HAL_TIM_MspPostInit(&htim4);
 800152a:	4803      	ldr	r0, [pc, #12]	; (8001538 <MX_TIM4_Init+0x128>)
 800152c:	f000 fba0 	bl	8001c70 <HAL_TIM_MspPostInit>

}
 8001530:	bf00      	nop
 8001532:	3738      	adds	r7, #56	; 0x38
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	2000044c 	.word	0x2000044c
 800153c:	40000800 	.word	0x40000800

08001540 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001540:	b580      	push	{r7, lr}
 8001542:	b088      	sub	sp, #32
 8001544:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001546:	f107 0310 	add.w	r3, r7, #16
 800154a:	2200      	movs	r2, #0
 800154c:	601a      	str	r2, [r3, #0]
 800154e:	605a      	str	r2, [r3, #4]
 8001550:	609a      	str	r2, [r3, #8]
 8001552:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001554:	4b2b      	ldr	r3, [pc, #172]	; (8001604 <MX_GPIO_Init+0xc4>)
 8001556:	699b      	ldr	r3, [r3, #24]
 8001558:	4a2a      	ldr	r2, [pc, #168]	; (8001604 <MX_GPIO_Init+0xc4>)
 800155a:	f043 0320 	orr.w	r3, r3, #32
 800155e:	6193      	str	r3, [r2, #24]
 8001560:	4b28      	ldr	r3, [pc, #160]	; (8001604 <MX_GPIO_Init+0xc4>)
 8001562:	699b      	ldr	r3, [r3, #24]
 8001564:	f003 0320 	and.w	r3, r3, #32
 8001568:	60fb      	str	r3, [r7, #12]
 800156a:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800156c:	4b25      	ldr	r3, [pc, #148]	; (8001604 <MX_GPIO_Init+0xc4>)
 800156e:	699b      	ldr	r3, [r3, #24]
 8001570:	4a24      	ldr	r2, [pc, #144]	; (8001604 <MX_GPIO_Init+0xc4>)
 8001572:	f043 0304 	orr.w	r3, r3, #4
 8001576:	6193      	str	r3, [r2, #24]
 8001578:	4b22      	ldr	r3, [pc, #136]	; (8001604 <MX_GPIO_Init+0xc4>)
 800157a:	699b      	ldr	r3, [r3, #24]
 800157c:	f003 0304 	and.w	r3, r3, #4
 8001580:	60bb      	str	r3, [r7, #8]
 8001582:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001584:	4b1f      	ldr	r3, [pc, #124]	; (8001604 <MX_GPIO_Init+0xc4>)
 8001586:	699b      	ldr	r3, [r3, #24]
 8001588:	4a1e      	ldr	r2, [pc, #120]	; (8001604 <MX_GPIO_Init+0xc4>)
 800158a:	f043 0308 	orr.w	r3, r3, #8
 800158e:	6193      	str	r3, [r2, #24]
 8001590:	4b1c      	ldr	r3, [pc, #112]	; (8001604 <MX_GPIO_Init+0xc4>)
 8001592:	699b      	ldr	r3, [r3, #24]
 8001594:	f003 0308 	and.w	r3, r3, #8
 8001598:	607b      	str	r3, [r7, #4]
 800159a:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, B13_RED_PITCH_LED_Pin | B14_GREEN_PITCH_LED_Pin,
 800159c:	2200      	movs	r2, #0
 800159e:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80015a2:	4819      	ldr	r0, [pc, #100]	; (8001608 <MX_GPIO_Init+0xc8>)
 80015a4:	f001 fd02 	bl	8002fac <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : B12_SWITCH_Pin */
	GPIO_InitStruct.Pin = B12_SWITCH_Pin;
 80015a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015ac:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015ae:	2300      	movs	r3, #0
 80015b0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015b2:	2301      	movs	r3, #1
 80015b4:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(B12_SWITCH_GPIO_Port, &GPIO_InitStruct);
 80015b6:	f107 0310 	add.w	r3, r7, #16
 80015ba:	4619      	mov	r1, r3
 80015bc:	4812      	ldr	r0, [pc, #72]	; (8001608 <MX_GPIO_Init+0xc8>)
 80015be:	f001 fb71 	bl	8002ca4 <HAL_GPIO_Init>

	/*Configure GPIO pins : B13_RED_PITCH_LED_Pin B14_GREEN_PITCH_LED_Pin */
	GPIO_InitStruct.Pin = B13_RED_PITCH_LED_Pin | B14_GREEN_PITCH_LED_Pin;
 80015c2:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80015c6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c8:	2301      	movs	r3, #1
 80015ca:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015cc:	2300      	movs	r3, #0
 80015ce:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d0:	2302      	movs	r3, #2
 80015d2:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015d4:	f107 0310 	add.w	r3, r7, #16
 80015d8:	4619      	mov	r1, r3
 80015da:	480b      	ldr	r0, [pc, #44]	; (8001608 <MX_GPIO_Init+0xc8>)
 80015dc:	f001 fb62 	bl	8002ca4 <HAL_GPIO_Init>

	/*Configure GPIO pin : TIM1_CH1_PA9_INPUT_CAPTURE_Pin */
	GPIO_InitStruct.Pin = TIM1_CH1_PA9_INPUT_CAPTURE_Pin;
 80015e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015e4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015e6:	2300      	movs	r3, #0
 80015e8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ea:	2300      	movs	r3, #0
 80015ec:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(TIM1_CH1_PA9_INPUT_CAPTURE_GPIO_Port, &GPIO_InitStruct);
 80015ee:	f107 0310 	add.w	r3, r7, #16
 80015f2:	4619      	mov	r1, r3
 80015f4:	4805      	ldr	r0, [pc, #20]	; (800160c <MX_GPIO_Init+0xcc>)
 80015f6:	f001 fb55 	bl	8002ca4 <HAL_GPIO_Init>

}
 80015fa:	bf00      	nop
 80015fc:	3720      	adds	r7, #32
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	40021000 	.word	0x40021000
 8001608:	40010c00 	.word	0x40010c00
 800160c:	40010800 	.word	0x40010800

08001610 <is_in_range>:
		HAL_GPIO_WritePin(GPIOB, B13_RED_PITCH_LED_Pin, GPIO_PIN_SET);
		HAL_Delay(10);
	}

}
bool is_in_range(int lower_limit, int upper_limit, int number) {
 8001610:	b480      	push	{r7}
 8001612:	b085      	sub	sp, #20
 8001614:	af00      	add	r7, sp, #0
 8001616:	60f8      	str	r0, [r7, #12]
 8001618:	60b9      	str	r1, [r7, #8]
 800161a:	607a      	str	r2, [r7, #4]
	return (lower_limit <= number && number <= upper_limit);
 800161c:	68fa      	ldr	r2, [r7, #12]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	429a      	cmp	r2, r3
 8001622:	dc05      	bgt.n	8001630 <is_in_range+0x20>
 8001624:	687a      	ldr	r2, [r7, #4]
 8001626:	68bb      	ldr	r3, [r7, #8]
 8001628:	429a      	cmp	r2, r3
 800162a:	dc01      	bgt.n	8001630 <is_in_range+0x20>
 800162c:	2301      	movs	r3, #1
 800162e:	e000      	b.n	8001632 <is_in_range+0x22>
 8001630:	2300      	movs	r3, #0
}
 8001632:	4618      	mov	r0, r3
 8001634:	3714      	adds	r7, #20
 8001636:	46bd      	mov	sp, r7
 8001638:	bc80      	pop	{r7}
 800163a:	4770      	bx	lr

0800163c <play_note>:

void play_note(uint32_t note_to_play_index) {
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
	//HAL_TIM_IC_Stop_IT(&htim1, TIM_CHANNEL_1);
	//HAL_TIM_IC_Stop_IT(&htim2, TIM_CHANNEL_1);
	//is_first_captured = 0;

	htim3.Instance->CCR1 = all_notes[note_to_play_index].holes_to_play[0];
 8001644:	492d      	ldr	r1, [pc, #180]	; (80016fc <play_note+0xc0>)
 8001646:	687a      	ldr	r2, [r7, #4]
 8001648:	4613      	mov	r3, r2
 800164a:	00db      	lsls	r3, r3, #3
 800164c:	4413      	add	r3, r2
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	440b      	add	r3, r1
 8001652:	3308      	adds	r3, #8
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	4b2a      	ldr	r3, [pc, #168]	; (8001700 <play_note+0xc4>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	635a      	str	r2, [r3, #52]	; 0x34
	htim3.Instance->CCR2 = all_notes[note_to_play_index].holes_to_play[1];
 800165c:	4927      	ldr	r1, [pc, #156]	; (80016fc <play_note+0xc0>)
 800165e:	687a      	ldr	r2, [r7, #4]
 8001660:	4613      	mov	r3, r2
 8001662:	00db      	lsls	r3, r3, #3
 8001664:	4413      	add	r3, r2
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	440b      	add	r3, r1
 800166a:	330c      	adds	r3, #12
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	4b24      	ldr	r3, [pc, #144]	; (8001700 <play_note+0xc4>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	639a      	str	r2, [r3, #56]	; 0x38
	htim3.Instance->CCR3 = all_notes[note_to_play_index].holes_to_play[2];
 8001674:	4921      	ldr	r1, [pc, #132]	; (80016fc <play_note+0xc0>)
 8001676:	687a      	ldr	r2, [r7, #4]
 8001678:	4613      	mov	r3, r2
 800167a:	00db      	lsls	r3, r3, #3
 800167c:	4413      	add	r3, r2
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	440b      	add	r3, r1
 8001682:	3310      	adds	r3, #16
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	4b1e      	ldr	r3, [pc, #120]	; (8001700 <play_note+0xc4>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	63da      	str	r2, [r3, #60]	; 0x3c
	htim3.Instance->CCR4 = all_notes[note_to_play_index].holes_to_play[3];
 800168c:	491b      	ldr	r1, [pc, #108]	; (80016fc <play_note+0xc0>)
 800168e:	687a      	ldr	r2, [r7, #4]
 8001690:	4613      	mov	r3, r2
 8001692:	00db      	lsls	r3, r3, #3
 8001694:	4413      	add	r3, r2
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	440b      	add	r3, r1
 800169a:	3314      	adds	r3, #20
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	4b18      	ldr	r3, [pc, #96]	; (8001700 <play_note+0xc4>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	641a      	str	r2, [r3, #64]	; 0x40

	htim4.Instance->CCR1 = all_notes[note_to_play_index].holes_to_play[4];
 80016a4:	4915      	ldr	r1, [pc, #84]	; (80016fc <play_note+0xc0>)
 80016a6:	687a      	ldr	r2, [r7, #4]
 80016a8:	4613      	mov	r3, r2
 80016aa:	00db      	lsls	r3, r3, #3
 80016ac:	4413      	add	r3, r2
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	440b      	add	r3, r1
 80016b2:	3318      	adds	r3, #24
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	4b13      	ldr	r3, [pc, #76]	; (8001704 <play_note+0xc8>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	635a      	str	r2, [r3, #52]	; 0x34
	htim4.Instance->CCR2 = all_notes[note_to_play_index].holes_to_play[5];
 80016bc:	490f      	ldr	r1, [pc, #60]	; (80016fc <play_note+0xc0>)
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	4613      	mov	r3, r2
 80016c2:	00db      	lsls	r3, r3, #3
 80016c4:	4413      	add	r3, r2
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	440b      	add	r3, r1
 80016ca:	331c      	adds	r3, #28
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	4b0d      	ldr	r3, [pc, #52]	; (8001704 <play_note+0xc8>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	639a      	str	r2, [r3, #56]	; 0x38
	htim4.Instance->CCR3 = all_notes[note_to_play_index].holes_to_play[6];
 80016d4:	4909      	ldr	r1, [pc, #36]	; (80016fc <play_note+0xc0>)
 80016d6:	687a      	ldr	r2, [r7, #4]
 80016d8:	4613      	mov	r3, r2
 80016da:	00db      	lsls	r3, r3, #3
 80016dc:	4413      	add	r3, r2
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	440b      	add	r3, r1
 80016e2:	3320      	adds	r3, #32
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	4b07      	ldr	r3, [pc, #28]	; (8001704 <play_note+0xc8>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	63da      	str	r2, [r3, #60]	; 0x3c

	//SHORT DELAY
	HAL_Delay(200);
 80016ec:	20c8      	movs	r0, #200	; 0xc8
 80016ee:	f001 f9a7 	bl	8002a40 <HAL_Delay>
	//HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
	//HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
}
 80016f2:	bf00      	nop
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	0800d9c8 	.word	0x0800d9c8
 8001700:	20000404 	.word	0x20000404
 8001704:	2000044c 	.word	0x2000044c

08001708 <play_music>:
	for (int i = 0; i < 7; i++) {
		play_note(i);
		HAL_Delay(2000);
	}
}
void play_music() {
 8001708:	b5b0      	push	{r4, r5, r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
	const uint32_t DWN = 100;
 800170e:	2364      	movs	r3, #100	; 0x64
 8001710:	607b      	str	r3, [r7, #4]
	const uint32_t UP = 100;
 8001712:	2364      	movs	r3, #100	; 0x64
 8001714:	603b      	str	r3, [r7, #0]

	/*if (frequency < (CTR_FREQ[0] - 500)) {
		return;
	}*/
	/*== NOTE C ==*/
	if (is_in_range(CTR_FREQ[0] - DWN, CTR_FREQ[0] + UP, frequency) == true) {
 8001716:	f640 0266 	movw	r2, #2150	; 0x866
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	461c      	mov	r4, r3
 8001720:	f640 0266 	movw	r2, #2150	; 0x866
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	4413      	add	r3, r2
 8001728:	461d      	mov	r5, r3
 800172a:	4b6b      	ldr	r3, [pc, #428]	; (80018d8 <play_music+0x1d0>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4618      	mov	r0, r3
 8001730:	f7ff fc08 	bl	8000f44 <__aeabi_f2iz>
 8001734:	4603      	mov	r3, r0
 8001736:	461a      	mov	r2, r3
 8001738:	4629      	mov	r1, r5
 800173a:	4620      	mov	r0, r4
 800173c:	f7ff ff68 	bl	8001610 <is_in_range>
 8001740:	4603      	mov	r3, r0
 8001742:	2b01      	cmp	r3, #1
 8001744:	d106      	bne.n	8001754 <play_music+0x4c>
		current_note = NOTE_C;
 8001746:	4b65      	ldr	r3, [pc, #404]	; (80018dc <play_music+0x1d4>)
 8001748:	2200      	movs	r2, #0
 800174a:	701a      	strb	r2, [r3, #0]
		current_note_index = 0;
 800174c:	4b64      	ldr	r3, [pc, #400]	; (80018e0 <play_music+0x1d8>)
 800174e:	2200      	movs	r2, #0
 8001750:	601a      	str	r2, [r3, #0]
 8001752:	e0b8      	b.n	80018c6 <play_music+0x1be>
	}
	/*== NOTE D ==*/
	else if (is_in_range(CTR_FREQ[1] - DWN, CTR_FREQ[1] + UP, frequency) == true) {
 8001754:	f640 1292 	movw	r2, #2450	; 0x992
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	461c      	mov	r4, r3
 800175e:	f640 1292 	movw	r2, #2450	; 0x992
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	4413      	add	r3, r2
 8001766:	461d      	mov	r5, r3
 8001768:	4b5b      	ldr	r3, [pc, #364]	; (80018d8 <play_music+0x1d0>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4618      	mov	r0, r3
 800176e:	f7ff fbe9 	bl	8000f44 <__aeabi_f2iz>
 8001772:	4603      	mov	r3, r0
 8001774:	461a      	mov	r2, r3
 8001776:	4629      	mov	r1, r5
 8001778:	4620      	mov	r0, r4
 800177a:	f7ff ff49 	bl	8001610 <is_in_range>
 800177e:	4603      	mov	r3, r0
 8001780:	2b01      	cmp	r3, #1
 8001782:	d106      	bne.n	8001792 <play_music+0x8a>
		current_note = NOTE_D;
 8001784:	4b55      	ldr	r3, [pc, #340]	; (80018dc <play_music+0x1d4>)
 8001786:	2201      	movs	r2, #1
 8001788:	701a      	strb	r2, [r3, #0]
		current_note_index = 1;
 800178a:	4b55      	ldr	r3, [pc, #340]	; (80018e0 <play_music+0x1d8>)
 800178c:	2201      	movs	r2, #1
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	e099      	b.n	80018c6 <play_music+0x1be>
	}
	/*== NOTE E ==*/
	else if (is_in_range(CTR_FREQ[2] - DWN, CTR_FREQ[2] + UP, frequency) == true) {
 8001792:	f640 22be 	movw	r2, #2750	; 0xabe
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	461c      	mov	r4, r3
 800179c:	f640 22be 	movw	r2, #2750	; 0xabe
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	4413      	add	r3, r2
 80017a4:	461d      	mov	r5, r3
 80017a6:	4b4c      	ldr	r3, [pc, #304]	; (80018d8 <play_music+0x1d0>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7ff fbca 	bl	8000f44 <__aeabi_f2iz>
 80017b0:	4603      	mov	r3, r0
 80017b2:	461a      	mov	r2, r3
 80017b4:	4629      	mov	r1, r5
 80017b6:	4620      	mov	r0, r4
 80017b8:	f7ff ff2a 	bl	8001610 <is_in_range>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d106      	bne.n	80017d0 <play_music+0xc8>
		current_note = NOTE_E;
 80017c2:	4b46      	ldr	r3, [pc, #280]	; (80018dc <play_music+0x1d4>)
 80017c4:	2202      	movs	r2, #2
 80017c6:	701a      	strb	r2, [r3, #0]
		current_note_index = 2;
 80017c8:	4b45      	ldr	r3, [pc, #276]	; (80018e0 <play_music+0x1d8>)
 80017ca:	2202      	movs	r2, #2
 80017cc:	601a      	str	r2, [r3, #0]
 80017ce:	e07a      	b.n	80018c6 <play_music+0x1be>
	}
	/*== NOTE F ==*/
	else if (is_in_range(CTR_FREQ[3] - DWN, CTR_FREQ[3] + UP, frequency) == true) {
 80017d0:	f640 32ea 	movw	r2, #3050	; 0xbea
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	461c      	mov	r4, r3
 80017da:	f640 32ea 	movw	r2, #3050	; 0xbea
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	4413      	add	r3, r2
 80017e2:	461d      	mov	r5, r3
 80017e4:	4b3c      	ldr	r3, [pc, #240]	; (80018d8 <play_music+0x1d0>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7ff fbab 	bl	8000f44 <__aeabi_f2iz>
 80017ee:	4603      	mov	r3, r0
 80017f0:	461a      	mov	r2, r3
 80017f2:	4629      	mov	r1, r5
 80017f4:	4620      	mov	r0, r4
 80017f6:	f7ff ff0b 	bl	8001610 <is_in_range>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d106      	bne.n	800180e <play_music+0x106>
		current_note = NOTE_F;
 8001800:	4b36      	ldr	r3, [pc, #216]	; (80018dc <play_music+0x1d4>)
 8001802:	2203      	movs	r2, #3
 8001804:	701a      	strb	r2, [r3, #0]
		current_note_index = 3;
 8001806:	4b36      	ldr	r3, [pc, #216]	; (80018e0 <play_music+0x1d8>)
 8001808:	2203      	movs	r2, #3
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	e05b      	b.n	80018c6 <play_music+0x1be>
	}
	/*== NOTE G ==*/
	else if (is_in_range(CTR_FREQ[4] - DWN, CTR_FREQ[4] + UP, frequency) == true) {
 800180e:	f640 5216 	movw	r2, #3350	; 0xd16
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	461c      	mov	r4, r3
 8001818:	f640 5216 	movw	r2, #3350	; 0xd16
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	4413      	add	r3, r2
 8001820:	461d      	mov	r5, r3
 8001822:	4b2d      	ldr	r3, [pc, #180]	; (80018d8 <play_music+0x1d0>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4618      	mov	r0, r3
 8001828:	f7ff fb8c 	bl	8000f44 <__aeabi_f2iz>
 800182c:	4603      	mov	r3, r0
 800182e:	461a      	mov	r2, r3
 8001830:	4629      	mov	r1, r5
 8001832:	4620      	mov	r0, r4
 8001834:	f7ff feec 	bl	8001610 <is_in_range>
 8001838:	4603      	mov	r3, r0
 800183a:	2b01      	cmp	r3, #1
 800183c:	d106      	bne.n	800184c <play_music+0x144>
		current_note = NOTE_G;
 800183e:	4b27      	ldr	r3, [pc, #156]	; (80018dc <play_music+0x1d4>)
 8001840:	2204      	movs	r2, #4
 8001842:	701a      	strb	r2, [r3, #0]
		current_note_index = 4;
 8001844:	4b26      	ldr	r3, [pc, #152]	; (80018e0 <play_music+0x1d8>)
 8001846:	2204      	movs	r2, #4
 8001848:	601a      	str	r2, [r3, #0]
 800184a:	e03c      	b.n	80018c6 <play_music+0x1be>
	}
	/*== NOTE A ==*/
	else if (is_in_range(CTR_FREQ[5] - DWN, CTR_FREQ[5] + UP, frequency) == true) {
 800184c:	f640 6242 	movw	r2, #3650	; 0xe42
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	461c      	mov	r4, r3
 8001856:	f640 6242 	movw	r2, #3650	; 0xe42
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	4413      	add	r3, r2
 800185e:	461d      	mov	r5, r3
 8001860:	4b1d      	ldr	r3, [pc, #116]	; (80018d8 <play_music+0x1d0>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4618      	mov	r0, r3
 8001866:	f7ff fb6d 	bl	8000f44 <__aeabi_f2iz>
 800186a:	4603      	mov	r3, r0
 800186c:	461a      	mov	r2, r3
 800186e:	4629      	mov	r1, r5
 8001870:	4620      	mov	r0, r4
 8001872:	f7ff fecd 	bl	8001610 <is_in_range>
 8001876:	4603      	mov	r3, r0
 8001878:	2b01      	cmp	r3, #1
 800187a:	d106      	bne.n	800188a <play_music+0x182>
		current_note = NOTE_A;
 800187c:	4b17      	ldr	r3, [pc, #92]	; (80018dc <play_music+0x1d4>)
 800187e:	2205      	movs	r2, #5
 8001880:	701a      	strb	r2, [r3, #0]
		current_note_index = 5;
 8001882:	4b17      	ldr	r3, [pc, #92]	; (80018e0 <play_music+0x1d8>)
 8001884:	2205      	movs	r2, #5
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	e01d      	b.n	80018c6 <play_music+0x1be>
	}
	/*== NOTE BB ==*/
	else if (is_in_range(CTR_FREQ[7] - DWN, CTR_FREQ[7] + UP, frequency) == true) {
 800188a:	f241 029a 	movw	r2, #4250	; 0x109a
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	461c      	mov	r4, r3
 8001894:	f241 029a 	movw	r2, #4250	; 0x109a
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	4413      	add	r3, r2
 800189c:	461d      	mov	r5, r3
 800189e:	4b0e      	ldr	r3, [pc, #56]	; (80018d8 <play_music+0x1d0>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7ff fb4e 	bl	8000f44 <__aeabi_f2iz>
 80018a8:	4603      	mov	r3, r0
 80018aa:	461a      	mov	r2, r3
 80018ac:	4629      	mov	r1, r5
 80018ae:	4620      	mov	r0, r4
 80018b0:	f7ff feae 	bl	8001610 <is_in_range>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d105      	bne.n	80018c6 <play_music+0x1be>
		current_note = NOTE_BB;
 80018ba:	4b08      	ldr	r3, [pc, #32]	; (80018dc <play_music+0x1d4>)
 80018bc:	2207      	movs	r2, #7
 80018be:	701a      	strb	r2, [r3, #0]
		current_note_index = 6;
 80018c0:	4b07      	ldr	r3, [pc, #28]	; (80018e0 <play_music+0x1d8>)
 80018c2:	2206      	movs	r2, #6
 80018c4:	601a      	str	r2, [r3, #0]
	}

	play_note(current_note_index);
 80018c6:	4b06      	ldr	r3, [pc, #24]	; (80018e0 <play_music+0x1d8>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4618      	mov	r0, r3
 80018cc:	f7ff feb6 	bl	800163c <play_note>

}
 80018d0:	bf00      	nop
 80018d2:	3708      	adds	r7, #8
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bdb0      	pop	{r4, r5, r7, pc}
 80018d8:	200004a4 	.word	0x200004a4
 80018dc:	200004aa 	.word	0x200004aa
 80018e0:	200004ac 	.word	0x200004ac

080018e4 <print_to_com_port>:
void print_to_com_port() {
 80018e4:	b590      	push	{r4, r7, lr}
 80018e6:	b09d      	sub	sp, #116	; 0x74
 80018e8:	af02      	add	r7, sp, #8
	char buffer[100];
	sprintf(buffer, "%f;%lu;%s \r\n", frequency, period_ticks,
 80018ea:	4b12      	ldr	r3, [pc, #72]	; (8001934 <print_to_com_port+0x50>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7fe fd9a 	bl	8000428 <__aeabi_f2d>
 80018f4:	4602      	mov	r2, r0
 80018f6:	460b      	mov	r3, r1
 80018f8:	490f      	ldr	r1, [pc, #60]	; (8001938 <print_to_com_port+0x54>)
 80018fa:	6809      	ldr	r1, [r1, #0]
 80018fc:	480f      	ldr	r0, [pc, #60]	; (800193c <print_to_com_port+0x58>)
 80018fe:	7800      	ldrb	r0, [r0, #0]
 8001900:	4604      	mov	r4, r0
 8001902:	480f      	ldr	r0, [pc, #60]	; (8001940 <print_to_com_port+0x5c>)
 8001904:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8001908:	1d3c      	adds	r4, r7, #4
 800190a:	9001      	str	r0, [sp, #4]
 800190c:	9100      	str	r1, [sp, #0]
 800190e:	490d      	ldr	r1, [pc, #52]	; (8001944 <print_to_com_port+0x60>)
 8001910:	4620      	mov	r0, r4
 8001912:	f009 fd29 	bl	800b368 <siprintf>
			timers[current_timer]);
	CDC_Transmit_FS((uint8_t*) buffer, strlen(buffer));
 8001916:	1d3b      	adds	r3, r7, #4
 8001918:	4618      	mov	r0, r3
 800191a:	f7fe fc19 	bl	8000150 <strlen>
 800191e:	4602      	mov	r2, r0
 8001920:	1d3b      	adds	r3, r7, #4
 8001922:	4611      	mov	r1, r2
 8001924:	4618      	mov	r0, r3
 8001926:	f000 fc3d 	bl	80021a4 <CDC_Transmit_FS>

}
 800192a:	bf00      	nop
 800192c:	376c      	adds	r7, #108	; 0x6c
 800192e:	46bd      	mov	sp, r7
 8001930:	bd90      	pop	{r4, r7, pc}
 8001932:	bf00      	nop
 8001934:	200004a4 	.word	0x200004a4
 8001938:	2000049c 	.word	0x2000049c
 800193c:	200004a9 	.word	0x200004a9
 8001940:	20000000 	.word	0x20000000
 8001944:	0800d920 	.word	0x0800d920

08001948 <HAL_TIM_IC_CaptureCallback>:
void print_note_to_com_port() {
	char buffer[50];
	sprintf(buffer, "%%lu \r\n", all_notes[current_note]);
	CDC_Transmit_FS((uint8_t*) buffer, strlen(buffer));
}
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
	if (htim == &htim1) {
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	4a34      	ldr	r2, [pc, #208]	; (8001a24 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d103      	bne.n	8001960 <HAL_TIM_IC_CaptureCallback+0x18>
		current_timer = 0;
 8001958:	4b33      	ldr	r3, [pc, #204]	; (8001a28 <HAL_TIM_IC_CaptureCallback+0xe0>)
 800195a:	2200      	movs	r2, #0
 800195c:	701a      	strb	r2, [r3, #0]
 800195e:	e00a      	b.n	8001976 <HAL_TIM_IC_CaptureCallback+0x2e>
	} else if (htim == &htim2) {
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	4a32      	ldr	r2, [pc, #200]	; (8001a2c <HAL_TIM_IC_CaptureCallback+0xe4>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d103      	bne.n	8001970 <HAL_TIM_IC_CaptureCallback+0x28>
		current_timer = 1;
 8001968:	4b2f      	ldr	r3, [pc, #188]	; (8001a28 <HAL_TIM_IC_CaptureCallback+0xe0>)
 800196a:	2201      	movs	r2, #1
 800196c:	701a      	strb	r2, [r3, #0]
 800196e:	e002      	b.n	8001976 <HAL_TIM_IC_CaptureCallback+0x2e>
	} else {
		current_timer = 2;
 8001970:	4b2d      	ldr	r3, [pc, #180]	; (8001a28 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8001972:	2202      	movs	r2, #2
 8001974:	701a      	strb	r2, [r3, #0]
	}
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	7f1b      	ldrb	r3, [r3, #28]
 800197a:	2b01      	cmp	r3, #1
 800197c:	d14e      	bne.n	8001a1c <HAL_TIM_IC_CaptureCallback+0xd4>

		if (is_first_captured == 0) // if the first rising edge is not captured
 800197e:	4b2c      	ldr	r3, [pc, #176]	; (8001a30 <HAL_TIM_IC_CaptureCallback+0xe8>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d10d      	bne.n	80019a2 <HAL_TIM_IC_CaptureCallback+0x5a>
				{
			finished_one_measurement = 0;
 8001986:	4b2b      	ldr	r3, [pc, #172]	; (8001a34 <HAL_TIM_IC_CaptureCallback+0xec>)
 8001988:	2200      	movs	r2, #0
 800198a:	701a      	strb	r2, [r3, #0]
			IC_val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 800198c:	2100      	movs	r1, #0
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	f004 fa4c 	bl	8005e2c <HAL_TIM_ReadCapturedValue>
 8001994:	4603      	mov	r3, r0
 8001996:	4a28      	ldr	r2, [pc, #160]	; (8001a38 <HAL_TIM_IC_CaptureCallback+0xf0>)
 8001998:	6013      	str	r3, [r2, #0]
			is_first_captured = 1;  // set the first captured as true
 800199a:	4b25      	ldr	r3, [pc, #148]	; (8001a30 <HAL_TIM_IC_CaptureCallback+0xe8>)
 800199c:	2201      	movs	r2, #1
 800199e:	601a      	str	r2, [r3, #0]
			is_first_captured = 0; // set it back to false

			finished_one_measurement = 1;
		}
	}
}
 80019a0:	e03c      	b.n	8001a1c <HAL_TIM_IC_CaptureCallback+0xd4>
			IC_val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read second value
 80019a2:	2100      	movs	r1, #0
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	f004 fa41 	bl	8005e2c <HAL_TIM_ReadCapturedValue>
 80019aa:	4603      	mov	r3, r0
 80019ac:	4a23      	ldr	r2, [pc, #140]	; (8001a3c <HAL_TIM_IC_CaptureCallback+0xf4>)
 80019ae:	6013      	str	r3, [r2, #0]
			if (IC_val2 > IC_val1) {
 80019b0:	4b22      	ldr	r3, [pc, #136]	; (8001a3c <HAL_TIM_IC_CaptureCallback+0xf4>)
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	4b20      	ldr	r3, [pc, #128]	; (8001a38 <HAL_TIM_IC_CaptureCallback+0xf0>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d907      	bls.n	80019cc <HAL_TIM_IC_CaptureCallback+0x84>
				period_ticks = IC_val2 - IC_val1;
 80019bc:	4b1f      	ldr	r3, [pc, #124]	; (8001a3c <HAL_TIM_IC_CaptureCallback+0xf4>)
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	4b1d      	ldr	r3, [pc, #116]	; (8001a38 <HAL_TIM_IC_CaptureCallback+0xf0>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	4a1e      	ldr	r2, [pc, #120]	; (8001a40 <HAL_TIM_IC_CaptureCallback+0xf8>)
 80019c8:	6013      	str	r3, [r2, #0]
 80019ca:	e00d      	b.n	80019e8 <HAL_TIM_IC_CaptureCallback+0xa0>
			else if (IC_val1 > IC_val2) {
 80019cc:	4b1a      	ldr	r3, [pc, #104]	; (8001a38 <HAL_TIM_IC_CaptureCallback+0xf0>)
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	4b1a      	ldr	r3, [pc, #104]	; (8001a3c <HAL_TIM_IC_CaptureCallback+0xf4>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d907      	bls.n	80019e8 <HAL_TIM_IC_CaptureCallback+0xa0>
				period_ticks = (0xffffffff - IC_val1) + IC_val2; //0xffffffff = 4 294 967 295
 80019d8:	4b18      	ldr	r3, [pc, #96]	; (8001a3c <HAL_TIM_IC_CaptureCallback+0xf4>)
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	4b16      	ldr	r3, [pc, #88]	; (8001a38 <HAL_TIM_IC_CaptureCallback+0xf0>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	3b01      	subs	r3, #1
 80019e4:	4a16      	ldr	r2, [pc, #88]	; (8001a40 <HAL_TIM_IC_CaptureCallback+0xf8>)
 80019e6:	6013      	str	r3, [r2, #0]
			float refClock = TIMCLOCK / (PRESCALAR);
 80019e8:	4b16      	ldr	r3, [pc, #88]	; (8001a44 <HAL_TIM_IC_CaptureCallback+0xfc>)
 80019ea:	60fb      	str	r3, [r7, #12]
			frequency = refClock / period_ticks;
 80019ec:	4b14      	ldr	r3, [pc, #80]	; (8001a40 <HAL_TIM_IC_CaptureCallback+0xf8>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7ff f8ff 	bl	8000bf4 <__aeabi_ui2f>
 80019f6:	4603      	mov	r3, r0
 80019f8:	4619      	mov	r1, r3
 80019fa:	68f8      	ldr	r0, [r7, #12]
 80019fc:	f7ff fa06 	bl	8000e0c <__aeabi_fdiv>
 8001a00:	4603      	mov	r3, r0
 8001a02:	461a      	mov	r2, r3
 8001a04:	4b10      	ldr	r3, [pc, #64]	; (8001a48 <HAL_TIM_IC_CaptureCallback+0x100>)
 8001a06:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	625a      	str	r2, [r3, #36]	; 0x24
			is_first_captured = 0; // set it back to false
 8001a10:	4b07      	ldr	r3, [pc, #28]	; (8001a30 <HAL_TIM_IC_CaptureCallback+0xe8>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	601a      	str	r2, [r3, #0]
			finished_one_measurement = 1;
 8001a16:	4b07      	ldr	r3, [pc, #28]	; (8001a34 <HAL_TIM_IC_CaptureCallback+0xec>)
 8001a18:	2201      	movs	r2, #1
 8001a1a:	701a      	strb	r2, [r3, #0]
}
 8001a1c:	bf00      	nop
 8001a1e:	3710      	adds	r7, #16
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	20000374 	.word	0x20000374
 8001a28:	200004a9 	.word	0x200004a9
 8001a2c:	200003bc 	.word	0x200003bc
 8001a30:	200004a0 	.word	0x200004a0
 8001a34:	200004a8 	.word	0x200004a8
 8001a38:	20000494 	.word	0x20000494
 8001a3c:	20000498 	.word	0x20000498
 8001a40:	2000049c 	.word	0x2000049c
 8001a44:	4c895440 	.word	0x4c895440
 8001a48:	200004a4 	.word	0x200004a4

08001a4c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a50:	b672      	cpsid	i
}
 8001a52:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001a54:	e7fe      	b.n	8001a54 <Error_Handler+0x8>
	...

08001a58 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a5e:	4b1d      	ldr	r3, [pc, #116]	; (8001ad4 <HAL_MspInit+0x7c>)
 8001a60:	699b      	ldr	r3, [r3, #24]
 8001a62:	4a1c      	ldr	r2, [pc, #112]	; (8001ad4 <HAL_MspInit+0x7c>)
 8001a64:	f043 0301 	orr.w	r3, r3, #1
 8001a68:	6193      	str	r3, [r2, #24]
 8001a6a:	4b1a      	ldr	r3, [pc, #104]	; (8001ad4 <HAL_MspInit+0x7c>)
 8001a6c:	699b      	ldr	r3, [r3, #24]
 8001a6e:	f003 0301 	and.w	r3, r3, #1
 8001a72:	60bb      	str	r3, [r7, #8]
 8001a74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a76:	4b17      	ldr	r3, [pc, #92]	; (8001ad4 <HAL_MspInit+0x7c>)
 8001a78:	69db      	ldr	r3, [r3, #28]
 8001a7a:	4a16      	ldr	r2, [pc, #88]	; (8001ad4 <HAL_MspInit+0x7c>)
 8001a7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a80:	61d3      	str	r3, [r2, #28]
 8001a82:	4b14      	ldr	r3, [pc, #80]	; (8001ad4 <HAL_MspInit+0x7c>)
 8001a84:	69db      	ldr	r3, [r3, #28]
 8001a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a8a:	607b      	str	r3, [r7, #4]
 8001a8c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001a8e:	2200      	movs	r2, #0
 8001a90:	2100      	movs	r1, #0
 8001a92:	2005      	movs	r0, #5
 8001a94:	f001 f8cf 	bl	8002c36 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001a98:	2005      	movs	r0, #5
 8001a9a:	f001 f8e8 	bl	8002c6e <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	2100      	movs	r1, #0
 8001aa2:	2005      	movs	r0, #5
 8001aa4:	f001 f8c7 	bl	8002c36 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001aa8:	2005      	movs	r0, #5
 8001aaa:	f001 f8e0 	bl	8002c6e <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001aae:	4b0a      	ldr	r3, [pc, #40]	; (8001ad8 <HAL_MspInit+0x80>)
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	60fb      	str	r3, [r7, #12]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001aba:	60fb      	str	r3, [r7, #12]
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ac2:	60fb      	str	r3, [r7, #12]
 8001ac4:	4a04      	ldr	r2, [pc, #16]	; (8001ad8 <HAL_MspInit+0x80>)
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001aca:	bf00      	nop
 8001acc:	3710      	adds	r7, #16
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	40021000 	.word	0x40021000
 8001ad8:	40010000 	.word	0x40010000

08001adc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b08c      	sub	sp, #48	; 0x30
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae4:	f107 0320 	add.w	r3, r7, #32
 8001ae8:	2200      	movs	r2, #0
 8001aea:	601a      	str	r2, [r3, #0]
 8001aec:	605a      	str	r2, [r3, #4]
 8001aee:	609a      	str	r2, [r3, #8]
 8001af0:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a59      	ldr	r2, [pc, #356]	; (8001c5c <HAL_TIM_Base_MspInit+0x180>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d145      	bne.n	8001b88 <HAL_TIM_Base_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001afc:	4b58      	ldr	r3, [pc, #352]	; (8001c60 <HAL_TIM_Base_MspInit+0x184>)
 8001afe:	699b      	ldr	r3, [r3, #24]
 8001b00:	4a57      	ldr	r2, [pc, #348]	; (8001c60 <HAL_TIM_Base_MspInit+0x184>)
 8001b02:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b06:	6193      	str	r3, [r2, #24]
 8001b08:	4b55      	ldr	r3, [pc, #340]	; (8001c60 <HAL_TIM_Base_MspInit+0x184>)
 8001b0a:	699b      	ldr	r3, [r3, #24]
 8001b0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b10:	61fb      	str	r3, [r7, #28]
 8001b12:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b14:	4b52      	ldr	r3, [pc, #328]	; (8001c60 <HAL_TIM_Base_MspInit+0x184>)
 8001b16:	699b      	ldr	r3, [r3, #24]
 8001b18:	4a51      	ldr	r2, [pc, #324]	; (8001c60 <HAL_TIM_Base_MspInit+0x184>)
 8001b1a:	f043 0304 	orr.w	r3, r3, #4
 8001b1e:	6193      	str	r3, [r2, #24]
 8001b20:	4b4f      	ldr	r3, [pc, #316]	; (8001c60 <HAL_TIM_Base_MspInit+0x184>)
 8001b22:	699b      	ldr	r3, [r3, #24]
 8001b24:	f003 0304 	and.w	r3, r3, #4
 8001b28:	61bb      	str	r3, [r7, #24]
 8001b2a:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = A8_TRIG_IN_Pin;
 8001b2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b32:	2300      	movs	r3, #0
 8001b34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b36:	2300      	movs	r3, #0
 8001b38:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(A8_TRIG_IN_GPIO_Port, &GPIO_InitStruct);
 8001b3a:	f107 0320 	add.w	r3, r7, #32
 8001b3e:	4619      	mov	r1, r3
 8001b40:	4848      	ldr	r0, [pc, #288]	; (8001c64 <HAL_TIM_Base_MspInit+0x188>)
 8001b42:	f001 f8af 	bl	8002ca4 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8001b46:	2200      	movs	r2, #0
 8001b48:	2100      	movs	r1, #0
 8001b4a:	2018      	movs	r0, #24
 8001b4c:	f001 f873 	bl	8002c36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8001b50:	2018      	movs	r0, #24
 8001b52:	f001 f88c 	bl	8002c6e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001b56:	2200      	movs	r2, #0
 8001b58:	2100      	movs	r1, #0
 8001b5a:	2019      	movs	r0, #25
 8001b5c:	f001 f86b 	bl	8002c36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001b60:	2019      	movs	r0, #25
 8001b62:	f001 f884 	bl	8002c6e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8001b66:	2200      	movs	r2, #0
 8001b68:	2100      	movs	r1, #0
 8001b6a:	201a      	movs	r0, #26
 8001b6c:	f001 f863 	bl	8002c36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8001b70:	201a      	movs	r0, #26
 8001b72:	f001 f87c 	bl	8002c6e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001b76:	2200      	movs	r2, #0
 8001b78:	2100      	movs	r1, #0
 8001b7a:	201b      	movs	r0, #27
 8001b7c:	f001 f85b 	bl	8002c36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001b80:	201b      	movs	r0, #27
 8001b82:	f001 f874 	bl	8002c6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001b86:	e064      	b.n	8001c52 <HAL_TIM_Base_MspInit+0x176>
  else if(htim_base->Instance==TIM2)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b90:	d12c      	bne.n	8001bec <HAL_TIM_Base_MspInit+0x110>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b92:	4b33      	ldr	r3, [pc, #204]	; (8001c60 <HAL_TIM_Base_MspInit+0x184>)
 8001b94:	69db      	ldr	r3, [r3, #28]
 8001b96:	4a32      	ldr	r2, [pc, #200]	; (8001c60 <HAL_TIM_Base_MspInit+0x184>)
 8001b98:	f043 0301 	orr.w	r3, r3, #1
 8001b9c:	61d3      	str	r3, [r2, #28]
 8001b9e:	4b30      	ldr	r3, [pc, #192]	; (8001c60 <HAL_TIM_Base_MspInit+0x184>)
 8001ba0:	69db      	ldr	r3, [r3, #28]
 8001ba2:	f003 0301 	and.w	r3, r3, #1
 8001ba6:	617b      	str	r3, [r7, #20]
 8001ba8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001baa:	4b2d      	ldr	r3, [pc, #180]	; (8001c60 <HAL_TIM_Base_MspInit+0x184>)
 8001bac:	699b      	ldr	r3, [r3, #24]
 8001bae:	4a2c      	ldr	r2, [pc, #176]	; (8001c60 <HAL_TIM_Base_MspInit+0x184>)
 8001bb0:	f043 0304 	orr.w	r3, r3, #4
 8001bb4:	6193      	str	r3, [r2, #24]
 8001bb6:	4b2a      	ldr	r3, [pc, #168]	; (8001c60 <HAL_TIM_Base_MspInit+0x184>)
 8001bb8:	699b      	ldr	r3, [r3, #24]
 8001bba:	f003 0304 	and.w	r3, r3, #4
 8001bbe:	613b      	str	r3, [r7, #16]
 8001bc0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bce:	f107 0320 	add.w	r3, r7, #32
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	4823      	ldr	r0, [pc, #140]	; (8001c64 <HAL_TIM_Base_MspInit+0x188>)
 8001bd6:	f001 f865 	bl	8002ca4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001bda:	2200      	movs	r2, #0
 8001bdc:	2100      	movs	r1, #0
 8001bde:	201c      	movs	r0, #28
 8001be0:	f001 f829 	bl	8002c36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001be4:	201c      	movs	r0, #28
 8001be6:	f001 f842 	bl	8002c6e <HAL_NVIC_EnableIRQ>
}
 8001bea:	e032      	b.n	8001c52 <HAL_TIM_Base_MspInit+0x176>
  else if(htim_base->Instance==TIM3)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a1d      	ldr	r2, [pc, #116]	; (8001c68 <HAL_TIM_Base_MspInit+0x18c>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d114      	bne.n	8001c20 <HAL_TIM_Base_MspInit+0x144>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001bf6:	4b1a      	ldr	r3, [pc, #104]	; (8001c60 <HAL_TIM_Base_MspInit+0x184>)
 8001bf8:	69db      	ldr	r3, [r3, #28]
 8001bfa:	4a19      	ldr	r2, [pc, #100]	; (8001c60 <HAL_TIM_Base_MspInit+0x184>)
 8001bfc:	f043 0302 	orr.w	r3, r3, #2
 8001c00:	61d3      	str	r3, [r2, #28]
 8001c02:	4b17      	ldr	r3, [pc, #92]	; (8001c60 <HAL_TIM_Base_MspInit+0x184>)
 8001c04:	69db      	ldr	r3, [r3, #28]
 8001c06:	f003 0302 	and.w	r3, r3, #2
 8001c0a:	60fb      	str	r3, [r7, #12]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001c0e:	2200      	movs	r2, #0
 8001c10:	2100      	movs	r1, #0
 8001c12:	201d      	movs	r0, #29
 8001c14:	f001 f80f 	bl	8002c36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001c18:	201d      	movs	r0, #29
 8001c1a:	f001 f828 	bl	8002c6e <HAL_NVIC_EnableIRQ>
}
 8001c1e:	e018      	b.n	8001c52 <HAL_TIM_Base_MspInit+0x176>
  else if(htim_base->Instance==TIM4)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a11      	ldr	r2, [pc, #68]	; (8001c6c <HAL_TIM_Base_MspInit+0x190>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d113      	bne.n	8001c52 <HAL_TIM_Base_MspInit+0x176>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001c2a:	4b0d      	ldr	r3, [pc, #52]	; (8001c60 <HAL_TIM_Base_MspInit+0x184>)
 8001c2c:	69db      	ldr	r3, [r3, #28]
 8001c2e:	4a0c      	ldr	r2, [pc, #48]	; (8001c60 <HAL_TIM_Base_MspInit+0x184>)
 8001c30:	f043 0304 	orr.w	r3, r3, #4
 8001c34:	61d3      	str	r3, [r2, #28]
 8001c36:	4b0a      	ldr	r3, [pc, #40]	; (8001c60 <HAL_TIM_Base_MspInit+0x184>)
 8001c38:	69db      	ldr	r3, [r3, #28]
 8001c3a:	f003 0304 	and.w	r3, r3, #4
 8001c3e:	60bb      	str	r3, [r7, #8]
 8001c40:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001c42:	2200      	movs	r2, #0
 8001c44:	2100      	movs	r1, #0
 8001c46:	201e      	movs	r0, #30
 8001c48:	f000 fff5 	bl	8002c36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001c4c:	201e      	movs	r0, #30
 8001c4e:	f001 f80e 	bl	8002c6e <HAL_NVIC_EnableIRQ>
}
 8001c52:	bf00      	nop
 8001c54:	3730      	adds	r7, #48	; 0x30
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	40012c00 	.word	0x40012c00
 8001c60:	40021000 	.word	0x40021000
 8001c64:	40010800 	.word	0x40010800
 8001c68:	40000400 	.word	0x40000400
 8001c6c:	40000800 	.word	0x40000800

08001c70 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b08a      	sub	sp, #40	; 0x28
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c78:	f107 0318 	add.w	r3, r7, #24
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	601a      	str	r2, [r3, #0]
 8001c80:	605a      	str	r2, [r3, #4]
 8001c82:	609a      	str	r2, [r3, #8]
 8001c84:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a2b      	ldr	r2, [pc, #172]	; (8001d38 <HAL_TIM_MspPostInit+0xc8>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d130      	bne.n	8001cf2 <HAL_TIM_MspPostInit+0x82>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c90:	4b2a      	ldr	r3, [pc, #168]	; (8001d3c <HAL_TIM_MspPostInit+0xcc>)
 8001c92:	699b      	ldr	r3, [r3, #24]
 8001c94:	4a29      	ldr	r2, [pc, #164]	; (8001d3c <HAL_TIM_MspPostInit+0xcc>)
 8001c96:	f043 0304 	orr.w	r3, r3, #4
 8001c9a:	6193      	str	r3, [r2, #24]
 8001c9c:	4b27      	ldr	r3, [pc, #156]	; (8001d3c <HAL_TIM_MspPostInit+0xcc>)
 8001c9e:	699b      	ldr	r3, [r3, #24]
 8001ca0:	f003 0304 	and.w	r3, r3, #4
 8001ca4:	617b      	str	r3, [r7, #20]
 8001ca6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ca8:	4b24      	ldr	r3, [pc, #144]	; (8001d3c <HAL_TIM_MspPostInit+0xcc>)
 8001caa:	699b      	ldr	r3, [r3, #24]
 8001cac:	4a23      	ldr	r2, [pc, #140]	; (8001d3c <HAL_TIM_MspPostInit+0xcc>)
 8001cae:	f043 0308 	orr.w	r3, r3, #8
 8001cb2:	6193      	str	r3, [r2, #24]
 8001cb4:	4b21      	ldr	r3, [pc, #132]	; (8001d3c <HAL_TIM_MspPostInit+0xcc>)
 8001cb6:	699b      	ldr	r3, [r3, #24]
 8001cb8:	f003 0308 	and.w	r3, r3, #8
 8001cbc:	613b      	str	r3, [r7, #16]
 8001cbe:	693b      	ldr	r3, [r7, #16]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001cc0:	23c0      	movs	r3, #192	; 0xc0
 8001cc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc8:	2302      	movs	r3, #2
 8001cca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ccc:	f107 0318 	add.w	r3, r7, #24
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	481b      	ldr	r0, [pc, #108]	; (8001d40 <HAL_TIM_MspPostInit+0xd0>)
 8001cd4:	f000 ffe6 	bl	8002ca4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cdc:	2302      	movs	r3, #2
 8001cde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ce4:	f107 0318 	add.w	r3, r7, #24
 8001ce8:	4619      	mov	r1, r3
 8001cea:	4816      	ldr	r0, [pc, #88]	; (8001d44 <HAL_TIM_MspPostInit+0xd4>)
 8001cec:	f000 ffda 	bl	8002ca4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001cf0:	e01d      	b.n	8001d2e <HAL_TIM_MspPostInit+0xbe>
  else if(htim->Instance==TIM4)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a14      	ldr	r2, [pc, #80]	; (8001d48 <HAL_TIM_MspPostInit+0xd8>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d118      	bne.n	8001d2e <HAL_TIM_MspPostInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cfc:	4b0f      	ldr	r3, [pc, #60]	; (8001d3c <HAL_TIM_MspPostInit+0xcc>)
 8001cfe:	699b      	ldr	r3, [r3, #24]
 8001d00:	4a0e      	ldr	r2, [pc, #56]	; (8001d3c <HAL_TIM_MspPostInit+0xcc>)
 8001d02:	f043 0308 	orr.w	r3, r3, #8
 8001d06:	6193      	str	r3, [r2, #24]
 8001d08:	4b0c      	ldr	r3, [pc, #48]	; (8001d3c <HAL_TIM_MspPostInit+0xcc>)
 8001d0a:	699b      	ldr	r3, [r3, #24]
 8001d0c:	f003 0308 	and.w	r3, r3, #8
 8001d10:	60fb      	str	r3, [r7, #12]
 8001d12:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001d14:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001d18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d1e:	2302      	movs	r3, #2
 8001d20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d22:	f107 0318 	add.w	r3, r7, #24
 8001d26:	4619      	mov	r1, r3
 8001d28:	4806      	ldr	r0, [pc, #24]	; (8001d44 <HAL_TIM_MspPostInit+0xd4>)
 8001d2a:	f000 ffbb 	bl	8002ca4 <HAL_GPIO_Init>
}
 8001d2e:	bf00      	nop
 8001d30:	3728      	adds	r7, #40	; 0x28
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	40000400 	.word	0x40000400
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	40010800 	.word	0x40010800
 8001d44:	40010c00 	.word	0x40010c00
 8001d48:	40000800 	.word	0x40000800

08001d4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d50:	e7fe      	b.n	8001d50 <NMI_Handler+0x4>

08001d52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d52:	b480      	push	{r7}
 8001d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d56:	e7fe      	b.n	8001d56 <HardFault_Handler+0x4>

08001d58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d5c:	e7fe      	b.n	8001d5c <MemManage_Handler+0x4>

08001d5e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d5e:	b480      	push	{r7}
 8001d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d62:	e7fe      	b.n	8001d62 <BusFault_Handler+0x4>

08001d64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d68:	e7fe      	b.n	8001d68 <UsageFault_Handler+0x4>

08001d6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d6e:	bf00      	nop
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bc80      	pop	{r7}
 8001d74:	4770      	bx	lr

08001d76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d76:	b480      	push	{r7}
 8001d78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d7a:	bf00      	nop
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bc80      	pop	{r7}
 8001d80:	4770      	bx	lr

08001d82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d82:	b480      	push	{r7}
 8001d84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d86:	bf00      	nop
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bc80      	pop	{r7}
 8001d8c:	4770      	bx	lr

08001d8e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d92:	f000 fe39 	bl	8002a08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d96:	bf00      	nop
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001d9a:	b480      	push	{r7}
 8001d9c:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001d9e:	bf00      	nop
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bc80      	pop	{r7}
 8001da4:	4770      	bx	lr
	...

08001da8 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001dac:	4802      	ldr	r0, [pc, #8]	; (8001db8 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8001dae:	f001 fa46 	bl	800323e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8001db2:	bf00      	nop
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	20001148 	.word	0x20001148

08001dbc <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001dc0:	4802      	ldr	r0, [pc, #8]	; (8001dcc <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001dc2:	f001 fa3c 	bl	800323e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001dc6:	bf00      	nop
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	20001148 	.word	0x20001148

08001dd0 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001dd4:	4802      	ldr	r0, [pc, #8]	; (8001de0 <TIM1_BRK_IRQHandler+0x10>)
 8001dd6:	f003 fd0b 	bl	80057f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8001dda:	bf00      	nop
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	20000374 	.word	0x20000374

08001de4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001de8:	4802      	ldr	r0, [pc, #8]	; (8001df4 <TIM1_UP_IRQHandler+0x10>)
 8001dea:	f003 fd01 	bl	80057f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001dee:	bf00      	nop
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	20000374 	.word	0x20000374

08001df8 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001dfc:	4802      	ldr	r0, [pc, #8]	; (8001e08 <TIM1_TRG_COM_IRQHandler+0x10>)
 8001dfe:	f003 fcf7 	bl	80057f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8001e02:	bf00      	nop
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	20000374 	.word	0x20000374

08001e0c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e10:	4802      	ldr	r0, [pc, #8]	; (8001e1c <TIM1_CC_IRQHandler+0x10>)
 8001e12:	f003 fced 	bl	80057f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001e16:	bf00      	nop
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	20000374 	.word	0x20000374

08001e20 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001e24:	4802      	ldr	r0, [pc, #8]	; (8001e30 <TIM2_IRQHandler+0x10>)
 8001e26:	f003 fce3 	bl	80057f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001e2a:	bf00      	nop
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	200003bc 	.word	0x200003bc

08001e34 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001e38:	4802      	ldr	r0, [pc, #8]	; (8001e44 <TIM3_IRQHandler+0x10>)
 8001e3a:	f003 fcd9 	bl	80057f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001e3e:	bf00      	nop
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	20000404 	.word	0x20000404

08001e48 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001e4c:	4802      	ldr	r0, [pc, #8]	; (8001e58 <TIM4_IRQHandler+0x10>)
 8001e4e:	f003 fccf 	bl	80057f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001e52:	bf00      	nop
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	2000044c 	.word	0x2000044c

08001e5c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
	return 1;
 8001e60:	2301      	movs	r3, #1
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bc80      	pop	{r7}
 8001e68:	4770      	bx	lr

08001e6a <_kill>:

int _kill(int pid, int sig)
{
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b082      	sub	sp, #8
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
 8001e72:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001e74:	f008 fdba 	bl	800a9ec <__errno>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2216      	movs	r2, #22
 8001e7c:	601a      	str	r2, [r3, #0]
	return -1;
 8001e7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}

08001e8a <_exit>:

void _exit (int status)
{
 8001e8a:	b580      	push	{r7, lr}
 8001e8c:	b082      	sub	sp, #8
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001e92:	f04f 31ff 	mov.w	r1, #4294967295
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f7ff ffe7 	bl	8001e6a <_kill>
	while (1) {}		/* Make sure we hang here */
 8001e9c:	e7fe      	b.n	8001e9c <_exit+0x12>

08001e9e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e9e:	b580      	push	{r7, lr}
 8001ea0:	b086      	sub	sp, #24
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	60f8      	str	r0, [r7, #12]
 8001ea6:	60b9      	str	r1, [r7, #8]
 8001ea8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eaa:	2300      	movs	r3, #0
 8001eac:	617b      	str	r3, [r7, #20]
 8001eae:	e00a      	b.n	8001ec6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001eb0:	f3af 8000 	nop.w
 8001eb4:	4601      	mov	r1, r0
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	1c5a      	adds	r2, r3, #1
 8001eba:	60ba      	str	r2, [r7, #8]
 8001ebc:	b2ca      	uxtb	r2, r1
 8001ebe:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	3301      	adds	r3, #1
 8001ec4:	617b      	str	r3, [r7, #20]
 8001ec6:	697a      	ldr	r2, [r7, #20]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	dbf0      	blt.n	8001eb0 <_read+0x12>
	}

return len;
 8001ece:	687b      	ldr	r3, [r7, #4]
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3718      	adds	r7, #24
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}

08001ed8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b086      	sub	sp, #24
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	60f8      	str	r0, [r7, #12]
 8001ee0:	60b9      	str	r1, [r7, #8]
 8001ee2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	617b      	str	r3, [r7, #20]
 8001ee8:	e009      	b.n	8001efe <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	1c5a      	adds	r2, r3, #1
 8001eee:	60ba      	str	r2, [r7, #8]
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	3301      	adds	r3, #1
 8001efc:	617b      	str	r3, [r7, #20]
 8001efe:	697a      	ldr	r2, [r7, #20]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	429a      	cmp	r2, r3
 8001f04:	dbf1      	blt.n	8001eea <_write+0x12>
	}
	return len;
 8001f06:	687b      	ldr	r3, [r7, #4]
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3718      	adds	r7, #24
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}

08001f10 <_close>:

int _close(int file)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
	return -1;
 8001f18:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bc80      	pop	{r7}
 8001f24:	4770      	bx	lr

08001f26 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f26:	b480      	push	{r7}
 8001f28:	b083      	sub	sp, #12
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	6078      	str	r0, [r7, #4]
 8001f2e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f36:	605a      	str	r2, [r3, #4]
	return 0;
 8001f38:	2300      	movs	r3, #0
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	370c      	adds	r7, #12
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bc80      	pop	{r7}
 8001f42:	4770      	bx	lr

08001f44 <_isatty>:

int _isatty(int file)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
	return 1;
 8001f4c:	2301      	movs	r3, #1
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	370c      	adds	r7, #12
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bc80      	pop	{r7}
 8001f56:	4770      	bx	lr

08001f58 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b085      	sub	sp, #20
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	60f8      	str	r0, [r7, #12]
 8001f60:	60b9      	str	r1, [r7, #8]
 8001f62:	607a      	str	r2, [r7, #4]
	return 0;
 8001f64:	2300      	movs	r3, #0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3714      	adds	r7, #20
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bc80      	pop	{r7}
 8001f6e:	4770      	bx	lr

08001f70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b086      	sub	sp, #24
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f78:	4a14      	ldr	r2, [pc, #80]	; (8001fcc <_sbrk+0x5c>)
 8001f7a:	4b15      	ldr	r3, [pc, #84]	; (8001fd0 <_sbrk+0x60>)
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f84:	4b13      	ldr	r3, [pc, #76]	; (8001fd4 <_sbrk+0x64>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d102      	bne.n	8001f92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f8c:	4b11      	ldr	r3, [pc, #68]	; (8001fd4 <_sbrk+0x64>)
 8001f8e:	4a12      	ldr	r2, [pc, #72]	; (8001fd8 <_sbrk+0x68>)
 8001f90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f92:	4b10      	ldr	r3, [pc, #64]	; (8001fd4 <_sbrk+0x64>)
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4413      	add	r3, r2
 8001f9a:	693a      	ldr	r2, [r7, #16]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d207      	bcs.n	8001fb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fa0:	f008 fd24 	bl	800a9ec <__errno>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	220c      	movs	r2, #12
 8001fa8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001faa:	f04f 33ff 	mov.w	r3, #4294967295
 8001fae:	e009      	b.n	8001fc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fb0:	4b08      	ldr	r3, [pc, #32]	; (8001fd4 <_sbrk+0x64>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fb6:	4b07      	ldr	r3, [pc, #28]	; (8001fd4 <_sbrk+0x64>)
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4413      	add	r3, r2
 8001fbe:	4a05      	ldr	r2, [pc, #20]	; (8001fd4 <_sbrk+0x64>)
 8001fc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3718      	adds	r7, #24
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	20005000 	.word	0x20005000
 8001fd0:	00000400 	.word	0x00000400
 8001fd4:	200004b0 	.word	0x200004b0
 8001fd8:	20001668 	.word	0x20001668

08001fdc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fdc:	480c      	ldr	r0, [pc, #48]	; (8002010 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001fde:	490d      	ldr	r1, [pc, #52]	; (8002014 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001fe0:	4a0d      	ldr	r2, [pc, #52]	; (8002018 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001fe2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fe4:	e002      	b.n	8001fec <LoopCopyDataInit>

08001fe6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fe6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fe8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fea:	3304      	adds	r3, #4

08001fec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ff0:	d3f9      	bcc.n	8001fe6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ff2:	4a0a      	ldr	r2, [pc, #40]	; (800201c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ff4:	4c0a      	ldr	r4, [pc, #40]	; (8002020 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ff6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ff8:	e001      	b.n	8001ffe <LoopFillZerobss>

08001ffa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ffa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ffc:	3204      	adds	r2, #4

08001ffe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ffe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002000:	d3fb      	bcc.n	8001ffa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002002:	f000 fcb5 	bl	8002970 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002006:	f008 fcf7 	bl	800a9f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800200a:	f7fe ffc1 	bl	8000f90 <main>
  bx lr
 800200e:	4770      	bx	lr
  ldr r0, =_sdata
 8002010:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002014:	20000358 	.word	0x20000358
  ldr r2, =_sidata
 8002018:	0800deb4 	.word	0x0800deb4
  ldr r2, =_sbss
 800201c:	20000358 	.word	0x20000358
  ldr r4, =_ebss
 8002020:	20001668 	.word	0x20001668

08002024 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002024:	e7fe      	b.n	8002024 <ADC1_2_IRQHandler>
	...

08002028 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800202c:	2200      	movs	r2, #0
 800202e:	4912      	ldr	r1, [pc, #72]	; (8002078 <MX_USB_DEVICE_Init+0x50>)
 8002030:	4812      	ldr	r0, [pc, #72]	; (800207c <MX_USB_DEVICE_Init+0x54>)
 8002032:	f007 fc27 	bl	8009884 <USBD_Init>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800203c:	f7ff fd06 	bl	8001a4c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8002040:	490f      	ldr	r1, [pc, #60]	; (8002080 <MX_USB_DEVICE_Init+0x58>)
 8002042:	480e      	ldr	r0, [pc, #56]	; (800207c <MX_USB_DEVICE_Init+0x54>)
 8002044:	f007 fc56 	bl	80098f4 <USBD_RegisterClass>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800204e:	f7ff fcfd 	bl	8001a4c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8002052:	490c      	ldr	r1, [pc, #48]	; (8002084 <MX_USB_DEVICE_Init+0x5c>)
 8002054:	4809      	ldr	r0, [pc, #36]	; (800207c <MX_USB_DEVICE_Init+0x54>)
 8002056:	f007 fb79 	bl	800974c <USBD_CDC_RegisterInterface>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d001      	beq.n	8002064 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8002060:	f7ff fcf4 	bl	8001a4c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8002064:	4805      	ldr	r0, [pc, #20]	; (800207c <MX_USB_DEVICE_Init+0x54>)
 8002066:	f007 fc6b 	bl	8009940 <USBD_Start>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d001      	beq.n	8002074 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8002070:	f7ff fcec 	bl	8001a4c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8002074:	bf00      	nop
 8002076:	bd80      	pop	{r7, pc}
 8002078:	2000001c 	.word	0x2000001c
 800207c:	200004b4 	.word	0x200004b4
 8002080:	20000084 	.word	0x20000084
 8002084:	2000000c 	.word	0x2000000c

08002088 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800208c:	2200      	movs	r2, #0
 800208e:	4905      	ldr	r1, [pc, #20]	; (80020a4 <CDC_Init_FS+0x1c>)
 8002090:	4805      	ldr	r0, [pc, #20]	; (80020a8 <CDC_Init_FS+0x20>)
 8002092:	f007 fb71 	bl	8009778 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8002096:	4905      	ldr	r1, [pc, #20]	; (80020ac <CDC_Init_FS+0x24>)
 8002098:	4803      	ldr	r0, [pc, #12]	; (80020a8 <CDC_Init_FS+0x20>)
 800209a:	f007 fb86 	bl	80097aa <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800209e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	20000b60 	.word	0x20000b60
 80020a8:	200004b4 	.word	0x200004b4
 80020ac:	20000778 	.word	0x20000778

080020b0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80020b4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bc80      	pop	{r7}
 80020bc:	4770      	bx	lr
	...

080020c0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	4603      	mov	r3, r0
 80020c8:	6039      	str	r1, [r7, #0]
 80020ca:	71fb      	strb	r3, [r7, #7]
 80020cc:	4613      	mov	r3, r2
 80020ce:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80020d0:	79fb      	ldrb	r3, [r7, #7]
 80020d2:	2b23      	cmp	r3, #35	; 0x23
 80020d4:	d84a      	bhi.n	800216c <CDC_Control_FS+0xac>
 80020d6:	a201      	add	r2, pc, #4	; (adr r2, 80020dc <CDC_Control_FS+0x1c>)
 80020d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020dc:	0800216d 	.word	0x0800216d
 80020e0:	0800216d 	.word	0x0800216d
 80020e4:	0800216d 	.word	0x0800216d
 80020e8:	0800216d 	.word	0x0800216d
 80020ec:	0800216d 	.word	0x0800216d
 80020f0:	0800216d 	.word	0x0800216d
 80020f4:	0800216d 	.word	0x0800216d
 80020f8:	0800216d 	.word	0x0800216d
 80020fc:	0800216d 	.word	0x0800216d
 8002100:	0800216d 	.word	0x0800216d
 8002104:	0800216d 	.word	0x0800216d
 8002108:	0800216d 	.word	0x0800216d
 800210c:	0800216d 	.word	0x0800216d
 8002110:	0800216d 	.word	0x0800216d
 8002114:	0800216d 	.word	0x0800216d
 8002118:	0800216d 	.word	0x0800216d
 800211c:	0800216d 	.word	0x0800216d
 8002120:	0800216d 	.word	0x0800216d
 8002124:	0800216d 	.word	0x0800216d
 8002128:	0800216d 	.word	0x0800216d
 800212c:	0800216d 	.word	0x0800216d
 8002130:	0800216d 	.word	0x0800216d
 8002134:	0800216d 	.word	0x0800216d
 8002138:	0800216d 	.word	0x0800216d
 800213c:	0800216d 	.word	0x0800216d
 8002140:	0800216d 	.word	0x0800216d
 8002144:	0800216d 	.word	0x0800216d
 8002148:	0800216d 	.word	0x0800216d
 800214c:	0800216d 	.word	0x0800216d
 8002150:	0800216d 	.word	0x0800216d
 8002154:	0800216d 	.word	0x0800216d
 8002158:	0800216d 	.word	0x0800216d
 800215c:	0800216d 	.word	0x0800216d
 8002160:	0800216d 	.word	0x0800216d
 8002164:	0800216d 	.word	0x0800216d
 8002168:	0800216d 	.word	0x0800216d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800216c:	bf00      	nop
  }

  return (USBD_OK);
 800216e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8002170:	4618      	mov	r0, r3
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	bc80      	pop	{r7}
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop

0800217c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8002186:	6879      	ldr	r1, [r7, #4]
 8002188:	4805      	ldr	r0, [pc, #20]	; (80021a0 <CDC_Receive_FS+0x24>)
 800218a:	f007 fb0e 	bl	80097aa <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800218e:	4804      	ldr	r0, [pc, #16]	; (80021a0 <CDC_Receive_FS+0x24>)
 8002190:	f007 fb4d 	bl	800982e <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8002194:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8002196:	4618      	mov	r0, r3
 8002198:	3708      	adds	r7, #8
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	200004b4 	.word	0x200004b4

080021a4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b084      	sub	sp, #16
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	460b      	mov	r3, r1
 80021ae:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80021b0:	2300      	movs	r3, #0
 80021b2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80021b4:	4b0d      	ldr	r3, [pc, #52]	; (80021ec <CDC_Transmit_FS+0x48>)
 80021b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80021ba:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e00b      	b.n	80021e2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80021ca:	887b      	ldrh	r3, [r7, #2]
 80021cc:	461a      	mov	r2, r3
 80021ce:	6879      	ldr	r1, [r7, #4]
 80021d0:	4806      	ldr	r0, [pc, #24]	; (80021ec <CDC_Transmit_FS+0x48>)
 80021d2:	f007 fad1 	bl	8009778 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80021d6:	4805      	ldr	r0, [pc, #20]	; (80021ec <CDC_Transmit_FS+0x48>)
 80021d8:	f007 fafa 	bl	80097d0 <USBD_CDC_TransmitPacket>
 80021dc:	4603      	mov	r3, r0
 80021de:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80021e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3710      	adds	r7, #16
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	200004b4 	.word	0x200004b4

080021f0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	4603      	mov	r3, r0
 80021f8:	6039      	str	r1, [r7, #0]
 80021fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	2212      	movs	r2, #18
 8002200:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8002202:	4b03      	ldr	r3, [pc, #12]	; (8002210 <USBD_FS_DeviceDescriptor+0x20>)
}
 8002204:	4618      	mov	r0, r3
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	bc80      	pop	{r7}
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	20000038 	.word	0x20000038

08002214 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	4603      	mov	r3, r0
 800221c:	6039      	str	r1, [r7, #0]
 800221e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	2204      	movs	r2, #4
 8002224:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8002226:	4b03      	ldr	r3, [pc, #12]	; (8002234 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8002228:	4618      	mov	r0, r3
 800222a:	370c      	adds	r7, #12
 800222c:	46bd      	mov	sp, r7
 800222e:	bc80      	pop	{r7}
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	2000004c 	.word	0x2000004c

08002238 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	4603      	mov	r3, r0
 8002240:	6039      	str	r1, [r7, #0]
 8002242:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8002244:	79fb      	ldrb	r3, [r7, #7]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d105      	bne.n	8002256 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800224a:	683a      	ldr	r2, [r7, #0]
 800224c:	4907      	ldr	r1, [pc, #28]	; (800226c <USBD_FS_ProductStrDescriptor+0x34>)
 800224e:	4808      	ldr	r0, [pc, #32]	; (8002270 <USBD_FS_ProductStrDescriptor+0x38>)
 8002250:	f008 faee 	bl	800a830 <USBD_GetString>
 8002254:	e004      	b.n	8002260 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8002256:	683a      	ldr	r2, [r7, #0]
 8002258:	4904      	ldr	r1, [pc, #16]	; (800226c <USBD_FS_ProductStrDescriptor+0x34>)
 800225a:	4805      	ldr	r0, [pc, #20]	; (8002270 <USBD_FS_ProductStrDescriptor+0x38>)
 800225c:	f008 fae8 	bl	800a830 <USBD_GetString>
  }
  return USBD_StrDesc;
 8002260:	4b02      	ldr	r3, [pc, #8]	; (800226c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8002262:	4618      	mov	r0, r3
 8002264:	3708      	adds	r7, #8
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	20000f48 	.word	0x20000f48
 8002270:	0800d938 	.word	0x0800d938

08002274 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	4603      	mov	r3, r0
 800227c:	6039      	str	r1, [r7, #0]
 800227e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8002280:	683a      	ldr	r2, [r7, #0]
 8002282:	4904      	ldr	r1, [pc, #16]	; (8002294 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8002284:	4804      	ldr	r0, [pc, #16]	; (8002298 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8002286:	f008 fad3 	bl	800a830 <USBD_GetString>
  return USBD_StrDesc;
 800228a:	4b02      	ldr	r3, [pc, #8]	; (8002294 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800228c:	4618      	mov	r0, r3
 800228e:	3708      	adds	r7, #8
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	20000f48 	.word	0x20000f48
 8002298:	0800d950 	.word	0x0800d950

0800229c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	4603      	mov	r3, r0
 80022a4:	6039      	str	r1, [r7, #0]
 80022a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	221a      	movs	r2, #26
 80022ac:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80022ae:	f000 f843 	bl	8002338 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80022b2:	4b02      	ldr	r3, [pc, #8]	; (80022bc <USBD_FS_SerialStrDescriptor+0x20>)
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3708      	adds	r7, #8
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	20000050 	.word	0x20000050

080022c0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	4603      	mov	r3, r0
 80022c8:	6039      	str	r1, [r7, #0]
 80022ca:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80022cc:	79fb      	ldrb	r3, [r7, #7]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d105      	bne.n	80022de <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80022d2:	683a      	ldr	r2, [r7, #0]
 80022d4:	4907      	ldr	r1, [pc, #28]	; (80022f4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80022d6:	4808      	ldr	r0, [pc, #32]	; (80022f8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80022d8:	f008 faaa 	bl	800a830 <USBD_GetString>
 80022dc:	e004      	b.n	80022e8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80022de:	683a      	ldr	r2, [r7, #0]
 80022e0:	4904      	ldr	r1, [pc, #16]	; (80022f4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80022e2:	4805      	ldr	r0, [pc, #20]	; (80022f8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80022e4:	f008 faa4 	bl	800a830 <USBD_GetString>
  }
  return USBD_StrDesc;
 80022e8:	4b02      	ldr	r3, [pc, #8]	; (80022f4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3708      	adds	r7, #8
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	20000f48 	.word	0x20000f48
 80022f8:	0800d964 	.word	0x0800d964

080022fc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	4603      	mov	r3, r0
 8002304:	6039      	str	r1, [r7, #0]
 8002306:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8002308:	79fb      	ldrb	r3, [r7, #7]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d105      	bne.n	800231a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800230e:	683a      	ldr	r2, [r7, #0]
 8002310:	4907      	ldr	r1, [pc, #28]	; (8002330 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8002312:	4808      	ldr	r0, [pc, #32]	; (8002334 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8002314:	f008 fa8c 	bl	800a830 <USBD_GetString>
 8002318:	e004      	b.n	8002324 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800231a:	683a      	ldr	r2, [r7, #0]
 800231c:	4904      	ldr	r1, [pc, #16]	; (8002330 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800231e:	4805      	ldr	r0, [pc, #20]	; (8002334 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8002320:	f008 fa86 	bl	800a830 <USBD_GetString>
  }
  return USBD_StrDesc;
 8002324:	4b02      	ldr	r3, [pc, #8]	; (8002330 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8002326:	4618      	mov	r0, r3
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	20000f48 	.word	0x20000f48
 8002334:	0800d970 	.word	0x0800d970

08002338 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800233e:	4b0f      	ldr	r3, [pc, #60]	; (800237c <Get_SerialNum+0x44>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8002344:	4b0e      	ldr	r3, [pc, #56]	; (8002380 <Get_SerialNum+0x48>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800234a:	4b0e      	ldr	r3, [pc, #56]	; (8002384 <Get_SerialNum+0x4c>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8002350:	68fa      	ldr	r2, [r7, #12]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4413      	add	r3, r2
 8002356:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d009      	beq.n	8002372 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800235e:	2208      	movs	r2, #8
 8002360:	4909      	ldr	r1, [pc, #36]	; (8002388 <Get_SerialNum+0x50>)
 8002362:	68f8      	ldr	r0, [r7, #12]
 8002364:	f000 f814 	bl	8002390 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8002368:	2204      	movs	r2, #4
 800236a:	4908      	ldr	r1, [pc, #32]	; (800238c <Get_SerialNum+0x54>)
 800236c:	68b8      	ldr	r0, [r7, #8]
 800236e:	f000 f80f 	bl	8002390 <IntToUnicode>
  }
}
 8002372:	bf00      	nop
 8002374:	3710      	adds	r7, #16
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	1ffff7e8 	.word	0x1ffff7e8
 8002380:	1ffff7ec 	.word	0x1ffff7ec
 8002384:	1ffff7f0 	.word	0x1ffff7f0
 8002388:	20000052 	.word	0x20000052
 800238c:	20000062 	.word	0x20000062

08002390 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8002390:	b480      	push	{r7}
 8002392:	b087      	sub	sp, #28
 8002394:	af00      	add	r7, sp, #0
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	60b9      	str	r1, [r7, #8]
 800239a:	4613      	mov	r3, r2
 800239c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800239e:	2300      	movs	r3, #0
 80023a0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80023a2:	2300      	movs	r3, #0
 80023a4:	75fb      	strb	r3, [r7, #23]
 80023a6:	e027      	b.n	80023f8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	0f1b      	lsrs	r3, r3, #28
 80023ac:	2b09      	cmp	r3, #9
 80023ae:	d80b      	bhi.n	80023c8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	0f1b      	lsrs	r3, r3, #28
 80023b4:	b2da      	uxtb	r2, r3
 80023b6:	7dfb      	ldrb	r3, [r7, #23]
 80023b8:	005b      	lsls	r3, r3, #1
 80023ba:	4619      	mov	r1, r3
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	440b      	add	r3, r1
 80023c0:	3230      	adds	r2, #48	; 0x30
 80023c2:	b2d2      	uxtb	r2, r2
 80023c4:	701a      	strb	r2, [r3, #0]
 80023c6:	e00a      	b.n	80023de <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	0f1b      	lsrs	r3, r3, #28
 80023cc:	b2da      	uxtb	r2, r3
 80023ce:	7dfb      	ldrb	r3, [r7, #23]
 80023d0:	005b      	lsls	r3, r3, #1
 80023d2:	4619      	mov	r1, r3
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	440b      	add	r3, r1
 80023d8:	3237      	adds	r2, #55	; 0x37
 80023da:	b2d2      	uxtb	r2, r2
 80023dc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	011b      	lsls	r3, r3, #4
 80023e2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80023e4:	7dfb      	ldrb	r3, [r7, #23]
 80023e6:	005b      	lsls	r3, r3, #1
 80023e8:	3301      	adds	r3, #1
 80023ea:	68ba      	ldr	r2, [r7, #8]
 80023ec:	4413      	add	r3, r2
 80023ee:	2200      	movs	r2, #0
 80023f0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80023f2:	7dfb      	ldrb	r3, [r7, #23]
 80023f4:	3301      	adds	r3, #1
 80023f6:	75fb      	strb	r3, [r7, #23]
 80023f8:	7dfa      	ldrb	r2, [r7, #23]
 80023fa:	79fb      	ldrb	r3, [r7, #7]
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d3d3      	bcc.n	80023a8 <IntToUnicode+0x18>
  }
}
 8002400:	bf00      	nop
 8002402:	bf00      	nop
 8002404:	371c      	adds	r7, #28
 8002406:	46bd      	mov	sp, r7
 8002408:	bc80      	pop	{r7}
 800240a:	4770      	bx	lr

0800240c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b084      	sub	sp, #16
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a11      	ldr	r2, [pc, #68]	; (8002460 <HAL_PCD_MspInit+0x54>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d11b      	bne.n	8002456 <HAL_PCD_MspInit+0x4a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800241e:	4b11      	ldr	r3, [pc, #68]	; (8002464 <HAL_PCD_MspInit+0x58>)
 8002420:	69db      	ldr	r3, [r3, #28]
 8002422:	4a10      	ldr	r2, [pc, #64]	; (8002464 <HAL_PCD_MspInit+0x58>)
 8002424:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002428:	61d3      	str	r3, [r2, #28]
 800242a:	4b0e      	ldr	r3, [pc, #56]	; (8002464 <HAL_PCD_MspInit+0x58>)
 800242c:	69db      	ldr	r3, [r3, #28]
 800242e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002432:	60fb      	str	r3, [r7, #12]
 8002434:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 8002436:	2200      	movs	r2, #0
 8002438:	2100      	movs	r1, #0
 800243a:	2013      	movs	r0, #19
 800243c:	f000 fbfb 	bl	8002c36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8002440:	2013      	movs	r0, #19
 8002442:	f000 fc14 	bl	8002c6e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8002446:	2200      	movs	r2, #0
 8002448:	2100      	movs	r1, #0
 800244a:	2014      	movs	r0, #20
 800244c:	f000 fbf3 	bl	8002c36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8002450:	2014      	movs	r0, #20
 8002452:	f000 fc0c 	bl	8002c6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8002456:	bf00      	nop
 8002458:	3710      	adds	r7, #16
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	40005c00 	.word	0x40005c00
 8002464:	40021000 	.word	0x40021000

08002468 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800247c:	4619      	mov	r1, r3
 800247e:	4610      	mov	r0, r2
 8002480:	f007 faa6 	bl	80099d0 <USBD_LL_SetupStage>
}
 8002484:	bf00      	nop
 8002486:	3708      	adds	r7, #8
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}

0800248c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	460b      	mov	r3, r1
 8002496:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800249e:	78fa      	ldrb	r2, [r7, #3]
 80024a0:	6879      	ldr	r1, [r7, #4]
 80024a2:	4613      	mov	r3, r2
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	4413      	add	r3, r2
 80024a8:	00db      	lsls	r3, r3, #3
 80024aa:	440b      	add	r3, r1
 80024ac:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	78fb      	ldrb	r3, [r7, #3]
 80024b4:	4619      	mov	r1, r3
 80024b6:	f007 fad8 	bl	8009a6a <USBD_LL_DataOutStage>
}
 80024ba:	bf00      	nop
 80024bc:	3708      	adds	r7, #8
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}

080024c2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80024c2:	b580      	push	{r7, lr}
 80024c4:	b082      	sub	sp, #8
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	6078      	str	r0, [r7, #4]
 80024ca:	460b      	mov	r3, r1
 80024cc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80024d4:	78fa      	ldrb	r2, [r7, #3]
 80024d6:	6879      	ldr	r1, [r7, #4]
 80024d8:	4613      	mov	r3, r2
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	4413      	add	r3, r2
 80024de:	00db      	lsls	r3, r3, #3
 80024e0:	440b      	add	r3, r1
 80024e2:	333c      	adds	r3, #60	; 0x3c
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	78fb      	ldrb	r3, [r7, #3]
 80024e8:	4619      	mov	r1, r3
 80024ea:	f007 fb2f 	bl	8009b4c <USBD_LL_DataInStage>
}
 80024ee:	bf00      	nop
 80024f0:	3708      	adds	r7, #8
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}

080024f6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80024f6:	b580      	push	{r7, lr}
 80024f8:	b082      	sub	sp, #8
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8002504:	4618      	mov	r0, r3
 8002506:	f007 fc3f 	bl	8009d88 <USBD_LL_SOF>
}
 800250a:	bf00      	nop
 800250c:	3708      	adds	r7, #8
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}

08002512 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8002512:	b580      	push	{r7, lr}
 8002514:	b084      	sub	sp, #16
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800251a:	2301      	movs	r3, #1
 800251c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	2b02      	cmp	r3, #2
 8002524:	d001      	beq.n	800252a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8002526:	f7ff fa91 	bl	8001a4c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8002530:	7bfa      	ldrb	r2, [r7, #15]
 8002532:	4611      	mov	r1, r2
 8002534:	4618      	mov	r0, r3
 8002536:	f007 fbef 	bl	8009d18 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8002540:	4618      	mov	r0, r3
 8002542:	f007 fba8 	bl	8009c96 <USBD_LL_Reset>
}
 8002546:	bf00      	nop
 8002548:	3710      	adds	r7, #16
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
	...

08002550 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800255e:	4618      	mov	r0, r3
 8002560:	f007 fbe9 	bl	8009d36 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	699b      	ldr	r3, [r3, #24]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d005      	beq.n	8002578 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800256c:	4b04      	ldr	r3, [pc, #16]	; (8002580 <HAL_PCD_SuspendCallback+0x30>)
 800256e:	691b      	ldr	r3, [r3, #16]
 8002570:	4a03      	ldr	r2, [pc, #12]	; (8002580 <HAL_PCD_SuspendCallback+0x30>)
 8002572:	f043 0306 	orr.w	r3, r3, #6
 8002576:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8002578:	bf00      	nop
 800257a:	3708      	adds	r7, #8
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}
 8002580:	e000ed00 	.word	0xe000ed00

08002584 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8002592:	4618      	mov	r0, r3
 8002594:	f007 fbe3 	bl	8009d5e <USBD_LL_Resume>
}
 8002598:	bf00      	nop
 800259a:	3708      	adds	r7, #8
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}

080025a0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80025a8:	4a28      	ldr	r2, [pc, #160]	; (800264c <USBD_LL_Init+0xac>)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	4a26      	ldr	r2, [pc, #152]	; (800264c <USBD_LL_Init+0xac>)
 80025b4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80025b8:	4b24      	ldr	r3, [pc, #144]	; (800264c <USBD_LL_Init+0xac>)
 80025ba:	4a25      	ldr	r2, [pc, #148]	; (8002650 <USBD_LL_Init+0xb0>)
 80025bc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80025be:	4b23      	ldr	r3, [pc, #140]	; (800264c <USBD_LL_Init+0xac>)
 80025c0:	2208      	movs	r2, #8
 80025c2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80025c4:	4b21      	ldr	r3, [pc, #132]	; (800264c <USBD_LL_Init+0xac>)
 80025c6:	2202      	movs	r2, #2
 80025c8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80025ca:	4b20      	ldr	r3, [pc, #128]	; (800264c <USBD_LL_Init+0xac>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80025d0:	4b1e      	ldr	r3, [pc, #120]	; (800264c <USBD_LL_Init+0xac>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80025d6:	4b1d      	ldr	r3, [pc, #116]	; (800264c <USBD_LL_Init+0xac>)
 80025d8:	2200      	movs	r2, #0
 80025da:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80025dc:	481b      	ldr	r0, [pc, #108]	; (800264c <USBD_LL_Init+0xac>)
 80025de:	f000 fcfd 	bl	8002fdc <HAL_PCD_Init>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d001      	beq.n	80025ec <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80025e8:	f7ff fa30 	bl	8001a4c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80025f2:	2318      	movs	r3, #24
 80025f4:	2200      	movs	r2, #0
 80025f6:	2100      	movs	r1, #0
 80025f8:	f002 f971 	bl	80048de <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8002602:	2358      	movs	r3, #88	; 0x58
 8002604:	2200      	movs	r2, #0
 8002606:	2180      	movs	r1, #128	; 0x80
 8002608:	f002 f969 	bl	80048de <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8002612:	23c0      	movs	r3, #192	; 0xc0
 8002614:	2200      	movs	r2, #0
 8002616:	2181      	movs	r1, #129	; 0x81
 8002618:	f002 f961 	bl	80048de <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8002622:	f44f 7388 	mov.w	r3, #272	; 0x110
 8002626:	2200      	movs	r2, #0
 8002628:	2101      	movs	r1, #1
 800262a:	f002 f958 	bl	80048de <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8002634:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002638:	2200      	movs	r2, #0
 800263a:	2182      	movs	r1, #130	; 0x82
 800263c:	f002 f94f 	bl	80048de <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8002640:	2300      	movs	r3, #0
}
 8002642:	4618      	mov	r0, r3
 8002644:	3708      	adds	r7, #8
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	20001148 	.word	0x20001148
 8002650:	40005c00 	.word	0x40005c00

08002654 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800265c:	2300      	movs	r3, #0
 800265e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8002660:	2300      	movs	r3, #0
 8002662:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800266a:	4618      	mov	r0, r3
 800266c:	f000 fdc1 	bl	80031f2 <HAL_PCD_Start>
 8002670:	4603      	mov	r3, r0
 8002672:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8002674:	7bfb      	ldrb	r3, [r7, #15]
 8002676:	4618      	mov	r0, r3
 8002678:	f000 f94e 	bl	8002918 <USBD_Get_USB_Status>
 800267c:	4603      	mov	r3, r0
 800267e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8002680:	7bbb      	ldrb	r3, [r7, #14]
}
 8002682:	4618      	mov	r0, r3
 8002684:	3710      	adds	r7, #16
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}

0800268a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800268a:	b580      	push	{r7, lr}
 800268c:	b084      	sub	sp, #16
 800268e:	af00      	add	r7, sp, #0
 8002690:	6078      	str	r0, [r7, #4]
 8002692:	4608      	mov	r0, r1
 8002694:	4611      	mov	r1, r2
 8002696:	461a      	mov	r2, r3
 8002698:	4603      	mov	r3, r0
 800269a:	70fb      	strb	r3, [r7, #3]
 800269c:	460b      	mov	r3, r1
 800269e:	70bb      	strb	r3, [r7, #2]
 80026a0:	4613      	mov	r3, r2
 80026a2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80026a4:	2300      	movs	r3, #0
 80026a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80026a8:	2300      	movs	r3, #0
 80026aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80026b2:	78bb      	ldrb	r3, [r7, #2]
 80026b4:	883a      	ldrh	r2, [r7, #0]
 80026b6:	78f9      	ldrb	r1, [r7, #3]
 80026b8:	f000 ff39 	bl	800352e <HAL_PCD_EP_Open>
 80026bc:	4603      	mov	r3, r0
 80026be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80026c0:	7bfb      	ldrb	r3, [r7, #15]
 80026c2:	4618      	mov	r0, r3
 80026c4:	f000 f928 	bl	8002918 <USBD_Get_USB_Status>
 80026c8:	4603      	mov	r3, r0
 80026ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80026cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3710      	adds	r7, #16
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}

080026d6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80026d6:	b580      	push	{r7, lr}
 80026d8:	b084      	sub	sp, #16
 80026da:	af00      	add	r7, sp, #0
 80026dc:	6078      	str	r0, [r7, #4]
 80026de:	460b      	mov	r3, r1
 80026e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80026e2:	2300      	movs	r3, #0
 80026e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80026e6:	2300      	movs	r3, #0
 80026e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80026f0:	78fa      	ldrb	r2, [r7, #3]
 80026f2:	4611      	mov	r1, r2
 80026f4:	4618      	mov	r0, r3
 80026f6:	f000 ff80 	bl	80035fa <HAL_PCD_EP_Close>
 80026fa:	4603      	mov	r3, r0
 80026fc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80026fe:	7bfb      	ldrb	r3, [r7, #15]
 8002700:	4618      	mov	r0, r3
 8002702:	f000 f909 	bl	8002918 <USBD_Get_USB_Status>
 8002706:	4603      	mov	r3, r0
 8002708:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800270a:	7bbb      	ldrb	r3, [r7, #14]
}
 800270c:	4618      	mov	r0, r3
 800270e:	3710      	adds	r7, #16
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}

08002714 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	460b      	mov	r3, r1
 800271e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8002720:	2300      	movs	r3, #0
 8002722:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8002724:	2300      	movs	r3, #0
 8002726:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800272e:	78fa      	ldrb	r2, [r7, #3]
 8002730:	4611      	mov	r1, r2
 8002732:	4618      	mov	r0, r3
 8002734:	f001 f840 	bl	80037b8 <HAL_PCD_EP_SetStall>
 8002738:	4603      	mov	r3, r0
 800273a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800273c:	7bfb      	ldrb	r3, [r7, #15]
 800273e:	4618      	mov	r0, r3
 8002740:	f000 f8ea 	bl	8002918 <USBD_Get_USB_Status>
 8002744:	4603      	mov	r3, r0
 8002746:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8002748:	7bbb      	ldrb	r3, [r7, #14]
}
 800274a:	4618      	mov	r0, r3
 800274c:	3710      	adds	r7, #16
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}

08002752 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8002752:	b580      	push	{r7, lr}
 8002754:	b084      	sub	sp, #16
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]
 800275a:	460b      	mov	r3, r1
 800275c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800275e:	2300      	movs	r3, #0
 8002760:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8002762:	2300      	movs	r3, #0
 8002764:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800276c:	78fa      	ldrb	r2, [r7, #3]
 800276e:	4611      	mov	r1, r2
 8002770:	4618      	mov	r0, r3
 8002772:	f001 f881 	bl	8003878 <HAL_PCD_EP_ClrStall>
 8002776:	4603      	mov	r3, r0
 8002778:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800277a:	7bfb      	ldrb	r3, [r7, #15]
 800277c:	4618      	mov	r0, r3
 800277e:	f000 f8cb 	bl	8002918 <USBD_Get_USB_Status>
 8002782:	4603      	mov	r3, r0
 8002784:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8002786:	7bbb      	ldrb	r3, [r7, #14]
}
 8002788:	4618      	mov	r0, r3
 800278a:	3710      	adds	r7, #16
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}

08002790 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8002790:	b480      	push	{r7}
 8002792:	b085      	sub	sp, #20
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	460b      	mov	r3, r1
 800279a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80027a2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80027a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	da0c      	bge.n	80027c6 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80027ac:	78fb      	ldrb	r3, [r7, #3]
 80027ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80027b2:	68f9      	ldr	r1, [r7, #12]
 80027b4:	1c5a      	adds	r2, r3, #1
 80027b6:	4613      	mov	r3, r2
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	4413      	add	r3, r2
 80027bc:	00db      	lsls	r3, r3, #3
 80027be:	440b      	add	r3, r1
 80027c0:	3302      	adds	r3, #2
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	e00b      	b.n	80027de <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80027c6:	78fb      	ldrb	r3, [r7, #3]
 80027c8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80027cc:	68f9      	ldr	r1, [r7, #12]
 80027ce:	4613      	mov	r3, r2
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	4413      	add	r3, r2
 80027d4:	00db      	lsls	r3, r3, #3
 80027d6:	440b      	add	r3, r1
 80027d8:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80027dc:	781b      	ldrb	r3, [r3, #0]
  }
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3714      	adds	r7, #20
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bc80      	pop	{r7}
 80027e6:	4770      	bx	lr

080027e8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	460b      	mov	r3, r1
 80027f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80027f4:	2300      	movs	r3, #0
 80027f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80027f8:	2300      	movs	r3, #0
 80027fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8002802:	78fa      	ldrb	r2, [r7, #3]
 8002804:	4611      	mov	r1, r2
 8002806:	4618      	mov	r0, r3
 8002808:	f000 fe6c 	bl	80034e4 <HAL_PCD_SetAddress>
 800280c:	4603      	mov	r3, r0
 800280e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8002810:	7bfb      	ldrb	r3, [r7, #15]
 8002812:	4618      	mov	r0, r3
 8002814:	f000 f880 	bl	8002918 <USBD_Get_USB_Status>
 8002818:	4603      	mov	r3, r0
 800281a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800281c:	7bbb      	ldrb	r3, [r7, #14]
}
 800281e:	4618      	mov	r0, r3
 8002820:	3710      	adds	r7, #16
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}

08002826 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8002826:	b580      	push	{r7, lr}
 8002828:	b086      	sub	sp, #24
 800282a:	af00      	add	r7, sp, #0
 800282c:	60f8      	str	r0, [r7, #12]
 800282e:	607a      	str	r2, [r7, #4]
 8002830:	461a      	mov	r2, r3
 8002832:	460b      	mov	r3, r1
 8002834:	72fb      	strb	r3, [r7, #11]
 8002836:	4613      	mov	r3, r2
 8002838:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800283a:	2300      	movs	r3, #0
 800283c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800283e:	2300      	movs	r3, #0
 8002840:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8002848:	893b      	ldrh	r3, [r7, #8]
 800284a:	7af9      	ldrb	r1, [r7, #11]
 800284c:	687a      	ldr	r2, [r7, #4]
 800284e:	f000 ff70 	bl	8003732 <HAL_PCD_EP_Transmit>
 8002852:	4603      	mov	r3, r0
 8002854:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8002856:	7dfb      	ldrb	r3, [r7, #23]
 8002858:	4618      	mov	r0, r3
 800285a:	f000 f85d 	bl	8002918 <USBD_Get_USB_Status>
 800285e:	4603      	mov	r3, r0
 8002860:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8002862:	7dbb      	ldrb	r3, [r7, #22]
}
 8002864:	4618      	mov	r0, r3
 8002866:	3718      	adds	r7, #24
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}

0800286c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b086      	sub	sp, #24
 8002870:	af00      	add	r7, sp, #0
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	607a      	str	r2, [r7, #4]
 8002876:	461a      	mov	r2, r3
 8002878:	460b      	mov	r3, r1
 800287a:	72fb      	strb	r3, [r7, #11]
 800287c:	4613      	mov	r3, r2
 800287e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8002880:	2300      	movs	r3, #0
 8002882:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8002884:	2300      	movs	r3, #0
 8002886:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800288e:	893b      	ldrh	r3, [r7, #8]
 8002890:	7af9      	ldrb	r1, [r7, #11]
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	f000 fef9 	bl	800368a <HAL_PCD_EP_Receive>
 8002898:	4603      	mov	r3, r0
 800289a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800289c:	7dfb      	ldrb	r3, [r7, #23]
 800289e:	4618      	mov	r0, r3
 80028a0:	f000 f83a 	bl	8002918 <USBD_Get_USB_Status>
 80028a4:	4603      	mov	r3, r0
 80028a6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80028a8:	7dbb      	ldrb	r3, [r7, #22]
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3718      	adds	r7, #24
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}

080028b2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80028b2:	b580      	push	{r7, lr}
 80028b4:	b082      	sub	sp, #8
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
 80028ba:	460b      	mov	r3, r1
 80028bc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80028c4:	78fa      	ldrb	r2, [r7, #3]
 80028c6:	4611      	mov	r1, r2
 80028c8:	4618      	mov	r0, r3
 80028ca:	f000 ff1b 	bl	8003704 <HAL_PCD_EP_GetRxCount>
 80028ce:	4603      	mov	r3, r0
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3708      	adds	r7, #8
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80028e0:	4b02      	ldr	r3, [pc, #8]	; (80028ec <USBD_static_malloc+0x14>)
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	370c      	adds	r7, #12
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bc80      	pop	{r7}
 80028ea:	4770      	bx	lr
 80028ec:	20001434 	.word	0x20001434

080028f0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]

}
 80028f8:	bf00      	nop
 80028fa:	370c      	adds	r7, #12
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bc80      	pop	{r7}
 8002900:	4770      	bx	lr

08002902 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8002902:	b480      	push	{r7}
 8002904:	b083      	sub	sp, #12
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]
 800290a:	460b      	mov	r3, r1
 800290c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800290e:	bf00      	nop
 8002910:	370c      	adds	r7, #12
 8002912:	46bd      	mov	sp, r7
 8002914:	bc80      	pop	{r7}
 8002916:	4770      	bx	lr

08002918 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8002918:	b480      	push	{r7}
 800291a:	b085      	sub	sp, #20
 800291c:	af00      	add	r7, sp, #0
 800291e:	4603      	mov	r3, r0
 8002920:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8002922:	2300      	movs	r3, #0
 8002924:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8002926:	79fb      	ldrb	r3, [r7, #7]
 8002928:	2b03      	cmp	r3, #3
 800292a:	d817      	bhi.n	800295c <USBD_Get_USB_Status+0x44>
 800292c:	a201      	add	r2, pc, #4	; (adr r2, 8002934 <USBD_Get_USB_Status+0x1c>)
 800292e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002932:	bf00      	nop
 8002934:	08002945 	.word	0x08002945
 8002938:	0800294b 	.word	0x0800294b
 800293c:	08002951 	.word	0x08002951
 8002940:	08002957 	.word	0x08002957
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8002944:	2300      	movs	r3, #0
 8002946:	73fb      	strb	r3, [r7, #15]
    break;
 8002948:	e00b      	b.n	8002962 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800294a:	2302      	movs	r3, #2
 800294c:	73fb      	strb	r3, [r7, #15]
    break;
 800294e:	e008      	b.n	8002962 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8002950:	2301      	movs	r3, #1
 8002952:	73fb      	strb	r3, [r7, #15]
    break;
 8002954:	e005      	b.n	8002962 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8002956:	2302      	movs	r3, #2
 8002958:	73fb      	strb	r3, [r7, #15]
    break;
 800295a:	e002      	b.n	8002962 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800295c:	2302      	movs	r3, #2
 800295e:	73fb      	strb	r3, [r7, #15]
    break;
 8002960:	bf00      	nop
  }
  return usb_status;
 8002962:	7bfb      	ldrb	r3, [r7, #15]
}
 8002964:	4618      	mov	r0, r3
 8002966:	3714      	adds	r7, #20
 8002968:	46bd      	mov	sp, r7
 800296a:	bc80      	pop	{r7}
 800296c:	4770      	bx	lr
 800296e:	bf00      	nop

08002970 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002970:	b480      	push	{r7}
 8002972:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002974:	bf00      	nop
 8002976:	46bd      	mov	sp, r7
 8002978:	bc80      	pop	{r7}
 800297a:	4770      	bx	lr

0800297c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002980:	4b08      	ldr	r3, [pc, #32]	; (80029a4 <HAL_Init+0x28>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a07      	ldr	r2, [pc, #28]	; (80029a4 <HAL_Init+0x28>)
 8002986:	f043 0310 	orr.w	r3, r3, #16
 800298a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800298c:	2003      	movs	r0, #3
 800298e:	f000 f947 	bl	8002c20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002992:	200f      	movs	r0, #15
 8002994:	f000 f808 	bl	80029a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002998:	f7ff f85e 	bl	8001a58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800299c:	2300      	movs	r3, #0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	40022000 	.word	0x40022000

080029a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029b0:	4b12      	ldr	r3, [pc, #72]	; (80029fc <HAL_InitTick+0x54>)
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	4b12      	ldr	r3, [pc, #72]	; (8002a00 <HAL_InitTick+0x58>)
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	4619      	mov	r1, r3
 80029ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029be:	fbb3 f3f1 	udiv	r3, r3, r1
 80029c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80029c6:	4618      	mov	r0, r3
 80029c8:	f000 f95f 	bl	8002c8a <HAL_SYSTICK_Config>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d001      	beq.n	80029d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e00e      	b.n	80029f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2b0f      	cmp	r3, #15
 80029da:	d80a      	bhi.n	80029f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029dc:	2200      	movs	r2, #0
 80029de:	6879      	ldr	r1, [r7, #4]
 80029e0:	f04f 30ff 	mov.w	r0, #4294967295
 80029e4:	f000 f927 	bl	8002c36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029e8:	4a06      	ldr	r2, [pc, #24]	; (8002a04 <HAL_InitTick+0x5c>)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029ee:	2300      	movs	r3, #0
 80029f0:	e000      	b.n	80029f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3708      	adds	r7, #8
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	2000006c 	.word	0x2000006c
 8002a00:	20000074 	.word	0x20000074
 8002a04:	20000070 	.word	0x20000070

08002a08 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a0c:	4b05      	ldr	r3, [pc, #20]	; (8002a24 <HAL_IncTick+0x1c>)
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	461a      	mov	r2, r3
 8002a12:	4b05      	ldr	r3, [pc, #20]	; (8002a28 <HAL_IncTick+0x20>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4413      	add	r3, r2
 8002a18:	4a03      	ldr	r2, [pc, #12]	; (8002a28 <HAL_IncTick+0x20>)
 8002a1a:	6013      	str	r3, [r2, #0]
}
 8002a1c:	bf00      	nop
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bc80      	pop	{r7}
 8002a22:	4770      	bx	lr
 8002a24:	20000074 	.word	0x20000074
 8002a28:	20001654 	.word	0x20001654

08002a2c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	af00      	add	r7, sp, #0
  return uwTick;
 8002a30:	4b02      	ldr	r3, [pc, #8]	; (8002a3c <HAL_GetTick+0x10>)
 8002a32:	681b      	ldr	r3, [r3, #0]
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bc80      	pop	{r7}
 8002a3a:	4770      	bx	lr
 8002a3c:	20001654 	.word	0x20001654

08002a40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a48:	f7ff fff0 	bl	8002a2c <HAL_GetTick>
 8002a4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a58:	d005      	beq.n	8002a66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a5a:	4b0a      	ldr	r3, [pc, #40]	; (8002a84 <HAL_Delay+0x44>)
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	461a      	mov	r2, r3
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	4413      	add	r3, r2
 8002a64:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a66:	bf00      	nop
 8002a68:	f7ff ffe0 	bl	8002a2c <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	68fa      	ldr	r2, [r7, #12]
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d8f7      	bhi.n	8002a68 <HAL_Delay+0x28>
  {
  }
}
 8002a78:	bf00      	nop
 8002a7a:	bf00      	nop
 8002a7c:	3710      	adds	r7, #16
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	20000074 	.word	0x20000074

08002a88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b085      	sub	sp, #20
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f003 0307 	and.w	r3, r3, #7
 8002a96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a98:	4b0c      	ldr	r3, [pc, #48]	; (8002acc <__NVIC_SetPriorityGrouping+0x44>)
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a9e:	68ba      	ldr	r2, [r7, #8]
 8002aa0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ab0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ab4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ab8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002aba:	4a04      	ldr	r2, [pc, #16]	; (8002acc <__NVIC_SetPriorityGrouping+0x44>)
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	60d3      	str	r3, [r2, #12]
}
 8002ac0:	bf00      	nop
 8002ac2:	3714      	adds	r7, #20
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bc80      	pop	{r7}
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop
 8002acc:	e000ed00 	.word	0xe000ed00

08002ad0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ad4:	4b04      	ldr	r3, [pc, #16]	; (8002ae8 <__NVIC_GetPriorityGrouping+0x18>)
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	0a1b      	lsrs	r3, r3, #8
 8002ada:	f003 0307 	and.w	r3, r3, #7
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bc80      	pop	{r7}
 8002ae4:	4770      	bx	lr
 8002ae6:	bf00      	nop
 8002ae8:	e000ed00 	.word	0xe000ed00

08002aec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	4603      	mov	r3, r0
 8002af4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	db0b      	blt.n	8002b16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002afe:	79fb      	ldrb	r3, [r7, #7]
 8002b00:	f003 021f 	and.w	r2, r3, #31
 8002b04:	4906      	ldr	r1, [pc, #24]	; (8002b20 <__NVIC_EnableIRQ+0x34>)
 8002b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b0a:	095b      	lsrs	r3, r3, #5
 8002b0c:	2001      	movs	r0, #1
 8002b0e:	fa00 f202 	lsl.w	r2, r0, r2
 8002b12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b16:	bf00      	nop
 8002b18:	370c      	adds	r7, #12
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bc80      	pop	{r7}
 8002b1e:	4770      	bx	lr
 8002b20:	e000e100 	.word	0xe000e100

08002b24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	6039      	str	r1, [r7, #0]
 8002b2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	db0a      	blt.n	8002b4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	b2da      	uxtb	r2, r3
 8002b3c:	490c      	ldr	r1, [pc, #48]	; (8002b70 <__NVIC_SetPriority+0x4c>)
 8002b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b42:	0112      	lsls	r2, r2, #4
 8002b44:	b2d2      	uxtb	r2, r2
 8002b46:	440b      	add	r3, r1
 8002b48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b4c:	e00a      	b.n	8002b64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	b2da      	uxtb	r2, r3
 8002b52:	4908      	ldr	r1, [pc, #32]	; (8002b74 <__NVIC_SetPriority+0x50>)
 8002b54:	79fb      	ldrb	r3, [r7, #7]
 8002b56:	f003 030f 	and.w	r3, r3, #15
 8002b5a:	3b04      	subs	r3, #4
 8002b5c:	0112      	lsls	r2, r2, #4
 8002b5e:	b2d2      	uxtb	r2, r2
 8002b60:	440b      	add	r3, r1
 8002b62:	761a      	strb	r2, [r3, #24]
}
 8002b64:	bf00      	nop
 8002b66:	370c      	adds	r7, #12
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bc80      	pop	{r7}
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop
 8002b70:	e000e100 	.word	0xe000e100
 8002b74:	e000ed00 	.word	0xe000ed00

08002b78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b089      	sub	sp, #36	; 0x24
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	60b9      	str	r1, [r7, #8]
 8002b82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f003 0307 	and.w	r3, r3, #7
 8002b8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	f1c3 0307 	rsb	r3, r3, #7
 8002b92:	2b04      	cmp	r3, #4
 8002b94:	bf28      	it	cs
 8002b96:	2304      	movcs	r3, #4
 8002b98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	3304      	adds	r3, #4
 8002b9e:	2b06      	cmp	r3, #6
 8002ba0:	d902      	bls.n	8002ba8 <NVIC_EncodePriority+0x30>
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	3b03      	subs	r3, #3
 8002ba6:	e000      	b.n	8002baa <NVIC_EncodePriority+0x32>
 8002ba8:	2300      	movs	r3, #0
 8002baa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bac:	f04f 32ff 	mov.w	r2, #4294967295
 8002bb0:	69bb      	ldr	r3, [r7, #24]
 8002bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb6:	43da      	mvns	r2, r3
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	401a      	ands	r2, r3
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bc0:	f04f 31ff 	mov.w	r1, #4294967295
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bca:	43d9      	mvns	r1, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bd0:	4313      	orrs	r3, r2
         );
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3724      	adds	r7, #36	; 0x24
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bc80      	pop	{r7}
 8002bda:	4770      	bx	lr

08002bdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	3b01      	subs	r3, #1
 8002be8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bec:	d301      	bcc.n	8002bf2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e00f      	b.n	8002c12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bf2:	4a0a      	ldr	r2, [pc, #40]	; (8002c1c <SysTick_Config+0x40>)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	3b01      	subs	r3, #1
 8002bf8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bfa:	210f      	movs	r1, #15
 8002bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8002c00:	f7ff ff90 	bl	8002b24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c04:	4b05      	ldr	r3, [pc, #20]	; (8002c1c <SysTick_Config+0x40>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c0a:	4b04      	ldr	r3, [pc, #16]	; (8002c1c <SysTick_Config+0x40>)
 8002c0c:	2207      	movs	r2, #7
 8002c0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3708      	adds	r7, #8
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	e000e010 	.word	0xe000e010

08002c20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c28:	6878      	ldr	r0, [r7, #4]
 8002c2a:	f7ff ff2d 	bl	8002a88 <__NVIC_SetPriorityGrouping>
}
 8002c2e:	bf00      	nop
 8002c30:	3708      	adds	r7, #8
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}

08002c36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c36:	b580      	push	{r7, lr}
 8002c38:	b086      	sub	sp, #24
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	60b9      	str	r1, [r7, #8]
 8002c40:	607a      	str	r2, [r7, #4]
 8002c42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c44:	2300      	movs	r3, #0
 8002c46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c48:	f7ff ff42 	bl	8002ad0 <__NVIC_GetPriorityGrouping>
 8002c4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	68b9      	ldr	r1, [r7, #8]
 8002c52:	6978      	ldr	r0, [r7, #20]
 8002c54:	f7ff ff90 	bl	8002b78 <NVIC_EncodePriority>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c5e:	4611      	mov	r1, r2
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7ff ff5f 	bl	8002b24 <__NVIC_SetPriority>
}
 8002c66:	bf00      	nop
 8002c68:	3718      	adds	r7, #24
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}

08002c6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c6e:	b580      	push	{r7, lr}
 8002c70:	b082      	sub	sp, #8
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	4603      	mov	r3, r0
 8002c76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f7ff ff35 	bl	8002aec <__NVIC_EnableIRQ>
}
 8002c82:	bf00      	nop
 8002c84:	3708      	adds	r7, #8
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}

08002c8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c8a:	b580      	push	{r7, lr}
 8002c8c:	b082      	sub	sp, #8
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f7ff ffa2 	bl	8002bdc <SysTick_Config>
 8002c98:	4603      	mov	r3, r0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3708      	adds	r7, #8
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
	...

08002ca4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b08b      	sub	sp, #44	; 0x2c
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cb6:	e169      	b.n	8002f8c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002cb8:	2201      	movs	r2, #1
 8002cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	69fa      	ldr	r2, [r7, #28]
 8002cc8:	4013      	ands	r3, r2
 8002cca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002ccc:	69ba      	ldr	r2, [r7, #24]
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	f040 8158 	bne.w	8002f86 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	4a9a      	ldr	r2, [pc, #616]	; (8002f44 <HAL_GPIO_Init+0x2a0>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d05e      	beq.n	8002d9e <HAL_GPIO_Init+0xfa>
 8002ce0:	4a98      	ldr	r2, [pc, #608]	; (8002f44 <HAL_GPIO_Init+0x2a0>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d875      	bhi.n	8002dd2 <HAL_GPIO_Init+0x12e>
 8002ce6:	4a98      	ldr	r2, [pc, #608]	; (8002f48 <HAL_GPIO_Init+0x2a4>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d058      	beq.n	8002d9e <HAL_GPIO_Init+0xfa>
 8002cec:	4a96      	ldr	r2, [pc, #600]	; (8002f48 <HAL_GPIO_Init+0x2a4>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d86f      	bhi.n	8002dd2 <HAL_GPIO_Init+0x12e>
 8002cf2:	4a96      	ldr	r2, [pc, #600]	; (8002f4c <HAL_GPIO_Init+0x2a8>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d052      	beq.n	8002d9e <HAL_GPIO_Init+0xfa>
 8002cf8:	4a94      	ldr	r2, [pc, #592]	; (8002f4c <HAL_GPIO_Init+0x2a8>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d869      	bhi.n	8002dd2 <HAL_GPIO_Init+0x12e>
 8002cfe:	4a94      	ldr	r2, [pc, #592]	; (8002f50 <HAL_GPIO_Init+0x2ac>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d04c      	beq.n	8002d9e <HAL_GPIO_Init+0xfa>
 8002d04:	4a92      	ldr	r2, [pc, #584]	; (8002f50 <HAL_GPIO_Init+0x2ac>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d863      	bhi.n	8002dd2 <HAL_GPIO_Init+0x12e>
 8002d0a:	4a92      	ldr	r2, [pc, #584]	; (8002f54 <HAL_GPIO_Init+0x2b0>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d046      	beq.n	8002d9e <HAL_GPIO_Init+0xfa>
 8002d10:	4a90      	ldr	r2, [pc, #576]	; (8002f54 <HAL_GPIO_Init+0x2b0>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d85d      	bhi.n	8002dd2 <HAL_GPIO_Init+0x12e>
 8002d16:	2b12      	cmp	r3, #18
 8002d18:	d82a      	bhi.n	8002d70 <HAL_GPIO_Init+0xcc>
 8002d1a:	2b12      	cmp	r3, #18
 8002d1c:	d859      	bhi.n	8002dd2 <HAL_GPIO_Init+0x12e>
 8002d1e:	a201      	add	r2, pc, #4	; (adr r2, 8002d24 <HAL_GPIO_Init+0x80>)
 8002d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d24:	08002d9f 	.word	0x08002d9f
 8002d28:	08002d79 	.word	0x08002d79
 8002d2c:	08002d8b 	.word	0x08002d8b
 8002d30:	08002dcd 	.word	0x08002dcd
 8002d34:	08002dd3 	.word	0x08002dd3
 8002d38:	08002dd3 	.word	0x08002dd3
 8002d3c:	08002dd3 	.word	0x08002dd3
 8002d40:	08002dd3 	.word	0x08002dd3
 8002d44:	08002dd3 	.word	0x08002dd3
 8002d48:	08002dd3 	.word	0x08002dd3
 8002d4c:	08002dd3 	.word	0x08002dd3
 8002d50:	08002dd3 	.word	0x08002dd3
 8002d54:	08002dd3 	.word	0x08002dd3
 8002d58:	08002dd3 	.word	0x08002dd3
 8002d5c:	08002dd3 	.word	0x08002dd3
 8002d60:	08002dd3 	.word	0x08002dd3
 8002d64:	08002dd3 	.word	0x08002dd3
 8002d68:	08002d81 	.word	0x08002d81
 8002d6c:	08002d95 	.word	0x08002d95
 8002d70:	4a79      	ldr	r2, [pc, #484]	; (8002f58 <HAL_GPIO_Init+0x2b4>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d013      	beq.n	8002d9e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002d76:	e02c      	b.n	8002dd2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	623b      	str	r3, [r7, #32]
          break;
 8002d7e:	e029      	b.n	8002dd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	3304      	adds	r3, #4
 8002d86:	623b      	str	r3, [r7, #32]
          break;
 8002d88:	e024      	b.n	8002dd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	3308      	adds	r3, #8
 8002d90:	623b      	str	r3, [r7, #32]
          break;
 8002d92:	e01f      	b.n	8002dd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	330c      	adds	r3, #12
 8002d9a:	623b      	str	r3, [r7, #32]
          break;
 8002d9c:	e01a      	b.n	8002dd4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d102      	bne.n	8002dac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002da6:	2304      	movs	r3, #4
 8002da8:	623b      	str	r3, [r7, #32]
          break;
 8002daa:	e013      	b.n	8002dd4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d105      	bne.n	8002dc0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002db4:	2308      	movs	r3, #8
 8002db6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	69fa      	ldr	r2, [r7, #28]
 8002dbc:	611a      	str	r2, [r3, #16]
          break;
 8002dbe:	e009      	b.n	8002dd4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002dc0:	2308      	movs	r3, #8
 8002dc2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	69fa      	ldr	r2, [r7, #28]
 8002dc8:	615a      	str	r2, [r3, #20]
          break;
 8002dca:	e003      	b.n	8002dd4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	623b      	str	r3, [r7, #32]
          break;
 8002dd0:	e000      	b.n	8002dd4 <HAL_GPIO_Init+0x130>
          break;
 8002dd2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002dd4:	69bb      	ldr	r3, [r7, #24]
 8002dd6:	2bff      	cmp	r3, #255	; 0xff
 8002dd8:	d801      	bhi.n	8002dde <HAL_GPIO_Init+0x13a>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	e001      	b.n	8002de2 <HAL_GPIO_Init+0x13e>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	3304      	adds	r3, #4
 8002de2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002de4:	69bb      	ldr	r3, [r7, #24]
 8002de6:	2bff      	cmp	r3, #255	; 0xff
 8002de8:	d802      	bhi.n	8002df0 <HAL_GPIO_Init+0x14c>
 8002dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	e002      	b.n	8002df6 <HAL_GPIO_Init+0x152>
 8002df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df2:	3b08      	subs	r3, #8
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	210f      	movs	r1, #15
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	fa01 f303 	lsl.w	r3, r1, r3
 8002e04:	43db      	mvns	r3, r3
 8002e06:	401a      	ands	r2, r3
 8002e08:	6a39      	ldr	r1, [r7, #32]
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e10:	431a      	orrs	r2, r3
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	f000 80b1 	beq.w	8002f86 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002e24:	4b4d      	ldr	r3, [pc, #308]	; (8002f5c <HAL_GPIO_Init+0x2b8>)
 8002e26:	699b      	ldr	r3, [r3, #24]
 8002e28:	4a4c      	ldr	r2, [pc, #304]	; (8002f5c <HAL_GPIO_Init+0x2b8>)
 8002e2a:	f043 0301 	orr.w	r3, r3, #1
 8002e2e:	6193      	str	r3, [r2, #24]
 8002e30:	4b4a      	ldr	r3, [pc, #296]	; (8002f5c <HAL_GPIO_Init+0x2b8>)
 8002e32:	699b      	ldr	r3, [r3, #24]
 8002e34:	f003 0301 	and.w	r3, r3, #1
 8002e38:	60bb      	str	r3, [r7, #8]
 8002e3a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002e3c:	4a48      	ldr	r2, [pc, #288]	; (8002f60 <HAL_GPIO_Init+0x2bc>)
 8002e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e40:	089b      	lsrs	r3, r3, #2
 8002e42:	3302      	adds	r3, #2
 8002e44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e48:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4c:	f003 0303 	and.w	r3, r3, #3
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	220f      	movs	r2, #15
 8002e54:	fa02 f303 	lsl.w	r3, r2, r3
 8002e58:	43db      	mvns	r3, r3
 8002e5a:	68fa      	ldr	r2, [r7, #12]
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	4a40      	ldr	r2, [pc, #256]	; (8002f64 <HAL_GPIO_Init+0x2c0>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d013      	beq.n	8002e90 <HAL_GPIO_Init+0x1ec>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	4a3f      	ldr	r2, [pc, #252]	; (8002f68 <HAL_GPIO_Init+0x2c4>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d00d      	beq.n	8002e8c <HAL_GPIO_Init+0x1e8>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	4a3e      	ldr	r2, [pc, #248]	; (8002f6c <HAL_GPIO_Init+0x2c8>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d007      	beq.n	8002e88 <HAL_GPIO_Init+0x1e4>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	4a3d      	ldr	r2, [pc, #244]	; (8002f70 <HAL_GPIO_Init+0x2cc>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d101      	bne.n	8002e84 <HAL_GPIO_Init+0x1e0>
 8002e80:	2303      	movs	r3, #3
 8002e82:	e006      	b.n	8002e92 <HAL_GPIO_Init+0x1ee>
 8002e84:	2304      	movs	r3, #4
 8002e86:	e004      	b.n	8002e92 <HAL_GPIO_Init+0x1ee>
 8002e88:	2302      	movs	r3, #2
 8002e8a:	e002      	b.n	8002e92 <HAL_GPIO_Init+0x1ee>
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e000      	b.n	8002e92 <HAL_GPIO_Init+0x1ee>
 8002e90:	2300      	movs	r3, #0
 8002e92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e94:	f002 0203 	and.w	r2, r2, #3
 8002e98:	0092      	lsls	r2, r2, #2
 8002e9a:	4093      	lsls	r3, r2
 8002e9c:	68fa      	ldr	r2, [r7, #12]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002ea2:	492f      	ldr	r1, [pc, #188]	; (8002f60 <HAL_GPIO_Init+0x2bc>)
 8002ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea6:	089b      	lsrs	r3, r3, #2
 8002ea8:	3302      	adds	r3, #2
 8002eaa:	68fa      	ldr	r2, [r7, #12]
 8002eac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d006      	beq.n	8002eca <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002ebc:	4b2d      	ldr	r3, [pc, #180]	; (8002f74 <HAL_GPIO_Init+0x2d0>)
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	492c      	ldr	r1, [pc, #176]	; (8002f74 <HAL_GPIO_Init+0x2d0>)
 8002ec2:	69bb      	ldr	r3, [r7, #24]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	600b      	str	r3, [r1, #0]
 8002ec8:	e006      	b.n	8002ed8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002eca:	4b2a      	ldr	r3, [pc, #168]	; (8002f74 <HAL_GPIO_Init+0x2d0>)
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	69bb      	ldr	r3, [r7, #24]
 8002ed0:	43db      	mvns	r3, r3
 8002ed2:	4928      	ldr	r1, [pc, #160]	; (8002f74 <HAL_GPIO_Init+0x2d0>)
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d006      	beq.n	8002ef2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002ee4:	4b23      	ldr	r3, [pc, #140]	; (8002f74 <HAL_GPIO_Init+0x2d0>)
 8002ee6:	685a      	ldr	r2, [r3, #4]
 8002ee8:	4922      	ldr	r1, [pc, #136]	; (8002f74 <HAL_GPIO_Init+0x2d0>)
 8002eea:	69bb      	ldr	r3, [r7, #24]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	604b      	str	r3, [r1, #4]
 8002ef0:	e006      	b.n	8002f00 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002ef2:	4b20      	ldr	r3, [pc, #128]	; (8002f74 <HAL_GPIO_Init+0x2d0>)
 8002ef4:	685a      	ldr	r2, [r3, #4]
 8002ef6:	69bb      	ldr	r3, [r7, #24]
 8002ef8:	43db      	mvns	r3, r3
 8002efa:	491e      	ldr	r1, [pc, #120]	; (8002f74 <HAL_GPIO_Init+0x2d0>)
 8002efc:	4013      	ands	r3, r2
 8002efe:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d006      	beq.n	8002f1a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002f0c:	4b19      	ldr	r3, [pc, #100]	; (8002f74 <HAL_GPIO_Init+0x2d0>)
 8002f0e:	689a      	ldr	r2, [r3, #8]
 8002f10:	4918      	ldr	r1, [pc, #96]	; (8002f74 <HAL_GPIO_Init+0x2d0>)
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	608b      	str	r3, [r1, #8]
 8002f18:	e006      	b.n	8002f28 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002f1a:	4b16      	ldr	r3, [pc, #88]	; (8002f74 <HAL_GPIO_Init+0x2d0>)
 8002f1c:	689a      	ldr	r2, [r3, #8]
 8002f1e:	69bb      	ldr	r3, [r7, #24]
 8002f20:	43db      	mvns	r3, r3
 8002f22:	4914      	ldr	r1, [pc, #80]	; (8002f74 <HAL_GPIO_Init+0x2d0>)
 8002f24:	4013      	ands	r3, r2
 8002f26:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d021      	beq.n	8002f78 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002f34:	4b0f      	ldr	r3, [pc, #60]	; (8002f74 <HAL_GPIO_Init+0x2d0>)
 8002f36:	68da      	ldr	r2, [r3, #12]
 8002f38:	490e      	ldr	r1, [pc, #56]	; (8002f74 <HAL_GPIO_Init+0x2d0>)
 8002f3a:	69bb      	ldr	r3, [r7, #24]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	60cb      	str	r3, [r1, #12]
 8002f40:	e021      	b.n	8002f86 <HAL_GPIO_Init+0x2e2>
 8002f42:	bf00      	nop
 8002f44:	10320000 	.word	0x10320000
 8002f48:	10310000 	.word	0x10310000
 8002f4c:	10220000 	.word	0x10220000
 8002f50:	10210000 	.word	0x10210000
 8002f54:	10120000 	.word	0x10120000
 8002f58:	10110000 	.word	0x10110000
 8002f5c:	40021000 	.word	0x40021000
 8002f60:	40010000 	.word	0x40010000
 8002f64:	40010800 	.word	0x40010800
 8002f68:	40010c00 	.word	0x40010c00
 8002f6c:	40011000 	.word	0x40011000
 8002f70:	40011400 	.word	0x40011400
 8002f74:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002f78:	4b0b      	ldr	r3, [pc, #44]	; (8002fa8 <HAL_GPIO_Init+0x304>)
 8002f7a:	68da      	ldr	r2, [r3, #12]
 8002f7c:	69bb      	ldr	r3, [r7, #24]
 8002f7e:	43db      	mvns	r3, r3
 8002f80:	4909      	ldr	r1, [pc, #36]	; (8002fa8 <HAL_GPIO_Init+0x304>)
 8002f82:	4013      	ands	r3, r2
 8002f84:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f88:	3301      	adds	r3, #1
 8002f8a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f92:	fa22 f303 	lsr.w	r3, r2, r3
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	f47f ae8e 	bne.w	8002cb8 <HAL_GPIO_Init+0x14>
  }
}
 8002f9c:	bf00      	nop
 8002f9e:	bf00      	nop
 8002fa0:	372c      	adds	r7, #44	; 0x2c
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bc80      	pop	{r7}
 8002fa6:	4770      	bx	lr
 8002fa8:	40010400 	.word	0x40010400

08002fac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	460b      	mov	r3, r1
 8002fb6:	807b      	strh	r3, [r7, #2]
 8002fb8:	4613      	mov	r3, r2
 8002fba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002fbc:	787b      	ldrb	r3, [r7, #1]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d003      	beq.n	8002fca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fc2:	887a      	ldrh	r2, [r7, #2]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002fc8:	e003      	b.n	8002fd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002fca:	887b      	ldrh	r3, [r7, #2]
 8002fcc:	041a      	lsls	r2, r3, #16
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	611a      	str	r2, [r3, #16]
}
 8002fd2:	bf00      	nop
 8002fd4:	370c      	adds	r7, #12
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bc80      	pop	{r7}
 8002fda:	4770      	bx	lr

08002fdc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fde:	b08b      	sub	sp, #44	; 0x2c
 8002fe0:	af06      	add	r7, sp, #24
 8002fe2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d101      	bne.n	8002fee <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e0fd      	b.n	80031ea <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d106      	bne.n	8003008 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f7ff fa02 	bl	800240c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2203      	movs	r2, #3
 800300c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4618      	mov	r0, r3
 8003016:	f003 fbb9 	bl	800678c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	603b      	str	r3, [r7, #0]
 8003020:	687e      	ldr	r6, [r7, #4]
 8003022:	466d      	mov	r5, sp
 8003024:	f106 0410 	add.w	r4, r6, #16
 8003028:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800302a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800302c:	6823      	ldr	r3, [r4, #0]
 800302e:	602b      	str	r3, [r5, #0]
 8003030:	1d33      	adds	r3, r6, #4
 8003032:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003034:	6838      	ldr	r0, [r7, #0]
 8003036:	f003 fb83 	bl	8006740 <USB_CoreInit>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d005      	beq.n	800304c <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2202      	movs	r2, #2
 8003044:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e0ce      	b.n	80031ea <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	2100      	movs	r1, #0
 8003052:	4618      	mov	r0, r3
 8003054:	f003 fbb4 	bl	80067c0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003058:	2300      	movs	r3, #0
 800305a:	73fb      	strb	r3, [r7, #15]
 800305c:	e04c      	b.n	80030f8 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800305e:	7bfb      	ldrb	r3, [r7, #15]
 8003060:	6879      	ldr	r1, [r7, #4]
 8003062:	1c5a      	adds	r2, r3, #1
 8003064:	4613      	mov	r3, r2
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	4413      	add	r3, r2
 800306a:	00db      	lsls	r3, r3, #3
 800306c:	440b      	add	r3, r1
 800306e:	3301      	adds	r3, #1
 8003070:	2201      	movs	r2, #1
 8003072:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003074:	7bfb      	ldrb	r3, [r7, #15]
 8003076:	6879      	ldr	r1, [r7, #4]
 8003078:	1c5a      	adds	r2, r3, #1
 800307a:	4613      	mov	r3, r2
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	4413      	add	r3, r2
 8003080:	00db      	lsls	r3, r3, #3
 8003082:	440b      	add	r3, r1
 8003084:	7bfa      	ldrb	r2, [r7, #15]
 8003086:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003088:	7bfa      	ldrb	r2, [r7, #15]
 800308a:	7bfb      	ldrb	r3, [r7, #15]
 800308c:	b298      	uxth	r0, r3
 800308e:	6879      	ldr	r1, [r7, #4]
 8003090:	4613      	mov	r3, r2
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	4413      	add	r3, r2
 8003096:	00db      	lsls	r3, r3, #3
 8003098:	440b      	add	r3, r1
 800309a:	3336      	adds	r3, #54	; 0x36
 800309c:	4602      	mov	r2, r0
 800309e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80030a0:	7bfb      	ldrb	r3, [r7, #15]
 80030a2:	6879      	ldr	r1, [r7, #4]
 80030a4:	1c5a      	adds	r2, r3, #1
 80030a6:	4613      	mov	r3, r2
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	4413      	add	r3, r2
 80030ac:	00db      	lsls	r3, r3, #3
 80030ae:	440b      	add	r3, r1
 80030b0:	3303      	adds	r3, #3
 80030b2:	2200      	movs	r2, #0
 80030b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80030b6:	7bfa      	ldrb	r2, [r7, #15]
 80030b8:	6879      	ldr	r1, [r7, #4]
 80030ba:	4613      	mov	r3, r2
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	4413      	add	r3, r2
 80030c0:	00db      	lsls	r3, r3, #3
 80030c2:	440b      	add	r3, r1
 80030c4:	3338      	adds	r3, #56	; 0x38
 80030c6:	2200      	movs	r2, #0
 80030c8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80030ca:	7bfa      	ldrb	r2, [r7, #15]
 80030cc:	6879      	ldr	r1, [r7, #4]
 80030ce:	4613      	mov	r3, r2
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	4413      	add	r3, r2
 80030d4:	00db      	lsls	r3, r3, #3
 80030d6:	440b      	add	r3, r1
 80030d8:	333c      	adds	r3, #60	; 0x3c
 80030da:	2200      	movs	r2, #0
 80030dc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80030de:	7bfa      	ldrb	r2, [r7, #15]
 80030e0:	6879      	ldr	r1, [r7, #4]
 80030e2:	4613      	mov	r3, r2
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	4413      	add	r3, r2
 80030e8:	00db      	lsls	r3, r3, #3
 80030ea:	440b      	add	r3, r1
 80030ec:	3340      	adds	r3, #64	; 0x40
 80030ee:	2200      	movs	r2, #0
 80030f0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030f2:	7bfb      	ldrb	r3, [r7, #15]
 80030f4:	3301      	adds	r3, #1
 80030f6:	73fb      	strb	r3, [r7, #15]
 80030f8:	7bfa      	ldrb	r2, [r7, #15]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	429a      	cmp	r2, r3
 8003100:	d3ad      	bcc.n	800305e <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003102:	2300      	movs	r3, #0
 8003104:	73fb      	strb	r3, [r7, #15]
 8003106:	e044      	b.n	8003192 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003108:	7bfa      	ldrb	r2, [r7, #15]
 800310a:	6879      	ldr	r1, [r7, #4]
 800310c:	4613      	mov	r3, r2
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	4413      	add	r3, r2
 8003112:	00db      	lsls	r3, r3, #3
 8003114:	440b      	add	r3, r1
 8003116:	f203 1369 	addw	r3, r3, #361	; 0x169
 800311a:	2200      	movs	r2, #0
 800311c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800311e:	7bfa      	ldrb	r2, [r7, #15]
 8003120:	6879      	ldr	r1, [r7, #4]
 8003122:	4613      	mov	r3, r2
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	4413      	add	r3, r2
 8003128:	00db      	lsls	r3, r3, #3
 800312a:	440b      	add	r3, r1
 800312c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003130:	7bfa      	ldrb	r2, [r7, #15]
 8003132:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003134:	7bfa      	ldrb	r2, [r7, #15]
 8003136:	6879      	ldr	r1, [r7, #4]
 8003138:	4613      	mov	r3, r2
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	4413      	add	r3, r2
 800313e:	00db      	lsls	r3, r3, #3
 8003140:	440b      	add	r3, r1
 8003142:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8003146:	2200      	movs	r2, #0
 8003148:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800314a:	7bfa      	ldrb	r2, [r7, #15]
 800314c:	6879      	ldr	r1, [r7, #4]
 800314e:	4613      	mov	r3, r2
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	4413      	add	r3, r2
 8003154:	00db      	lsls	r3, r3, #3
 8003156:	440b      	add	r3, r1
 8003158:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800315c:	2200      	movs	r2, #0
 800315e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003160:	7bfa      	ldrb	r2, [r7, #15]
 8003162:	6879      	ldr	r1, [r7, #4]
 8003164:	4613      	mov	r3, r2
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	4413      	add	r3, r2
 800316a:	00db      	lsls	r3, r3, #3
 800316c:	440b      	add	r3, r1
 800316e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003172:	2200      	movs	r2, #0
 8003174:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003176:	7bfa      	ldrb	r2, [r7, #15]
 8003178:	6879      	ldr	r1, [r7, #4]
 800317a:	4613      	mov	r3, r2
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	4413      	add	r3, r2
 8003180:	00db      	lsls	r3, r3, #3
 8003182:	440b      	add	r3, r1
 8003184:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003188:	2200      	movs	r2, #0
 800318a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800318c:	7bfb      	ldrb	r3, [r7, #15]
 800318e:	3301      	adds	r3, #1
 8003190:	73fb      	strb	r3, [r7, #15]
 8003192:	7bfa      	ldrb	r2, [r7, #15]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	429a      	cmp	r2, r3
 800319a:	d3b5      	bcc.n	8003108 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	603b      	str	r3, [r7, #0]
 80031a2:	687e      	ldr	r6, [r7, #4]
 80031a4:	466d      	mov	r5, sp
 80031a6:	f106 0410 	add.w	r4, r6, #16
 80031aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031ae:	6823      	ldr	r3, [r4, #0]
 80031b0:	602b      	str	r3, [r5, #0]
 80031b2:	1d33      	adds	r3, r6, #4
 80031b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031b6:	6838      	ldr	r0, [r7, #0]
 80031b8:	f003 fb0e 	bl	80067d8 <USB_DevInit>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d005      	beq.n	80031ce <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2202      	movs	r2, #2
 80031c6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e00d      	b.n	80031ea <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2201      	movs	r2, #1
 80031da:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4618      	mov	r0, r3
 80031e4:	f005 ffc0 	bl	8009168 <USB_DevDisconnect>

  return HAL_OK;
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3714      	adds	r7, #20
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080031f2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80031f2:	b580      	push	{r7, lr}
 80031f4:	b082      	sub	sp, #8
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003200:	2b01      	cmp	r3, #1
 8003202:	d101      	bne.n	8003208 <HAL_PCD_Start+0x16>
 8003204:	2302      	movs	r3, #2
 8003206:	e016      	b.n	8003236 <HAL_PCD_Start+0x44>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4618      	mov	r0, r3
 8003216:	f003 faa3 	bl	8006760 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800321a:	2101      	movs	r1, #1
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f7ff fb70 	bl	8002902 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4618      	mov	r0, r3
 8003228:	f005 ff94 	bl	8009154 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2200      	movs	r2, #0
 8003230:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003234:	2300      	movs	r3, #0
}
 8003236:	4618      	mov	r0, r3
 8003238:	3708      	adds	r7, #8
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}

0800323e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800323e:	b580      	push	{r7, lr}
 8003240:	b088      	sub	sp, #32
 8003242:	af00      	add	r7, sp, #0
 8003244:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4618      	mov	r0, r3
 800324c:	f005 ff96 	bl	800917c <USB_ReadInterrupts>
 8003250:	4603      	mov	r3, r0
 8003252:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003256:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800325a:	d102      	bne.n	8003262 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f000 fb5f 	bl	8003920 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4618      	mov	r0, r3
 8003268:	f005 ff88 	bl	800917c <USB_ReadInterrupts>
 800326c:	4603      	mov	r3, r0
 800326e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003272:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003276:	d112      	bne.n	800329e <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003280:	b29a      	uxth	r2, r3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800328a:	b292      	uxth	r2, r2
 800328c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f7ff f93e 	bl	8002512 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003296:	2100      	movs	r1, #0
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	f000 f923 	bl	80034e4 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4618      	mov	r0, r3
 80032a4:	f005 ff6a 	bl	800917c <USB_ReadInterrupts>
 80032a8:	4603      	mov	r3, r0
 80032aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80032b2:	d10b      	bne.n	80032cc <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80032bc:	b29a      	uxth	r2, r3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80032c6:	b292      	uxth	r2, r2
 80032c8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4618      	mov	r0, r3
 80032d2:	f005 ff53 	bl	800917c <USB_ReadInterrupts>
 80032d6:	4603      	mov	r3, r0
 80032d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032e0:	d10b      	bne.n	80032fa <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80032ea:	b29a      	uxth	r2, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032f4:	b292      	uxth	r2, r2
 80032f6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4618      	mov	r0, r3
 8003300:	f005 ff3c 	bl	800917c <USB_ReadInterrupts>
 8003304:	4603      	mov	r3, r0
 8003306:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800330a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800330e:	d126      	bne.n	800335e <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003318:	b29a      	uxth	r2, r3
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f022 0204 	bic.w	r2, r2, #4
 8003322:	b292      	uxth	r2, r2
 8003324:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003330:	b29a      	uxth	r2, r3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f022 0208 	bic.w	r2, r2, #8
 800333a:	b292      	uxth	r2, r2
 800333c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f7ff f91f 	bl	8002584 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800334e:	b29a      	uxth	r2, r3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003358:	b292      	uxth	r2, r2
 800335a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4618      	mov	r0, r3
 8003364:	f005 ff0a 	bl	800917c <USB_ReadInterrupts>
 8003368:	4603      	mov	r3, r0
 800336a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800336e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003372:	f040 8082 	bne.w	800347a <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8003376:	2300      	movs	r3, #0
 8003378:	77fb      	strb	r3, [r7, #31]
 800337a:	e010      	b.n	800339e <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	461a      	mov	r2, r3
 8003382:	7ffb      	ldrb	r3, [r7, #31]
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	441a      	add	r2, r3
 8003388:	7ffb      	ldrb	r3, [r7, #31]
 800338a:	8812      	ldrh	r2, [r2, #0]
 800338c:	b292      	uxth	r2, r2
 800338e:	005b      	lsls	r3, r3, #1
 8003390:	3320      	adds	r3, #32
 8003392:	443b      	add	r3, r7
 8003394:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8003398:	7ffb      	ldrb	r3, [r7, #31]
 800339a:	3301      	adds	r3, #1
 800339c:	77fb      	strb	r3, [r7, #31]
 800339e:	7ffb      	ldrb	r3, [r7, #31]
 80033a0:	2b07      	cmp	r3, #7
 80033a2:	d9eb      	bls.n	800337c <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80033ac:	b29a      	uxth	r2, r3
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f042 0201 	orr.w	r2, r2, #1
 80033b6:	b292      	uxth	r2, r2
 80033b8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80033c4:	b29a      	uxth	r2, r3
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f022 0201 	bic.w	r2, r2, #1
 80033ce:	b292      	uxth	r2, r2
 80033d0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80033d4:	bf00      	nop
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80033de:	b29b      	uxth	r3, r3
 80033e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d0f6      	beq.n	80033d6 <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80033f0:	b29a      	uxth	r2, r3
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033fa:	b292      	uxth	r2, r2
 80033fc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8003400:	2300      	movs	r3, #0
 8003402:	77fb      	strb	r3, [r7, #31]
 8003404:	e00f      	b.n	8003426 <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8003406:	7ffb      	ldrb	r3, [r7, #31]
 8003408:	687a      	ldr	r2, [r7, #4]
 800340a:	6812      	ldr	r2, [r2, #0]
 800340c:	4611      	mov	r1, r2
 800340e:	7ffa      	ldrb	r2, [r7, #31]
 8003410:	0092      	lsls	r2, r2, #2
 8003412:	440a      	add	r2, r1
 8003414:	005b      	lsls	r3, r3, #1
 8003416:	3320      	adds	r3, #32
 8003418:	443b      	add	r3, r7
 800341a:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800341e:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8003420:	7ffb      	ldrb	r3, [r7, #31]
 8003422:	3301      	adds	r3, #1
 8003424:	77fb      	strb	r3, [r7, #31]
 8003426:	7ffb      	ldrb	r3, [r7, #31]
 8003428:	2b07      	cmp	r3, #7
 800342a:	d9ec      	bls.n	8003406 <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003434:	b29a      	uxth	r2, r3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f042 0208 	orr.w	r2, r2, #8
 800343e:	b292      	uxth	r2, r2
 8003440:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800344c:	b29a      	uxth	r2, r3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003456:	b292      	uxth	r2, r2
 8003458:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003464:	b29a      	uxth	r2, r3
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f042 0204 	orr.w	r2, r2, #4
 800346e:	b292      	uxth	r2, r2
 8003470:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f7ff f86b 	bl	8002550 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4618      	mov	r0, r3
 8003480:	f005 fe7c 	bl	800917c <USB_ReadInterrupts>
 8003484:	4603      	mov	r3, r0
 8003486:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800348a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800348e:	d10e      	bne.n	80034ae <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003498:	b29a      	uxth	r2, r3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80034a2:	b292      	uxth	r2, r2
 80034a4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f7ff f824 	bl	80024f6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4618      	mov	r0, r3
 80034b4:	f005 fe62 	bl	800917c <USB_ReadInterrupts>
 80034b8:	4603      	mov	r3, r0
 80034ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034c2:	d10b      	bne.n	80034dc <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80034cc:	b29a      	uxth	r2, r3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80034d6:	b292      	uxth	r2, r2
 80034d8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80034dc:	bf00      	nop
 80034de:	3720      	adds	r7, #32
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}

080034e4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b082      	sub	sp, #8
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	460b      	mov	r3, r1
 80034ee:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d101      	bne.n	80034fe <HAL_PCD_SetAddress+0x1a>
 80034fa:	2302      	movs	r3, #2
 80034fc:	e013      	b.n	8003526 <HAL_PCD_SetAddress+0x42>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2201      	movs	r2, #1
 8003502:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	78fa      	ldrb	r2, [r7, #3]
 800350a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	78fa      	ldrb	r2, [r7, #3]
 8003514:	4611      	mov	r1, r2
 8003516:	4618      	mov	r0, r3
 8003518:	f005 fe09 	bl	800912e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003524:	2300      	movs	r3, #0
}
 8003526:	4618      	mov	r0, r3
 8003528:	3708      	adds	r7, #8
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}

0800352e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800352e:	b580      	push	{r7, lr}
 8003530:	b084      	sub	sp, #16
 8003532:	af00      	add	r7, sp, #0
 8003534:	6078      	str	r0, [r7, #4]
 8003536:	4608      	mov	r0, r1
 8003538:	4611      	mov	r1, r2
 800353a:	461a      	mov	r2, r3
 800353c:	4603      	mov	r3, r0
 800353e:	70fb      	strb	r3, [r7, #3]
 8003540:	460b      	mov	r3, r1
 8003542:	803b      	strh	r3, [r7, #0]
 8003544:	4613      	mov	r3, r2
 8003546:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003548:	2300      	movs	r3, #0
 800354a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800354c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003550:	2b00      	cmp	r3, #0
 8003552:	da0e      	bge.n	8003572 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003554:	78fb      	ldrb	r3, [r7, #3]
 8003556:	f003 0307 	and.w	r3, r3, #7
 800355a:	1c5a      	adds	r2, r3, #1
 800355c:	4613      	mov	r3, r2
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	4413      	add	r3, r2
 8003562:	00db      	lsls	r3, r3, #3
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	4413      	add	r3, r2
 8003568:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2201      	movs	r2, #1
 800356e:	705a      	strb	r2, [r3, #1]
 8003570:	e00e      	b.n	8003590 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003572:	78fb      	ldrb	r3, [r7, #3]
 8003574:	f003 0207 	and.w	r2, r3, #7
 8003578:	4613      	mov	r3, r2
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	4413      	add	r3, r2
 800357e:	00db      	lsls	r3, r3, #3
 8003580:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003584:	687a      	ldr	r2, [r7, #4]
 8003586:	4413      	add	r3, r2
 8003588:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2200      	movs	r2, #0
 800358e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003590:	78fb      	ldrb	r3, [r7, #3]
 8003592:	f003 0307 	and.w	r3, r3, #7
 8003596:	b2da      	uxtb	r2, r3
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800359c:	883a      	ldrh	r2, [r7, #0]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	78ba      	ldrb	r2, [r7, #2]
 80035a6:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	785b      	ldrb	r3, [r3, #1]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d004      	beq.n	80035ba <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	781b      	ldrb	r3, [r3, #0]
 80035b4:	b29a      	uxth	r2, r3
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80035ba:	78bb      	ldrb	r3, [r7, #2]
 80035bc:	2b02      	cmp	r3, #2
 80035be:	d102      	bne.n	80035c6 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2200      	movs	r2, #0
 80035c4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d101      	bne.n	80035d4 <HAL_PCD_EP_Open+0xa6>
 80035d0:	2302      	movs	r3, #2
 80035d2:	e00e      	b.n	80035f2 <HAL_PCD_EP_Open+0xc4>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	68f9      	ldr	r1, [r7, #12]
 80035e2:	4618      	mov	r0, r3
 80035e4:	f003 f918 	bl	8006818 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2200      	movs	r2, #0
 80035ec:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80035f0:	7afb      	ldrb	r3, [r7, #11]
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3710      	adds	r7, #16
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}

080035fa <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80035fa:	b580      	push	{r7, lr}
 80035fc:	b084      	sub	sp, #16
 80035fe:	af00      	add	r7, sp, #0
 8003600:	6078      	str	r0, [r7, #4]
 8003602:	460b      	mov	r3, r1
 8003604:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003606:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800360a:	2b00      	cmp	r3, #0
 800360c:	da0e      	bge.n	800362c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800360e:	78fb      	ldrb	r3, [r7, #3]
 8003610:	f003 0307 	and.w	r3, r3, #7
 8003614:	1c5a      	adds	r2, r3, #1
 8003616:	4613      	mov	r3, r2
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	4413      	add	r3, r2
 800361c:	00db      	lsls	r3, r3, #3
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	4413      	add	r3, r2
 8003622:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2201      	movs	r2, #1
 8003628:	705a      	strb	r2, [r3, #1]
 800362a:	e00e      	b.n	800364a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800362c:	78fb      	ldrb	r3, [r7, #3]
 800362e:	f003 0207 	and.w	r2, r3, #7
 8003632:	4613      	mov	r3, r2
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	4413      	add	r3, r2
 8003638:	00db      	lsls	r3, r3, #3
 800363a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800363e:	687a      	ldr	r2, [r7, #4]
 8003640:	4413      	add	r3, r2
 8003642:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2200      	movs	r2, #0
 8003648:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800364a:	78fb      	ldrb	r3, [r7, #3]
 800364c:	f003 0307 	and.w	r3, r3, #7
 8003650:	b2da      	uxtb	r2, r3
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800365c:	2b01      	cmp	r3, #1
 800365e:	d101      	bne.n	8003664 <HAL_PCD_EP_Close+0x6a>
 8003660:	2302      	movs	r3, #2
 8003662:	e00e      	b.n	8003682 <HAL_PCD_EP_Close+0x88>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	68f9      	ldr	r1, [r7, #12]
 8003672:	4618      	mov	r0, r3
 8003674:	f003 fc3a 	bl	8006eec <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2200      	movs	r2, #0
 800367c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8003680:	2300      	movs	r3, #0
}
 8003682:	4618      	mov	r0, r3
 8003684:	3710      	adds	r7, #16
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}

0800368a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800368a:	b580      	push	{r7, lr}
 800368c:	b086      	sub	sp, #24
 800368e:	af00      	add	r7, sp, #0
 8003690:	60f8      	str	r0, [r7, #12]
 8003692:	607a      	str	r2, [r7, #4]
 8003694:	603b      	str	r3, [r7, #0]
 8003696:	460b      	mov	r3, r1
 8003698:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800369a:	7afb      	ldrb	r3, [r7, #11]
 800369c:	f003 0207 	and.w	r2, r3, #7
 80036a0:	4613      	mov	r3, r2
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	4413      	add	r3, r2
 80036a6:	00db      	lsls	r3, r3, #3
 80036a8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80036ac:	68fa      	ldr	r2, [r7, #12]
 80036ae:	4413      	add	r3, r2
 80036b0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	683a      	ldr	r2, [r7, #0]
 80036bc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	2200      	movs	r2, #0
 80036c2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	2200      	movs	r2, #0
 80036c8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80036ca:	7afb      	ldrb	r3, [r7, #11]
 80036cc:	f003 0307 	and.w	r3, r3, #7
 80036d0:	b2da      	uxtb	r2, r3
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80036d6:	7afb      	ldrb	r3, [r7, #11]
 80036d8:	f003 0307 	and.w	r3, r3, #7
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d106      	bne.n	80036ee <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	6979      	ldr	r1, [r7, #20]
 80036e6:	4618      	mov	r0, r3
 80036e8:	f003 fdec 	bl	80072c4 <USB_EPStartXfer>
 80036ec:	e005      	b.n	80036fa <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	6979      	ldr	r1, [r7, #20]
 80036f4:	4618      	mov	r0, r3
 80036f6:	f003 fde5 	bl	80072c4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80036fa:	2300      	movs	r3, #0
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3718      	adds	r7, #24
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}

08003704 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	460b      	mov	r3, r1
 800370e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003710:	78fb      	ldrb	r3, [r7, #3]
 8003712:	f003 0207 	and.w	r2, r3, #7
 8003716:	6879      	ldr	r1, [r7, #4]
 8003718:	4613      	mov	r3, r2
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	4413      	add	r3, r2
 800371e:	00db      	lsls	r3, r3, #3
 8003720:	440b      	add	r3, r1
 8003722:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8003726:	681b      	ldr	r3, [r3, #0]
}
 8003728:	4618      	mov	r0, r3
 800372a:	370c      	adds	r7, #12
 800372c:	46bd      	mov	sp, r7
 800372e:	bc80      	pop	{r7}
 8003730:	4770      	bx	lr

08003732 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003732:	b580      	push	{r7, lr}
 8003734:	b086      	sub	sp, #24
 8003736:	af00      	add	r7, sp, #0
 8003738:	60f8      	str	r0, [r7, #12]
 800373a:	607a      	str	r2, [r7, #4]
 800373c:	603b      	str	r3, [r7, #0]
 800373e:	460b      	mov	r3, r1
 8003740:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003742:	7afb      	ldrb	r3, [r7, #11]
 8003744:	f003 0307 	and.w	r3, r3, #7
 8003748:	1c5a      	adds	r2, r3, #1
 800374a:	4613      	mov	r3, r2
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	4413      	add	r3, r2
 8003750:	00db      	lsls	r3, r3, #3
 8003752:	68fa      	ldr	r2, [r7, #12]
 8003754:	4413      	add	r3, r2
 8003756:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	683a      	ldr	r2, [r7, #0]
 8003762:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	683a      	ldr	r2, [r7, #0]
 8003770:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	2200      	movs	r2, #0
 8003776:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	2201      	movs	r2, #1
 800377c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800377e:	7afb      	ldrb	r3, [r7, #11]
 8003780:	f003 0307 	and.w	r3, r3, #7
 8003784:	b2da      	uxtb	r2, r3
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800378a:	7afb      	ldrb	r3, [r7, #11]
 800378c:	f003 0307 	and.w	r3, r3, #7
 8003790:	2b00      	cmp	r3, #0
 8003792:	d106      	bne.n	80037a2 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	6979      	ldr	r1, [r7, #20]
 800379a:	4618      	mov	r0, r3
 800379c:	f003 fd92 	bl	80072c4 <USB_EPStartXfer>
 80037a0:	e005      	b.n	80037ae <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	6979      	ldr	r1, [r7, #20]
 80037a8:	4618      	mov	r0, r3
 80037aa:	f003 fd8b 	bl	80072c4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80037ae:	2300      	movs	r3, #0
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3718      	adds	r7, #24
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}

080037b8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b084      	sub	sp, #16
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	460b      	mov	r3, r1
 80037c2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80037c4:	78fb      	ldrb	r3, [r7, #3]
 80037c6:	f003 0207 	and.w	r2, r3, #7
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d901      	bls.n	80037d6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e04c      	b.n	8003870 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80037d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	da0e      	bge.n	80037fc <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037de:	78fb      	ldrb	r3, [r7, #3]
 80037e0:	f003 0307 	and.w	r3, r3, #7
 80037e4:	1c5a      	adds	r2, r3, #1
 80037e6:	4613      	mov	r3, r2
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	4413      	add	r3, r2
 80037ec:	00db      	lsls	r3, r3, #3
 80037ee:	687a      	ldr	r2, [r7, #4]
 80037f0:	4413      	add	r3, r2
 80037f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2201      	movs	r2, #1
 80037f8:	705a      	strb	r2, [r3, #1]
 80037fa:	e00c      	b.n	8003816 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80037fc:	78fa      	ldrb	r2, [r7, #3]
 80037fe:	4613      	mov	r3, r2
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	4413      	add	r3, r2
 8003804:	00db      	lsls	r3, r3, #3
 8003806:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	4413      	add	r3, r2
 800380e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2200      	movs	r2, #0
 8003814:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2201      	movs	r2, #1
 800381a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800381c:	78fb      	ldrb	r3, [r7, #3]
 800381e:	f003 0307 	and.w	r3, r3, #7
 8003822:	b2da      	uxtb	r2, r3
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800382e:	2b01      	cmp	r3, #1
 8003830:	d101      	bne.n	8003836 <HAL_PCD_EP_SetStall+0x7e>
 8003832:	2302      	movs	r3, #2
 8003834:	e01c      	b.n	8003870 <HAL_PCD_EP_SetStall+0xb8>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2201      	movs	r2, #1
 800383a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	68f9      	ldr	r1, [r7, #12]
 8003844:	4618      	mov	r0, r3
 8003846:	f005 fb75 	bl	8008f34 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800384a:	78fb      	ldrb	r3, [r7, #3]
 800384c:	f003 0307 	and.w	r3, r3, #7
 8003850:	2b00      	cmp	r3, #0
 8003852:	d108      	bne.n	8003866 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800385e:	4619      	mov	r1, r3
 8003860:	4610      	mov	r0, r2
 8003862:	f005 fc9a 	bl	800919a <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800386e:	2300      	movs	r3, #0
}
 8003870:	4618      	mov	r0, r3
 8003872:	3710      	adds	r7, #16
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}

08003878 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b084      	sub	sp, #16
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	460b      	mov	r3, r1
 8003882:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003884:	78fb      	ldrb	r3, [r7, #3]
 8003886:	f003 020f 	and.w	r2, r3, #15
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	429a      	cmp	r2, r3
 8003890:	d901      	bls.n	8003896 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e040      	b.n	8003918 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003896:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800389a:	2b00      	cmp	r3, #0
 800389c:	da0e      	bge.n	80038bc <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800389e:	78fb      	ldrb	r3, [r7, #3]
 80038a0:	f003 0307 	and.w	r3, r3, #7
 80038a4:	1c5a      	adds	r2, r3, #1
 80038a6:	4613      	mov	r3, r2
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	4413      	add	r3, r2
 80038ac:	00db      	lsls	r3, r3, #3
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	4413      	add	r3, r2
 80038b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2201      	movs	r2, #1
 80038b8:	705a      	strb	r2, [r3, #1]
 80038ba:	e00e      	b.n	80038da <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80038bc:	78fb      	ldrb	r3, [r7, #3]
 80038be:	f003 0207 	and.w	r2, r3, #7
 80038c2:	4613      	mov	r3, r2
 80038c4:	009b      	lsls	r3, r3, #2
 80038c6:	4413      	add	r3, r2
 80038c8:	00db      	lsls	r3, r3, #3
 80038ca:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	4413      	add	r3, r2
 80038d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2200      	movs	r2, #0
 80038d8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2200      	movs	r2, #0
 80038de:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80038e0:	78fb      	ldrb	r3, [r7, #3]
 80038e2:	f003 0307 	and.w	r3, r3, #7
 80038e6:	b2da      	uxtb	r2, r3
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d101      	bne.n	80038fa <HAL_PCD_EP_ClrStall+0x82>
 80038f6:	2302      	movs	r3, #2
 80038f8:	e00e      	b.n	8003918 <HAL_PCD_EP_ClrStall+0xa0>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2201      	movs	r2, #1
 80038fe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	68f9      	ldr	r1, [r7, #12]
 8003908:	4618      	mov	r0, r3
 800390a:	f005 fb63 	bl	8008fd4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003916:	2300      	movs	r3, #0
}
 8003918:	4618      	mov	r0, r3
 800391a:	3710      	adds	r7, #16
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}

08003920 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b08e      	sub	sp, #56	; 0x38
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003928:	e2ec      	b.n	8003f04 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003932:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003934:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003936:	b2db      	uxtb	r3, r3
 8003938:	f003 030f 	and.w	r3, r3, #15
 800393c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8003940:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003944:	2b00      	cmp	r3, #0
 8003946:	f040 8161 	bne.w	8003c0c <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800394a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800394c:	f003 0310 	and.w	r3, r3, #16
 8003950:	2b00      	cmp	r3, #0
 8003952:	d152      	bne.n	80039fa <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	881b      	ldrh	r3, [r3, #0]
 800395a:	b29b      	uxth	r3, r3
 800395c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003960:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003964:	81fb      	strh	r3, [r7, #14]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	89fb      	ldrh	r3, [r7, #14]
 800396c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003970:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003974:	b29b      	uxth	r3, r3
 8003976:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	3328      	adds	r3, #40	; 0x28
 800397c:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003986:	b29b      	uxth	r3, r3
 8003988:	461a      	mov	r2, r3
 800398a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398c:	781b      	ldrb	r3, [r3, #0]
 800398e:	00db      	lsls	r3, r3, #3
 8003990:	4413      	add	r3, r2
 8003992:	3302      	adds	r3, #2
 8003994:	005b      	lsls	r3, r3, #1
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	6812      	ldr	r2, [r2, #0]
 800399a:	4413      	add	r3, r2
 800399c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80039a0:	881b      	ldrh	r3, [r3, #0]
 80039a2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80039a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80039aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ac:	695a      	ldr	r2, [r3, #20]
 80039ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b0:	69db      	ldr	r3, [r3, #28]
 80039b2:	441a      	add	r2, r3
 80039b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b6:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80039b8:	2100      	movs	r1, #0
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f7fe fd81 	bl	80024c2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	f000 829b 	beq.w	8003f04 <PCD_EP_ISR_Handler+0x5e4>
 80039ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d0:	699b      	ldr	r3, [r3, #24]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	f040 8296 	bne.w	8003f04 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80039e4:	b2da      	uxtb	r2, r3
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	b292      	uxth	r2, r2
 80039ec:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2200      	movs	r2, #0
 80039f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80039f8:	e284      	b.n	8003f04 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003a00:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	881b      	ldrh	r3, [r3, #0]
 8003a08:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003a0a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003a0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d034      	beq.n	8003a7e <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	461a      	mov	r2, r3
 8003a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a22:	781b      	ldrb	r3, [r3, #0]
 8003a24:	00db      	lsls	r3, r3, #3
 8003a26:	4413      	add	r3, r2
 8003a28:	3306      	adds	r3, #6
 8003a2a:	005b      	lsls	r3, r3, #1
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	6812      	ldr	r2, [r2, #0]
 8003a30:	4413      	add	r3, r2
 8003a32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a36:	881b      	ldrh	r3, [r3, #0]
 8003a38:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6818      	ldr	r0, [r3, #0]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8003a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a50:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	f005 fbf1 	bl	800923a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	881b      	ldrh	r3, [r3, #0]
 8003a5e:	b29a      	uxth	r2, r3
 8003a60:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003a64:	4013      	ands	r3, r2
 8003a66:	823b      	strh	r3, [r7, #16]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	8a3a      	ldrh	r2, [r7, #16]
 8003a6e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003a72:	b292      	uxth	r2, r2
 8003a74:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f7fe fcf6 	bl	8002468 <HAL_PCD_SetupStageCallback>
 8003a7c:	e242      	b.n	8003f04 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003a7e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	f280 823e 	bge.w	8003f04 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	881b      	ldrh	r3, [r3, #0]
 8003a8e:	b29a      	uxth	r2, r3
 8003a90:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003a94:	4013      	ands	r3, r2
 8003a96:	83bb      	strh	r3, [r7, #28]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	8bba      	ldrh	r2, [r7, #28]
 8003a9e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003aa2:	b292      	uxth	r2, r2
 8003aa4:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	00db      	lsls	r3, r3, #3
 8003ab8:	4413      	add	r3, r2
 8003aba:	3306      	adds	r3, #6
 8003abc:	005b      	lsls	r3, r3, #1
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	6812      	ldr	r2, [r2, #0]
 8003ac2:	4413      	add	r3, r2
 8003ac4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ac8:	881b      	ldrh	r3, [r3, #0]
 8003aca:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad0:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad4:	69db      	ldr	r3, [r3, #28]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d019      	beq.n	8003b0e <PCD_EP_ISR_Handler+0x1ee>
 8003ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003adc:	695b      	ldr	r3, [r3, #20]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d015      	beq.n	8003b0e <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6818      	ldr	r0, [r3, #0]
 8003ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae8:	6959      	ldr	r1, [r3, #20]
 8003aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aec:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af0:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	f005 fba1 	bl	800923a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afa:	695a      	ldr	r2, [r3, #20]
 8003afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afe:	69db      	ldr	r3, [r3, #28]
 8003b00:	441a      	add	r2, r3
 8003b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b04:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003b06:	2100      	movs	r1, #0
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f7fe fcbf 	bl	800248c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	881b      	ldrh	r3, [r3, #0]
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	f040 81f2 	bne.w	8003f04 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	61bb      	str	r3, [r7, #24]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	461a      	mov	r2, r3
 8003b32:	69bb      	ldr	r3, [r7, #24]
 8003b34:	4413      	add	r3, r2
 8003b36:	61bb      	str	r3, [r7, #24]
 8003b38:	69bb      	ldr	r3, [r7, #24]
 8003b3a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003b3e:	617b      	str	r3, [r7, #20]
 8003b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b42:	691b      	ldr	r3, [r3, #16]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d112      	bne.n	8003b6e <PCD_EP_ISR_Handler+0x24e>
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	881b      	ldrh	r3, [r3, #0]
 8003b4c:	b29b      	uxth	r3, r3
 8003b4e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003b52:	b29a      	uxth	r2, r3
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	801a      	strh	r2, [r3, #0]
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	881b      	ldrh	r3, [r3, #0]
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b66:	b29a      	uxth	r2, r3
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	801a      	strh	r2, [r3, #0]
 8003b6c:	e02f      	b.n	8003bce <PCD_EP_ISR_Handler+0x2ae>
 8003b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b70:	691b      	ldr	r3, [r3, #16]
 8003b72:	2b3e      	cmp	r3, #62	; 0x3e
 8003b74:	d813      	bhi.n	8003b9e <PCD_EP_ISR_Handler+0x27e>
 8003b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	085b      	lsrs	r3, r3, #1
 8003b7c:	633b      	str	r3, [r7, #48]	; 0x30
 8003b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b80:	691b      	ldr	r3, [r3, #16]
 8003b82:	f003 0301 	and.w	r3, r3, #1
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d002      	beq.n	8003b90 <PCD_EP_ISR_Handler+0x270>
 8003b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b8c:	3301      	adds	r3, #1
 8003b8e:	633b      	str	r3, [r7, #48]	; 0x30
 8003b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b92:	b29b      	uxth	r3, r3
 8003b94:	029b      	lsls	r3, r3, #10
 8003b96:	b29a      	uxth	r2, r3
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	801a      	strh	r2, [r3, #0]
 8003b9c:	e017      	b.n	8003bce <PCD_EP_ISR_Handler+0x2ae>
 8003b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba0:	691b      	ldr	r3, [r3, #16]
 8003ba2:	095b      	lsrs	r3, r3, #5
 8003ba4:	633b      	str	r3, [r7, #48]	; 0x30
 8003ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba8:	691b      	ldr	r3, [r3, #16]
 8003baa:	f003 031f 	and.w	r3, r3, #31
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d102      	bne.n	8003bb8 <PCD_EP_ISR_Handler+0x298>
 8003bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bb4:	3b01      	subs	r3, #1
 8003bb6:	633b      	str	r3, [r7, #48]	; 0x30
 8003bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	029b      	lsls	r3, r3, #10
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003bc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003bc8:	b29a      	uxth	r2, r3
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	881b      	ldrh	r3, [r3, #0]
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003bda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bde:	827b      	strh	r3, [r7, #18]
 8003be0:	8a7b      	ldrh	r3, [r7, #18]
 8003be2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003be6:	827b      	strh	r3, [r7, #18]
 8003be8:	8a7b      	ldrh	r3, [r7, #18]
 8003bea:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003bee:	827b      	strh	r3, [r7, #18]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	8a7b      	ldrh	r3, [r7, #18]
 8003bf6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003bfa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003bfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	8013      	strh	r3, [r2, #0]
 8003c0a:	e17b      	b.n	8003f04 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	461a      	mov	r2, r3
 8003c12:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	4413      	add	r3, r2
 8003c1a:	881b      	ldrh	r3, [r3, #0]
 8003c1c:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003c1e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	f280 80ea 	bge.w	8003dfc <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	4413      	add	r3, r2
 8003c36:	881b      	ldrh	r3, [r3, #0]
 8003c38:	b29a      	uxth	r2, r3
 8003c3a:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003c3e:	4013      	ands	r3, r2
 8003c40:	853b      	strh	r3, [r7, #40]	; 0x28
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	461a      	mov	r2, r3
 8003c48:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003c4c:	009b      	lsls	r3, r3, #2
 8003c4e:	4413      	add	r3, r2
 8003c50:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003c52:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003c56:	b292      	uxth	r2, r2
 8003c58:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003c5a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8003c5e:	4613      	mov	r3, r2
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	4413      	add	r3, r2
 8003c64:	00db      	lsls	r3, r3, #3
 8003c66:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	4413      	add	r3, r2
 8003c6e:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c72:	7b1b      	ldrb	r3, [r3, #12]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d122      	bne.n	8003cbe <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c80:	b29b      	uxth	r3, r3
 8003c82:	461a      	mov	r2, r3
 8003c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c86:	781b      	ldrb	r3, [r3, #0]
 8003c88:	00db      	lsls	r3, r3, #3
 8003c8a:	4413      	add	r3, r2
 8003c8c:	3306      	adds	r3, #6
 8003c8e:	005b      	lsls	r3, r3, #1
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	6812      	ldr	r2, [r2, #0]
 8003c94:	4413      	add	r3, r2
 8003c96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c9a:	881b      	ldrh	r3, [r3, #0]
 8003c9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ca0:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8003ca2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	f000 8087 	beq.w	8003db8 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6818      	ldr	r0, [r3, #0]
 8003cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb0:	6959      	ldr	r1, [r3, #20]
 8003cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb4:	88da      	ldrh	r2, [r3, #6]
 8003cb6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003cb8:	f005 fabf 	bl	800923a <USB_ReadPMA>
 8003cbc:	e07c      	b.n	8003db8 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc0:	78db      	ldrb	r3, [r3, #3]
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d108      	bne.n	8003cd8 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003cc6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003cc8:	461a      	mov	r2, r3
 8003cca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	f000 f927 	bl	8003f20 <HAL_PCD_EP_DB_Receive>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003cd6:	e06f      	b.n	8003db8 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	461a      	mov	r2, r3
 8003cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce0:	781b      	ldrb	r3, [r3, #0]
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	4413      	add	r3, r2
 8003ce6:	881b      	ldrh	r3, [r3, #0]
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cf2:	847b      	strh	r3, [r7, #34]	; 0x22
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfc:	781b      	ldrb	r3, [r3, #0]
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	441a      	add	r2, r3
 8003d02:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003d04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d10:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003d14:	b29b      	uxth	r3, r3
 8003d16:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d20:	781b      	ldrb	r3, [r3, #0]
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	4413      	add	r3, r2
 8003d26:	881b      	ldrh	r3, [r3, #0]
 8003d28:	b29b      	uxth	r3, r3
 8003d2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d021      	beq.n	8003d76 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	00db      	lsls	r3, r3, #3
 8003d44:	4413      	add	r3, r2
 8003d46:	3302      	adds	r3, #2
 8003d48:	005b      	lsls	r3, r3, #1
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	6812      	ldr	r2, [r2, #0]
 8003d4e:	4413      	add	r3, r2
 8003d50:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d54:	881b      	ldrh	r3, [r3, #0]
 8003d56:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d5a:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003d5c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d02a      	beq.n	8003db8 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6818      	ldr	r0, [r3, #0]
 8003d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d68:	6959      	ldr	r1, [r3, #20]
 8003d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6c:	891a      	ldrh	r2, [r3, #8]
 8003d6e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003d70:	f005 fa63 	bl	800923a <USB_ReadPMA>
 8003d74:	e020      	b.n	8003db8 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	461a      	mov	r2, r3
 8003d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d84:	781b      	ldrb	r3, [r3, #0]
 8003d86:	00db      	lsls	r3, r3, #3
 8003d88:	4413      	add	r3, r2
 8003d8a:	3306      	adds	r3, #6
 8003d8c:	005b      	lsls	r3, r3, #1
 8003d8e:	687a      	ldr	r2, [r7, #4]
 8003d90:	6812      	ldr	r2, [r2, #0]
 8003d92:	4413      	add	r3, r2
 8003d94:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d98:	881b      	ldrh	r3, [r3, #0]
 8003d9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d9e:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003da0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d008      	beq.n	8003db8 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6818      	ldr	r0, [r3, #0]
 8003daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dac:	6959      	ldr	r1, [r3, #20]
 8003dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db0:	895a      	ldrh	r2, [r3, #10]
 8003db2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003db4:	f005 fa41 	bl	800923a <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dba:	69da      	ldr	r2, [r3, #28]
 8003dbc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003dbe:	441a      	add	r2, r3
 8003dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc6:	695a      	ldr	r2, [r3, #20]
 8003dc8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003dca:	441a      	add	r2, r3
 8003dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dce:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd2:	699b      	ldr	r3, [r3, #24]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d004      	beq.n	8003de2 <PCD_EP_ISR_Handler+0x4c2>
 8003dd8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ddc:	691b      	ldr	r3, [r3, #16]
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d206      	bcs.n	8003df0 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de4:	781b      	ldrb	r3, [r3, #0]
 8003de6:	4619      	mov	r1, r3
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	f7fe fb4f 	bl	800248c <HAL_PCD_DataOutStageCallback>
 8003dee:	e005      	b.n	8003dfc <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003df6:	4618      	mov	r0, r3
 8003df8:	f003 fa64 	bl	80072c4 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003dfc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003dfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d07e      	beq.n	8003f04 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8003e06:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003e0a:	1c5a      	adds	r2, r3, #1
 8003e0c:	4613      	mov	r3, r2
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	4413      	add	r3, r2
 8003e12:	00db      	lsls	r3, r3, #3
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	4413      	add	r3, r2
 8003e18:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	461a      	mov	r2, r3
 8003e20:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003e24:	009b      	lsls	r3, r3, #2
 8003e26:	4413      	add	r3, r2
 8003e28:	881b      	ldrh	r3, [r3, #0]
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003e30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e34:	843b      	strh	r3, [r7, #32]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	441a      	add	r2, r3
 8003e44:	8c3b      	ldrh	r3, [r7, #32]
 8003e46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8003e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e54:	78db      	ldrb	r3, [r3, #3]
 8003e56:	2b03      	cmp	r3, #3
 8003e58:	d00c      	beq.n	8003e74 <PCD_EP_ISR_Handler+0x554>
 8003e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5c:	78db      	ldrb	r3, [r3, #3]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d008      	beq.n	8003e74 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e64:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8003e66:	2b02      	cmp	r3, #2
 8003e68:	d146      	bne.n	8003ef8 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003e6a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d141      	bne.n	8003ef8 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	461a      	mov	r2, r3
 8003e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e82:	781b      	ldrb	r3, [r3, #0]
 8003e84:	00db      	lsls	r3, r3, #3
 8003e86:	4413      	add	r3, r2
 8003e88:	3302      	adds	r3, #2
 8003e8a:	005b      	lsls	r3, r3, #1
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	6812      	ldr	r2, [r2, #0]
 8003e90:	4413      	add	r3, r2
 8003e92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e96:	881b      	ldrh	r3, [r3, #0]
 8003e98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e9c:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8003e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea0:	699a      	ldr	r2, [r3, #24]
 8003ea2:	8bfb      	ldrh	r3, [r7, #30]
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d906      	bls.n	8003eb6 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8003ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eaa:	699a      	ldr	r2, [r3, #24]
 8003eac:	8bfb      	ldrh	r3, [r7, #30]
 8003eae:	1ad2      	subs	r2, r2, r3
 8003eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb2:	619a      	str	r2, [r3, #24]
 8003eb4:	e002      	b.n	8003ebc <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8003eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb8:	2200      	movs	r2, #0
 8003eba:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8003ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ebe:	699b      	ldr	r3, [r3, #24]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d106      	bne.n	8003ed2 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec6:	781b      	ldrb	r3, [r3, #0]
 8003ec8:	4619      	mov	r1, r3
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f7fe faf9 	bl	80024c2 <HAL_PCD_DataInStageCallback>
 8003ed0:	e018      	b.n	8003f04 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8003ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed4:	695a      	ldr	r2, [r3, #20]
 8003ed6:	8bfb      	ldrh	r3, [r7, #30]
 8003ed8:	441a      	add	r2, r3
 8003eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003edc:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8003ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee0:	69da      	ldr	r2, [r3, #28]
 8003ee2:	8bfb      	ldrh	r3, [r7, #30]
 8003ee4:	441a      	add	r2, r3
 8003ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee8:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f003 f9e7 	bl	80072c4 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8003ef6:	e005      	b.n	8003f04 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003ef8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003efa:	461a      	mov	r2, r3
 8003efc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f000 f91b 	bl	800413a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	b21b      	sxth	r3, r3
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	f6ff ad0a 	blt.w	800392a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003f16:	2300      	movs	r3, #0
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3738      	adds	r7, #56	; 0x38
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}

08003f20 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b088      	sub	sp, #32
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	60f8      	str	r0, [r7, #12]
 8003f28:	60b9      	str	r1, [r7, #8]
 8003f2a:	4613      	mov	r3, r2
 8003f2c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003f2e:	88fb      	ldrh	r3, [r7, #6]
 8003f30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d07e      	beq.n	8004036 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	461a      	mov	r2, r3
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	781b      	ldrb	r3, [r3, #0]
 8003f48:	00db      	lsls	r3, r3, #3
 8003f4a:	4413      	add	r3, r2
 8003f4c:	3302      	adds	r3, #2
 8003f4e:	005b      	lsls	r3, r3, #1
 8003f50:	68fa      	ldr	r2, [r7, #12]
 8003f52:	6812      	ldr	r2, [r2, #0]
 8003f54:	4413      	add	r3, r2
 8003f56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f5a:	881b      	ldrh	r3, [r3, #0]
 8003f5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f60:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	699a      	ldr	r2, [r3, #24]
 8003f66:	8b7b      	ldrh	r3, [r7, #26]
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d306      	bcc.n	8003f7a <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	699a      	ldr	r2, [r3, #24]
 8003f70:	8b7b      	ldrh	r3, [r7, #26]
 8003f72:	1ad2      	subs	r2, r2, r3
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	619a      	str	r2, [r3, #24]
 8003f78:	e002      	b.n	8003f80 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	699b      	ldr	r3, [r3, #24]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d123      	bne.n	8003fd0 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	461a      	mov	r2, r3
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	781b      	ldrb	r3, [r3, #0]
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	4413      	add	r3, r2
 8003f96:	881b      	ldrh	r3, [r3, #0]
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fa2:	833b      	strh	r3, [r7, #24]
 8003fa4:	8b3b      	ldrh	r3, [r7, #24]
 8003fa6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003faa:	833b      	strh	r3, [r7, #24]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	781b      	ldrb	r3, [r3, #0]
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	441a      	add	r2, r3
 8003fba:	8b3b      	ldrh	r3, [r7, #24]
 8003fbc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fc0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fcc:	b29b      	uxth	r3, r3
 8003fce:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003fd0:	88fb      	ldrh	r3, [r7, #6]
 8003fd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d01f      	beq.n	800401a <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	461a      	mov	r2, r3
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	781b      	ldrb	r3, [r3, #0]
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	4413      	add	r3, r2
 8003fe8:	881b      	ldrh	r3, [r3, #0]
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ff0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ff4:	82fb      	strh	r3, [r7, #22]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	781b      	ldrb	r3, [r3, #0]
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	441a      	add	r2, r3
 8004004:	8afb      	ldrh	r3, [r7, #22]
 8004006:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800400a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800400e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004012:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004016:	b29b      	uxth	r3, r3
 8004018:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800401a:	8b7b      	ldrh	r3, [r7, #26]
 800401c:	2b00      	cmp	r3, #0
 800401e:	f000 8087 	beq.w	8004130 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	6818      	ldr	r0, [r3, #0]
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	6959      	ldr	r1, [r3, #20]
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	891a      	ldrh	r2, [r3, #8]
 800402e:	8b7b      	ldrh	r3, [r7, #26]
 8004030:	f005 f903 	bl	800923a <USB_ReadPMA>
 8004034:	e07c      	b.n	8004130 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800403e:	b29b      	uxth	r3, r3
 8004040:	461a      	mov	r2, r3
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	781b      	ldrb	r3, [r3, #0]
 8004046:	00db      	lsls	r3, r3, #3
 8004048:	4413      	add	r3, r2
 800404a:	3306      	adds	r3, #6
 800404c:	005b      	lsls	r3, r3, #1
 800404e:	68fa      	ldr	r2, [r7, #12]
 8004050:	6812      	ldr	r2, [r2, #0]
 8004052:	4413      	add	r3, r2
 8004054:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004058:	881b      	ldrh	r3, [r3, #0]
 800405a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800405e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	699a      	ldr	r2, [r3, #24]
 8004064:	8b7b      	ldrh	r3, [r7, #26]
 8004066:	429a      	cmp	r2, r3
 8004068:	d306      	bcc.n	8004078 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	699a      	ldr	r2, [r3, #24]
 800406e:	8b7b      	ldrh	r3, [r7, #26]
 8004070:	1ad2      	subs	r2, r2, r3
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	619a      	str	r2, [r3, #24]
 8004076:	e002      	b.n	800407e <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	2200      	movs	r2, #0
 800407c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	699b      	ldr	r3, [r3, #24]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d123      	bne.n	80040ce <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	461a      	mov	r2, r3
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	781b      	ldrb	r3, [r3, #0]
 8004090:	009b      	lsls	r3, r3, #2
 8004092:	4413      	add	r3, r2
 8004094:	881b      	ldrh	r3, [r3, #0]
 8004096:	b29b      	uxth	r3, r3
 8004098:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800409c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040a0:	83fb      	strh	r3, [r7, #30]
 80040a2:	8bfb      	ldrh	r3, [r7, #30]
 80040a4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80040a8:	83fb      	strh	r3, [r7, #30]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	461a      	mov	r2, r3
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	781b      	ldrb	r3, [r3, #0]
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	441a      	add	r2, r3
 80040b8:	8bfb      	ldrh	r3, [r7, #30]
 80040ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80040ce:	88fb      	ldrh	r3, [r7, #6]
 80040d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d11f      	bne.n	8004118 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	461a      	mov	r2, r3
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	781b      	ldrb	r3, [r3, #0]
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	4413      	add	r3, r2
 80040e6:	881b      	ldrh	r3, [r3, #0]
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040f2:	83bb      	strh	r3, [r7, #28]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	461a      	mov	r2, r3
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	781b      	ldrb	r3, [r3, #0]
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	441a      	add	r2, r3
 8004102:	8bbb      	ldrh	r3, [r7, #28]
 8004104:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004108:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800410c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004110:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004114:	b29b      	uxth	r3, r3
 8004116:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004118:	8b7b      	ldrh	r3, [r7, #26]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d008      	beq.n	8004130 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6818      	ldr	r0, [r3, #0]
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	6959      	ldr	r1, [r3, #20]
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	895a      	ldrh	r2, [r3, #10]
 800412a:	8b7b      	ldrh	r3, [r7, #26]
 800412c:	f005 f885 	bl	800923a <USB_ReadPMA>
    }
  }

  return count;
 8004130:	8b7b      	ldrh	r3, [r7, #26]
}
 8004132:	4618      	mov	r0, r3
 8004134:	3720      	adds	r7, #32
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}

0800413a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800413a:	b580      	push	{r7, lr}
 800413c:	b0a2      	sub	sp, #136	; 0x88
 800413e:	af00      	add	r7, sp, #0
 8004140:	60f8      	str	r0, [r7, #12]
 8004142:	60b9      	str	r1, [r7, #8]
 8004144:	4613      	mov	r3, r2
 8004146:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004148:	88fb      	ldrh	r3, [r7, #6]
 800414a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800414e:	2b00      	cmp	r3, #0
 8004150:	f000 81c7 	beq.w	80044e2 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800415c:	b29b      	uxth	r3, r3
 800415e:	461a      	mov	r2, r3
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	781b      	ldrb	r3, [r3, #0]
 8004164:	00db      	lsls	r3, r3, #3
 8004166:	4413      	add	r3, r2
 8004168:	3302      	adds	r3, #2
 800416a:	005b      	lsls	r3, r3, #1
 800416c:	68fa      	ldr	r2, [r7, #12]
 800416e:	6812      	ldr	r2, [r2, #0]
 8004170:	4413      	add	r3, r2
 8004172:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004176:	881b      	ldrh	r3, [r3, #0]
 8004178:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800417c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	699a      	ldr	r2, [r3, #24]
 8004184:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004188:	429a      	cmp	r2, r3
 800418a:	d907      	bls.n	800419c <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	699a      	ldr	r2, [r3, #24]
 8004190:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004194:	1ad2      	subs	r2, r2, r3
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	619a      	str	r2, [r3, #24]
 800419a:	e002      	b.n	80041a2 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	2200      	movs	r2, #0
 80041a0:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	699b      	ldr	r3, [r3, #24]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	f040 80b9 	bne.w	800431e <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	785b      	ldrb	r3, [r3, #1]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d126      	bne.n	8004202 <HAL_PCD_EP_DB_Transmit+0xc8>
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	461a      	mov	r2, r3
 80041c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041c8:	4413      	add	r3, r2
 80041ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	781b      	ldrb	r3, [r3, #0]
 80041d0:	011a      	lsls	r2, r3, #4
 80041d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041d4:	4413      	add	r3, r2
 80041d6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80041da:	627b      	str	r3, [r7, #36]	; 0x24
 80041dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041de:	881b      	ldrh	r3, [r3, #0]
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80041e6:	b29a      	uxth	r2, r3
 80041e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ea:	801a      	strh	r2, [r3, #0]
 80041ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ee:	881b      	ldrh	r3, [r3, #0]
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041fa:	b29a      	uxth	r2, r3
 80041fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fe:	801a      	strh	r2, [r3, #0]
 8004200:	e01a      	b.n	8004238 <HAL_PCD_EP_DB_Transmit+0xfe>
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	785b      	ldrb	r3, [r3, #1]
 8004206:	2b01      	cmp	r3, #1
 8004208:	d116      	bne.n	8004238 <HAL_PCD_EP_DB_Transmit+0xfe>
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	633b      	str	r3, [r7, #48]	; 0x30
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004218:	b29b      	uxth	r3, r3
 800421a:	461a      	mov	r2, r3
 800421c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800421e:	4413      	add	r3, r2
 8004220:	633b      	str	r3, [r7, #48]	; 0x30
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	781b      	ldrb	r3, [r3, #0]
 8004226:	011a      	lsls	r2, r3, #4
 8004228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800422a:	4413      	add	r3, r2
 800422c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004230:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004234:	2200      	movs	r2, #0
 8004236:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	623b      	str	r3, [r7, #32]
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	785b      	ldrb	r3, [r3, #1]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d126      	bne.n	8004294 <HAL_PCD_EP_DB_Transmit+0x15a>
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	61bb      	str	r3, [r7, #24]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004254:	b29b      	uxth	r3, r3
 8004256:	461a      	mov	r2, r3
 8004258:	69bb      	ldr	r3, [r7, #24]
 800425a:	4413      	add	r3, r2
 800425c:	61bb      	str	r3, [r7, #24]
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	781b      	ldrb	r3, [r3, #0]
 8004262:	011a      	lsls	r2, r3, #4
 8004264:	69bb      	ldr	r3, [r7, #24]
 8004266:	4413      	add	r3, r2
 8004268:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800426c:	617b      	str	r3, [r7, #20]
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	881b      	ldrh	r3, [r3, #0]
 8004272:	b29b      	uxth	r3, r3
 8004274:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004278:	b29a      	uxth	r2, r3
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	801a      	strh	r2, [r3, #0]
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	881b      	ldrh	r3, [r3, #0]
 8004282:	b29b      	uxth	r3, r3
 8004284:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004288:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800428c:	b29a      	uxth	r2, r3
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	801a      	strh	r2, [r3, #0]
 8004292:	e017      	b.n	80042c4 <HAL_PCD_EP_DB_Transmit+0x18a>
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	785b      	ldrb	r3, [r3, #1]
 8004298:	2b01      	cmp	r3, #1
 800429a:	d113      	bne.n	80042c4 <HAL_PCD_EP_DB_Transmit+0x18a>
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042a4:	b29b      	uxth	r3, r3
 80042a6:	461a      	mov	r2, r3
 80042a8:	6a3b      	ldr	r3, [r7, #32]
 80042aa:	4413      	add	r3, r2
 80042ac:	623b      	str	r3, [r7, #32]
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	781b      	ldrb	r3, [r3, #0]
 80042b2:	011a      	lsls	r2, r3, #4
 80042b4:	6a3b      	ldr	r3, [r7, #32]
 80042b6:	4413      	add	r3, r2
 80042b8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80042bc:	61fb      	str	r3, [r7, #28]
 80042be:	69fb      	ldr	r3, [r7, #28]
 80042c0:	2200      	movs	r2, #0
 80042c2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	781b      	ldrb	r3, [r3, #0]
 80042c8:	4619      	mov	r1, r3
 80042ca:	68f8      	ldr	r0, [r7, #12]
 80042cc:	f7fe f8f9 	bl	80024c2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80042d0:	88fb      	ldrh	r3, [r7, #6]
 80042d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	f000 82d4 	beq.w	8004884 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	461a      	mov	r2, r3
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	781b      	ldrb	r3, [r3, #0]
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	4413      	add	r3, r2
 80042ea:	881b      	ldrh	r3, [r3, #0]
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042f6:	827b      	strh	r3, [r7, #18]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	461a      	mov	r2, r3
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	781b      	ldrb	r3, [r3, #0]
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	441a      	add	r2, r3
 8004306:	8a7b      	ldrh	r3, [r7, #18]
 8004308:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800430c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004310:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004314:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004318:	b29b      	uxth	r3, r3
 800431a:	8013      	strh	r3, [r2, #0]
 800431c:	e2b2      	b.n	8004884 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800431e:	88fb      	ldrh	r3, [r7, #6]
 8004320:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004324:	2b00      	cmp	r3, #0
 8004326:	d021      	beq.n	800436c <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	461a      	mov	r2, r3
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	781b      	ldrb	r3, [r3, #0]
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	4413      	add	r3, r2
 8004336:	881b      	ldrh	r3, [r3, #0]
 8004338:	b29b      	uxth	r3, r3
 800433a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800433e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004342:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	461a      	mov	r2, r3
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	781b      	ldrb	r3, [r3, #0]
 8004350:	009b      	lsls	r3, r3, #2
 8004352:	441a      	add	r2, r3
 8004354:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004358:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800435c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004360:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004364:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004368:	b29b      	uxth	r3, r3
 800436a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004372:	2b01      	cmp	r3, #1
 8004374:	f040 8286 	bne.w	8004884 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	695a      	ldr	r2, [r3, #20]
 800437c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004380:	441a      	add	r2, r3
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	69da      	ldr	r2, [r3, #28]
 800438a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800438e:	441a      	add	r2, r3
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	6a1a      	ldr	r2, [r3, #32]
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	691b      	ldr	r3, [r3, #16]
 800439c:	429a      	cmp	r2, r3
 800439e:	d309      	bcc.n	80043b4 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	691b      	ldr	r3, [r3, #16]
 80043a4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	6a1a      	ldr	r2, [r3, #32]
 80043aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043ac:	1ad2      	subs	r2, r2, r3
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	621a      	str	r2, [r3, #32]
 80043b2:	e015      	b.n	80043e0 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	6a1b      	ldr	r3, [r3, #32]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d107      	bne.n	80043cc <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 80043bc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80043c0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	2200      	movs	r2, #0
 80043c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80043ca:	e009      	b.n	80043e0 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	2200      	movs	r2, #0
 80043d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	6a1b      	ldr	r3, [r3, #32]
 80043d8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	2200      	movs	r2, #0
 80043de:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	785b      	ldrb	r3, [r3, #1]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d155      	bne.n	8004494 <HAL_PCD_EP_DB_Transmit+0x35a>
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	63bb      	str	r3, [r7, #56]	; 0x38
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	461a      	mov	r2, r3
 80043fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043fc:	4413      	add	r3, r2
 80043fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	011a      	lsls	r2, r3, #4
 8004406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004408:	4413      	add	r3, r2
 800440a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800440e:	637b      	str	r3, [r7, #52]	; 0x34
 8004410:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004412:	2b00      	cmp	r3, #0
 8004414:	d112      	bne.n	800443c <HAL_PCD_EP_DB_Transmit+0x302>
 8004416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004418:	881b      	ldrh	r3, [r3, #0]
 800441a:	b29b      	uxth	r3, r3
 800441c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004420:	b29a      	uxth	r2, r3
 8004422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004424:	801a      	strh	r2, [r3, #0]
 8004426:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004428:	881b      	ldrh	r3, [r3, #0]
 800442a:	b29b      	uxth	r3, r3
 800442c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004430:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004434:	b29a      	uxth	r2, r3
 8004436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004438:	801a      	strh	r2, [r3, #0]
 800443a:	e047      	b.n	80044cc <HAL_PCD_EP_DB_Transmit+0x392>
 800443c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800443e:	2b3e      	cmp	r3, #62	; 0x3e
 8004440:	d811      	bhi.n	8004466 <HAL_PCD_EP_DB_Transmit+0x32c>
 8004442:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004444:	085b      	lsrs	r3, r3, #1
 8004446:	64bb      	str	r3, [r7, #72]	; 0x48
 8004448:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800444a:	f003 0301 	and.w	r3, r3, #1
 800444e:	2b00      	cmp	r3, #0
 8004450:	d002      	beq.n	8004458 <HAL_PCD_EP_DB_Transmit+0x31e>
 8004452:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004454:	3301      	adds	r3, #1
 8004456:	64bb      	str	r3, [r7, #72]	; 0x48
 8004458:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800445a:	b29b      	uxth	r3, r3
 800445c:	029b      	lsls	r3, r3, #10
 800445e:	b29a      	uxth	r2, r3
 8004460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004462:	801a      	strh	r2, [r3, #0]
 8004464:	e032      	b.n	80044cc <HAL_PCD_EP_DB_Transmit+0x392>
 8004466:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004468:	095b      	lsrs	r3, r3, #5
 800446a:	64bb      	str	r3, [r7, #72]	; 0x48
 800446c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800446e:	f003 031f 	and.w	r3, r3, #31
 8004472:	2b00      	cmp	r3, #0
 8004474:	d102      	bne.n	800447c <HAL_PCD_EP_DB_Transmit+0x342>
 8004476:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004478:	3b01      	subs	r3, #1
 800447a:	64bb      	str	r3, [r7, #72]	; 0x48
 800447c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800447e:	b29b      	uxth	r3, r3
 8004480:	029b      	lsls	r3, r3, #10
 8004482:	b29b      	uxth	r3, r3
 8004484:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004488:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800448c:	b29a      	uxth	r2, r3
 800448e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004490:	801a      	strh	r2, [r3, #0]
 8004492:	e01b      	b.n	80044cc <HAL_PCD_EP_DB_Transmit+0x392>
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	785b      	ldrb	r3, [r3, #1]
 8004498:	2b01      	cmp	r3, #1
 800449a:	d117      	bne.n	80044cc <HAL_PCD_EP_DB_Transmit+0x392>
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	643b      	str	r3, [r7, #64]	; 0x40
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	461a      	mov	r2, r3
 80044ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044b0:	4413      	add	r3, r2
 80044b2:	643b      	str	r3, [r7, #64]	; 0x40
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	781b      	ldrb	r3, [r3, #0]
 80044b8:	011a      	lsls	r2, r3, #4
 80044ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044bc:	4413      	add	r3, r2
 80044be:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80044c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044c6:	b29a      	uxth	r2, r3
 80044c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044ca:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	6818      	ldr	r0, [r3, #0]
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	6959      	ldr	r1, [r3, #20]
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	891a      	ldrh	r2, [r3, #8]
 80044d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044da:	b29b      	uxth	r3, r3
 80044dc:	f004 fe68 	bl	80091b0 <USB_WritePMA>
 80044e0:	e1d0      	b.n	8004884 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	461a      	mov	r2, r3
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	781b      	ldrb	r3, [r3, #0]
 80044f2:	00db      	lsls	r3, r3, #3
 80044f4:	4413      	add	r3, r2
 80044f6:	3306      	adds	r3, #6
 80044f8:	005b      	lsls	r3, r3, #1
 80044fa:	68fa      	ldr	r2, [r7, #12]
 80044fc:	6812      	ldr	r2, [r2, #0]
 80044fe:	4413      	add	r3, r2
 8004500:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004504:	881b      	ldrh	r3, [r3, #0]
 8004506:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800450a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	699a      	ldr	r2, [r3, #24]
 8004512:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004516:	429a      	cmp	r2, r3
 8004518:	d307      	bcc.n	800452a <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	699a      	ldr	r2, [r3, #24]
 800451e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004522:	1ad2      	subs	r2, r2, r3
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	619a      	str	r2, [r3, #24]
 8004528:	e002      	b.n	8004530 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	2200      	movs	r2, #0
 800452e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	699b      	ldr	r3, [r3, #24]
 8004534:	2b00      	cmp	r3, #0
 8004536:	f040 80c4 	bne.w	80046c2 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	785b      	ldrb	r3, [r3, #1]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d126      	bne.n	8004590 <HAL_PCD_EP_DB_Transmit+0x456>
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004550:	b29b      	uxth	r3, r3
 8004552:	461a      	mov	r2, r3
 8004554:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004556:	4413      	add	r3, r2
 8004558:	66fb      	str	r3, [r7, #108]	; 0x6c
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	781b      	ldrb	r3, [r3, #0]
 800455e:	011a      	lsls	r2, r3, #4
 8004560:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004562:	4413      	add	r3, r2
 8004564:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004568:	66bb      	str	r3, [r7, #104]	; 0x68
 800456a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800456c:	881b      	ldrh	r3, [r3, #0]
 800456e:	b29b      	uxth	r3, r3
 8004570:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004574:	b29a      	uxth	r2, r3
 8004576:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004578:	801a      	strh	r2, [r3, #0]
 800457a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800457c:	881b      	ldrh	r3, [r3, #0]
 800457e:	b29b      	uxth	r3, r3
 8004580:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004584:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004588:	b29a      	uxth	r2, r3
 800458a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800458c:	801a      	strh	r2, [r3, #0]
 800458e:	e01a      	b.n	80045c6 <HAL_PCD_EP_DB_Transmit+0x48c>
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	785b      	ldrb	r3, [r3, #1]
 8004594:	2b01      	cmp	r3, #1
 8004596:	d116      	bne.n	80045c6 <HAL_PCD_EP_DB_Transmit+0x48c>
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	677b      	str	r3, [r7, #116]	; 0x74
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	461a      	mov	r2, r3
 80045aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045ac:	4413      	add	r3, r2
 80045ae:	677b      	str	r3, [r7, #116]	; 0x74
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	781b      	ldrb	r3, [r3, #0]
 80045b4:	011a      	lsls	r2, r3, #4
 80045b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045b8:	4413      	add	r3, r2
 80045ba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80045be:	673b      	str	r3, [r7, #112]	; 0x70
 80045c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80045c2:	2200      	movs	r2, #0
 80045c4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	67bb      	str	r3, [r7, #120]	; 0x78
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	785b      	ldrb	r3, [r3, #1]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d12f      	bne.n	8004634 <HAL_PCD_EP_DB_Transmit+0x4fa>
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	461a      	mov	r2, r3
 80045e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80045ec:	4413      	add	r3, r2
 80045ee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	781b      	ldrb	r3, [r3, #0]
 80045f6:	011a      	lsls	r2, r3, #4
 80045f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80045fc:	4413      	add	r3, r2
 80045fe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004602:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004606:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800460a:	881b      	ldrh	r3, [r3, #0]
 800460c:	b29b      	uxth	r3, r3
 800460e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004612:	b29a      	uxth	r2, r3
 8004614:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004618:	801a      	strh	r2, [r3, #0]
 800461a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800461e:	881b      	ldrh	r3, [r3, #0]
 8004620:	b29b      	uxth	r3, r3
 8004622:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004626:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800462a:	b29a      	uxth	r2, r3
 800462c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004630:	801a      	strh	r2, [r3, #0]
 8004632:	e017      	b.n	8004664 <HAL_PCD_EP_DB_Transmit+0x52a>
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	785b      	ldrb	r3, [r3, #1]
 8004638:	2b01      	cmp	r3, #1
 800463a:	d113      	bne.n	8004664 <HAL_PCD_EP_DB_Transmit+0x52a>
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004644:	b29b      	uxth	r3, r3
 8004646:	461a      	mov	r2, r3
 8004648:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800464a:	4413      	add	r3, r2
 800464c:	67bb      	str	r3, [r7, #120]	; 0x78
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	781b      	ldrb	r3, [r3, #0]
 8004652:	011a      	lsls	r2, r3, #4
 8004654:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004656:	4413      	add	r3, r2
 8004658:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800465c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800465e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004660:	2200      	movs	r2, #0
 8004662:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	781b      	ldrb	r3, [r3, #0]
 8004668:	4619      	mov	r1, r3
 800466a:	68f8      	ldr	r0, [r7, #12]
 800466c:	f7fd ff29 	bl	80024c2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004670:	88fb      	ldrh	r3, [r7, #6]
 8004672:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004676:	2b00      	cmp	r3, #0
 8004678:	f040 8104 	bne.w	8004884 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	461a      	mov	r2, r3
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	781b      	ldrb	r3, [r3, #0]
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	4413      	add	r3, r2
 800468a:	881b      	ldrh	r3, [r3, #0]
 800468c:	b29b      	uxth	r3, r3
 800468e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004692:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004696:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	461a      	mov	r2, r3
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	009b      	lsls	r3, r3, #2
 80046a6:	441a      	add	r2, r3
 80046a8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80046ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80046b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046bc:	b29b      	uxth	r3, r3
 80046be:	8013      	strh	r3, [r2, #0]
 80046c0:	e0e0      	b.n	8004884 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80046c2:	88fb      	ldrh	r3, [r7, #6]
 80046c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d121      	bne.n	8004710 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	461a      	mov	r2, r3
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	781b      	ldrb	r3, [r3, #0]
 80046d6:	009b      	lsls	r3, r3, #2
 80046d8:	4413      	add	r3, r2
 80046da:	881b      	ldrh	r3, [r3, #0]
 80046dc:	b29b      	uxth	r3, r3
 80046de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046e6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	461a      	mov	r2, r3
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	781b      	ldrb	r3, [r3, #0]
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	441a      	add	r2, r3
 80046f8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80046fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004700:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004704:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004708:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800470c:	b29b      	uxth	r3, r3
 800470e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004716:	2b01      	cmp	r3, #1
 8004718:	f040 80b4 	bne.w	8004884 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	695a      	ldr	r2, [r3, #20]
 8004720:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004724:	441a      	add	r2, r3
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	69da      	ldr	r2, [r3, #28]
 800472e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004732:	441a      	add	r2, r3
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	6a1a      	ldr	r2, [r3, #32]
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	691b      	ldr	r3, [r3, #16]
 8004740:	429a      	cmp	r2, r3
 8004742:	d309      	bcc.n	8004758 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	691b      	ldr	r3, [r3, #16]
 8004748:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	6a1a      	ldr	r2, [r3, #32]
 800474e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004750:	1ad2      	subs	r2, r2, r3
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	621a      	str	r2, [r3, #32]
 8004756:	e015      	b.n	8004784 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	6a1b      	ldr	r3, [r3, #32]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d107      	bne.n	8004770 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8004760:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004764:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	2200      	movs	r2, #0
 800476a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800476e:	e009      	b.n	8004784 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	6a1b      	ldr	r3, [r3, #32]
 8004774:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	2200      	movs	r2, #0
 800477a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	2200      	movs	r2, #0
 8004780:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	667b      	str	r3, [r7, #100]	; 0x64
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	785b      	ldrb	r3, [r3, #1]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d155      	bne.n	800483e <HAL_PCD_EP_DB_Transmit+0x704>
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	461a      	mov	r2, r3
 80047a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047a6:	4413      	add	r3, r2
 80047a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	781b      	ldrb	r3, [r3, #0]
 80047ae:	011a      	lsls	r2, r3, #4
 80047b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047b2:	4413      	add	r3, r2
 80047b4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80047b8:	65bb      	str	r3, [r7, #88]	; 0x58
 80047ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d112      	bne.n	80047e6 <HAL_PCD_EP_DB_Transmit+0x6ac>
 80047c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80047c2:	881b      	ldrh	r3, [r3, #0]
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80047ca:	b29a      	uxth	r2, r3
 80047cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80047ce:	801a      	strh	r2, [r3, #0]
 80047d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80047d2:	881b      	ldrh	r3, [r3, #0]
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047de:	b29a      	uxth	r2, r3
 80047e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80047e2:	801a      	strh	r2, [r3, #0]
 80047e4:	e044      	b.n	8004870 <HAL_PCD_EP_DB_Transmit+0x736>
 80047e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047e8:	2b3e      	cmp	r3, #62	; 0x3e
 80047ea:	d811      	bhi.n	8004810 <HAL_PCD_EP_DB_Transmit+0x6d6>
 80047ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047ee:	085b      	lsrs	r3, r3, #1
 80047f0:	657b      	str	r3, [r7, #84]	; 0x54
 80047f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047f4:	f003 0301 	and.w	r3, r3, #1
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d002      	beq.n	8004802 <HAL_PCD_EP_DB_Transmit+0x6c8>
 80047fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047fe:	3301      	adds	r3, #1
 8004800:	657b      	str	r3, [r7, #84]	; 0x54
 8004802:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004804:	b29b      	uxth	r3, r3
 8004806:	029b      	lsls	r3, r3, #10
 8004808:	b29a      	uxth	r2, r3
 800480a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800480c:	801a      	strh	r2, [r3, #0]
 800480e:	e02f      	b.n	8004870 <HAL_PCD_EP_DB_Transmit+0x736>
 8004810:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004812:	095b      	lsrs	r3, r3, #5
 8004814:	657b      	str	r3, [r7, #84]	; 0x54
 8004816:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004818:	f003 031f 	and.w	r3, r3, #31
 800481c:	2b00      	cmp	r3, #0
 800481e:	d102      	bne.n	8004826 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8004820:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004822:	3b01      	subs	r3, #1
 8004824:	657b      	str	r3, [r7, #84]	; 0x54
 8004826:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004828:	b29b      	uxth	r3, r3
 800482a:	029b      	lsls	r3, r3, #10
 800482c:	b29b      	uxth	r3, r3
 800482e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004832:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004836:	b29a      	uxth	r2, r3
 8004838:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800483a:	801a      	strh	r2, [r3, #0]
 800483c:	e018      	b.n	8004870 <HAL_PCD_EP_DB_Transmit+0x736>
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	785b      	ldrb	r3, [r3, #1]
 8004842:	2b01      	cmp	r3, #1
 8004844:	d114      	bne.n	8004870 <HAL_PCD_EP_DB_Transmit+0x736>
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800484e:	b29b      	uxth	r3, r3
 8004850:	461a      	mov	r2, r3
 8004852:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004854:	4413      	add	r3, r2
 8004856:	667b      	str	r3, [r7, #100]	; 0x64
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	781b      	ldrb	r3, [r3, #0]
 800485c:	011a      	lsls	r2, r3, #4
 800485e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004860:	4413      	add	r3, r2
 8004862:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004866:	663b      	str	r3, [r7, #96]	; 0x60
 8004868:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800486a:	b29a      	uxth	r2, r3
 800486c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800486e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	6818      	ldr	r0, [r3, #0]
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	6959      	ldr	r1, [r3, #20]
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	895a      	ldrh	r2, [r3, #10]
 800487c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800487e:	b29b      	uxth	r3, r3
 8004880:	f004 fc96 	bl	80091b0 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	461a      	mov	r2, r3
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	781b      	ldrb	r3, [r3, #0]
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	4413      	add	r3, r2
 8004892:	881b      	ldrh	r3, [r3, #0]
 8004894:	b29b      	uxth	r3, r3
 8004896:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800489a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800489e:	823b      	strh	r3, [r7, #16]
 80048a0:	8a3b      	ldrh	r3, [r7, #16]
 80048a2:	f083 0310 	eor.w	r3, r3, #16
 80048a6:	823b      	strh	r3, [r7, #16]
 80048a8:	8a3b      	ldrh	r3, [r7, #16]
 80048aa:	f083 0320 	eor.w	r3, r3, #32
 80048ae:	823b      	strh	r3, [r7, #16]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	461a      	mov	r2, r3
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	781b      	ldrb	r3, [r3, #0]
 80048ba:	009b      	lsls	r3, r3, #2
 80048bc:	441a      	add	r2, r3
 80048be:	8a3b      	ldrh	r3, [r7, #16]
 80048c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80048d4:	2300      	movs	r3, #0
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3788      	adds	r7, #136	; 0x88
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}

080048de <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80048de:	b480      	push	{r7}
 80048e0:	b087      	sub	sp, #28
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	60f8      	str	r0, [r7, #12]
 80048e6:	607b      	str	r3, [r7, #4]
 80048e8:	460b      	mov	r3, r1
 80048ea:	817b      	strh	r3, [r7, #10]
 80048ec:	4613      	mov	r3, r2
 80048ee:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80048f0:	897b      	ldrh	r3, [r7, #10]
 80048f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d00b      	beq.n	8004914 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80048fc:	897b      	ldrh	r3, [r7, #10]
 80048fe:	f003 0307 	and.w	r3, r3, #7
 8004902:	1c5a      	adds	r2, r3, #1
 8004904:	4613      	mov	r3, r2
 8004906:	009b      	lsls	r3, r3, #2
 8004908:	4413      	add	r3, r2
 800490a:	00db      	lsls	r3, r3, #3
 800490c:	68fa      	ldr	r2, [r7, #12]
 800490e:	4413      	add	r3, r2
 8004910:	617b      	str	r3, [r7, #20]
 8004912:	e009      	b.n	8004928 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004914:	897a      	ldrh	r2, [r7, #10]
 8004916:	4613      	mov	r3, r2
 8004918:	009b      	lsls	r3, r3, #2
 800491a:	4413      	add	r3, r2
 800491c:	00db      	lsls	r3, r3, #3
 800491e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004922:	68fa      	ldr	r2, [r7, #12]
 8004924:	4413      	add	r3, r2
 8004926:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004928:	893b      	ldrh	r3, [r7, #8]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d107      	bne.n	800493e <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	2200      	movs	r2, #0
 8004932:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	b29a      	uxth	r2, r3
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	80da      	strh	r2, [r3, #6]
 800493c:	e00b      	b.n	8004956 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	2201      	movs	r2, #1
 8004942:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	b29a      	uxth	r2, r3
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	0c1b      	lsrs	r3, r3, #16
 8004950:	b29a      	uxth	r2, r3
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8004956:	2300      	movs	r3, #0
}
 8004958:	4618      	mov	r0, r3
 800495a:	371c      	adds	r7, #28
 800495c:	46bd      	mov	sp, r7
 800495e:	bc80      	pop	{r7}
 8004960:	4770      	bx	lr
	...

08004964 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b086      	sub	sp, #24
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d101      	bne.n	8004976 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e272      	b.n	8004e5c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 0301 	and.w	r3, r3, #1
 800497e:	2b00      	cmp	r3, #0
 8004980:	f000 8087 	beq.w	8004a92 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004984:	4b92      	ldr	r3, [pc, #584]	; (8004bd0 <HAL_RCC_OscConfig+0x26c>)
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	f003 030c 	and.w	r3, r3, #12
 800498c:	2b04      	cmp	r3, #4
 800498e:	d00c      	beq.n	80049aa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004990:	4b8f      	ldr	r3, [pc, #572]	; (8004bd0 <HAL_RCC_OscConfig+0x26c>)
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	f003 030c 	and.w	r3, r3, #12
 8004998:	2b08      	cmp	r3, #8
 800499a:	d112      	bne.n	80049c2 <HAL_RCC_OscConfig+0x5e>
 800499c:	4b8c      	ldr	r3, [pc, #560]	; (8004bd0 <HAL_RCC_OscConfig+0x26c>)
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049a8:	d10b      	bne.n	80049c2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049aa:	4b89      	ldr	r3, [pc, #548]	; (8004bd0 <HAL_RCC_OscConfig+0x26c>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d06c      	beq.n	8004a90 <HAL_RCC_OscConfig+0x12c>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d168      	bne.n	8004a90 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e24c      	b.n	8004e5c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049ca:	d106      	bne.n	80049da <HAL_RCC_OscConfig+0x76>
 80049cc:	4b80      	ldr	r3, [pc, #512]	; (8004bd0 <HAL_RCC_OscConfig+0x26c>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a7f      	ldr	r2, [pc, #508]	; (8004bd0 <HAL_RCC_OscConfig+0x26c>)
 80049d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049d6:	6013      	str	r3, [r2, #0]
 80049d8:	e02e      	b.n	8004a38 <HAL_RCC_OscConfig+0xd4>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d10c      	bne.n	80049fc <HAL_RCC_OscConfig+0x98>
 80049e2:	4b7b      	ldr	r3, [pc, #492]	; (8004bd0 <HAL_RCC_OscConfig+0x26c>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a7a      	ldr	r2, [pc, #488]	; (8004bd0 <HAL_RCC_OscConfig+0x26c>)
 80049e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049ec:	6013      	str	r3, [r2, #0]
 80049ee:	4b78      	ldr	r3, [pc, #480]	; (8004bd0 <HAL_RCC_OscConfig+0x26c>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a77      	ldr	r2, [pc, #476]	; (8004bd0 <HAL_RCC_OscConfig+0x26c>)
 80049f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049f8:	6013      	str	r3, [r2, #0]
 80049fa:	e01d      	b.n	8004a38 <HAL_RCC_OscConfig+0xd4>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a04:	d10c      	bne.n	8004a20 <HAL_RCC_OscConfig+0xbc>
 8004a06:	4b72      	ldr	r3, [pc, #456]	; (8004bd0 <HAL_RCC_OscConfig+0x26c>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a71      	ldr	r2, [pc, #452]	; (8004bd0 <HAL_RCC_OscConfig+0x26c>)
 8004a0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a10:	6013      	str	r3, [r2, #0]
 8004a12:	4b6f      	ldr	r3, [pc, #444]	; (8004bd0 <HAL_RCC_OscConfig+0x26c>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a6e      	ldr	r2, [pc, #440]	; (8004bd0 <HAL_RCC_OscConfig+0x26c>)
 8004a18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a1c:	6013      	str	r3, [r2, #0]
 8004a1e:	e00b      	b.n	8004a38 <HAL_RCC_OscConfig+0xd4>
 8004a20:	4b6b      	ldr	r3, [pc, #428]	; (8004bd0 <HAL_RCC_OscConfig+0x26c>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a6a      	ldr	r2, [pc, #424]	; (8004bd0 <HAL_RCC_OscConfig+0x26c>)
 8004a26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a2a:	6013      	str	r3, [r2, #0]
 8004a2c:	4b68      	ldr	r3, [pc, #416]	; (8004bd0 <HAL_RCC_OscConfig+0x26c>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a67      	ldr	r2, [pc, #412]	; (8004bd0 <HAL_RCC_OscConfig+0x26c>)
 8004a32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a36:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d013      	beq.n	8004a68 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a40:	f7fd fff4 	bl	8002a2c <HAL_GetTick>
 8004a44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a46:	e008      	b.n	8004a5a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a48:	f7fd fff0 	bl	8002a2c <HAL_GetTick>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	1ad3      	subs	r3, r2, r3
 8004a52:	2b64      	cmp	r3, #100	; 0x64
 8004a54:	d901      	bls.n	8004a5a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004a56:	2303      	movs	r3, #3
 8004a58:	e200      	b.n	8004e5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a5a:	4b5d      	ldr	r3, [pc, #372]	; (8004bd0 <HAL_RCC_OscConfig+0x26c>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d0f0      	beq.n	8004a48 <HAL_RCC_OscConfig+0xe4>
 8004a66:	e014      	b.n	8004a92 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a68:	f7fd ffe0 	bl	8002a2c <HAL_GetTick>
 8004a6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a6e:	e008      	b.n	8004a82 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a70:	f7fd ffdc 	bl	8002a2c <HAL_GetTick>
 8004a74:	4602      	mov	r2, r0
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	1ad3      	subs	r3, r2, r3
 8004a7a:	2b64      	cmp	r3, #100	; 0x64
 8004a7c:	d901      	bls.n	8004a82 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004a7e:	2303      	movs	r3, #3
 8004a80:	e1ec      	b.n	8004e5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a82:	4b53      	ldr	r3, [pc, #332]	; (8004bd0 <HAL_RCC_OscConfig+0x26c>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d1f0      	bne.n	8004a70 <HAL_RCC_OscConfig+0x10c>
 8004a8e:	e000      	b.n	8004a92 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 0302 	and.w	r3, r3, #2
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d063      	beq.n	8004b66 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004a9e:	4b4c      	ldr	r3, [pc, #304]	; (8004bd0 <HAL_RCC_OscConfig+0x26c>)
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	f003 030c 	and.w	r3, r3, #12
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d00b      	beq.n	8004ac2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004aaa:	4b49      	ldr	r3, [pc, #292]	; (8004bd0 <HAL_RCC_OscConfig+0x26c>)
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	f003 030c 	and.w	r3, r3, #12
 8004ab2:	2b08      	cmp	r3, #8
 8004ab4:	d11c      	bne.n	8004af0 <HAL_RCC_OscConfig+0x18c>
 8004ab6:	4b46      	ldr	r3, [pc, #280]	; (8004bd0 <HAL_RCC_OscConfig+0x26c>)
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d116      	bne.n	8004af0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ac2:	4b43      	ldr	r3, [pc, #268]	; (8004bd0 <HAL_RCC_OscConfig+0x26c>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 0302 	and.w	r3, r3, #2
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d005      	beq.n	8004ada <HAL_RCC_OscConfig+0x176>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	691b      	ldr	r3, [r3, #16]
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	d001      	beq.n	8004ada <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e1c0      	b.n	8004e5c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ada:	4b3d      	ldr	r3, [pc, #244]	; (8004bd0 <HAL_RCC_OscConfig+0x26c>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	695b      	ldr	r3, [r3, #20]
 8004ae6:	00db      	lsls	r3, r3, #3
 8004ae8:	4939      	ldr	r1, [pc, #228]	; (8004bd0 <HAL_RCC_OscConfig+0x26c>)
 8004aea:	4313      	orrs	r3, r2
 8004aec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004aee:	e03a      	b.n	8004b66 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	691b      	ldr	r3, [r3, #16]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d020      	beq.n	8004b3a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004af8:	4b36      	ldr	r3, [pc, #216]	; (8004bd4 <HAL_RCC_OscConfig+0x270>)
 8004afa:	2201      	movs	r2, #1
 8004afc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004afe:	f7fd ff95 	bl	8002a2c <HAL_GetTick>
 8004b02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b04:	e008      	b.n	8004b18 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b06:	f7fd ff91 	bl	8002a2c <HAL_GetTick>
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	1ad3      	subs	r3, r2, r3
 8004b10:	2b02      	cmp	r3, #2
 8004b12:	d901      	bls.n	8004b18 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004b14:	2303      	movs	r3, #3
 8004b16:	e1a1      	b.n	8004e5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b18:	4b2d      	ldr	r3, [pc, #180]	; (8004bd0 <HAL_RCC_OscConfig+0x26c>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f003 0302 	and.w	r3, r3, #2
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d0f0      	beq.n	8004b06 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b24:	4b2a      	ldr	r3, [pc, #168]	; (8004bd0 <HAL_RCC_OscConfig+0x26c>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	695b      	ldr	r3, [r3, #20]
 8004b30:	00db      	lsls	r3, r3, #3
 8004b32:	4927      	ldr	r1, [pc, #156]	; (8004bd0 <HAL_RCC_OscConfig+0x26c>)
 8004b34:	4313      	orrs	r3, r2
 8004b36:	600b      	str	r3, [r1, #0]
 8004b38:	e015      	b.n	8004b66 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b3a:	4b26      	ldr	r3, [pc, #152]	; (8004bd4 <HAL_RCC_OscConfig+0x270>)
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b40:	f7fd ff74 	bl	8002a2c <HAL_GetTick>
 8004b44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b46:	e008      	b.n	8004b5a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b48:	f7fd ff70 	bl	8002a2c <HAL_GetTick>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	1ad3      	subs	r3, r2, r3
 8004b52:	2b02      	cmp	r3, #2
 8004b54:	d901      	bls.n	8004b5a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004b56:	2303      	movs	r3, #3
 8004b58:	e180      	b.n	8004e5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b5a:	4b1d      	ldr	r3, [pc, #116]	; (8004bd0 <HAL_RCC_OscConfig+0x26c>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f003 0302 	and.w	r3, r3, #2
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d1f0      	bne.n	8004b48 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 0308 	and.w	r3, r3, #8
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d03a      	beq.n	8004be8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	699b      	ldr	r3, [r3, #24]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d019      	beq.n	8004bae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b7a:	4b17      	ldr	r3, [pc, #92]	; (8004bd8 <HAL_RCC_OscConfig+0x274>)
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b80:	f7fd ff54 	bl	8002a2c <HAL_GetTick>
 8004b84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b86:	e008      	b.n	8004b9a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b88:	f7fd ff50 	bl	8002a2c <HAL_GetTick>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	1ad3      	subs	r3, r2, r3
 8004b92:	2b02      	cmp	r3, #2
 8004b94:	d901      	bls.n	8004b9a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004b96:	2303      	movs	r3, #3
 8004b98:	e160      	b.n	8004e5c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b9a:	4b0d      	ldr	r3, [pc, #52]	; (8004bd0 <HAL_RCC_OscConfig+0x26c>)
 8004b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9e:	f003 0302 	and.w	r3, r3, #2
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d0f0      	beq.n	8004b88 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004ba6:	2001      	movs	r0, #1
 8004ba8:	f000 faa6 	bl	80050f8 <RCC_Delay>
 8004bac:	e01c      	b.n	8004be8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004bae:	4b0a      	ldr	r3, [pc, #40]	; (8004bd8 <HAL_RCC_OscConfig+0x274>)
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bb4:	f7fd ff3a 	bl	8002a2c <HAL_GetTick>
 8004bb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bba:	e00f      	b.n	8004bdc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bbc:	f7fd ff36 	bl	8002a2c <HAL_GetTick>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	2b02      	cmp	r3, #2
 8004bc8:	d908      	bls.n	8004bdc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004bca:	2303      	movs	r3, #3
 8004bcc:	e146      	b.n	8004e5c <HAL_RCC_OscConfig+0x4f8>
 8004bce:	bf00      	nop
 8004bd0:	40021000 	.word	0x40021000
 8004bd4:	42420000 	.word	0x42420000
 8004bd8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bdc:	4b92      	ldr	r3, [pc, #584]	; (8004e28 <HAL_RCC_OscConfig+0x4c4>)
 8004bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be0:	f003 0302 	and.w	r3, r3, #2
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d1e9      	bne.n	8004bbc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 0304 	and.w	r3, r3, #4
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	f000 80a6 	beq.w	8004d42 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bfa:	4b8b      	ldr	r3, [pc, #556]	; (8004e28 <HAL_RCC_OscConfig+0x4c4>)
 8004bfc:	69db      	ldr	r3, [r3, #28]
 8004bfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d10d      	bne.n	8004c22 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c06:	4b88      	ldr	r3, [pc, #544]	; (8004e28 <HAL_RCC_OscConfig+0x4c4>)
 8004c08:	69db      	ldr	r3, [r3, #28]
 8004c0a:	4a87      	ldr	r2, [pc, #540]	; (8004e28 <HAL_RCC_OscConfig+0x4c4>)
 8004c0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c10:	61d3      	str	r3, [r2, #28]
 8004c12:	4b85      	ldr	r3, [pc, #532]	; (8004e28 <HAL_RCC_OscConfig+0x4c4>)
 8004c14:	69db      	ldr	r3, [r3, #28]
 8004c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c1a:	60bb      	str	r3, [r7, #8]
 8004c1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c22:	4b82      	ldr	r3, [pc, #520]	; (8004e2c <HAL_RCC_OscConfig+0x4c8>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d118      	bne.n	8004c60 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c2e:	4b7f      	ldr	r3, [pc, #508]	; (8004e2c <HAL_RCC_OscConfig+0x4c8>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a7e      	ldr	r2, [pc, #504]	; (8004e2c <HAL_RCC_OscConfig+0x4c8>)
 8004c34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c3a:	f7fd fef7 	bl	8002a2c <HAL_GetTick>
 8004c3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c40:	e008      	b.n	8004c54 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c42:	f7fd fef3 	bl	8002a2c <HAL_GetTick>
 8004c46:	4602      	mov	r2, r0
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	1ad3      	subs	r3, r2, r3
 8004c4c:	2b64      	cmp	r3, #100	; 0x64
 8004c4e:	d901      	bls.n	8004c54 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004c50:	2303      	movs	r3, #3
 8004c52:	e103      	b.n	8004e5c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c54:	4b75      	ldr	r3, [pc, #468]	; (8004e2c <HAL_RCC_OscConfig+0x4c8>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d0f0      	beq.n	8004c42 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	68db      	ldr	r3, [r3, #12]
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d106      	bne.n	8004c76 <HAL_RCC_OscConfig+0x312>
 8004c68:	4b6f      	ldr	r3, [pc, #444]	; (8004e28 <HAL_RCC_OscConfig+0x4c4>)
 8004c6a:	6a1b      	ldr	r3, [r3, #32]
 8004c6c:	4a6e      	ldr	r2, [pc, #440]	; (8004e28 <HAL_RCC_OscConfig+0x4c4>)
 8004c6e:	f043 0301 	orr.w	r3, r3, #1
 8004c72:	6213      	str	r3, [r2, #32]
 8004c74:	e02d      	b.n	8004cd2 <HAL_RCC_OscConfig+0x36e>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	68db      	ldr	r3, [r3, #12]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d10c      	bne.n	8004c98 <HAL_RCC_OscConfig+0x334>
 8004c7e:	4b6a      	ldr	r3, [pc, #424]	; (8004e28 <HAL_RCC_OscConfig+0x4c4>)
 8004c80:	6a1b      	ldr	r3, [r3, #32]
 8004c82:	4a69      	ldr	r2, [pc, #420]	; (8004e28 <HAL_RCC_OscConfig+0x4c4>)
 8004c84:	f023 0301 	bic.w	r3, r3, #1
 8004c88:	6213      	str	r3, [r2, #32]
 8004c8a:	4b67      	ldr	r3, [pc, #412]	; (8004e28 <HAL_RCC_OscConfig+0x4c4>)
 8004c8c:	6a1b      	ldr	r3, [r3, #32]
 8004c8e:	4a66      	ldr	r2, [pc, #408]	; (8004e28 <HAL_RCC_OscConfig+0x4c4>)
 8004c90:	f023 0304 	bic.w	r3, r3, #4
 8004c94:	6213      	str	r3, [r2, #32]
 8004c96:	e01c      	b.n	8004cd2 <HAL_RCC_OscConfig+0x36e>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	68db      	ldr	r3, [r3, #12]
 8004c9c:	2b05      	cmp	r3, #5
 8004c9e:	d10c      	bne.n	8004cba <HAL_RCC_OscConfig+0x356>
 8004ca0:	4b61      	ldr	r3, [pc, #388]	; (8004e28 <HAL_RCC_OscConfig+0x4c4>)
 8004ca2:	6a1b      	ldr	r3, [r3, #32]
 8004ca4:	4a60      	ldr	r2, [pc, #384]	; (8004e28 <HAL_RCC_OscConfig+0x4c4>)
 8004ca6:	f043 0304 	orr.w	r3, r3, #4
 8004caa:	6213      	str	r3, [r2, #32]
 8004cac:	4b5e      	ldr	r3, [pc, #376]	; (8004e28 <HAL_RCC_OscConfig+0x4c4>)
 8004cae:	6a1b      	ldr	r3, [r3, #32]
 8004cb0:	4a5d      	ldr	r2, [pc, #372]	; (8004e28 <HAL_RCC_OscConfig+0x4c4>)
 8004cb2:	f043 0301 	orr.w	r3, r3, #1
 8004cb6:	6213      	str	r3, [r2, #32]
 8004cb8:	e00b      	b.n	8004cd2 <HAL_RCC_OscConfig+0x36e>
 8004cba:	4b5b      	ldr	r3, [pc, #364]	; (8004e28 <HAL_RCC_OscConfig+0x4c4>)
 8004cbc:	6a1b      	ldr	r3, [r3, #32]
 8004cbe:	4a5a      	ldr	r2, [pc, #360]	; (8004e28 <HAL_RCC_OscConfig+0x4c4>)
 8004cc0:	f023 0301 	bic.w	r3, r3, #1
 8004cc4:	6213      	str	r3, [r2, #32]
 8004cc6:	4b58      	ldr	r3, [pc, #352]	; (8004e28 <HAL_RCC_OscConfig+0x4c4>)
 8004cc8:	6a1b      	ldr	r3, [r3, #32]
 8004cca:	4a57      	ldr	r2, [pc, #348]	; (8004e28 <HAL_RCC_OscConfig+0x4c4>)
 8004ccc:	f023 0304 	bic.w	r3, r3, #4
 8004cd0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	68db      	ldr	r3, [r3, #12]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d015      	beq.n	8004d06 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cda:	f7fd fea7 	bl	8002a2c <HAL_GetTick>
 8004cde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ce0:	e00a      	b.n	8004cf8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ce2:	f7fd fea3 	bl	8002a2c <HAL_GetTick>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	1ad3      	subs	r3, r2, r3
 8004cec:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d901      	bls.n	8004cf8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004cf4:	2303      	movs	r3, #3
 8004cf6:	e0b1      	b.n	8004e5c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cf8:	4b4b      	ldr	r3, [pc, #300]	; (8004e28 <HAL_RCC_OscConfig+0x4c4>)
 8004cfa:	6a1b      	ldr	r3, [r3, #32]
 8004cfc:	f003 0302 	and.w	r3, r3, #2
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d0ee      	beq.n	8004ce2 <HAL_RCC_OscConfig+0x37e>
 8004d04:	e014      	b.n	8004d30 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d06:	f7fd fe91 	bl	8002a2c <HAL_GetTick>
 8004d0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d0c:	e00a      	b.n	8004d24 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d0e:	f7fd fe8d 	bl	8002a2c <HAL_GetTick>
 8004d12:	4602      	mov	r2, r0
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	1ad3      	subs	r3, r2, r3
 8004d18:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d901      	bls.n	8004d24 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004d20:	2303      	movs	r3, #3
 8004d22:	e09b      	b.n	8004e5c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d24:	4b40      	ldr	r3, [pc, #256]	; (8004e28 <HAL_RCC_OscConfig+0x4c4>)
 8004d26:	6a1b      	ldr	r3, [r3, #32]
 8004d28:	f003 0302 	and.w	r3, r3, #2
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d1ee      	bne.n	8004d0e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004d30:	7dfb      	ldrb	r3, [r7, #23]
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	d105      	bne.n	8004d42 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d36:	4b3c      	ldr	r3, [pc, #240]	; (8004e28 <HAL_RCC_OscConfig+0x4c4>)
 8004d38:	69db      	ldr	r3, [r3, #28]
 8004d3a:	4a3b      	ldr	r2, [pc, #236]	; (8004e28 <HAL_RCC_OscConfig+0x4c4>)
 8004d3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d40:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	69db      	ldr	r3, [r3, #28]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	f000 8087 	beq.w	8004e5a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d4c:	4b36      	ldr	r3, [pc, #216]	; (8004e28 <HAL_RCC_OscConfig+0x4c4>)
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	f003 030c 	and.w	r3, r3, #12
 8004d54:	2b08      	cmp	r3, #8
 8004d56:	d061      	beq.n	8004e1c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	69db      	ldr	r3, [r3, #28]
 8004d5c:	2b02      	cmp	r3, #2
 8004d5e:	d146      	bne.n	8004dee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d60:	4b33      	ldr	r3, [pc, #204]	; (8004e30 <HAL_RCC_OscConfig+0x4cc>)
 8004d62:	2200      	movs	r2, #0
 8004d64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d66:	f7fd fe61 	bl	8002a2c <HAL_GetTick>
 8004d6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d6c:	e008      	b.n	8004d80 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d6e:	f7fd fe5d 	bl	8002a2c <HAL_GetTick>
 8004d72:	4602      	mov	r2, r0
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	1ad3      	subs	r3, r2, r3
 8004d78:	2b02      	cmp	r3, #2
 8004d7a:	d901      	bls.n	8004d80 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004d7c:	2303      	movs	r3, #3
 8004d7e:	e06d      	b.n	8004e5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d80:	4b29      	ldr	r3, [pc, #164]	; (8004e28 <HAL_RCC_OscConfig+0x4c4>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d1f0      	bne.n	8004d6e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6a1b      	ldr	r3, [r3, #32]
 8004d90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d94:	d108      	bne.n	8004da8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004d96:	4b24      	ldr	r3, [pc, #144]	; (8004e28 <HAL_RCC_OscConfig+0x4c4>)
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	4921      	ldr	r1, [pc, #132]	; (8004e28 <HAL_RCC_OscConfig+0x4c4>)
 8004da4:	4313      	orrs	r3, r2
 8004da6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004da8:	4b1f      	ldr	r3, [pc, #124]	; (8004e28 <HAL_RCC_OscConfig+0x4c4>)
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6a19      	ldr	r1, [r3, #32]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db8:	430b      	orrs	r3, r1
 8004dba:	491b      	ldr	r1, [pc, #108]	; (8004e28 <HAL_RCC_OscConfig+0x4c4>)
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004dc0:	4b1b      	ldr	r3, [pc, #108]	; (8004e30 <HAL_RCC_OscConfig+0x4cc>)
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dc6:	f7fd fe31 	bl	8002a2c <HAL_GetTick>
 8004dca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004dcc:	e008      	b.n	8004de0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dce:	f7fd fe2d 	bl	8002a2c <HAL_GetTick>
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	1ad3      	subs	r3, r2, r3
 8004dd8:	2b02      	cmp	r3, #2
 8004dda:	d901      	bls.n	8004de0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004ddc:	2303      	movs	r3, #3
 8004dde:	e03d      	b.n	8004e5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004de0:	4b11      	ldr	r3, [pc, #68]	; (8004e28 <HAL_RCC_OscConfig+0x4c4>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d0f0      	beq.n	8004dce <HAL_RCC_OscConfig+0x46a>
 8004dec:	e035      	b.n	8004e5a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dee:	4b10      	ldr	r3, [pc, #64]	; (8004e30 <HAL_RCC_OscConfig+0x4cc>)
 8004df0:	2200      	movs	r2, #0
 8004df2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004df4:	f7fd fe1a 	bl	8002a2c <HAL_GetTick>
 8004df8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004dfa:	e008      	b.n	8004e0e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dfc:	f7fd fe16 	bl	8002a2c <HAL_GetTick>
 8004e00:	4602      	mov	r2, r0
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	1ad3      	subs	r3, r2, r3
 8004e06:	2b02      	cmp	r3, #2
 8004e08:	d901      	bls.n	8004e0e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004e0a:	2303      	movs	r3, #3
 8004e0c:	e026      	b.n	8004e5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e0e:	4b06      	ldr	r3, [pc, #24]	; (8004e28 <HAL_RCC_OscConfig+0x4c4>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d1f0      	bne.n	8004dfc <HAL_RCC_OscConfig+0x498>
 8004e1a:	e01e      	b.n	8004e5a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	69db      	ldr	r3, [r3, #28]
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d107      	bne.n	8004e34 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004e24:	2301      	movs	r3, #1
 8004e26:	e019      	b.n	8004e5c <HAL_RCC_OscConfig+0x4f8>
 8004e28:	40021000 	.word	0x40021000
 8004e2c:	40007000 	.word	0x40007000
 8004e30:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004e34:	4b0b      	ldr	r3, [pc, #44]	; (8004e64 <HAL_RCC_OscConfig+0x500>)
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6a1b      	ldr	r3, [r3, #32]
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d106      	bne.n	8004e56 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e52:	429a      	cmp	r2, r3
 8004e54:	d001      	beq.n	8004e5a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e000      	b.n	8004e5c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004e5a:	2300      	movs	r3, #0
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3718      	adds	r7, #24
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}
 8004e64:	40021000 	.word	0x40021000

08004e68 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b084      	sub	sp, #16
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
 8004e70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d101      	bne.n	8004e7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	e0d0      	b.n	800501e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e7c:	4b6a      	ldr	r3, [pc, #424]	; (8005028 <HAL_RCC_ClockConfig+0x1c0>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f003 0307 	and.w	r3, r3, #7
 8004e84:	683a      	ldr	r2, [r7, #0]
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d910      	bls.n	8004eac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e8a:	4b67      	ldr	r3, [pc, #412]	; (8005028 <HAL_RCC_ClockConfig+0x1c0>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f023 0207 	bic.w	r2, r3, #7
 8004e92:	4965      	ldr	r1, [pc, #404]	; (8005028 <HAL_RCC_ClockConfig+0x1c0>)
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	4313      	orrs	r3, r2
 8004e98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e9a:	4b63      	ldr	r3, [pc, #396]	; (8005028 <HAL_RCC_ClockConfig+0x1c0>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f003 0307 	and.w	r3, r3, #7
 8004ea2:	683a      	ldr	r2, [r7, #0]
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	d001      	beq.n	8004eac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	e0b8      	b.n	800501e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f003 0302 	and.w	r3, r3, #2
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d020      	beq.n	8004efa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 0304 	and.w	r3, r3, #4
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d005      	beq.n	8004ed0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ec4:	4b59      	ldr	r3, [pc, #356]	; (800502c <HAL_RCC_ClockConfig+0x1c4>)
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	4a58      	ldr	r2, [pc, #352]	; (800502c <HAL_RCC_ClockConfig+0x1c4>)
 8004eca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004ece:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 0308 	and.w	r3, r3, #8
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d005      	beq.n	8004ee8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004edc:	4b53      	ldr	r3, [pc, #332]	; (800502c <HAL_RCC_ClockConfig+0x1c4>)
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	4a52      	ldr	r2, [pc, #328]	; (800502c <HAL_RCC_ClockConfig+0x1c4>)
 8004ee2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004ee6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ee8:	4b50      	ldr	r3, [pc, #320]	; (800502c <HAL_RCC_ClockConfig+0x1c4>)
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	494d      	ldr	r1, [pc, #308]	; (800502c <HAL_RCC_ClockConfig+0x1c4>)
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f003 0301 	and.w	r3, r3, #1
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d040      	beq.n	8004f88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	d107      	bne.n	8004f1e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f0e:	4b47      	ldr	r3, [pc, #284]	; (800502c <HAL_RCC_ClockConfig+0x1c4>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d115      	bne.n	8004f46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e07f      	b.n	800501e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	2b02      	cmp	r3, #2
 8004f24:	d107      	bne.n	8004f36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f26:	4b41      	ldr	r3, [pc, #260]	; (800502c <HAL_RCC_ClockConfig+0x1c4>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d109      	bne.n	8004f46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	e073      	b.n	800501e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f36:	4b3d      	ldr	r3, [pc, #244]	; (800502c <HAL_RCC_ClockConfig+0x1c4>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f003 0302 	and.w	r3, r3, #2
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d101      	bne.n	8004f46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	e06b      	b.n	800501e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f46:	4b39      	ldr	r3, [pc, #228]	; (800502c <HAL_RCC_ClockConfig+0x1c4>)
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	f023 0203 	bic.w	r2, r3, #3
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	4936      	ldr	r1, [pc, #216]	; (800502c <HAL_RCC_ClockConfig+0x1c4>)
 8004f54:	4313      	orrs	r3, r2
 8004f56:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f58:	f7fd fd68 	bl	8002a2c <HAL_GetTick>
 8004f5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f5e:	e00a      	b.n	8004f76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f60:	f7fd fd64 	bl	8002a2c <HAL_GetTick>
 8004f64:	4602      	mov	r2, r0
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	1ad3      	subs	r3, r2, r3
 8004f6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d901      	bls.n	8004f76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004f72:	2303      	movs	r3, #3
 8004f74:	e053      	b.n	800501e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f76:	4b2d      	ldr	r3, [pc, #180]	; (800502c <HAL_RCC_ClockConfig+0x1c4>)
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	f003 020c 	and.w	r2, r3, #12
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	009b      	lsls	r3, r3, #2
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d1eb      	bne.n	8004f60 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f88:	4b27      	ldr	r3, [pc, #156]	; (8005028 <HAL_RCC_ClockConfig+0x1c0>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 0307 	and.w	r3, r3, #7
 8004f90:	683a      	ldr	r2, [r7, #0]
 8004f92:	429a      	cmp	r2, r3
 8004f94:	d210      	bcs.n	8004fb8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f96:	4b24      	ldr	r3, [pc, #144]	; (8005028 <HAL_RCC_ClockConfig+0x1c0>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f023 0207 	bic.w	r2, r3, #7
 8004f9e:	4922      	ldr	r1, [pc, #136]	; (8005028 <HAL_RCC_ClockConfig+0x1c0>)
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fa6:	4b20      	ldr	r3, [pc, #128]	; (8005028 <HAL_RCC_ClockConfig+0x1c0>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f003 0307 	and.w	r3, r3, #7
 8004fae:	683a      	ldr	r2, [r7, #0]
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	d001      	beq.n	8004fb8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	e032      	b.n	800501e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 0304 	and.w	r3, r3, #4
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d008      	beq.n	8004fd6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004fc4:	4b19      	ldr	r3, [pc, #100]	; (800502c <HAL_RCC_ClockConfig+0x1c4>)
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	4916      	ldr	r1, [pc, #88]	; (800502c <HAL_RCC_ClockConfig+0x1c4>)
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f003 0308 	and.w	r3, r3, #8
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d009      	beq.n	8004ff6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004fe2:	4b12      	ldr	r3, [pc, #72]	; (800502c <HAL_RCC_ClockConfig+0x1c4>)
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	691b      	ldr	r3, [r3, #16]
 8004fee:	00db      	lsls	r3, r3, #3
 8004ff0:	490e      	ldr	r1, [pc, #56]	; (800502c <HAL_RCC_ClockConfig+0x1c4>)
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004ff6:	f000 f821 	bl	800503c <HAL_RCC_GetSysClockFreq>
 8004ffa:	4602      	mov	r2, r0
 8004ffc:	4b0b      	ldr	r3, [pc, #44]	; (800502c <HAL_RCC_ClockConfig+0x1c4>)
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	091b      	lsrs	r3, r3, #4
 8005002:	f003 030f 	and.w	r3, r3, #15
 8005006:	490a      	ldr	r1, [pc, #40]	; (8005030 <HAL_RCC_ClockConfig+0x1c8>)
 8005008:	5ccb      	ldrb	r3, [r1, r3]
 800500a:	fa22 f303 	lsr.w	r3, r2, r3
 800500e:	4a09      	ldr	r2, [pc, #36]	; (8005034 <HAL_RCC_ClockConfig+0x1cc>)
 8005010:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005012:	4b09      	ldr	r3, [pc, #36]	; (8005038 <HAL_RCC_ClockConfig+0x1d0>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4618      	mov	r0, r3
 8005018:	f7fd fcc6 	bl	80029a8 <HAL_InitTick>

  return HAL_OK;
 800501c:	2300      	movs	r3, #0
}
 800501e:	4618      	mov	r0, r3
 8005020:	3710      	adds	r7, #16
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}
 8005026:	bf00      	nop
 8005028:	40022000 	.word	0x40022000
 800502c:	40021000 	.word	0x40021000
 8005030:	0800dac4 	.word	0x0800dac4
 8005034:	2000006c 	.word	0x2000006c
 8005038:	20000070 	.word	0x20000070

0800503c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800503c:	b490      	push	{r4, r7}
 800503e:	b08a      	sub	sp, #40	; 0x28
 8005040:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005042:	4b29      	ldr	r3, [pc, #164]	; (80050e8 <HAL_RCC_GetSysClockFreq+0xac>)
 8005044:	1d3c      	adds	r4, r7, #4
 8005046:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005048:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800504c:	f240 2301 	movw	r3, #513	; 0x201
 8005050:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005052:	2300      	movs	r3, #0
 8005054:	61fb      	str	r3, [r7, #28]
 8005056:	2300      	movs	r3, #0
 8005058:	61bb      	str	r3, [r7, #24]
 800505a:	2300      	movs	r3, #0
 800505c:	627b      	str	r3, [r7, #36]	; 0x24
 800505e:	2300      	movs	r3, #0
 8005060:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005062:	2300      	movs	r3, #0
 8005064:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005066:	4b21      	ldr	r3, [pc, #132]	; (80050ec <HAL_RCC_GetSysClockFreq+0xb0>)
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800506c:	69fb      	ldr	r3, [r7, #28]
 800506e:	f003 030c 	and.w	r3, r3, #12
 8005072:	2b04      	cmp	r3, #4
 8005074:	d002      	beq.n	800507c <HAL_RCC_GetSysClockFreq+0x40>
 8005076:	2b08      	cmp	r3, #8
 8005078:	d003      	beq.n	8005082 <HAL_RCC_GetSysClockFreq+0x46>
 800507a:	e02b      	b.n	80050d4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800507c:	4b1c      	ldr	r3, [pc, #112]	; (80050f0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800507e:	623b      	str	r3, [r7, #32]
      break;
 8005080:	e02b      	b.n	80050da <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	0c9b      	lsrs	r3, r3, #18
 8005086:	f003 030f 	and.w	r3, r3, #15
 800508a:	3328      	adds	r3, #40	; 0x28
 800508c:	443b      	add	r3, r7
 800508e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005092:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005094:	69fb      	ldr	r3, [r7, #28]
 8005096:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800509a:	2b00      	cmp	r3, #0
 800509c:	d012      	beq.n	80050c4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800509e:	4b13      	ldr	r3, [pc, #76]	; (80050ec <HAL_RCC_GetSysClockFreq+0xb0>)
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	0c5b      	lsrs	r3, r3, #17
 80050a4:	f003 0301 	and.w	r3, r3, #1
 80050a8:	3328      	adds	r3, #40	; 0x28
 80050aa:	443b      	add	r3, r7
 80050ac:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80050b0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	4a0e      	ldr	r2, [pc, #56]	; (80050f0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80050b6:	fb03 f202 	mul.w	r2, r3, r2
 80050ba:	69bb      	ldr	r3, [r7, #24]
 80050bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80050c0:	627b      	str	r3, [r7, #36]	; 0x24
 80050c2:	e004      	b.n	80050ce <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	4a0b      	ldr	r2, [pc, #44]	; (80050f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80050c8:	fb02 f303 	mul.w	r3, r2, r3
 80050cc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80050ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d0:	623b      	str	r3, [r7, #32]
      break;
 80050d2:	e002      	b.n	80050da <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80050d4:	4b06      	ldr	r3, [pc, #24]	; (80050f0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80050d6:	623b      	str	r3, [r7, #32]
      break;
 80050d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80050da:	6a3b      	ldr	r3, [r7, #32]
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3728      	adds	r7, #40	; 0x28
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bc90      	pop	{r4, r7}
 80050e4:	4770      	bx	lr
 80050e6:	bf00      	nop
 80050e8:	0800d980 	.word	0x0800d980
 80050ec:	40021000 	.word	0x40021000
 80050f0:	007a1200 	.word	0x007a1200
 80050f4:	003d0900 	.word	0x003d0900

080050f8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b085      	sub	sp, #20
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005100:	4b0a      	ldr	r3, [pc, #40]	; (800512c <RCC_Delay+0x34>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a0a      	ldr	r2, [pc, #40]	; (8005130 <RCC_Delay+0x38>)
 8005106:	fba2 2303 	umull	r2, r3, r2, r3
 800510a:	0a5b      	lsrs	r3, r3, #9
 800510c:	687a      	ldr	r2, [r7, #4]
 800510e:	fb02 f303 	mul.w	r3, r2, r3
 8005112:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005114:	bf00      	nop
  }
  while (Delay --);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	1e5a      	subs	r2, r3, #1
 800511a:	60fa      	str	r2, [r7, #12]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d1f9      	bne.n	8005114 <RCC_Delay+0x1c>
}
 8005120:	bf00      	nop
 8005122:	bf00      	nop
 8005124:	3714      	adds	r7, #20
 8005126:	46bd      	mov	sp, r7
 8005128:	bc80      	pop	{r7}
 800512a:	4770      	bx	lr
 800512c:	2000006c 	.word	0x2000006c
 8005130:	10624dd3 	.word	0x10624dd3

08005134 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b086      	sub	sp, #24
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800513c:	2300      	movs	r3, #0
 800513e:	613b      	str	r3, [r7, #16]
 8005140:	2300      	movs	r3, #0
 8005142:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f003 0301 	and.w	r3, r3, #1
 800514c:	2b00      	cmp	r3, #0
 800514e:	d07d      	beq.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005150:	2300      	movs	r3, #0
 8005152:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005154:	4b4f      	ldr	r3, [pc, #316]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005156:	69db      	ldr	r3, [r3, #28]
 8005158:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800515c:	2b00      	cmp	r3, #0
 800515e:	d10d      	bne.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005160:	4b4c      	ldr	r3, [pc, #304]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005162:	69db      	ldr	r3, [r3, #28]
 8005164:	4a4b      	ldr	r2, [pc, #300]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005166:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800516a:	61d3      	str	r3, [r2, #28]
 800516c:	4b49      	ldr	r3, [pc, #292]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800516e:	69db      	ldr	r3, [r3, #28]
 8005170:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005174:	60bb      	str	r3, [r7, #8]
 8005176:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005178:	2301      	movs	r3, #1
 800517a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800517c:	4b46      	ldr	r3, [pc, #280]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005184:	2b00      	cmp	r3, #0
 8005186:	d118      	bne.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005188:	4b43      	ldr	r3, [pc, #268]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a42      	ldr	r2, [pc, #264]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800518e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005192:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005194:	f7fd fc4a 	bl	8002a2c <HAL_GetTick>
 8005198:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800519a:	e008      	b.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800519c:	f7fd fc46 	bl	8002a2c <HAL_GetTick>
 80051a0:	4602      	mov	r2, r0
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	1ad3      	subs	r3, r2, r3
 80051a6:	2b64      	cmp	r3, #100	; 0x64
 80051a8:	d901      	bls.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80051aa:	2303      	movs	r3, #3
 80051ac:	e06d      	b.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051ae:	4b3a      	ldr	r3, [pc, #232]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d0f0      	beq.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80051ba:	4b36      	ldr	r3, [pc, #216]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051bc:	6a1b      	ldr	r3, [r3, #32]
 80051be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051c2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d02e      	beq.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051d2:	68fa      	ldr	r2, [r7, #12]
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d027      	beq.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80051d8:	4b2e      	ldr	r3, [pc, #184]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051da:	6a1b      	ldr	r3, [r3, #32]
 80051dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051e0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80051e2:	4b2e      	ldr	r3, [pc, #184]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80051e4:	2201      	movs	r2, #1
 80051e6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80051e8:	4b2c      	ldr	r3, [pc, #176]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80051ea:	2200      	movs	r2, #0
 80051ec:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80051ee:	4a29      	ldr	r2, [pc, #164]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f003 0301 	and.w	r3, r3, #1
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d014      	beq.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051fe:	f7fd fc15 	bl	8002a2c <HAL_GetTick>
 8005202:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005204:	e00a      	b.n	800521c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005206:	f7fd fc11 	bl	8002a2c <HAL_GetTick>
 800520a:	4602      	mov	r2, r0
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	1ad3      	subs	r3, r2, r3
 8005210:	f241 3288 	movw	r2, #5000	; 0x1388
 8005214:	4293      	cmp	r3, r2
 8005216:	d901      	bls.n	800521c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005218:	2303      	movs	r3, #3
 800521a:	e036      	b.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800521c:	4b1d      	ldr	r3, [pc, #116]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800521e:	6a1b      	ldr	r3, [r3, #32]
 8005220:	f003 0302 	and.w	r3, r3, #2
 8005224:	2b00      	cmp	r3, #0
 8005226:	d0ee      	beq.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005228:	4b1a      	ldr	r3, [pc, #104]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800522a:	6a1b      	ldr	r3, [r3, #32]
 800522c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	4917      	ldr	r1, [pc, #92]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005236:	4313      	orrs	r3, r2
 8005238:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800523a:	7dfb      	ldrb	r3, [r7, #23]
 800523c:	2b01      	cmp	r3, #1
 800523e:	d105      	bne.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005240:	4b14      	ldr	r3, [pc, #80]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005242:	69db      	ldr	r3, [r3, #28]
 8005244:	4a13      	ldr	r2, [pc, #76]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005246:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800524a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f003 0302 	and.w	r3, r3, #2
 8005254:	2b00      	cmp	r3, #0
 8005256:	d008      	beq.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005258:	4b0e      	ldr	r3, [pc, #56]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	490b      	ldr	r1, [pc, #44]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005266:	4313      	orrs	r3, r2
 8005268:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f003 0310 	and.w	r3, r3, #16
 8005272:	2b00      	cmp	r3, #0
 8005274:	d008      	beq.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005276:	4b07      	ldr	r3, [pc, #28]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	68db      	ldr	r3, [r3, #12]
 8005282:	4904      	ldr	r1, [pc, #16]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005284:	4313      	orrs	r3, r2
 8005286:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005288:	2300      	movs	r3, #0
}
 800528a:	4618      	mov	r0, r3
 800528c:	3718      	adds	r7, #24
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}
 8005292:	bf00      	nop
 8005294:	40021000 	.word	0x40021000
 8005298:	40007000 	.word	0x40007000
 800529c:	42420440 	.word	0x42420440

080052a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b082      	sub	sp, #8
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d101      	bne.n	80052b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	e041      	b.n	8005336 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d106      	bne.n	80052cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2200      	movs	r2, #0
 80052c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f7fc fc08 	bl	8001adc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2202      	movs	r2, #2
 80052d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	3304      	adds	r3, #4
 80052dc:	4619      	mov	r1, r3
 80052de:	4610      	mov	r0, r2
 80052e0:	f000 fe0c 	bl	8005efc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2201      	movs	r2, #1
 80052e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2201      	movs	r2, #1
 80052f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2201      	movs	r2, #1
 80052f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2201      	movs	r2, #1
 8005300:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2201      	movs	r2, #1
 8005320:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2201      	movs	r2, #1
 8005328:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2201      	movs	r2, #1
 8005330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005334:	2300      	movs	r3, #0
}
 8005336:	4618      	mov	r0, r3
 8005338:	3708      	adds	r7, #8
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}

0800533e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800533e:	b580      	push	{r7, lr}
 8005340:	b082      	sub	sp, #8
 8005342:	af00      	add	r7, sp, #0
 8005344:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d101      	bne.n	8005350 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	e041      	b.n	80053d4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005356:	b2db      	uxtb	r3, r3
 8005358:	2b00      	cmp	r3, #0
 800535a:	d106      	bne.n	800536a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2200      	movs	r2, #0
 8005360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f000 f839 	bl	80053dc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2202      	movs	r2, #2
 800536e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	3304      	adds	r3, #4
 800537a:	4619      	mov	r1, r3
 800537c:	4610      	mov	r0, r2
 800537e:	f000 fdbd 	bl	8005efc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2201      	movs	r2, #1
 8005386:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2201      	movs	r2, #1
 800538e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2201      	movs	r2, #1
 8005396:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2201      	movs	r2, #1
 800539e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2201      	movs	r2, #1
 80053a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2201      	movs	r2, #1
 80053ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2201      	movs	r2, #1
 80053b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2201      	movs	r2, #1
 80053be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2201      	movs	r2, #1
 80053c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2201      	movs	r2, #1
 80053ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053d2:	2300      	movs	r3, #0
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3708      	adds	r7, #8
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}

080053dc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80053dc:	b480      	push	{r7}
 80053de:	b083      	sub	sp, #12
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80053e4:	bf00      	nop
 80053e6:	370c      	adds	r7, #12
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bc80      	pop	{r7}
 80053ec:	4770      	bx	lr
	...

080053f0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b084      	sub	sp, #16
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
 80053f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d109      	bne.n	8005414 <HAL_TIM_PWM_Start+0x24>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005406:	b2db      	uxtb	r3, r3
 8005408:	2b01      	cmp	r3, #1
 800540a:	bf14      	ite	ne
 800540c:	2301      	movne	r3, #1
 800540e:	2300      	moveq	r3, #0
 8005410:	b2db      	uxtb	r3, r3
 8005412:	e022      	b.n	800545a <HAL_TIM_PWM_Start+0x6a>
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	2b04      	cmp	r3, #4
 8005418:	d109      	bne.n	800542e <HAL_TIM_PWM_Start+0x3e>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005420:	b2db      	uxtb	r3, r3
 8005422:	2b01      	cmp	r3, #1
 8005424:	bf14      	ite	ne
 8005426:	2301      	movne	r3, #1
 8005428:	2300      	moveq	r3, #0
 800542a:	b2db      	uxtb	r3, r3
 800542c:	e015      	b.n	800545a <HAL_TIM_PWM_Start+0x6a>
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	2b08      	cmp	r3, #8
 8005432:	d109      	bne.n	8005448 <HAL_TIM_PWM_Start+0x58>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800543a:	b2db      	uxtb	r3, r3
 800543c:	2b01      	cmp	r3, #1
 800543e:	bf14      	ite	ne
 8005440:	2301      	movne	r3, #1
 8005442:	2300      	moveq	r3, #0
 8005444:	b2db      	uxtb	r3, r3
 8005446:	e008      	b.n	800545a <HAL_TIM_PWM_Start+0x6a>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800544e:	b2db      	uxtb	r3, r3
 8005450:	2b01      	cmp	r3, #1
 8005452:	bf14      	ite	ne
 8005454:	2301      	movne	r3, #1
 8005456:	2300      	moveq	r3, #0
 8005458:	b2db      	uxtb	r3, r3
 800545a:	2b00      	cmp	r3, #0
 800545c:	d001      	beq.n	8005462 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	e05e      	b.n	8005520 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d104      	bne.n	8005472 <HAL_TIM_PWM_Start+0x82>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2202      	movs	r2, #2
 800546c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005470:	e013      	b.n	800549a <HAL_TIM_PWM_Start+0xaa>
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	2b04      	cmp	r3, #4
 8005476:	d104      	bne.n	8005482 <HAL_TIM_PWM_Start+0x92>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2202      	movs	r2, #2
 800547c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005480:	e00b      	b.n	800549a <HAL_TIM_PWM_Start+0xaa>
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	2b08      	cmp	r3, #8
 8005486:	d104      	bne.n	8005492 <HAL_TIM_PWM_Start+0xa2>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2202      	movs	r2, #2
 800548c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005490:	e003      	b.n	800549a <HAL_TIM_PWM_Start+0xaa>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2202      	movs	r2, #2
 8005496:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	2201      	movs	r2, #1
 80054a0:	6839      	ldr	r1, [r7, #0]
 80054a2:	4618      	mov	r0, r3
 80054a4:	f001 f8b7 	bl	8006616 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a1e      	ldr	r2, [pc, #120]	; (8005528 <HAL_TIM_PWM_Start+0x138>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d107      	bne.n	80054c2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80054c0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a18      	ldr	r2, [pc, #96]	; (8005528 <HAL_TIM_PWM_Start+0x138>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d00e      	beq.n	80054ea <HAL_TIM_PWM_Start+0xfa>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054d4:	d009      	beq.n	80054ea <HAL_TIM_PWM_Start+0xfa>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a14      	ldr	r2, [pc, #80]	; (800552c <HAL_TIM_PWM_Start+0x13c>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d004      	beq.n	80054ea <HAL_TIM_PWM_Start+0xfa>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a12      	ldr	r2, [pc, #72]	; (8005530 <HAL_TIM_PWM_Start+0x140>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d111      	bne.n	800550e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	f003 0307 	and.w	r3, r3, #7
 80054f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2b06      	cmp	r3, #6
 80054fa:	d010      	beq.n	800551e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f042 0201 	orr.w	r2, r2, #1
 800550a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800550c:	e007      	b.n	800551e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f042 0201 	orr.w	r2, r2, #1
 800551c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800551e:	2300      	movs	r3, #0
}
 8005520:	4618      	mov	r0, r3
 8005522:	3710      	adds	r7, #16
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}
 8005528:	40012c00 	.word	0x40012c00
 800552c:	40000400 	.word	0x40000400
 8005530:	40000800 	.word	0x40000800

08005534 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b082      	sub	sp, #8
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d101      	bne.n	8005546 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005542:	2301      	movs	r3, #1
 8005544:	e041      	b.n	80055ca <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800554c:	b2db      	uxtb	r3, r3
 800554e:	2b00      	cmp	r3, #0
 8005550:	d106      	bne.n	8005560 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2200      	movs	r2, #0
 8005556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f000 f839 	bl	80055d2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2202      	movs	r2, #2
 8005564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	3304      	adds	r3, #4
 8005570:	4619      	mov	r1, r3
 8005572:	4610      	mov	r0, r2
 8005574:	f000 fcc2 	bl	8005efc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2201      	movs	r2, #1
 800557c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2201      	movs	r2, #1
 8005584:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2201      	movs	r2, #1
 800558c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2201      	movs	r2, #1
 8005594:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2201      	movs	r2, #1
 800559c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2201      	movs	r2, #1
 80055a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2201      	movs	r2, #1
 80055ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2201      	movs	r2, #1
 80055b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2201      	movs	r2, #1
 80055bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2201      	movs	r2, #1
 80055c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055c8:	2300      	movs	r3, #0
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3708      	adds	r7, #8
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}

080055d2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80055d2:	b480      	push	{r7}
 80055d4:	b083      	sub	sp, #12
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80055da:	bf00      	nop
 80055dc:	370c      	adds	r7, #12
 80055de:	46bd      	mov	sp, r7
 80055e0:	bc80      	pop	{r7}
 80055e2:	4770      	bx	lr

080055e4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b084      	sub	sp, #16
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
 80055ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d104      	bne.n	80055fe <HAL_TIM_IC_Start_IT+0x1a>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80055fa:	b2db      	uxtb	r3, r3
 80055fc:	e013      	b.n	8005626 <HAL_TIM_IC_Start_IT+0x42>
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	2b04      	cmp	r3, #4
 8005602:	d104      	bne.n	800560e <HAL_TIM_IC_Start_IT+0x2a>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800560a:	b2db      	uxtb	r3, r3
 800560c:	e00b      	b.n	8005626 <HAL_TIM_IC_Start_IT+0x42>
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	2b08      	cmp	r3, #8
 8005612:	d104      	bne.n	800561e <HAL_TIM_IC_Start_IT+0x3a>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800561a:	b2db      	uxtb	r3, r3
 800561c:	e003      	b.n	8005626 <HAL_TIM_IC_Start_IT+0x42>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005624:	b2db      	uxtb	r3, r3
 8005626:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d104      	bne.n	8005638 <HAL_TIM_IC_Start_IT+0x54>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005634:	b2db      	uxtb	r3, r3
 8005636:	e013      	b.n	8005660 <HAL_TIM_IC_Start_IT+0x7c>
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	2b04      	cmp	r3, #4
 800563c:	d104      	bne.n	8005648 <HAL_TIM_IC_Start_IT+0x64>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005644:	b2db      	uxtb	r3, r3
 8005646:	e00b      	b.n	8005660 <HAL_TIM_IC_Start_IT+0x7c>
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	2b08      	cmp	r3, #8
 800564c:	d104      	bne.n	8005658 <HAL_TIM_IC_Start_IT+0x74>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005654:	b2db      	uxtb	r3, r3
 8005656:	e003      	b.n	8005660 <HAL_TIM_IC_Start_IT+0x7c>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800565e:	b2db      	uxtb	r3, r3
 8005660:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005662:	7bfb      	ldrb	r3, [r7, #15]
 8005664:	2b01      	cmp	r3, #1
 8005666:	d102      	bne.n	800566e <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005668:	7bbb      	ldrb	r3, [r7, #14]
 800566a:	2b01      	cmp	r3, #1
 800566c:	d001      	beq.n	8005672 <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	e0b3      	b.n	80057da <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d104      	bne.n	8005682 <HAL_TIM_IC_Start_IT+0x9e>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2202      	movs	r2, #2
 800567c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005680:	e013      	b.n	80056aa <HAL_TIM_IC_Start_IT+0xc6>
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	2b04      	cmp	r3, #4
 8005686:	d104      	bne.n	8005692 <HAL_TIM_IC_Start_IT+0xae>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2202      	movs	r2, #2
 800568c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005690:	e00b      	b.n	80056aa <HAL_TIM_IC_Start_IT+0xc6>
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	2b08      	cmp	r3, #8
 8005696:	d104      	bne.n	80056a2 <HAL_TIM_IC_Start_IT+0xbe>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2202      	movs	r2, #2
 800569c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056a0:	e003      	b.n	80056aa <HAL_TIM_IC_Start_IT+0xc6>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2202      	movs	r2, #2
 80056a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d104      	bne.n	80056ba <HAL_TIM_IC_Start_IT+0xd6>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2202      	movs	r2, #2
 80056b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80056b8:	e013      	b.n	80056e2 <HAL_TIM_IC_Start_IT+0xfe>
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	2b04      	cmp	r3, #4
 80056be:	d104      	bne.n	80056ca <HAL_TIM_IC_Start_IT+0xe6>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2202      	movs	r2, #2
 80056c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80056c8:	e00b      	b.n	80056e2 <HAL_TIM_IC_Start_IT+0xfe>
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	2b08      	cmp	r3, #8
 80056ce:	d104      	bne.n	80056da <HAL_TIM_IC_Start_IT+0xf6>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2202      	movs	r2, #2
 80056d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056d8:	e003      	b.n	80056e2 <HAL_TIM_IC_Start_IT+0xfe>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2202      	movs	r2, #2
 80056de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	2b0c      	cmp	r3, #12
 80056e6:	d841      	bhi.n	800576c <HAL_TIM_IC_Start_IT+0x188>
 80056e8:	a201      	add	r2, pc, #4	; (adr r2, 80056f0 <HAL_TIM_IC_Start_IT+0x10c>)
 80056ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056ee:	bf00      	nop
 80056f0:	08005725 	.word	0x08005725
 80056f4:	0800576d 	.word	0x0800576d
 80056f8:	0800576d 	.word	0x0800576d
 80056fc:	0800576d 	.word	0x0800576d
 8005700:	08005737 	.word	0x08005737
 8005704:	0800576d 	.word	0x0800576d
 8005708:	0800576d 	.word	0x0800576d
 800570c:	0800576d 	.word	0x0800576d
 8005710:	08005749 	.word	0x08005749
 8005714:	0800576d 	.word	0x0800576d
 8005718:	0800576d 	.word	0x0800576d
 800571c:	0800576d 	.word	0x0800576d
 8005720:	0800575b 	.word	0x0800575b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	68da      	ldr	r2, [r3, #12]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f042 0202 	orr.w	r2, r2, #2
 8005732:	60da      	str	r2, [r3, #12]
      break;
 8005734:	e01b      	b.n	800576e <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	68da      	ldr	r2, [r3, #12]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f042 0204 	orr.w	r2, r2, #4
 8005744:	60da      	str	r2, [r3, #12]
      break;
 8005746:	e012      	b.n	800576e <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	68da      	ldr	r2, [r3, #12]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f042 0208 	orr.w	r2, r2, #8
 8005756:	60da      	str	r2, [r3, #12]
      break;
 8005758:	e009      	b.n	800576e <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	68da      	ldr	r2, [r3, #12]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f042 0210 	orr.w	r2, r2, #16
 8005768:	60da      	str	r2, [r3, #12]
      break;
 800576a:	e000      	b.n	800576e <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 800576c:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	2201      	movs	r2, #1
 8005774:	6839      	ldr	r1, [r7, #0]
 8005776:	4618      	mov	r0, r3
 8005778:	f000 ff4d 	bl	8006616 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a18      	ldr	r2, [pc, #96]	; (80057e4 <HAL_TIM_IC_Start_IT+0x200>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d00e      	beq.n	80057a4 <HAL_TIM_IC_Start_IT+0x1c0>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800578e:	d009      	beq.n	80057a4 <HAL_TIM_IC_Start_IT+0x1c0>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a14      	ldr	r2, [pc, #80]	; (80057e8 <HAL_TIM_IC_Start_IT+0x204>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d004      	beq.n	80057a4 <HAL_TIM_IC_Start_IT+0x1c0>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a13      	ldr	r2, [pc, #76]	; (80057ec <HAL_TIM_IC_Start_IT+0x208>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d111      	bne.n	80057c8 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	f003 0307 	and.w	r3, r3, #7
 80057ae:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	2b06      	cmp	r3, #6
 80057b4:	d010      	beq.n	80057d8 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	681a      	ldr	r2, [r3, #0]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f042 0201 	orr.w	r2, r2, #1
 80057c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057c6:	e007      	b.n	80057d8 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f042 0201 	orr.w	r2, r2, #1
 80057d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80057d8:	2300      	movs	r3, #0
}
 80057da:	4618      	mov	r0, r3
 80057dc:	3710      	adds	r7, #16
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}
 80057e2:	bf00      	nop
 80057e4:	40012c00 	.word	0x40012c00
 80057e8:	40000400 	.word	0x40000400
 80057ec:	40000800 	.word	0x40000800

080057f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b082      	sub	sp, #8
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	691b      	ldr	r3, [r3, #16]
 80057fe:	f003 0302 	and.w	r3, r3, #2
 8005802:	2b02      	cmp	r3, #2
 8005804:	d122      	bne.n	800584c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	68db      	ldr	r3, [r3, #12]
 800580c:	f003 0302 	and.w	r3, r3, #2
 8005810:	2b02      	cmp	r3, #2
 8005812:	d11b      	bne.n	800584c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f06f 0202 	mvn.w	r2, #2
 800581c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2201      	movs	r2, #1
 8005822:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	699b      	ldr	r3, [r3, #24]
 800582a:	f003 0303 	and.w	r3, r3, #3
 800582e:	2b00      	cmp	r3, #0
 8005830:	d003      	beq.n	800583a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f7fc f888 	bl	8001948 <HAL_TIM_IC_CaptureCallback>
 8005838:	e005      	b.n	8005846 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f000 fb43 	bl	8005ec6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	f000 fb49 	bl	8005ed8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2200      	movs	r2, #0
 800584a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	691b      	ldr	r3, [r3, #16]
 8005852:	f003 0304 	and.w	r3, r3, #4
 8005856:	2b04      	cmp	r3, #4
 8005858:	d122      	bne.n	80058a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	68db      	ldr	r3, [r3, #12]
 8005860:	f003 0304 	and.w	r3, r3, #4
 8005864:	2b04      	cmp	r3, #4
 8005866:	d11b      	bne.n	80058a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f06f 0204 	mvn.w	r2, #4
 8005870:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2202      	movs	r2, #2
 8005876:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	699b      	ldr	r3, [r3, #24]
 800587e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005882:	2b00      	cmp	r3, #0
 8005884:	d003      	beq.n	800588e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f7fc f85e 	bl	8001948 <HAL_TIM_IC_CaptureCallback>
 800588c:	e005      	b.n	800589a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f000 fb19 	bl	8005ec6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f000 fb1f 	bl	8005ed8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2200      	movs	r2, #0
 800589e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	691b      	ldr	r3, [r3, #16]
 80058a6:	f003 0308 	and.w	r3, r3, #8
 80058aa:	2b08      	cmp	r3, #8
 80058ac:	d122      	bne.n	80058f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	68db      	ldr	r3, [r3, #12]
 80058b4:	f003 0308 	and.w	r3, r3, #8
 80058b8:	2b08      	cmp	r3, #8
 80058ba:	d11b      	bne.n	80058f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f06f 0208 	mvn.w	r2, #8
 80058c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2204      	movs	r2, #4
 80058ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	69db      	ldr	r3, [r3, #28]
 80058d2:	f003 0303 	and.w	r3, r3, #3
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d003      	beq.n	80058e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f7fc f834 	bl	8001948 <HAL_TIM_IC_CaptureCallback>
 80058e0:	e005      	b.n	80058ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f000 faef 	bl	8005ec6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f000 faf5 	bl	8005ed8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2200      	movs	r2, #0
 80058f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	691b      	ldr	r3, [r3, #16]
 80058fa:	f003 0310 	and.w	r3, r3, #16
 80058fe:	2b10      	cmp	r3, #16
 8005900:	d122      	bne.n	8005948 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	68db      	ldr	r3, [r3, #12]
 8005908:	f003 0310 	and.w	r3, r3, #16
 800590c:	2b10      	cmp	r3, #16
 800590e:	d11b      	bne.n	8005948 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f06f 0210 	mvn.w	r2, #16
 8005918:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2208      	movs	r2, #8
 800591e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	69db      	ldr	r3, [r3, #28]
 8005926:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800592a:	2b00      	cmp	r3, #0
 800592c:	d003      	beq.n	8005936 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f7fc f80a 	bl	8001948 <HAL_TIM_IC_CaptureCallback>
 8005934:	e005      	b.n	8005942 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f000 fac5 	bl	8005ec6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	f000 facb 	bl	8005ed8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2200      	movs	r2, #0
 8005946:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	691b      	ldr	r3, [r3, #16]
 800594e:	f003 0301 	and.w	r3, r3, #1
 8005952:	2b01      	cmp	r3, #1
 8005954:	d10e      	bne.n	8005974 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	68db      	ldr	r3, [r3, #12]
 800595c:	f003 0301 	and.w	r3, r3, #1
 8005960:	2b01      	cmp	r3, #1
 8005962:	d107      	bne.n	8005974 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f06f 0201 	mvn.w	r2, #1
 800596c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f000 faa0 	bl	8005eb4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	691b      	ldr	r3, [r3, #16]
 800597a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800597e:	2b80      	cmp	r3, #128	; 0x80
 8005980:	d10e      	bne.n	80059a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	68db      	ldr	r3, [r3, #12]
 8005988:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800598c:	2b80      	cmp	r3, #128	; 0x80
 800598e:	d107      	bne.n	80059a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005998:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f000 fec7 	bl	800672e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	691b      	ldr	r3, [r3, #16]
 80059a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059aa:	2b40      	cmp	r3, #64	; 0x40
 80059ac:	d10e      	bne.n	80059cc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	68db      	ldr	r3, [r3, #12]
 80059b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059b8:	2b40      	cmp	r3, #64	; 0x40
 80059ba:	d107      	bne.n	80059cc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80059c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f000 fa8f 	bl	8005eea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	691b      	ldr	r3, [r3, #16]
 80059d2:	f003 0320 	and.w	r3, r3, #32
 80059d6:	2b20      	cmp	r3, #32
 80059d8:	d10e      	bne.n	80059f8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	68db      	ldr	r3, [r3, #12]
 80059e0:	f003 0320 	and.w	r3, r3, #32
 80059e4:	2b20      	cmp	r3, #32
 80059e6:	d107      	bne.n	80059f8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f06f 0220 	mvn.w	r2, #32
 80059f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f000 fe92 	bl	800671c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80059f8:	bf00      	nop
 80059fa:	3708      	adds	r7, #8
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}

08005a00 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b084      	sub	sp, #16
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	60f8      	str	r0, [r7, #12]
 8005a08:	60b9      	str	r1, [r7, #8]
 8005a0a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a12:	2b01      	cmp	r3, #1
 8005a14:	d101      	bne.n	8005a1a <HAL_TIM_IC_ConfigChannel+0x1a>
 8005a16:	2302      	movs	r3, #2
 8005a18:	e082      	b.n	8005b20 <HAL_TIM_IC_ConfigChannel+0x120>
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d11b      	bne.n	8005a60 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	6818      	ldr	r0, [r3, #0]
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	6819      	ldr	r1, [r3, #0]
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	685a      	ldr	r2, [r3, #4]
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	68db      	ldr	r3, [r3, #12]
 8005a38:	f000 fc4a 	bl	80062d0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	699a      	ldr	r2, [r3, #24]
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f022 020c 	bic.w	r2, r2, #12
 8005a4a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	6999      	ldr	r1, [r3, #24]
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	689a      	ldr	r2, [r3, #8]
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	430a      	orrs	r2, r1
 8005a5c:	619a      	str	r2, [r3, #24]
 8005a5e:	e05a      	b.n	8005b16 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2b04      	cmp	r3, #4
 8005a64:	d11c      	bne.n	8005aa0 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	6818      	ldr	r0, [r3, #0]
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	6819      	ldr	r1, [r3, #0]
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	685a      	ldr	r2, [r3, #4]
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	68db      	ldr	r3, [r3, #12]
 8005a76:	f000 fcb3 	bl	80063e0 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	699a      	ldr	r2, [r3, #24]
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005a88:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	6999      	ldr	r1, [r3, #24]
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	021a      	lsls	r2, r3, #8
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	430a      	orrs	r2, r1
 8005a9c:	619a      	str	r2, [r3, #24]
 8005a9e:	e03a      	b.n	8005b16 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2b08      	cmp	r3, #8
 8005aa4:	d11b      	bne.n	8005ade <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	6818      	ldr	r0, [r3, #0]
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	6819      	ldr	r1, [r3, #0]
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	685a      	ldr	r2, [r3, #4]
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	68db      	ldr	r3, [r3, #12]
 8005ab6:	f000 fcfe 	bl	80064b6 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	69da      	ldr	r2, [r3, #28]
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f022 020c 	bic.w	r2, r2, #12
 8005ac8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	69d9      	ldr	r1, [r3, #28]
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	689a      	ldr	r2, [r3, #8]
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	430a      	orrs	r2, r1
 8005ada:	61da      	str	r2, [r3, #28]
 8005adc:	e01b      	b.n	8005b16 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	6818      	ldr	r0, [r3, #0]
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	6819      	ldr	r1, [r3, #0]
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	685a      	ldr	r2, [r3, #4]
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	68db      	ldr	r3, [r3, #12]
 8005aee:	f000 fd1d 	bl	800652c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	69da      	ldr	r2, [r3, #28]
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005b00:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	69d9      	ldr	r1, [r3, #28]
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	021a      	lsls	r2, r3, #8
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	430a      	orrs	r2, r1
 8005b14:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b1e:	2300      	movs	r3, #0
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	3710      	adds	r7, #16
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}

08005b28 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b084      	sub	sp, #16
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	60f8      	str	r0, [r7, #12]
 8005b30:	60b9      	str	r1, [r7, #8]
 8005b32:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b3a:	2b01      	cmp	r3, #1
 8005b3c:	d101      	bne.n	8005b42 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005b3e:	2302      	movs	r3, #2
 8005b40:	e0ac      	b.n	8005c9c <HAL_TIM_PWM_ConfigChannel+0x174>
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2201      	movs	r2, #1
 8005b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2b0c      	cmp	r3, #12
 8005b4e:	f200 809f 	bhi.w	8005c90 <HAL_TIM_PWM_ConfigChannel+0x168>
 8005b52:	a201      	add	r2, pc, #4	; (adr r2, 8005b58 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b58:	08005b8d 	.word	0x08005b8d
 8005b5c:	08005c91 	.word	0x08005c91
 8005b60:	08005c91 	.word	0x08005c91
 8005b64:	08005c91 	.word	0x08005c91
 8005b68:	08005bcd 	.word	0x08005bcd
 8005b6c:	08005c91 	.word	0x08005c91
 8005b70:	08005c91 	.word	0x08005c91
 8005b74:	08005c91 	.word	0x08005c91
 8005b78:	08005c0f 	.word	0x08005c0f
 8005b7c:	08005c91 	.word	0x08005c91
 8005b80:	08005c91 	.word	0x08005c91
 8005b84:	08005c91 	.word	0x08005c91
 8005b88:	08005c4f 	.word	0x08005c4f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	68b9      	ldr	r1, [r7, #8]
 8005b92:	4618      	mov	r0, r3
 8005b94:	f000 fa14 	bl	8005fc0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	699a      	ldr	r2, [r3, #24]
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f042 0208 	orr.w	r2, r2, #8
 8005ba6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	699a      	ldr	r2, [r3, #24]
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f022 0204 	bic.w	r2, r2, #4
 8005bb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	6999      	ldr	r1, [r3, #24]
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	691a      	ldr	r2, [r3, #16]
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	430a      	orrs	r2, r1
 8005bc8:	619a      	str	r2, [r3, #24]
      break;
 8005bca:	e062      	b.n	8005c92 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	68b9      	ldr	r1, [r7, #8]
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f000 fa5a 	bl	800608c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	699a      	ldr	r2, [r3, #24]
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005be6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	699a      	ldr	r2, [r3, #24]
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bf6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	6999      	ldr	r1, [r3, #24]
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	691b      	ldr	r3, [r3, #16]
 8005c02:	021a      	lsls	r2, r3, #8
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	430a      	orrs	r2, r1
 8005c0a:	619a      	str	r2, [r3, #24]
      break;
 8005c0c:	e041      	b.n	8005c92 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	68b9      	ldr	r1, [r7, #8]
 8005c14:	4618      	mov	r0, r3
 8005c16:	f000 faa3 	bl	8006160 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	69da      	ldr	r2, [r3, #28]
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f042 0208 	orr.w	r2, r2, #8
 8005c28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	69da      	ldr	r2, [r3, #28]
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f022 0204 	bic.w	r2, r2, #4
 8005c38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	69d9      	ldr	r1, [r3, #28]
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	691a      	ldr	r2, [r3, #16]
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	430a      	orrs	r2, r1
 8005c4a:	61da      	str	r2, [r3, #28]
      break;
 8005c4c:	e021      	b.n	8005c92 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	68b9      	ldr	r1, [r7, #8]
 8005c54:	4618      	mov	r0, r3
 8005c56:	f000 faed 	bl	8006234 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	69da      	ldr	r2, [r3, #28]
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	69da      	ldr	r2, [r3, #28]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	69d9      	ldr	r1, [r3, #28]
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	691b      	ldr	r3, [r3, #16]
 8005c84:	021a      	lsls	r2, r3, #8
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	430a      	orrs	r2, r1
 8005c8c:	61da      	str	r2, [r3, #28]
      break;
 8005c8e:	e000      	b.n	8005c92 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8005c90:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2200      	movs	r2, #0
 8005c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c9a:	2300      	movs	r3, #0
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	3710      	adds	r7, #16
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}

08005ca4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b084      	sub	sp, #16
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
 8005cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d101      	bne.n	8005cbc <HAL_TIM_ConfigClockSource+0x18>
 8005cb8:	2302      	movs	r3, #2
 8005cba:	e0b3      	b.n	8005e24 <HAL_TIM_ConfigClockSource+0x180>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2202      	movs	r2, #2
 8005cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005cda:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ce2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	68fa      	ldr	r2, [r7, #12]
 8005cea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cf4:	d03e      	beq.n	8005d74 <HAL_TIM_ConfigClockSource+0xd0>
 8005cf6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cfa:	f200 8087 	bhi.w	8005e0c <HAL_TIM_ConfigClockSource+0x168>
 8005cfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d02:	f000 8085 	beq.w	8005e10 <HAL_TIM_ConfigClockSource+0x16c>
 8005d06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d0a:	d87f      	bhi.n	8005e0c <HAL_TIM_ConfigClockSource+0x168>
 8005d0c:	2b70      	cmp	r3, #112	; 0x70
 8005d0e:	d01a      	beq.n	8005d46 <HAL_TIM_ConfigClockSource+0xa2>
 8005d10:	2b70      	cmp	r3, #112	; 0x70
 8005d12:	d87b      	bhi.n	8005e0c <HAL_TIM_ConfigClockSource+0x168>
 8005d14:	2b60      	cmp	r3, #96	; 0x60
 8005d16:	d050      	beq.n	8005dba <HAL_TIM_ConfigClockSource+0x116>
 8005d18:	2b60      	cmp	r3, #96	; 0x60
 8005d1a:	d877      	bhi.n	8005e0c <HAL_TIM_ConfigClockSource+0x168>
 8005d1c:	2b50      	cmp	r3, #80	; 0x50
 8005d1e:	d03c      	beq.n	8005d9a <HAL_TIM_ConfigClockSource+0xf6>
 8005d20:	2b50      	cmp	r3, #80	; 0x50
 8005d22:	d873      	bhi.n	8005e0c <HAL_TIM_ConfigClockSource+0x168>
 8005d24:	2b40      	cmp	r3, #64	; 0x40
 8005d26:	d058      	beq.n	8005dda <HAL_TIM_ConfigClockSource+0x136>
 8005d28:	2b40      	cmp	r3, #64	; 0x40
 8005d2a:	d86f      	bhi.n	8005e0c <HAL_TIM_ConfigClockSource+0x168>
 8005d2c:	2b30      	cmp	r3, #48	; 0x30
 8005d2e:	d064      	beq.n	8005dfa <HAL_TIM_ConfigClockSource+0x156>
 8005d30:	2b30      	cmp	r3, #48	; 0x30
 8005d32:	d86b      	bhi.n	8005e0c <HAL_TIM_ConfigClockSource+0x168>
 8005d34:	2b20      	cmp	r3, #32
 8005d36:	d060      	beq.n	8005dfa <HAL_TIM_ConfigClockSource+0x156>
 8005d38:	2b20      	cmp	r3, #32
 8005d3a:	d867      	bhi.n	8005e0c <HAL_TIM_ConfigClockSource+0x168>
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d05c      	beq.n	8005dfa <HAL_TIM_ConfigClockSource+0x156>
 8005d40:	2b10      	cmp	r3, #16
 8005d42:	d05a      	beq.n	8005dfa <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005d44:	e062      	b.n	8005e0c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6818      	ldr	r0, [r3, #0]
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	6899      	ldr	r1, [r3, #8]
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	685a      	ldr	r2, [r3, #4]
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	68db      	ldr	r3, [r3, #12]
 8005d56:	f000 fc3f 	bl	80065d8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005d68:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	68fa      	ldr	r2, [r7, #12]
 8005d70:	609a      	str	r2, [r3, #8]
      break;
 8005d72:	e04e      	b.n	8005e12 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6818      	ldr	r0, [r3, #0]
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	6899      	ldr	r1, [r3, #8]
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	685a      	ldr	r2, [r3, #4]
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	68db      	ldr	r3, [r3, #12]
 8005d84:	f000 fc28 	bl	80065d8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	689a      	ldr	r2, [r3, #8]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d96:	609a      	str	r2, [r3, #8]
      break;
 8005d98:	e03b      	b.n	8005e12 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6818      	ldr	r0, [r3, #0]
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	6859      	ldr	r1, [r3, #4]
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	68db      	ldr	r3, [r3, #12]
 8005da6:	461a      	mov	r2, r3
 8005da8:	f000 faec 	bl	8006384 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	2150      	movs	r1, #80	; 0x50
 8005db2:	4618      	mov	r0, r3
 8005db4:	f000 fbf6 	bl	80065a4 <TIM_ITRx_SetConfig>
      break;
 8005db8:	e02b      	b.n	8005e12 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6818      	ldr	r0, [r3, #0]
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	6859      	ldr	r1, [r3, #4]
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	68db      	ldr	r3, [r3, #12]
 8005dc6:	461a      	mov	r2, r3
 8005dc8:	f000 fb46 	bl	8006458 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	2160      	movs	r1, #96	; 0x60
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f000 fbe6 	bl	80065a4 <TIM_ITRx_SetConfig>
      break;
 8005dd8:	e01b      	b.n	8005e12 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6818      	ldr	r0, [r3, #0]
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	6859      	ldr	r1, [r3, #4]
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	68db      	ldr	r3, [r3, #12]
 8005de6:	461a      	mov	r2, r3
 8005de8:	f000 facc 	bl	8006384 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	2140      	movs	r1, #64	; 0x40
 8005df2:	4618      	mov	r0, r3
 8005df4:	f000 fbd6 	bl	80065a4 <TIM_ITRx_SetConfig>
      break;
 8005df8:	e00b      	b.n	8005e12 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681a      	ldr	r2, [r3, #0]
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4619      	mov	r1, r3
 8005e04:	4610      	mov	r0, r2
 8005e06:	f000 fbcd 	bl	80065a4 <TIM_ITRx_SetConfig>
        break;
 8005e0a:	e002      	b.n	8005e12 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005e0c:	bf00      	nop
 8005e0e:	e000      	b.n	8005e12 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005e10:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2201      	movs	r2, #1
 8005e16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e22:	2300      	movs	r3, #0
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	3710      	adds	r7, #16
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}

08005e2c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b085      	sub	sp, #20
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
 8005e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005e36:	2300      	movs	r3, #0
 8005e38:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	2b0c      	cmp	r3, #12
 8005e3e:	d831      	bhi.n	8005ea4 <HAL_TIM_ReadCapturedValue+0x78>
 8005e40:	a201      	add	r2, pc, #4	; (adr r2, 8005e48 <HAL_TIM_ReadCapturedValue+0x1c>)
 8005e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e46:	bf00      	nop
 8005e48:	08005e7d 	.word	0x08005e7d
 8005e4c:	08005ea5 	.word	0x08005ea5
 8005e50:	08005ea5 	.word	0x08005ea5
 8005e54:	08005ea5 	.word	0x08005ea5
 8005e58:	08005e87 	.word	0x08005e87
 8005e5c:	08005ea5 	.word	0x08005ea5
 8005e60:	08005ea5 	.word	0x08005ea5
 8005e64:	08005ea5 	.word	0x08005ea5
 8005e68:	08005e91 	.word	0x08005e91
 8005e6c:	08005ea5 	.word	0x08005ea5
 8005e70:	08005ea5 	.word	0x08005ea5
 8005e74:	08005ea5 	.word	0x08005ea5
 8005e78:	08005e9b 	.word	0x08005e9b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e82:	60fb      	str	r3, [r7, #12]

      break;
 8005e84:	e00f      	b.n	8005ea6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e8c:	60fb      	str	r3, [r7, #12]

      break;
 8005e8e:	e00a      	b.n	8005ea6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e96:	60fb      	str	r3, [r7, #12]

      break;
 8005e98:	e005      	b.n	8005ea6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea0:	60fb      	str	r3, [r7, #12]

      break;
 8005ea2:	e000      	b.n	8005ea6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005ea4:	bf00      	nop
  }

  return tmpreg;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3714      	adds	r7, #20
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bc80      	pop	{r7}
 8005eb0:	4770      	bx	lr
 8005eb2:	bf00      	nop

08005eb4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b083      	sub	sp, #12
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005ebc:	bf00      	nop
 8005ebe:	370c      	adds	r7, #12
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bc80      	pop	{r7}
 8005ec4:	4770      	bx	lr

08005ec6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ec6:	b480      	push	{r7}
 8005ec8:	b083      	sub	sp, #12
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ece:	bf00      	nop
 8005ed0:	370c      	adds	r7, #12
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bc80      	pop	{r7}
 8005ed6:	4770      	bx	lr

08005ed8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b083      	sub	sp, #12
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ee0:	bf00      	nop
 8005ee2:	370c      	adds	r7, #12
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bc80      	pop	{r7}
 8005ee8:	4770      	bx	lr

08005eea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005eea:	b480      	push	{r7}
 8005eec:	b083      	sub	sp, #12
 8005eee:	af00      	add	r7, sp, #0
 8005ef0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005ef2:	bf00      	nop
 8005ef4:	370c      	adds	r7, #12
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bc80      	pop	{r7}
 8005efa:	4770      	bx	lr

08005efc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b085      	sub	sp, #20
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
 8005f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	4a29      	ldr	r2, [pc, #164]	; (8005fb4 <TIM_Base_SetConfig+0xb8>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d00b      	beq.n	8005f2c <TIM_Base_SetConfig+0x30>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f1a:	d007      	beq.n	8005f2c <TIM_Base_SetConfig+0x30>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	4a26      	ldr	r2, [pc, #152]	; (8005fb8 <TIM_Base_SetConfig+0xbc>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d003      	beq.n	8005f2c <TIM_Base_SetConfig+0x30>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	4a25      	ldr	r2, [pc, #148]	; (8005fbc <TIM_Base_SetConfig+0xc0>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d108      	bne.n	8005f3e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	68fa      	ldr	r2, [r7, #12]
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	4a1c      	ldr	r2, [pc, #112]	; (8005fb4 <TIM_Base_SetConfig+0xb8>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d00b      	beq.n	8005f5e <TIM_Base_SetConfig+0x62>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f4c:	d007      	beq.n	8005f5e <TIM_Base_SetConfig+0x62>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	4a19      	ldr	r2, [pc, #100]	; (8005fb8 <TIM_Base_SetConfig+0xbc>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d003      	beq.n	8005f5e <TIM_Base_SetConfig+0x62>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	4a18      	ldr	r2, [pc, #96]	; (8005fbc <TIM_Base_SetConfig+0xc0>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d108      	bne.n	8005f70 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	68db      	ldr	r3, [r3, #12]
 8005f6a:	68fa      	ldr	r2, [r7, #12]
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	695b      	ldr	r3, [r3, #20]
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	68fa      	ldr	r2, [r7, #12]
 8005f82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	689a      	ldr	r2, [r3, #8]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	4a07      	ldr	r2, [pc, #28]	; (8005fb4 <TIM_Base_SetConfig+0xb8>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d103      	bne.n	8005fa4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	691a      	ldr	r2, [r3, #16]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	615a      	str	r2, [r3, #20]
}
 8005faa:	bf00      	nop
 8005fac:	3714      	adds	r7, #20
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bc80      	pop	{r7}
 8005fb2:	4770      	bx	lr
 8005fb4:	40012c00 	.word	0x40012c00
 8005fb8:	40000400 	.word	0x40000400
 8005fbc:	40000800 	.word	0x40000800

08005fc0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b087      	sub	sp, #28
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
 8005fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6a1b      	ldr	r3, [r3, #32]
 8005fce:	f023 0201 	bic.w	r2, r3, #1
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6a1b      	ldr	r3, [r3, #32]
 8005fda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	699b      	ldr	r3, [r3, #24]
 8005fe6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f023 0303 	bic.w	r3, r3, #3
 8005ff6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	68fa      	ldr	r2, [r7, #12]
 8005ffe:	4313      	orrs	r3, r2
 8006000:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	f023 0302 	bic.w	r3, r3, #2
 8006008:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	697a      	ldr	r2, [r7, #20]
 8006010:	4313      	orrs	r3, r2
 8006012:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	4a1c      	ldr	r2, [pc, #112]	; (8006088 <TIM_OC1_SetConfig+0xc8>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d10c      	bne.n	8006036 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	f023 0308 	bic.w	r3, r3, #8
 8006022:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	68db      	ldr	r3, [r3, #12]
 8006028:	697a      	ldr	r2, [r7, #20]
 800602a:	4313      	orrs	r3, r2
 800602c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	f023 0304 	bic.w	r3, r3, #4
 8006034:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	4a13      	ldr	r2, [pc, #76]	; (8006088 <TIM_OC1_SetConfig+0xc8>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d111      	bne.n	8006062 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006044:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800604c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	695b      	ldr	r3, [r3, #20]
 8006052:	693a      	ldr	r2, [r7, #16]
 8006054:	4313      	orrs	r3, r2
 8006056:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	699b      	ldr	r3, [r3, #24]
 800605c:	693a      	ldr	r2, [r7, #16]
 800605e:	4313      	orrs	r3, r2
 8006060:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	693a      	ldr	r2, [r7, #16]
 8006066:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	68fa      	ldr	r2, [r7, #12]
 800606c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	685a      	ldr	r2, [r3, #4]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	697a      	ldr	r2, [r7, #20]
 800607a:	621a      	str	r2, [r3, #32]
}
 800607c:	bf00      	nop
 800607e:	371c      	adds	r7, #28
 8006080:	46bd      	mov	sp, r7
 8006082:	bc80      	pop	{r7}
 8006084:	4770      	bx	lr
 8006086:	bf00      	nop
 8006088:	40012c00 	.word	0x40012c00

0800608c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800608c:	b480      	push	{r7}
 800608e:	b087      	sub	sp, #28
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6a1b      	ldr	r3, [r3, #32]
 800609a:	f023 0210 	bic.w	r2, r3, #16
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6a1b      	ldr	r3, [r3, #32]
 80060a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	699b      	ldr	r3, [r3, #24]
 80060b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	021b      	lsls	r3, r3, #8
 80060ca:	68fa      	ldr	r2, [r7, #12]
 80060cc:	4313      	orrs	r3, r2
 80060ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	f023 0320 	bic.w	r3, r3, #32
 80060d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	689b      	ldr	r3, [r3, #8]
 80060dc:	011b      	lsls	r3, r3, #4
 80060de:	697a      	ldr	r2, [r7, #20]
 80060e0:	4313      	orrs	r3, r2
 80060e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	4a1d      	ldr	r2, [pc, #116]	; (800615c <TIM_OC2_SetConfig+0xd0>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d10d      	bne.n	8006108 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	68db      	ldr	r3, [r3, #12]
 80060f8:	011b      	lsls	r3, r3, #4
 80060fa:	697a      	ldr	r2, [r7, #20]
 80060fc:	4313      	orrs	r3, r2
 80060fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006106:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	4a14      	ldr	r2, [pc, #80]	; (800615c <TIM_OC2_SetConfig+0xd0>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d113      	bne.n	8006138 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006116:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800611e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	695b      	ldr	r3, [r3, #20]
 8006124:	009b      	lsls	r3, r3, #2
 8006126:	693a      	ldr	r2, [r7, #16]
 8006128:	4313      	orrs	r3, r2
 800612a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	699b      	ldr	r3, [r3, #24]
 8006130:	009b      	lsls	r3, r3, #2
 8006132:	693a      	ldr	r2, [r7, #16]
 8006134:	4313      	orrs	r3, r2
 8006136:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	693a      	ldr	r2, [r7, #16]
 800613c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	68fa      	ldr	r2, [r7, #12]
 8006142:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	685a      	ldr	r2, [r3, #4]
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	697a      	ldr	r2, [r7, #20]
 8006150:	621a      	str	r2, [r3, #32]
}
 8006152:	bf00      	nop
 8006154:	371c      	adds	r7, #28
 8006156:	46bd      	mov	sp, r7
 8006158:	bc80      	pop	{r7}
 800615a:	4770      	bx	lr
 800615c:	40012c00 	.word	0x40012c00

08006160 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006160:	b480      	push	{r7}
 8006162:	b087      	sub	sp, #28
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6a1b      	ldr	r3, [r3, #32]
 800616e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6a1b      	ldr	r3, [r3, #32]
 800617a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	69db      	ldr	r3, [r3, #28]
 8006186:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800618e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f023 0303 	bic.w	r3, r3, #3
 8006196:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	68fa      	ldr	r2, [r7, #12]
 800619e:	4313      	orrs	r3, r2
 80061a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80061a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	689b      	ldr	r3, [r3, #8]
 80061ae:	021b      	lsls	r3, r3, #8
 80061b0:	697a      	ldr	r2, [r7, #20]
 80061b2:	4313      	orrs	r3, r2
 80061b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	4a1d      	ldr	r2, [pc, #116]	; (8006230 <TIM_OC3_SetConfig+0xd0>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d10d      	bne.n	80061da <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80061c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	68db      	ldr	r3, [r3, #12]
 80061ca:	021b      	lsls	r3, r3, #8
 80061cc:	697a      	ldr	r2, [r7, #20]
 80061ce:	4313      	orrs	r3, r2
 80061d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80061d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	4a14      	ldr	r2, [pc, #80]	; (8006230 <TIM_OC3_SetConfig+0xd0>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d113      	bne.n	800620a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80061e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80061ea:	693b      	ldr	r3, [r7, #16]
 80061ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80061f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	695b      	ldr	r3, [r3, #20]
 80061f6:	011b      	lsls	r3, r3, #4
 80061f8:	693a      	ldr	r2, [r7, #16]
 80061fa:	4313      	orrs	r3, r2
 80061fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	699b      	ldr	r3, [r3, #24]
 8006202:	011b      	lsls	r3, r3, #4
 8006204:	693a      	ldr	r2, [r7, #16]
 8006206:	4313      	orrs	r3, r2
 8006208:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	693a      	ldr	r2, [r7, #16]
 800620e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	68fa      	ldr	r2, [r7, #12]
 8006214:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	685a      	ldr	r2, [r3, #4]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	697a      	ldr	r2, [r7, #20]
 8006222:	621a      	str	r2, [r3, #32]
}
 8006224:	bf00      	nop
 8006226:	371c      	adds	r7, #28
 8006228:	46bd      	mov	sp, r7
 800622a:	bc80      	pop	{r7}
 800622c:	4770      	bx	lr
 800622e:	bf00      	nop
 8006230:	40012c00 	.word	0x40012c00

08006234 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006234:	b480      	push	{r7}
 8006236:	b087      	sub	sp, #28
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
 800623c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6a1b      	ldr	r3, [r3, #32]
 8006242:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6a1b      	ldr	r3, [r3, #32]
 800624e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	69db      	ldr	r3, [r3, #28]
 800625a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006262:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800626a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	021b      	lsls	r3, r3, #8
 8006272:	68fa      	ldr	r2, [r7, #12]
 8006274:	4313      	orrs	r3, r2
 8006276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006278:	693b      	ldr	r3, [r7, #16]
 800627a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800627e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	689b      	ldr	r3, [r3, #8]
 8006284:	031b      	lsls	r3, r3, #12
 8006286:	693a      	ldr	r2, [r7, #16]
 8006288:	4313      	orrs	r3, r2
 800628a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	4a0f      	ldr	r2, [pc, #60]	; (80062cc <TIM_OC4_SetConfig+0x98>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d109      	bne.n	80062a8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800629a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	695b      	ldr	r3, [r3, #20]
 80062a0:	019b      	lsls	r3, r3, #6
 80062a2:	697a      	ldr	r2, [r7, #20]
 80062a4:	4313      	orrs	r3, r2
 80062a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	697a      	ldr	r2, [r7, #20]
 80062ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	68fa      	ldr	r2, [r7, #12]
 80062b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	685a      	ldr	r2, [r3, #4]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	693a      	ldr	r2, [r7, #16]
 80062c0:	621a      	str	r2, [r3, #32]
}
 80062c2:	bf00      	nop
 80062c4:	371c      	adds	r7, #28
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bc80      	pop	{r7}
 80062ca:	4770      	bx	lr
 80062cc:	40012c00 	.word	0x40012c00

080062d0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b087      	sub	sp, #28
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	60f8      	str	r0, [r7, #12]
 80062d8:	60b9      	str	r1, [r7, #8]
 80062da:	607a      	str	r2, [r7, #4]
 80062dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	6a1b      	ldr	r3, [r3, #32]
 80062e2:	f023 0201 	bic.w	r2, r3, #1
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	699b      	ldr	r3, [r3, #24]
 80062ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	6a1b      	ldr	r3, [r3, #32]
 80062f4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	4a1f      	ldr	r2, [pc, #124]	; (8006378 <TIM_TI1_SetConfig+0xa8>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d00b      	beq.n	8006316 <TIM_TI1_SetConfig+0x46>
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006304:	d007      	beq.n	8006316 <TIM_TI1_SetConfig+0x46>
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	4a1c      	ldr	r2, [pc, #112]	; (800637c <TIM_TI1_SetConfig+0xac>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d003      	beq.n	8006316 <TIM_TI1_SetConfig+0x46>
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	4a1b      	ldr	r2, [pc, #108]	; (8006380 <TIM_TI1_SetConfig+0xb0>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d101      	bne.n	800631a <TIM_TI1_SetConfig+0x4a>
 8006316:	2301      	movs	r3, #1
 8006318:	e000      	b.n	800631c <TIM_TI1_SetConfig+0x4c>
 800631a:	2300      	movs	r3, #0
 800631c:	2b00      	cmp	r3, #0
 800631e:	d008      	beq.n	8006332 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	f023 0303 	bic.w	r3, r3, #3
 8006326:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006328:	697a      	ldr	r2, [r7, #20]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	4313      	orrs	r3, r2
 800632e:	617b      	str	r3, [r7, #20]
 8006330:	e003      	b.n	800633a <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	f043 0301 	orr.w	r3, r3, #1
 8006338:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006340:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	011b      	lsls	r3, r3, #4
 8006346:	b2db      	uxtb	r3, r3
 8006348:	697a      	ldr	r2, [r7, #20]
 800634a:	4313      	orrs	r3, r2
 800634c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	f023 030a 	bic.w	r3, r3, #10
 8006354:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	f003 030a 	and.w	r3, r3, #10
 800635c:	693a      	ldr	r2, [r7, #16]
 800635e:	4313      	orrs	r3, r2
 8006360:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	697a      	ldr	r2, [r7, #20]
 8006366:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	693a      	ldr	r2, [r7, #16]
 800636c:	621a      	str	r2, [r3, #32]
}
 800636e:	bf00      	nop
 8006370:	371c      	adds	r7, #28
 8006372:	46bd      	mov	sp, r7
 8006374:	bc80      	pop	{r7}
 8006376:	4770      	bx	lr
 8006378:	40012c00 	.word	0x40012c00
 800637c:	40000400 	.word	0x40000400
 8006380:	40000800 	.word	0x40000800

08006384 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006384:	b480      	push	{r7}
 8006386:	b087      	sub	sp, #28
 8006388:	af00      	add	r7, sp, #0
 800638a:	60f8      	str	r0, [r7, #12]
 800638c:	60b9      	str	r1, [r7, #8]
 800638e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	6a1b      	ldr	r3, [r3, #32]
 8006394:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	6a1b      	ldr	r3, [r3, #32]
 800639a:	f023 0201 	bic.w	r2, r3, #1
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	699b      	ldr	r3, [r3, #24]
 80063a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80063ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	011b      	lsls	r3, r3, #4
 80063b4:	693a      	ldr	r2, [r7, #16]
 80063b6:	4313      	orrs	r3, r2
 80063b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	f023 030a 	bic.w	r3, r3, #10
 80063c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80063c2:	697a      	ldr	r2, [r7, #20]
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	4313      	orrs	r3, r2
 80063c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	693a      	ldr	r2, [r7, #16]
 80063ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	697a      	ldr	r2, [r7, #20]
 80063d4:	621a      	str	r2, [r3, #32]
}
 80063d6:	bf00      	nop
 80063d8:	371c      	adds	r7, #28
 80063da:	46bd      	mov	sp, r7
 80063dc:	bc80      	pop	{r7}
 80063de:	4770      	bx	lr

080063e0 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b087      	sub	sp, #28
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	60f8      	str	r0, [r7, #12]
 80063e8:	60b9      	str	r1, [r7, #8]
 80063ea:	607a      	str	r2, [r7, #4]
 80063ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	6a1b      	ldr	r3, [r3, #32]
 80063f2:	f023 0210 	bic.w	r2, r3, #16
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	699b      	ldr	r3, [r3, #24]
 80063fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	6a1b      	ldr	r3, [r3, #32]
 8006404:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800640c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	021b      	lsls	r3, r3, #8
 8006412:	697a      	ldr	r2, [r7, #20]
 8006414:	4313      	orrs	r3, r2
 8006416:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800641e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	031b      	lsls	r3, r3, #12
 8006424:	b29b      	uxth	r3, r3
 8006426:	697a      	ldr	r2, [r7, #20]
 8006428:	4313      	orrs	r3, r2
 800642a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006432:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	011b      	lsls	r3, r3, #4
 8006438:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800643c:	693a      	ldr	r2, [r7, #16]
 800643e:	4313      	orrs	r3, r2
 8006440:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	697a      	ldr	r2, [r7, #20]
 8006446:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	693a      	ldr	r2, [r7, #16]
 800644c:	621a      	str	r2, [r3, #32]
}
 800644e:	bf00      	nop
 8006450:	371c      	adds	r7, #28
 8006452:	46bd      	mov	sp, r7
 8006454:	bc80      	pop	{r7}
 8006456:	4770      	bx	lr

08006458 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006458:	b480      	push	{r7}
 800645a:	b087      	sub	sp, #28
 800645c:	af00      	add	r7, sp, #0
 800645e:	60f8      	str	r0, [r7, #12]
 8006460:	60b9      	str	r1, [r7, #8]
 8006462:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	6a1b      	ldr	r3, [r3, #32]
 8006468:	f023 0210 	bic.w	r2, r3, #16
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	699b      	ldr	r3, [r3, #24]
 8006474:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	6a1b      	ldr	r3, [r3, #32]
 800647a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006482:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	031b      	lsls	r3, r3, #12
 8006488:	697a      	ldr	r2, [r7, #20]
 800648a:	4313      	orrs	r3, r2
 800648c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006494:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	011b      	lsls	r3, r3, #4
 800649a:	693a      	ldr	r2, [r7, #16]
 800649c:	4313      	orrs	r3, r2
 800649e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	697a      	ldr	r2, [r7, #20]
 80064a4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	693a      	ldr	r2, [r7, #16]
 80064aa:	621a      	str	r2, [r3, #32]
}
 80064ac:	bf00      	nop
 80064ae:	371c      	adds	r7, #28
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bc80      	pop	{r7}
 80064b4:	4770      	bx	lr

080064b6 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80064b6:	b480      	push	{r7}
 80064b8:	b087      	sub	sp, #28
 80064ba:	af00      	add	r7, sp, #0
 80064bc:	60f8      	str	r0, [r7, #12]
 80064be:	60b9      	str	r1, [r7, #8]
 80064c0:	607a      	str	r2, [r7, #4]
 80064c2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	6a1b      	ldr	r3, [r3, #32]
 80064c8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	69db      	ldr	r3, [r3, #28]
 80064d4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	6a1b      	ldr	r3, [r3, #32]
 80064da:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	f023 0303 	bic.w	r3, r3, #3
 80064e2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80064e4:	697a      	ldr	r2, [r7, #20]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	4313      	orrs	r3, r2
 80064ea:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80064f2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	011b      	lsls	r3, r3, #4
 80064f8:	b2db      	uxtb	r3, r3
 80064fa:	697a      	ldr	r2, [r7, #20]
 80064fc:	4313      	orrs	r3, r2
 80064fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006506:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	021b      	lsls	r3, r3, #8
 800650c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006510:	693a      	ldr	r2, [r7, #16]
 8006512:	4313      	orrs	r3, r2
 8006514:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	697a      	ldr	r2, [r7, #20]
 800651a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	693a      	ldr	r2, [r7, #16]
 8006520:	621a      	str	r2, [r3, #32]
}
 8006522:	bf00      	nop
 8006524:	371c      	adds	r7, #28
 8006526:	46bd      	mov	sp, r7
 8006528:	bc80      	pop	{r7}
 800652a:	4770      	bx	lr

0800652c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800652c:	b480      	push	{r7}
 800652e:	b087      	sub	sp, #28
 8006530:	af00      	add	r7, sp, #0
 8006532:	60f8      	str	r0, [r7, #12]
 8006534:	60b9      	str	r1, [r7, #8]
 8006536:	607a      	str	r2, [r7, #4]
 8006538:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	6a1b      	ldr	r3, [r3, #32]
 800653e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	69db      	ldr	r3, [r3, #28]
 800654a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	6a1b      	ldr	r3, [r3, #32]
 8006550:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006558:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	021b      	lsls	r3, r3, #8
 800655e:	697a      	ldr	r2, [r7, #20]
 8006560:	4313      	orrs	r3, r2
 8006562:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800656a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	031b      	lsls	r3, r3, #12
 8006570:	b29b      	uxth	r3, r3
 8006572:	697a      	ldr	r2, [r7, #20]
 8006574:	4313      	orrs	r3, r2
 8006576:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800657e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	031b      	lsls	r3, r3, #12
 8006584:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006588:	693a      	ldr	r2, [r7, #16]
 800658a:	4313      	orrs	r3, r2
 800658c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	697a      	ldr	r2, [r7, #20]
 8006592:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	693a      	ldr	r2, [r7, #16]
 8006598:	621a      	str	r2, [r3, #32]
}
 800659a:	bf00      	nop
 800659c:	371c      	adds	r7, #28
 800659e:	46bd      	mov	sp, r7
 80065a0:	bc80      	pop	{r7}
 80065a2:	4770      	bx	lr

080065a4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b085      	sub	sp, #20
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
 80065ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	689b      	ldr	r3, [r3, #8]
 80065b2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065ba:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80065bc:	683a      	ldr	r2, [r7, #0]
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	4313      	orrs	r3, r2
 80065c2:	f043 0307 	orr.w	r3, r3, #7
 80065c6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	68fa      	ldr	r2, [r7, #12]
 80065cc:	609a      	str	r2, [r3, #8]
}
 80065ce:	bf00      	nop
 80065d0:	3714      	adds	r7, #20
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bc80      	pop	{r7}
 80065d6:	4770      	bx	lr

080065d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80065d8:	b480      	push	{r7}
 80065da:	b087      	sub	sp, #28
 80065dc:	af00      	add	r7, sp, #0
 80065de:	60f8      	str	r0, [r7, #12]
 80065e0:	60b9      	str	r1, [r7, #8]
 80065e2:	607a      	str	r2, [r7, #4]
 80065e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	689b      	ldr	r3, [r3, #8]
 80065ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80065f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	021a      	lsls	r2, r3, #8
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	431a      	orrs	r2, r3
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	4313      	orrs	r3, r2
 8006600:	697a      	ldr	r2, [r7, #20]
 8006602:	4313      	orrs	r3, r2
 8006604:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	697a      	ldr	r2, [r7, #20]
 800660a:	609a      	str	r2, [r3, #8]
}
 800660c:	bf00      	nop
 800660e:	371c      	adds	r7, #28
 8006610:	46bd      	mov	sp, r7
 8006612:	bc80      	pop	{r7}
 8006614:	4770      	bx	lr

08006616 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006616:	b480      	push	{r7}
 8006618:	b087      	sub	sp, #28
 800661a:	af00      	add	r7, sp, #0
 800661c:	60f8      	str	r0, [r7, #12]
 800661e:	60b9      	str	r1, [r7, #8]
 8006620:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	f003 031f 	and.w	r3, r3, #31
 8006628:	2201      	movs	r2, #1
 800662a:	fa02 f303 	lsl.w	r3, r2, r3
 800662e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	6a1a      	ldr	r2, [r3, #32]
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	43db      	mvns	r3, r3
 8006638:	401a      	ands	r2, r3
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	6a1a      	ldr	r2, [r3, #32]
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	f003 031f 	and.w	r3, r3, #31
 8006648:	6879      	ldr	r1, [r7, #4]
 800664a:	fa01 f303 	lsl.w	r3, r1, r3
 800664e:	431a      	orrs	r2, r3
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	621a      	str	r2, [r3, #32]
}
 8006654:	bf00      	nop
 8006656:	371c      	adds	r7, #28
 8006658:	46bd      	mov	sp, r7
 800665a:	bc80      	pop	{r7}
 800665c:	4770      	bx	lr
	...

08006660 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006660:	b480      	push	{r7}
 8006662:	b085      	sub	sp, #20
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
 8006668:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006670:	2b01      	cmp	r3, #1
 8006672:	d101      	bne.n	8006678 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006674:	2302      	movs	r3, #2
 8006676:	e046      	b.n	8006706 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2201      	movs	r2, #1
 800667c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2202      	movs	r2, #2
 8006684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	689b      	ldr	r3, [r3, #8]
 8006696:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800669e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	68fa      	ldr	r2, [r7, #12]
 80066a6:	4313      	orrs	r3, r2
 80066a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	68fa      	ldr	r2, [r7, #12]
 80066b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a16      	ldr	r2, [pc, #88]	; (8006710 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d00e      	beq.n	80066da <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066c4:	d009      	beq.n	80066da <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a12      	ldr	r2, [pc, #72]	; (8006714 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d004      	beq.n	80066da <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a10      	ldr	r2, [pc, #64]	; (8006718 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d10c      	bne.n	80066f4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80066e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	685b      	ldr	r3, [r3, #4]
 80066e6:	68ba      	ldr	r2, [r7, #8]
 80066e8:	4313      	orrs	r3, r2
 80066ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	68ba      	ldr	r2, [r7, #8]
 80066f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2201      	movs	r2, #1
 80066f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2200      	movs	r2, #0
 8006700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006704:	2300      	movs	r3, #0
}
 8006706:	4618      	mov	r0, r3
 8006708:	3714      	adds	r7, #20
 800670a:	46bd      	mov	sp, r7
 800670c:	bc80      	pop	{r7}
 800670e:	4770      	bx	lr
 8006710:	40012c00 	.word	0x40012c00
 8006714:	40000400 	.word	0x40000400
 8006718:	40000800 	.word	0x40000800

0800671c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800671c:	b480      	push	{r7}
 800671e:	b083      	sub	sp, #12
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006724:	bf00      	nop
 8006726:	370c      	adds	r7, #12
 8006728:	46bd      	mov	sp, r7
 800672a:	bc80      	pop	{r7}
 800672c:	4770      	bx	lr

0800672e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800672e:	b480      	push	{r7}
 8006730:	b083      	sub	sp, #12
 8006732:	af00      	add	r7, sp, #0
 8006734:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006736:	bf00      	nop
 8006738:	370c      	adds	r7, #12
 800673a:	46bd      	mov	sp, r7
 800673c:	bc80      	pop	{r7}
 800673e:	4770      	bx	lr

08006740 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006740:	b084      	sub	sp, #16
 8006742:	b480      	push	{r7}
 8006744:	b083      	sub	sp, #12
 8006746:	af00      	add	r7, sp, #0
 8006748:	6078      	str	r0, [r7, #4]
 800674a:	f107 0014 	add.w	r0, r7, #20
 800674e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006752:	2300      	movs	r3, #0
}
 8006754:	4618      	mov	r0, r3
 8006756:	370c      	adds	r7, #12
 8006758:	46bd      	mov	sp, r7
 800675a:	bc80      	pop	{r7}
 800675c:	b004      	add	sp, #16
 800675e:	4770      	bx	lr

08006760 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006760:	b480      	push	{r7}
 8006762:	b085      	sub	sp, #20
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2200      	movs	r2, #0
 800676c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006770:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006774:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	b29a      	uxth	r2, r3
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006780:	2300      	movs	r3, #0
}
 8006782:	4618      	mov	r0, r3
 8006784:	3714      	adds	r7, #20
 8006786:	46bd      	mov	sp, r7
 8006788:	bc80      	pop	{r7}
 800678a:	4770      	bx	lr

0800678c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800678c:	b480      	push	{r7}
 800678e:	b085      	sub	sp, #20
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006794:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006798:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80067a0:	b29a      	uxth	r2, r3
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	b29b      	uxth	r3, r3
 80067a6:	43db      	mvns	r3, r3
 80067a8:	b29b      	uxth	r3, r3
 80067aa:	4013      	ands	r3, r2
 80067ac:	b29a      	uxth	r2, r3
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80067b4:	2300      	movs	r3, #0
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	3714      	adds	r7, #20
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bc80      	pop	{r7}
 80067be:	4770      	bx	lr

080067c0 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b083      	sub	sp, #12
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
 80067c8:	460b      	mov	r3, r1
 80067ca:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80067cc:	2300      	movs	r3, #0
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	370c      	adds	r7, #12
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bc80      	pop	{r7}
 80067d6:	4770      	bx	lr

080067d8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80067d8:	b084      	sub	sp, #16
 80067da:	b480      	push	{r7}
 80067dc:	b083      	sub	sp, #12
 80067de:	af00      	add	r7, sp, #0
 80067e0:	6078      	str	r0, [r7, #4]
 80067e2:	f107 0014 	add.w	r0, r7, #20
 80067e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2201      	movs	r2, #1
 80067ee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2200      	movs	r2, #0
 80067f6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2200      	movs	r2, #0
 80067fe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2200      	movs	r2, #0
 8006806:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800680a:	2300      	movs	r3, #0
}
 800680c:	4618      	mov	r0, r3
 800680e:	370c      	adds	r7, #12
 8006810:	46bd      	mov	sp, r7
 8006812:	bc80      	pop	{r7}
 8006814:	b004      	add	sp, #16
 8006816:	4770      	bx	lr

08006818 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006818:	b480      	push	{r7}
 800681a:	b09b      	sub	sp, #108	; 0x6c
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
 8006820:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006822:	2300      	movs	r3, #0
 8006824:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006828:	687a      	ldr	r2, [r7, #4]
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	781b      	ldrb	r3, [r3, #0]
 800682e:	009b      	lsls	r3, r3, #2
 8006830:	4413      	add	r3, r2
 8006832:	881b      	ldrh	r3, [r3, #0]
 8006834:	b29b      	uxth	r3, r3
 8006836:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800683a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800683e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	78db      	ldrb	r3, [r3, #3]
 8006846:	2b03      	cmp	r3, #3
 8006848:	d81f      	bhi.n	800688a <USB_ActivateEndpoint+0x72>
 800684a:	a201      	add	r2, pc, #4	; (adr r2, 8006850 <USB_ActivateEndpoint+0x38>)
 800684c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006850:	08006861 	.word	0x08006861
 8006854:	0800687d 	.word	0x0800687d
 8006858:	08006893 	.word	0x08006893
 800685c:	0800686f 	.word	0x0800686f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006860:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006864:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006868:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800686c:	e012      	b.n	8006894 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800686e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006872:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8006876:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800687a:	e00b      	b.n	8006894 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800687c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006880:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006884:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8006888:	e004      	b.n	8006894 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800688a:	2301      	movs	r3, #1
 800688c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8006890:	e000      	b.n	8006894 <USB_ActivateEndpoint+0x7c>
      break;
 8006892:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006894:	687a      	ldr	r2, [r7, #4]
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	781b      	ldrb	r3, [r3, #0]
 800689a:	009b      	lsls	r3, r3, #2
 800689c:	441a      	add	r2, r3
 800689e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80068a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068b2:	b29b      	uxth	r3, r3
 80068b4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80068b6:	687a      	ldr	r2, [r7, #4]
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	781b      	ldrb	r3, [r3, #0]
 80068bc:	009b      	lsls	r3, r3, #2
 80068be:	4413      	add	r3, r2
 80068c0:	881b      	ldrh	r3, [r3, #0]
 80068c2:	b29b      	uxth	r3, r3
 80068c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068cc:	b29a      	uxth	r2, r3
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	781b      	ldrb	r3, [r3, #0]
 80068d2:	b29b      	uxth	r3, r3
 80068d4:	4313      	orrs	r3, r2
 80068d6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80068da:	687a      	ldr	r2, [r7, #4]
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	781b      	ldrb	r3, [r3, #0]
 80068e0:	009b      	lsls	r3, r3, #2
 80068e2:	441a      	add	r2, r3
 80068e4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80068e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068f8:	b29b      	uxth	r3, r3
 80068fa:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	7b1b      	ldrb	r3, [r3, #12]
 8006900:	2b00      	cmp	r3, #0
 8006902:	f040 8149 	bne.w	8006b98 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	785b      	ldrb	r3, [r3, #1]
 800690a:	2b00      	cmp	r3, #0
 800690c:	f000 8084 	beq.w	8006a18 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	617b      	str	r3, [r7, #20]
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800691a:	b29b      	uxth	r3, r3
 800691c:	461a      	mov	r2, r3
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	4413      	add	r3, r2
 8006922:	617b      	str	r3, [r7, #20]
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	781b      	ldrb	r3, [r3, #0]
 8006928:	011a      	lsls	r2, r3, #4
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	4413      	add	r3, r2
 800692e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006932:	613b      	str	r3, [r7, #16]
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	88db      	ldrh	r3, [r3, #6]
 8006938:	085b      	lsrs	r3, r3, #1
 800693a:	b29b      	uxth	r3, r3
 800693c:	005b      	lsls	r3, r3, #1
 800693e:	b29a      	uxth	r2, r3
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006944:	687a      	ldr	r2, [r7, #4]
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	781b      	ldrb	r3, [r3, #0]
 800694a:	009b      	lsls	r3, r3, #2
 800694c:	4413      	add	r3, r2
 800694e:	881b      	ldrh	r3, [r3, #0]
 8006950:	81fb      	strh	r3, [r7, #14]
 8006952:	89fb      	ldrh	r3, [r7, #14]
 8006954:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006958:	2b00      	cmp	r3, #0
 800695a:	d01b      	beq.n	8006994 <USB_ActivateEndpoint+0x17c>
 800695c:	687a      	ldr	r2, [r7, #4]
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	781b      	ldrb	r3, [r3, #0]
 8006962:	009b      	lsls	r3, r3, #2
 8006964:	4413      	add	r3, r2
 8006966:	881b      	ldrh	r3, [r3, #0]
 8006968:	b29b      	uxth	r3, r3
 800696a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800696e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006972:	81bb      	strh	r3, [r7, #12]
 8006974:	687a      	ldr	r2, [r7, #4]
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	781b      	ldrb	r3, [r3, #0]
 800697a:	009b      	lsls	r3, r3, #2
 800697c:	441a      	add	r2, r3
 800697e:	89bb      	ldrh	r3, [r7, #12]
 8006980:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006984:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006988:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800698c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006990:	b29b      	uxth	r3, r3
 8006992:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	78db      	ldrb	r3, [r3, #3]
 8006998:	2b01      	cmp	r3, #1
 800699a:	d020      	beq.n	80069de <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800699c:	687a      	ldr	r2, [r7, #4]
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	781b      	ldrb	r3, [r3, #0]
 80069a2:	009b      	lsls	r3, r3, #2
 80069a4:	4413      	add	r3, r2
 80069a6:	881b      	ldrh	r3, [r3, #0]
 80069a8:	b29b      	uxth	r3, r3
 80069aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069b2:	813b      	strh	r3, [r7, #8]
 80069b4:	893b      	ldrh	r3, [r7, #8]
 80069b6:	f083 0320 	eor.w	r3, r3, #32
 80069ba:	813b      	strh	r3, [r7, #8]
 80069bc:	687a      	ldr	r2, [r7, #4]
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	781b      	ldrb	r3, [r3, #0]
 80069c2:	009b      	lsls	r3, r3, #2
 80069c4:	441a      	add	r2, r3
 80069c6:	893b      	ldrh	r3, [r7, #8]
 80069c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069d8:	b29b      	uxth	r3, r3
 80069da:	8013      	strh	r3, [r2, #0]
 80069dc:	e27f      	b.n	8006ede <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80069de:	687a      	ldr	r2, [r7, #4]
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	781b      	ldrb	r3, [r3, #0]
 80069e4:	009b      	lsls	r3, r3, #2
 80069e6:	4413      	add	r3, r2
 80069e8:	881b      	ldrh	r3, [r3, #0]
 80069ea:	b29b      	uxth	r3, r3
 80069ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069f4:	817b      	strh	r3, [r7, #10]
 80069f6:	687a      	ldr	r2, [r7, #4]
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	781b      	ldrb	r3, [r3, #0]
 80069fc:	009b      	lsls	r3, r3, #2
 80069fe:	441a      	add	r2, r3
 8006a00:	897b      	ldrh	r3, [r7, #10]
 8006a02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a12:	b29b      	uxth	r3, r3
 8006a14:	8013      	strh	r3, [r2, #0]
 8006a16:	e262      	b.n	8006ede <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a22:	b29b      	uxth	r3, r3
 8006a24:	461a      	mov	r2, r3
 8006a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a28:	4413      	add	r3, r2
 8006a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	781b      	ldrb	r3, [r3, #0]
 8006a30:	011a      	lsls	r2, r3, #4
 8006a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a34:	4413      	add	r3, r2
 8006a36:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8006a3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	88db      	ldrh	r3, [r3, #6]
 8006a40:	085b      	lsrs	r3, r3, #1
 8006a42:	b29b      	uxth	r3, r3
 8006a44:	005b      	lsls	r3, r3, #1
 8006a46:	b29a      	uxth	r2, r3
 8006a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a4a:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	627b      	str	r3, [r7, #36]	; 0x24
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a56:	b29b      	uxth	r3, r3
 8006a58:	461a      	mov	r2, r3
 8006a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a5c:	4413      	add	r3, r2
 8006a5e:	627b      	str	r3, [r7, #36]	; 0x24
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	781b      	ldrb	r3, [r3, #0]
 8006a64:	011a      	lsls	r2, r3, #4
 8006a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a68:	4413      	add	r3, r2
 8006a6a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006a6e:	623b      	str	r3, [r7, #32]
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	691b      	ldr	r3, [r3, #16]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d112      	bne.n	8006a9e <USB_ActivateEndpoint+0x286>
 8006a78:	6a3b      	ldr	r3, [r7, #32]
 8006a7a:	881b      	ldrh	r3, [r3, #0]
 8006a7c:	b29b      	uxth	r3, r3
 8006a7e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006a82:	b29a      	uxth	r2, r3
 8006a84:	6a3b      	ldr	r3, [r7, #32]
 8006a86:	801a      	strh	r2, [r3, #0]
 8006a88:	6a3b      	ldr	r3, [r7, #32]
 8006a8a:	881b      	ldrh	r3, [r3, #0]
 8006a8c:	b29b      	uxth	r3, r3
 8006a8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a96:	b29a      	uxth	r2, r3
 8006a98:	6a3b      	ldr	r3, [r7, #32]
 8006a9a:	801a      	strh	r2, [r3, #0]
 8006a9c:	e02f      	b.n	8006afe <USB_ActivateEndpoint+0x2e6>
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	691b      	ldr	r3, [r3, #16]
 8006aa2:	2b3e      	cmp	r3, #62	; 0x3e
 8006aa4:	d813      	bhi.n	8006ace <USB_ActivateEndpoint+0x2b6>
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	691b      	ldr	r3, [r3, #16]
 8006aaa:	085b      	lsrs	r3, r3, #1
 8006aac:	663b      	str	r3, [r7, #96]	; 0x60
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	691b      	ldr	r3, [r3, #16]
 8006ab2:	f003 0301 	and.w	r3, r3, #1
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d002      	beq.n	8006ac0 <USB_ActivateEndpoint+0x2a8>
 8006aba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006abc:	3301      	adds	r3, #1
 8006abe:	663b      	str	r3, [r7, #96]	; 0x60
 8006ac0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ac2:	b29b      	uxth	r3, r3
 8006ac4:	029b      	lsls	r3, r3, #10
 8006ac6:	b29a      	uxth	r2, r3
 8006ac8:	6a3b      	ldr	r3, [r7, #32]
 8006aca:	801a      	strh	r2, [r3, #0]
 8006acc:	e017      	b.n	8006afe <USB_ActivateEndpoint+0x2e6>
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	691b      	ldr	r3, [r3, #16]
 8006ad2:	095b      	lsrs	r3, r3, #5
 8006ad4:	663b      	str	r3, [r7, #96]	; 0x60
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	691b      	ldr	r3, [r3, #16]
 8006ada:	f003 031f 	and.w	r3, r3, #31
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d102      	bne.n	8006ae8 <USB_ActivateEndpoint+0x2d0>
 8006ae2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ae4:	3b01      	subs	r3, #1
 8006ae6:	663b      	str	r3, [r7, #96]	; 0x60
 8006ae8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006aea:	b29b      	uxth	r3, r3
 8006aec:	029b      	lsls	r3, r3, #10
 8006aee:	b29b      	uxth	r3, r3
 8006af0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006af4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006af8:	b29a      	uxth	r2, r3
 8006afa:	6a3b      	ldr	r3, [r7, #32]
 8006afc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006afe:	687a      	ldr	r2, [r7, #4]
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	781b      	ldrb	r3, [r3, #0]
 8006b04:	009b      	lsls	r3, r3, #2
 8006b06:	4413      	add	r3, r2
 8006b08:	881b      	ldrh	r3, [r3, #0]
 8006b0a:	83fb      	strh	r3, [r7, #30]
 8006b0c:	8bfb      	ldrh	r3, [r7, #30]
 8006b0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d01b      	beq.n	8006b4e <USB_ActivateEndpoint+0x336>
 8006b16:	687a      	ldr	r2, [r7, #4]
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	781b      	ldrb	r3, [r3, #0]
 8006b1c:	009b      	lsls	r3, r3, #2
 8006b1e:	4413      	add	r3, r2
 8006b20:	881b      	ldrh	r3, [r3, #0]
 8006b22:	b29b      	uxth	r3, r3
 8006b24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b2c:	83bb      	strh	r3, [r7, #28]
 8006b2e:	687a      	ldr	r2, [r7, #4]
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	781b      	ldrb	r3, [r3, #0]
 8006b34:	009b      	lsls	r3, r3, #2
 8006b36:	441a      	add	r2, r3
 8006b38:	8bbb      	ldrh	r3, [r7, #28]
 8006b3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b42:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006b46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b4a:	b29b      	uxth	r3, r3
 8006b4c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006b4e:	687a      	ldr	r2, [r7, #4]
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	781b      	ldrb	r3, [r3, #0]
 8006b54:	009b      	lsls	r3, r3, #2
 8006b56:	4413      	add	r3, r2
 8006b58:	881b      	ldrh	r3, [r3, #0]
 8006b5a:	b29b      	uxth	r3, r3
 8006b5c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b64:	837b      	strh	r3, [r7, #26]
 8006b66:	8b7b      	ldrh	r3, [r7, #26]
 8006b68:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006b6c:	837b      	strh	r3, [r7, #26]
 8006b6e:	8b7b      	ldrh	r3, [r7, #26]
 8006b70:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006b74:	837b      	strh	r3, [r7, #26]
 8006b76:	687a      	ldr	r2, [r7, #4]
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	781b      	ldrb	r3, [r3, #0]
 8006b7c:	009b      	lsls	r3, r3, #2
 8006b7e:	441a      	add	r2, r3
 8006b80:	8b7b      	ldrh	r3, [r7, #26]
 8006b82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b92:	b29b      	uxth	r3, r3
 8006b94:	8013      	strh	r3, [r2, #0]
 8006b96:	e1a2      	b.n	8006ede <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8006b98:	687a      	ldr	r2, [r7, #4]
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	781b      	ldrb	r3, [r3, #0]
 8006b9e:	009b      	lsls	r3, r3, #2
 8006ba0:	4413      	add	r3, r2
 8006ba2:	881b      	ldrh	r3, [r3, #0]
 8006ba4:	b29b      	uxth	r3, r3
 8006ba6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006baa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bae:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8006bb2:	687a      	ldr	r2, [r7, #4]
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	781b      	ldrb	r3, [r3, #0]
 8006bb8:	009b      	lsls	r3, r3, #2
 8006bba:	441a      	add	r2, r3
 8006bbc:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8006bc0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bc4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bc8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006bcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bd0:	b29b      	uxth	r3, r3
 8006bd2:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	65bb      	str	r3, [r7, #88]	; 0x58
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bde:	b29b      	uxth	r3, r3
 8006be0:	461a      	mov	r2, r3
 8006be2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006be4:	4413      	add	r3, r2
 8006be6:	65bb      	str	r3, [r7, #88]	; 0x58
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	781b      	ldrb	r3, [r3, #0]
 8006bec:	011a      	lsls	r2, r3, #4
 8006bee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006bf0:	4413      	add	r3, r2
 8006bf2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006bf6:	657b      	str	r3, [r7, #84]	; 0x54
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	891b      	ldrh	r3, [r3, #8]
 8006bfc:	085b      	lsrs	r3, r3, #1
 8006bfe:	b29b      	uxth	r3, r3
 8006c00:	005b      	lsls	r3, r3, #1
 8006c02:	b29a      	uxth	r2, r3
 8006c04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c06:	801a      	strh	r2, [r3, #0]
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	653b      	str	r3, [r7, #80]	; 0x50
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c12:	b29b      	uxth	r3, r3
 8006c14:	461a      	mov	r2, r3
 8006c16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c18:	4413      	add	r3, r2
 8006c1a:	653b      	str	r3, [r7, #80]	; 0x50
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	781b      	ldrb	r3, [r3, #0]
 8006c20:	011a      	lsls	r2, r3, #4
 8006c22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c24:	4413      	add	r3, r2
 8006c26:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8006c2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	895b      	ldrh	r3, [r3, #10]
 8006c30:	085b      	lsrs	r3, r3, #1
 8006c32:	b29b      	uxth	r3, r3
 8006c34:	005b      	lsls	r3, r3, #1
 8006c36:	b29a      	uxth	r2, r3
 8006c38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c3a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	785b      	ldrb	r3, [r3, #1]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	f040 8091 	bne.w	8006d68 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006c46:	687a      	ldr	r2, [r7, #4]
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	781b      	ldrb	r3, [r3, #0]
 8006c4c:	009b      	lsls	r3, r3, #2
 8006c4e:	4413      	add	r3, r2
 8006c50:	881b      	ldrh	r3, [r3, #0]
 8006c52:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8006c54:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006c56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d01b      	beq.n	8006c96 <USB_ActivateEndpoint+0x47e>
 8006c5e:	687a      	ldr	r2, [r7, #4]
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	781b      	ldrb	r3, [r3, #0]
 8006c64:	009b      	lsls	r3, r3, #2
 8006c66:	4413      	add	r3, r2
 8006c68:	881b      	ldrh	r3, [r3, #0]
 8006c6a:	b29b      	uxth	r3, r3
 8006c6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c74:	877b      	strh	r3, [r7, #58]	; 0x3a
 8006c76:	687a      	ldr	r2, [r7, #4]
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	781b      	ldrb	r3, [r3, #0]
 8006c7c:	009b      	lsls	r3, r3, #2
 8006c7e:	441a      	add	r2, r3
 8006c80:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006c82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c8a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006c8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c92:	b29b      	uxth	r3, r3
 8006c94:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006c96:	687a      	ldr	r2, [r7, #4]
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	781b      	ldrb	r3, [r3, #0]
 8006c9c:	009b      	lsls	r3, r3, #2
 8006c9e:	4413      	add	r3, r2
 8006ca0:	881b      	ldrh	r3, [r3, #0]
 8006ca2:	873b      	strh	r3, [r7, #56]	; 0x38
 8006ca4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006ca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d01b      	beq.n	8006ce6 <USB_ActivateEndpoint+0x4ce>
 8006cae:	687a      	ldr	r2, [r7, #4]
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	781b      	ldrb	r3, [r3, #0]
 8006cb4:	009b      	lsls	r3, r3, #2
 8006cb6:	4413      	add	r3, r2
 8006cb8:	881b      	ldrh	r3, [r3, #0]
 8006cba:	b29b      	uxth	r3, r3
 8006cbc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cc4:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006cc6:	687a      	ldr	r2, [r7, #4]
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	781b      	ldrb	r3, [r3, #0]
 8006ccc:	009b      	lsls	r3, r3, #2
 8006cce:	441a      	add	r2, r3
 8006cd0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006cd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cde:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006ce2:	b29b      	uxth	r3, r3
 8006ce4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006ce6:	687a      	ldr	r2, [r7, #4]
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	781b      	ldrb	r3, [r3, #0]
 8006cec:	009b      	lsls	r3, r3, #2
 8006cee:	4413      	add	r3, r2
 8006cf0:	881b      	ldrh	r3, [r3, #0]
 8006cf2:	b29b      	uxth	r3, r3
 8006cf4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006cf8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cfc:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006cfe:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006d00:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006d04:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006d06:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006d08:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006d0c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006d0e:	687a      	ldr	r2, [r7, #4]
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	781b      	ldrb	r3, [r3, #0]
 8006d14:	009b      	lsls	r3, r3, #2
 8006d16:	441a      	add	r2, r3
 8006d18:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006d1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d2a:	b29b      	uxth	r3, r3
 8006d2c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006d2e:	687a      	ldr	r2, [r7, #4]
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	781b      	ldrb	r3, [r3, #0]
 8006d34:	009b      	lsls	r3, r3, #2
 8006d36:	4413      	add	r3, r2
 8006d38:	881b      	ldrh	r3, [r3, #0]
 8006d3a:	b29b      	uxth	r3, r3
 8006d3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d44:	867b      	strh	r3, [r7, #50]	; 0x32
 8006d46:	687a      	ldr	r2, [r7, #4]
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	781b      	ldrb	r3, [r3, #0]
 8006d4c:	009b      	lsls	r3, r3, #2
 8006d4e:	441a      	add	r2, r3
 8006d50:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006d52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d62:	b29b      	uxth	r3, r3
 8006d64:	8013      	strh	r3, [r2, #0]
 8006d66:	e0ba      	b.n	8006ede <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006d68:	687a      	ldr	r2, [r7, #4]
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	781b      	ldrb	r3, [r3, #0]
 8006d6e:	009b      	lsls	r3, r3, #2
 8006d70:	4413      	add	r3, r2
 8006d72:	881b      	ldrh	r3, [r3, #0]
 8006d74:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006d78:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006d7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d01d      	beq.n	8006dc0 <USB_ActivateEndpoint+0x5a8>
 8006d84:	687a      	ldr	r2, [r7, #4]
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	781b      	ldrb	r3, [r3, #0]
 8006d8a:	009b      	lsls	r3, r3, #2
 8006d8c:	4413      	add	r3, r2
 8006d8e:	881b      	ldrh	r3, [r3, #0]
 8006d90:	b29b      	uxth	r3, r3
 8006d92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d9a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006d9e:	687a      	ldr	r2, [r7, #4]
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	781b      	ldrb	r3, [r3, #0]
 8006da4:	009b      	lsls	r3, r3, #2
 8006da6:	441a      	add	r2, r3
 8006da8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006dac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006db0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006db4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006db8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dbc:	b29b      	uxth	r3, r3
 8006dbe:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006dc0:	687a      	ldr	r2, [r7, #4]
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	781b      	ldrb	r3, [r3, #0]
 8006dc6:	009b      	lsls	r3, r3, #2
 8006dc8:	4413      	add	r3, r2
 8006dca:	881b      	ldrh	r3, [r3, #0]
 8006dcc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006dd0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006dd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d01d      	beq.n	8006e18 <USB_ActivateEndpoint+0x600>
 8006ddc:	687a      	ldr	r2, [r7, #4]
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	781b      	ldrb	r3, [r3, #0]
 8006de2:	009b      	lsls	r3, r3, #2
 8006de4:	4413      	add	r3, r2
 8006de6:	881b      	ldrh	r3, [r3, #0]
 8006de8:	b29b      	uxth	r3, r3
 8006dea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006df2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006df6:	687a      	ldr	r2, [r7, #4]
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	781b      	ldrb	r3, [r3, #0]
 8006dfc:	009b      	lsls	r3, r3, #2
 8006dfe:	441a      	add	r2, r3
 8006e00:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006e04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e10:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006e14:	b29b      	uxth	r3, r3
 8006e16:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	78db      	ldrb	r3, [r3, #3]
 8006e1c:	2b01      	cmp	r3, #1
 8006e1e:	d024      	beq.n	8006e6a <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006e20:	687a      	ldr	r2, [r7, #4]
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	781b      	ldrb	r3, [r3, #0]
 8006e26:	009b      	lsls	r3, r3, #2
 8006e28:	4413      	add	r3, r2
 8006e2a:	881b      	ldrh	r3, [r3, #0]
 8006e2c:	b29b      	uxth	r3, r3
 8006e2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e36:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006e3a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006e3e:	f083 0320 	eor.w	r3, r3, #32
 8006e42:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006e46:	687a      	ldr	r2, [r7, #4]
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	781b      	ldrb	r3, [r3, #0]
 8006e4c:	009b      	lsls	r3, r3, #2
 8006e4e:	441a      	add	r2, r3
 8006e50:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006e54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e64:	b29b      	uxth	r3, r3
 8006e66:	8013      	strh	r3, [r2, #0]
 8006e68:	e01d      	b.n	8006ea6 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006e6a:	687a      	ldr	r2, [r7, #4]
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	781b      	ldrb	r3, [r3, #0]
 8006e70:	009b      	lsls	r3, r3, #2
 8006e72:	4413      	add	r3, r2
 8006e74:	881b      	ldrh	r3, [r3, #0]
 8006e76:	b29b      	uxth	r3, r3
 8006e78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e80:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006e84:	687a      	ldr	r2, [r7, #4]
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	781b      	ldrb	r3, [r3, #0]
 8006e8a:	009b      	lsls	r3, r3, #2
 8006e8c:	441a      	add	r2, r3
 8006e8e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006e92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ea2:	b29b      	uxth	r3, r3
 8006ea4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006ea6:	687a      	ldr	r2, [r7, #4]
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	781b      	ldrb	r3, [r3, #0]
 8006eac:	009b      	lsls	r3, r3, #2
 8006eae:	4413      	add	r3, r2
 8006eb0:	881b      	ldrh	r3, [r3, #0]
 8006eb2:	b29b      	uxth	r3, r3
 8006eb4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006eb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ebc:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006ebe:	687a      	ldr	r2, [r7, #4]
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	781b      	ldrb	r3, [r3, #0]
 8006ec4:	009b      	lsls	r3, r3, #2
 8006ec6:	441a      	add	r2, r3
 8006ec8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006eca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ece:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ed2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ed6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006eda:	b29b      	uxth	r3, r3
 8006edc:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8006ede:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	376c      	adds	r7, #108	; 0x6c
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bc80      	pop	{r7}
 8006eea:	4770      	bx	lr

08006eec <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b08d      	sub	sp, #52	; 0x34
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
 8006ef4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	7b1b      	ldrb	r3, [r3, #12]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	f040 808e 	bne.w	800701c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	785b      	ldrb	r3, [r3, #1]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d044      	beq.n	8006f92 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006f08:	687a      	ldr	r2, [r7, #4]
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	781b      	ldrb	r3, [r3, #0]
 8006f0e:	009b      	lsls	r3, r3, #2
 8006f10:	4413      	add	r3, r2
 8006f12:	881b      	ldrh	r3, [r3, #0]
 8006f14:	81bb      	strh	r3, [r7, #12]
 8006f16:	89bb      	ldrh	r3, [r7, #12]
 8006f18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d01b      	beq.n	8006f58 <USB_DeactivateEndpoint+0x6c>
 8006f20:	687a      	ldr	r2, [r7, #4]
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	781b      	ldrb	r3, [r3, #0]
 8006f26:	009b      	lsls	r3, r3, #2
 8006f28:	4413      	add	r3, r2
 8006f2a:	881b      	ldrh	r3, [r3, #0]
 8006f2c:	b29b      	uxth	r3, r3
 8006f2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f36:	817b      	strh	r3, [r7, #10]
 8006f38:	687a      	ldr	r2, [r7, #4]
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	781b      	ldrb	r3, [r3, #0]
 8006f3e:	009b      	lsls	r3, r3, #2
 8006f40:	441a      	add	r2, r3
 8006f42:	897b      	ldrh	r3, [r7, #10]
 8006f44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f50:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006f54:	b29b      	uxth	r3, r3
 8006f56:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006f58:	687a      	ldr	r2, [r7, #4]
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	781b      	ldrb	r3, [r3, #0]
 8006f5e:	009b      	lsls	r3, r3, #2
 8006f60:	4413      	add	r3, r2
 8006f62:	881b      	ldrh	r3, [r3, #0]
 8006f64:	b29b      	uxth	r3, r3
 8006f66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f6e:	813b      	strh	r3, [r7, #8]
 8006f70:	687a      	ldr	r2, [r7, #4]
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	781b      	ldrb	r3, [r3, #0]
 8006f76:	009b      	lsls	r3, r3, #2
 8006f78:	441a      	add	r2, r3
 8006f7a:	893b      	ldrh	r3, [r7, #8]
 8006f7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f8c:	b29b      	uxth	r3, r3
 8006f8e:	8013      	strh	r3, [r2, #0]
 8006f90:	e192      	b.n	80072b8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006f92:	687a      	ldr	r2, [r7, #4]
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	781b      	ldrb	r3, [r3, #0]
 8006f98:	009b      	lsls	r3, r3, #2
 8006f9a:	4413      	add	r3, r2
 8006f9c:	881b      	ldrh	r3, [r3, #0]
 8006f9e:	827b      	strh	r3, [r7, #18]
 8006fa0:	8a7b      	ldrh	r3, [r7, #18]
 8006fa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d01b      	beq.n	8006fe2 <USB_DeactivateEndpoint+0xf6>
 8006faa:	687a      	ldr	r2, [r7, #4]
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	781b      	ldrb	r3, [r3, #0]
 8006fb0:	009b      	lsls	r3, r3, #2
 8006fb2:	4413      	add	r3, r2
 8006fb4:	881b      	ldrh	r3, [r3, #0]
 8006fb6:	b29b      	uxth	r3, r3
 8006fb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fc0:	823b      	strh	r3, [r7, #16]
 8006fc2:	687a      	ldr	r2, [r7, #4]
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	781b      	ldrb	r3, [r3, #0]
 8006fc8:	009b      	lsls	r3, r3, #2
 8006fca:	441a      	add	r2, r3
 8006fcc:	8a3b      	ldrh	r3, [r7, #16]
 8006fce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fd6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006fda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fde:	b29b      	uxth	r3, r3
 8006fe0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006fe2:	687a      	ldr	r2, [r7, #4]
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	781b      	ldrb	r3, [r3, #0]
 8006fe8:	009b      	lsls	r3, r3, #2
 8006fea:	4413      	add	r3, r2
 8006fec:	881b      	ldrh	r3, [r3, #0]
 8006fee:	b29b      	uxth	r3, r3
 8006ff0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ff4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ff8:	81fb      	strh	r3, [r7, #14]
 8006ffa:	687a      	ldr	r2, [r7, #4]
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	781b      	ldrb	r3, [r3, #0]
 8007000:	009b      	lsls	r3, r3, #2
 8007002:	441a      	add	r2, r3
 8007004:	89fb      	ldrh	r3, [r7, #14]
 8007006:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800700a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800700e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007012:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007016:	b29b      	uxth	r3, r3
 8007018:	8013      	strh	r3, [r2, #0]
 800701a:	e14d      	b.n	80072b8 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	785b      	ldrb	r3, [r3, #1]
 8007020:	2b00      	cmp	r3, #0
 8007022:	f040 80a5 	bne.w	8007170 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007026:	687a      	ldr	r2, [r7, #4]
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	781b      	ldrb	r3, [r3, #0]
 800702c:	009b      	lsls	r3, r3, #2
 800702e:	4413      	add	r3, r2
 8007030:	881b      	ldrh	r3, [r3, #0]
 8007032:	843b      	strh	r3, [r7, #32]
 8007034:	8c3b      	ldrh	r3, [r7, #32]
 8007036:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800703a:	2b00      	cmp	r3, #0
 800703c:	d01b      	beq.n	8007076 <USB_DeactivateEndpoint+0x18a>
 800703e:	687a      	ldr	r2, [r7, #4]
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	781b      	ldrb	r3, [r3, #0]
 8007044:	009b      	lsls	r3, r3, #2
 8007046:	4413      	add	r3, r2
 8007048:	881b      	ldrh	r3, [r3, #0]
 800704a:	b29b      	uxth	r3, r3
 800704c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007050:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007054:	83fb      	strh	r3, [r7, #30]
 8007056:	687a      	ldr	r2, [r7, #4]
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	781b      	ldrb	r3, [r3, #0]
 800705c:	009b      	lsls	r3, r3, #2
 800705e:	441a      	add	r2, r3
 8007060:	8bfb      	ldrh	r3, [r7, #30]
 8007062:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007066:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800706a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800706e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007072:	b29b      	uxth	r3, r3
 8007074:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007076:	687a      	ldr	r2, [r7, #4]
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	781b      	ldrb	r3, [r3, #0]
 800707c:	009b      	lsls	r3, r3, #2
 800707e:	4413      	add	r3, r2
 8007080:	881b      	ldrh	r3, [r3, #0]
 8007082:	83bb      	strh	r3, [r7, #28]
 8007084:	8bbb      	ldrh	r3, [r7, #28]
 8007086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800708a:	2b00      	cmp	r3, #0
 800708c:	d01b      	beq.n	80070c6 <USB_DeactivateEndpoint+0x1da>
 800708e:	687a      	ldr	r2, [r7, #4]
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	781b      	ldrb	r3, [r3, #0]
 8007094:	009b      	lsls	r3, r3, #2
 8007096:	4413      	add	r3, r2
 8007098:	881b      	ldrh	r3, [r3, #0]
 800709a:	b29b      	uxth	r3, r3
 800709c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070a4:	837b      	strh	r3, [r7, #26]
 80070a6:	687a      	ldr	r2, [r7, #4]
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	781b      	ldrb	r3, [r3, #0]
 80070ac:	009b      	lsls	r3, r3, #2
 80070ae:	441a      	add	r2, r3
 80070b0:	8b7b      	ldrh	r3, [r7, #26]
 80070b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070be:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80070c2:	b29b      	uxth	r3, r3
 80070c4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80070c6:	687a      	ldr	r2, [r7, #4]
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	781b      	ldrb	r3, [r3, #0]
 80070cc:	009b      	lsls	r3, r3, #2
 80070ce:	4413      	add	r3, r2
 80070d0:	881b      	ldrh	r3, [r3, #0]
 80070d2:	b29b      	uxth	r3, r3
 80070d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070dc:	833b      	strh	r3, [r7, #24]
 80070de:	687a      	ldr	r2, [r7, #4]
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	781b      	ldrb	r3, [r3, #0]
 80070e4:	009b      	lsls	r3, r3, #2
 80070e6:	441a      	add	r2, r3
 80070e8:	8b3b      	ldrh	r3, [r7, #24]
 80070ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070f6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80070fa:	b29b      	uxth	r3, r3
 80070fc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80070fe:	687a      	ldr	r2, [r7, #4]
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	781b      	ldrb	r3, [r3, #0]
 8007104:	009b      	lsls	r3, r3, #2
 8007106:	4413      	add	r3, r2
 8007108:	881b      	ldrh	r3, [r3, #0]
 800710a:	b29b      	uxth	r3, r3
 800710c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007110:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007114:	82fb      	strh	r3, [r7, #22]
 8007116:	687a      	ldr	r2, [r7, #4]
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	781b      	ldrb	r3, [r3, #0]
 800711c:	009b      	lsls	r3, r3, #2
 800711e:	441a      	add	r2, r3
 8007120:	8afb      	ldrh	r3, [r7, #22]
 8007122:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007126:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800712a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800712e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007132:	b29b      	uxth	r3, r3
 8007134:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007136:	687a      	ldr	r2, [r7, #4]
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	781b      	ldrb	r3, [r3, #0]
 800713c:	009b      	lsls	r3, r3, #2
 800713e:	4413      	add	r3, r2
 8007140:	881b      	ldrh	r3, [r3, #0]
 8007142:	b29b      	uxth	r3, r3
 8007144:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007148:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800714c:	82bb      	strh	r3, [r7, #20]
 800714e:	687a      	ldr	r2, [r7, #4]
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	781b      	ldrb	r3, [r3, #0]
 8007154:	009b      	lsls	r3, r3, #2
 8007156:	441a      	add	r2, r3
 8007158:	8abb      	ldrh	r3, [r7, #20]
 800715a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800715e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007162:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007166:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800716a:	b29b      	uxth	r3, r3
 800716c:	8013      	strh	r3, [r2, #0]
 800716e:	e0a3      	b.n	80072b8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007170:	687a      	ldr	r2, [r7, #4]
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	781b      	ldrb	r3, [r3, #0]
 8007176:	009b      	lsls	r3, r3, #2
 8007178:	4413      	add	r3, r2
 800717a:	881b      	ldrh	r3, [r3, #0]
 800717c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800717e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007180:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007184:	2b00      	cmp	r3, #0
 8007186:	d01b      	beq.n	80071c0 <USB_DeactivateEndpoint+0x2d4>
 8007188:	687a      	ldr	r2, [r7, #4]
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	781b      	ldrb	r3, [r3, #0]
 800718e:	009b      	lsls	r3, r3, #2
 8007190:	4413      	add	r3, r2
 8007192:	881b      	ldrh	r3, [r3, #0]
 8007194:	b29b      	uxth	r3, r3
 8007196:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800719a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800719e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80071a0:	687a      	ldr	r2, [r7, #4]
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	781b      	ldrb	r3, [r3, #0]
 80071a6:	009b      	lsls	r3, r3, #2
 80071a8:	441a      	add	r2, r3
 80071aa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80071ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80071b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071bc:	b29b      	uxth	r3, r3
 80071be:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80071c0:	687a      	ldr	r2, [r7, #4]
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	781b      	ldrb	r3, [r3, #0]
 80071c6:	009b      	lsls	r3, r3, #2
 80071c8:	4413      	add	r3, r2
 80071ca:	881b      	ldrh	r3, [r3, #0]
 80071cc:	857b      	strh	r3, [r7, #42]	; 0x2a
 80071ce:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80071d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d01b      	beq.n	8007210 <USB_DeactivateEndpoint+0x324>
 80071d8:	687a      	ldr	r2, [r7, #4]
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	781b      	ldrb	r3, [r3, #0]
 80071de:	009b      	lsls	r3, r3, #2
 80071e0:	4413      	add	r3, r2
 80071e2:	881b      	ldrh	r3, [r3, #0]
 80071e4:	b29b      	uxth	r3, r3
 80071e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071ee:	853b      	strh	r3, [r7, #40]	; 0x28
 80071f0:	687a      	ldr	r2, [r7, #4]
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	781b      	ldrb	r3, [r3, #0]
 80071f6:	009b      	lsls	r3, r3, #2
 80071f8:	441a      	add	r2, r3
 80071fa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80071fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007200:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007204:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007208:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800720c:	b29b      	uxth	r3, r3
 800720e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007210:	687a      	ldr	r2, [r7, #4]
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	781b      	ldrb	r3, [r3, #0]
 8007216:	009b      	lsls	r3, r3, #2
 8007218:	4413      	add	r3, r2
 800721a:	881b      	ldrh	r3, [r3, #0]
 800721c:	b29b      	uxth	r3, r3
 800721e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007222:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007226:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007228:	687a      	ldr	r2, [r7, #4]
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	781b      	ldrb	r3, [r3, #0]
 800722e:	009b      	lsls	r3, r3, #2
 8007230:	441a      	add	r2, r3
 8007232:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007234:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007238:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800723c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007240:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007244:	b29b      	uxth	r3, r3
 8007246:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007248:	687a      	ldr	r2, [r7, #4]
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	781b      	ldrb	r3, [r3, #0]
 800724e:	009b      	lsls	r3, r3, #2
 8007250:	4413      	add	r3, r2
 8007252:	881b      	ldrh	r3, [r3, #0]
 8007254:	b29b      	uxth	r3, r3
 8007256:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800725a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800725e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007260:	687a      	ldr	r2, [r7, #4]
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	781b      	ldrb	r3, [r3, #0]
 8007266:	009b      	lsls	r3, r3, #2
 8007268:	441a      	add	r2, r3
 800726a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800726c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007270:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007274:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007278:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800727c:	b29b      	uxth	r3, r3
 800727e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007280:	687a      	ldr	r2, [r7, #4]
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	781b      	ldrb	r3, [r3, #0]
 8007286:	009b      	lsls	r3, r3, #2
 8007288:	4413      	add	r3, r2
 800728a:	881b      	ldrh	r3, [r3, #0]
 800728c:	b29b      	uxth	r3, r3
 800728e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007292:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007296:	847b      	strh	r3, [r7, #34]	; 0x22
 8007298:	687a      	ldr	r2, [r7, #4]
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	781b      	ldrb	r3, [r3, #0]
 800729e:	009b      	lsls	r3, r3, #2
 80072a0:	441a      	add	r2, r3
 80072a2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80072a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072b4:	b29b      	uxth	r3, r3
 80072b6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80072b8:	2300      	movs	r3, #0
}
 80072ba:	4618      	mov	r0, r3
 80072bc:	3734      	adds	r7, #52	; 0x34
 80072be:	46bd      	mov	sp, r7
 80072c0:	bc80      	pop	{r7}
 80072c2:	4770      	bx	lr

080072c4 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b0cc      	sub	sp, #304	; 0x130
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072ce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80072d2:	6018      	str	r0, [r3, #0]
 80072d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072dc:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80072de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	785b      	ldrb	r3, [r3, #1]
 80072ea:	2b01      	cmp	r3, #1
 80072ec:	f041 817d 	bne.w	80085ea <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80072f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	699a      	ldr	r2, [r3, #24]
 80072fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007300:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	691b      	ldr	r3, [r3, #16]
 8007308:	429a      	cmp	r2, r3
 800730a:	d908      	bls.n	800731e <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800730c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007310:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	691b      	ldr	r3, [r3, #16]
 8007318:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800731c:	e007      	b.n	800732e <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800731e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007322:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	699b      	ldr	r3, [r3, #24]
 800732a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800732e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007332:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	7b1b      	ldrb	r3, [r3, #12]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d152      	bne.n	80073e4 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800733e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007342:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	6959      	ldr	r1, [r3, #20]
 800734a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800734e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	88da      	ldrh	r2, [r3, #6]
 8007356:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800735a:	b29b      	uxth	r3, r3
 800735c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007360:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007364:	6800      	ldr	r0, [r0, #0]
 8007366:	f001 ff23 	bl	80091b0 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800736a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800736e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8007372:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007376:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800737a:	6812      	ldr	r2, [r2, #0]
 800737c:	601a      	str	r2, [r3, #0]
 800737e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007382:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800738c:	b29b      	uxth	r3, r3
 800738e:	4619      	mov	r1, r3
 8007390:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007394:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8007398:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800739c:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 80073a0:	6812      	ldr	r2, [r2, #0]
 80073a2:	440a      	add	r2, r1
 80073a4:	601a      	str	r2, [r3, #0]
 80073a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	781b      	ldrb	r3, [r3, #0]
 80073b2:	011a      	lsls	r2, r3, #4
 80073b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073b8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4413      	add	r3, r2
 80073c0:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80073c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073c8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80073cc:	601a      	str	r2, [r3, #0]
 80073ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073d2:	b29a      	uxth	r2, r3
 80073d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073d8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	801a      	strh	r2, [r3, #0]
 80073e0:	f001 b8b5 	b.w	800854e <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80073e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	78db      	ldrb	r3, [r3, #3]
 80073f0:	2b02      	cmp	r3, #2
 80073f2:	f040 84c6 	bne.w	8007d82 <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80073f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	6a1a      	ldr	r2, [r3, #32]
 8007402:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007406:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	691b      	ldr	r3, [r3, #16]
 800740e:	429a      	cmp	r2, r3
 8007410:	f240 8443 	bls.w	8007c9a <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8007414:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007418:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800741c:	681a      	ldr	r2, [r3, #0]
 800741e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007422:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	781b      	ldrb	r3, [r3, #0]
 800742a:	009b      	lsls	r3, r3, #2
 800742c:	4413      	add	r3, r2
 800742e:	881b      	ldrh	r3, [r3, #0]
 8007430:	b29b      	uxth	r3, r3
 8007432:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007436:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800743a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800743e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007442:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007446:	681a      	ldr	r2, [r3, #0]
 8007448:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800744c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	781b      	ldrb	r3, [r3, #0]
 8007454:	009b      	lsls	r3, r3, #2
 8007456:	441a      	add	r2, r3
 8007458:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800745c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007460:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007464:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007468:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800746c:	b29b      	uxth	r3, r3
 800746e:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007470:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007474:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	6a1a      	ldr	r2, [r3, #32]
 800747c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007480:	1ad2      	subs	r2, r2, r3
 8007482:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007486:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800748e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007492:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007496:	681a      	ldr	r2, [r3, #0]
 8007498:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800749c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	781b      	ldrb	r3, [r3, #0]
 80074a4:	009b      	lsls	r3, r3, #2
 80074a6:	4413      	add	r3, r2
 80074a8:	881b      	ldrh	r3, [r3, #0]
 80074aa:	b29b      	uxth	r3, r3
 80074ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	f000 823e 	beq.w	8007932 <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80074b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074ba:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80074be:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80074c2:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80074c6:	6812      	ldr	r2, [r2, #0]
 80074c8:	601a      	str	r2, [r3, #0]
 80074ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	785b      	ldrb	r3, [r3, #1]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	f040 809a 	bne.w	8007610 <USB_EPStartXfer+0x34c>
 80074dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074e4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80074e8:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80074ec:	6812      	ldr	r2, [r2, #0]
 80074ee:	601a      	str	r2, [r3, #0]
 80074f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074fe:	b29b      	uxth	r3, r3
 8007500:	4619      	mov	r1, r3
 8007502:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007506:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800750a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800750e:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8007512:	6812      	ldr	r2, [r2, #0]
 8007514:	440a      	add	r2, r1
 8007516:	601a      	str	r2, [r3, #0]
 8007518:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800751c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	781b      	ldrb	r3, [r3, #0]
 8007524:	011a      	lsls	r2, r3, #4
 8007526:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800752a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4413      	add	r3, r2
 8007532:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8007536:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800753a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800753e:	601a      	str	r2, [r3, #0]
 8007540:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007544:	2b00      	cmp	r3, #0
 8007546:	d122      	bne.n	800758e <USB_EPStartXfer+0x2ca>
 8007548:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800754c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	881b      	ldrh	r3, [r3, #0]
 8007554:	b29b      	uxth	r3, r3
 8007556:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800755a:	b29a      	uxth	r2, r3
 800755c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007560:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	801a      	strh	r2, [r3, #0]
 8007568:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800756c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	881b      	ldrh	r3, [r3, #0]
 8007574:	b29b      	uxth	r3, r3
 8007576:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800757a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800757e:	b29a      	uxth	r2, r3
 8007580:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007584:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	801a      	strh	r2, [r3, #0]
 800758c:	e079      	b.n	8007682 <USB_EPStartXfer+0x3be>
 800758e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007592:	2b3e      	cmp	r3, #62	; 0x3e
 8007594:	d81b      	bhi.n	80075ce <USB_EPStartXfer+0x30a>
 8007596:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800759a:	085b      	lsrs	r3, r3, #1
 800759c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80075a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075a4:	f003 0301 	and.w	r3, r3, #1
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d004      	beq.n	80075b6 <USB_EPStartXfer+0x2f2>
 80075ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80075b0:	3301      	adds	r3, #1
 80075b2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80075b6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80075ba:	b29b      	uxth	r3, r3
 80075bc:	029b      	lsls	r3, r3, #10
 80075be:	b29a      	uxth	r2, r3
 80075c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075c4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	801a      	strh	r2, [r3, #0]
 80075cc:	e059      	b.n	8007682 <USB_EPStartXfer+0x3be>
 80075ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075d2:	095b      	lsrs	r3, r3, #5
 80075d4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80075d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075dc:	f003 031f 	and.w	r3, r3, #31
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d104      	bne.n	80075ee <USB_EPStartXfer+0x32a>
 80075e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80075e8:	3b01      	subs	r3, #1
 80075ea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80075ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80075f2:	b29b      	uxth	r3, r3
 80075f4:	029b      	lsls	r3, r3, #10
 80075f6:	b29b      	uxth	r3, r3
 80075f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007600:	b29a      	uxth	r2, r3
 8007602:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007606:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	801a      	strh	r2, [r3, #0]
 800760e:	e038      	b.n	8007682 <USB_EPStartXfer+0x3be>
 8007610:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007614:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	785b      	ldrb	r3, [r3, #1]
 800761c:	2b01      	cmp	r3, #1
 800761e:	d130      	bne.n	8007682 <USB_EPStartXfer+0x3be>
 8007620:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007624:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800762e:	b29b      	uxth	r3, r3
 8007630:	4619      	mov	r1, r3
 8007632:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007636:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800763a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800763e:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8007642:	6812      	ldr	r2, [r2, #0]
 8007644:	440a      	add	r2, r1
 8007646:	601a      	str	r2, [r3, #0]
 8007648:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800764c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	781b      	ldrb	r3, [r3, #0]
 8007654:	011a      	lsls	r2, r3, #4
 8007656:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800765a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4413      	add	r3, r2
 8007662:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8007666:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800766a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800766e:	601a      	str	r2, [r3, #0]
 8007670:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007674:	b29a      	uxth	r2, r3
 8007676:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800767a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007682:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007686:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	895b      	ldrh	r3, [r3, #10]
 800768e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007692:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007696:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	6959      	ldr	r1, [r3, #20]
 800769e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076a2:	b29b      	uxth	r3, r3
 80076a4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80076a8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80076ac:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80076b0:	6800      	ldr	r0, [r0, #0]
 80076b2:	f001 fd7d 	bl	80091b0 <USB_WritePMA>
            ep->xfer_buff += len;
 80076b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	695a      	ldr	r2, [r3, #20]
 80076c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076c6:	441a      	add	r2, r3
 80076c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80076d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	6a1a      	ldr	r2, [r3, #32]
 80076e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	691b      	ldr	r3, [r3, #16]
 80076ec:	429a      	cmp	r2, r3
 80076ee:	d90f      	bls.n	8007710 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 80076f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	6a1a      	ldr	r2, [r3, #32]
 80076fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007700:	1ad2      	subs	r2, r2, r3
 8007702:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007706:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	621a      	str	r2, [r3, #32]
 800770e:	e00e      	b.n	800772e <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8007710:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007714:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	6a1b      	ldr	r3, [r3, #32]
 800771c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8007720:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007724:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	2200      	movs	r2, #0
 800772c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800772e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007732:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	785b      	ldrb	r3, [r3, #1]
 800773a:	2b00      	cmp	r3, #0
 800773c:	f040 809a 	bne.w	8007874 <USB_EPStartXfer+0x5b0>
 8007740:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007744:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8007748:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800774c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8007750:	6812      	ldr	r2, [r2, #0]
 8007752:	601a      	str	r2, [r3, #0]
 8007754:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007758:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007762:	b29b      	uxth	r3, r3
 8007764:	4619      	mov	r1, r3
 8007766:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800776a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800776e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007772:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8007776:	6812      	ldr	r2, [r2, #0]
 8007778:	440a      	add	r2, r1
 800777a:	601a      	str	r2, [r3, #0]
 800777c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007780:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	781b      	ldrb	r3, [r3, #0]
 8007788:	011a      	lsls	r2, r3, #4
 800778a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800778e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4413      	add	r3, r2
 8007796:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800779a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800779e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80077a2:	601a      	str	r2, [r3, #0]
 80077a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d122      	bne.n	80077f2 <USB_EPStartXfer+0x52e>
 80077ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077b0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	881b      	ldrh	r3, [r3, #0]
 80077b8:	b29b      	uxth	r3, r3
 80077ba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80077be:	b29a      	uxth	r2, r3
 80077c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077c4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	801a      	strh	r2, [r3, #0]
 80077cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077d0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	881b      	ldrh	r3, [r3, #0]
 80077d8:	b29b      	uxth	r3, r3
 80077da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077e2:	b29a      	uxth	r2, r3
 80077e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077e8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	801a      	strh	r2, [r3, #0]
 80077f0:	e083      	b.n	80078fa <USB_EPStartXfer+0x636>
 80077f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077f6:	2b3e      	cmp	r3, #62	; 0x3e
 80077f8:	d81b      	bhi.n	8007832 <USB_EPStartXfer+0x56e>
 80077fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077fe:	085b      	lsrs	r3, r3, #1
 8007800:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007804:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007808:	f003 0301 	and.w	r3, r3, #1
 800780c:	2b00      	cmp	r3, #0
 800780e:	d004      	beq.n	800781a <USB_EPStartXfer+0x556>
 8007810:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007814:	3301      	adds	r3, #1
 8007816:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800781a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800781e:	b29b      	uxth	r3, r3
 8007820:	029b      	lsls	r3, r3, #10
 8007822:	b29a      	uxth	r2, r3
 8007824:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007828:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	801a      	strh	r2, [r3, #0]
 8007830:	e063      	b.n	80078fa <USB_EPStartXfer+0x636>
 8007832:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007836:	095b      	lsrs	r3, r3, #5
 8007838:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800783c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007840:	f003 031f 	and.w	r3, r3, #31
 8007844:	2b00      	cmp	r3, #0
 8007846:	d104      	bne.n	8007852 <USB_EPStartXfer+0x58e>
 8007848:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800784c:	3b01      	subs	r3, #1
 800784e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007852:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007856:	b29b      	uxth	r3, r3
 8007858:	029b      	lsls	r3, r3, #10
 800785a:	b29b      	uxth	r3, r3
 800785c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007860:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007864:	b29a      	uxth	r2, r3
 8007866:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800786a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	801a      	strh	r2, [r3, #0]
 8007872:	e042      	b.n	80078fa <USB_EPStartXfer+0x636>
 8007874:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007878:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	785b      	ldrb	r3, [r3, #1]
 8007880:	2b01      	cmp	r3, #1
 8007882:	d13a      	bne.n	80078fa <USB_EPStartXfer+0x636>
 8007884:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007888:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800788c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007890:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8007894:	6812      	ldr	r2, [r2, #0]
 8007896:	601a      	str	r2, [r3, #0]
 8007898:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800789c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078a6:	b29b      	uxth	r3, r3
 80078a8:	4619      	mov	r1, r3
 80078aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078ae:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80078b2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80078b6:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80078ba:	6812      	ldr	r2, [r2, #0]
 80078bc:	440a      	add	r2, r1
 80078be:	601a      	str	r2, [r3, #0]
 80078c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	781b      	ldrb	r3, [r3, #0]
 80078cc:	011a      	lsls	r2, r3, #4
 80078ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078d2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	4413      	add	r3, r2
 80078da:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80078de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078e2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80078e6:	601a      	str	r2, [r3, #0]
 80078e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078ec:	b29a      	uxth	r2, r3
 80078ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078f2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80078fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	891b      	ldrh	r3, [r3, #8]
 8007906:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800790a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800790e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	6959      	ldr	r1, [r3, #20]
 8007916:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800791a:	b29b      	uxth	r3, r3
 800791c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007920:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007924:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007928:	6800      	ldr	r0, [r0, #0]
 800792a:	f001 fc41 	bl	80091b0 <USB_WritePMA>
 800792e:	f000 be0e 	b.w	800854e <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007932:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007936:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	785b      	ldrb	r3, [r3, #1]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d16d      	bne.n	8007a1e <USB_EPStartXfer+0x75a>
 8007942:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007946:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	64bb      	str	r3, [r7, #72]	; 0x48
 800794e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007952:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800795c:	b29b      	uxth	r3, r3
 800795e:	461a      	mov	r2, r3
 8007960:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007962:	4413      	add	r3, r2
 8007964:	64bb      	str	r3, [r7, #72]	; 0x48
 8007966:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800796a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	781b      	ldrb	r3, [r3, #0]
 8007972:	011a      	lsls	r2, r3, #4
 8007974:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007976:	4413      	add	r3, r2
 8007978:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800797c:	647b      	str	r3, [r7, #68]	; 0x44
 800797e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007982:	2b00      	cmp	r3, #0
 8007984:	d112      	bne.n	80079ac <USB_EPStartXfer+0x6e8>
 8007986:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007988:	881b      	ldrh	r3, [r3, #0]
 800798a:	b29b      	uxth	r3, r3
 800798c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007990:	b29a      	uxth	r2, r3
 8007992:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007994:	801a      	strh	r2, [r3, #0]
 8007996:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007998:	881b      	ldrh	r3, [r3, #0]
 800799a:	b29b      	uxth	r3, r3
 800799c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079a4:	b29a      	uxth	r2, r3
 80079a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80079a8:	801a      	strh	r2, [r3, #0]
 80079aa:	e063      	b.n	8007a74 <USB_EPStartXfer+0x7b0>
 80079ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079b0:	2b3e      	cmp	r3, #62	; 0x3e
 80079b2:	d817      	bhi.n	80079e4 <USB_EPStartXfer+0x720>
 80079b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079b8:	085b      	lsrs	r3, r3, #1
 80079ba:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80079be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079c2:	f003 0301 	and.w	r3, r3, #1
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d004      	beq.n	80079d4 <USB_EPStartXfer+0x710>
 80079ca:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80079ce:	3301      	adds	r3, #1
 80079d0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80079d4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80079d8:	b29b      	uxth	r3, r3
 80079da:	029b      	lsls	r3, r3, #10
 80079dc:	b29a      	uxth	r2, r3
 80079de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80079e0:	801a      	strh	r2, [r3, #0]
 80079e2:	e047      	b.n	8007a74 <USB_EPStartXfer+0x7b0>
 80079e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079e8:	095b      	lsrs	r3, r3, #5
 80079ea:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80079ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079f2:	f003 031f 	and.w	r3, r3, #31
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d104      	bne.n	8007a04 <USB_EPStartXfer+0x740>
 80079fa:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80079fe:	3b01      	subs	r3, #1
 8007a00:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007a04:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007a08:	b29b      	uxth	r3, r3
 8007a0a:	029b      	lsls	r3, r3, #10
 8007a0c:	b29b      	uxth	r3, r3
 8007a0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a16:	b29a      	uxth	r2, r3
 8007a18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a1a:	801a      	strh	r2, [r3, #0]
 8007a1c:	e02a      	b.n	8007a74 <USB_EPStartXfer+0x7b0>
 8007a1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	785b      	ldrb	r3, [r3, #1]
 8007a2a:	2b01      	cmp	r3, #1
 8007a2c:	d122      	bne.n	8007a74 <USB_EPStartXfer+0x7b0>
 8007a2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a32:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	653b      	str	r3, [r7, #80]	; 0x50
 8007a3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a3e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a48:	b29b      	uxth	r3, r3
 8007a4a:	461a      	mov	r2, r3
 8007a4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a4e:	4413      	add	r3, r2
 8007a50:	653b      	str	r3, [r7, #80]	; 0x50
 8007a52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	781b      	ldrb	r3, [r3, #0]
 8007a5e:	011a      	lsls	r2, r3, #4
 8007a60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a62:	4413      	add	r3, r2
 8007a64:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007a68:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a6e:	b29a      	uxth	r2, r3
 8007a70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a72:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007a74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a78:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	891b      	ldrh	r3, [r3, #8]
 8007a80:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007a84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a88:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	6959      	ldr	r1, [r3, #20]
 8007a90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a94:	b29b      	uxth	r3, r3
 8007a96:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007a9a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007a9e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007aa2:	6800      	ldr	r0, [r0, #0]
 8007aa4:	f001 fb84 	bl	80091b0 <USB_WritePMA>
            ep->xfer_buff += len;
 8007aa8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007aac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	695a      	ldr	r2, [r3, #20]
 8007ab4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ab8:	441a      	add	r2, r3
 8007aba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007abe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007ac6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007aca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	6a1a      	ldr	r2, [r3, #32]
 8007ad2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ad6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	691b      	ldr	r3, [r3, #16]
 8007ade:	429a      	cmp	r2, r3
 8007ae0:	d90f      	bls.n	8007b02 <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 8007ae2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ae6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	6a1a      	ldr	r2, [r3, #32]
 8007aee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007af2:	1ad2      	subs	r2, r2, r3
 8007af4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007af8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	621a      	str	r2, [r3, #32]
 8007b00:	e00e      	b.n	8007b20 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 8007b02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	6a1b      	ldr	r3, [r3, #32]
 8007b0e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8007b12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007b20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b24:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	643b      	str	r3, [r7, #64]	; 0x40
 8007b2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b30:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	785b      	ldrb	r3, [r3, #1]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d16d      	bne.n	8007c18 <USB_EPStartXfer+0x954>
 8007b3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b40:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	63bb      	str	r3, [r7, #56]	; 0x38
 8007b48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b4c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b56:	b29b      	uxth	r3, r3
 8007b58:	461a      	mov	r2, r3
 8007b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b5c:	4413      	add	r3, r2
 8007b5e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007b60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b64:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	781b      	ldrb	r3, [r3, #0]
 8007b6c:	011a      	lsls	r2, r3, #4
 8007b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b70:	4413      	add	r3, r2
 8007b72:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007b76:	637b      	str	r3, [r7, #52]	; 0x34
 8007b78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d112      	bne.n	8007ba6 <USB_EPStartXfer+0x8e2>
 8007b80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b82:	881b      	ldrh	r3, [r3, #0]
 8007b84:	b29b      	uxth	r3, r3
 8007b86:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007b8a:	b29a      	uxth	r2, r3
 8007b8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b8e:	801a      	strh	r2, [r3, #0]
 8007b90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b92:	881b      	ldrh	r3, [r3, #0]
 8007b94:	b29b      	uxth	r3, r3
 8007b96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b9e:	b29a      	uxth	r2, r3
 8007ba0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ba2:	801a      	strh	r2, [r3, #0]
 8007ba4:	e05d      	b.n	8007c62 <USB_EPStartXfer+0x99e>
 8007ba6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007baa:	2b3e      	cmp	r3, #62	; 0x3e
 8007bac:	d817      	bhi.n	8007bde <USB_EPStartXfer+0x91a>
 8007bae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bb2:	085b      	lsrs	r3, r3, #1
 8007bb4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007bb8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bbc:	f003 0301 	and.w	r3, r3, #1
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d004      	beq.n	8007bce <USB_EPStartXfer+0x90a>
 8007bc4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007bc8:	3301      	adds	r3, #1
 8007bca:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007bce:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007bd2:	b29b      	uxth	r3, r3
 8007bd4:	029b      	lsls	r3, r3, #10
 8007bd6:	b29a      	uxth	r2, r3
 8007bd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bda:	801a      	strh	r2, [r3, #0]
 8007bdc:	e041      	b.n	8007c62 <USB_EPStartXfer+0x99e>
 8007bde:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007be2:	095b      	lsrs	r3, r3, #5
 8007be4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007be8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bec:	f003 031f 	and.w	r3, r3, #31
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d104      	bne.n	8007bfe <USB_EPStartXfer+0x93a>
 8007bf4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007bf8:	3b01      	subs	r3, #1
 8007bfa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007bfe:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007c02:	b29b      	uxth	r3, r3
 8007c04:	029b      	lsls	r3, r3, #10
 8007c06:	b29b      	uxth	r3, r3
 8007c08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c10:	b29a      	uxth	r2, r3
 8007c12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c14:	801a      	strh	r2, [r3, #0]
 8007c16:	e024      	b.n	8007c62 <USB_EPStartXfer+0x99e>
 8007c18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	785b      	ldrb	r3, [r3, #1]
 8007c24:	2b01      	cmp	r3, #1
 8007c26:	d11c      	bne.n	8007c62 <USB_EPStartXfer+0x99e>
 8007c28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c2c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c36:	b29b      	uxth	r3, r3
 8007c38:	461a      	mov	r2, r3
 8007c3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c3c:	4413      	add	r3, r2
 8007c3e:	643b      	str	r3, [r7, #64]	; 0x40
 8007c40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	781b      	ldrb	r3, [r3, #0]
 8007c4c:	011a      	lsls	r2, r3, #4
 8007c4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c50:	4413      	add	r3, r2
 8007c52:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007c56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c5c:	b29a      	uxth	r2, r3
 8007c5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c60:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007c62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	895b      	ldrh	r3, [r3, #10]
 8007c6e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007c72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	6959      	ldr	r1, [r3, #20]
 8007c7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c82:	b29b      	uxth	r3, r3
 8007c84:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007c88:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007c8c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007c90:	6800      	ldr	r0, [r0, #0]
 8007c92:	f001 fa8d 	bl	80091b0 <USB_WritePMA>
 8007c96:	f000 bc5a 	b.w	800854e <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007c9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	6a1b      	ldr	r3, [r3, #32]
 8007ca6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8007caa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007cb2:	681a      	ldr	r2, [r3, #0]
 8007cb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cb8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	781b      	ldrb	r3, [r3, #0]
 8007cc0:	009b      	lsls	r3, r3, #2
 8007cc2:	4413      	add	r3, r2
 8007cc4:	881b      	ldrh	r3, [r3, #0]
 8007cc6:	b29b      	uxth	r3, r3
 8007cc8:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007ccc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cd0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8007cd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cd8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007cdc:	681a      	ldr	r2, [r3, #0]
 8007cde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ce2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	781b      	ldrb	r3, [r3, #0]
 8007cea:	009b      	lsls	r3, r3, #2
 8007cec:	441a      	add	r2, r3
 8007cee:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8007cf2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007cf6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007cfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007cfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d02:	b29b      	uxth	r3, r3
 8007d04:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007d06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d0a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007d12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d16:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d20:	b29b      	uxth	r3, r3
 8007d22:	461a      	mov	r2, r3
 8007d24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d26:	4413      	add	r3, r2
 8007d28:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007d2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	781b      	ldrb	r3, [r3, #0]
 8007d36:	011a      	lsls	r2, r3, #4
 8007d38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d3a:	4413      	add	r3, r2
 8007d3c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007d40:	65bb      	str	r3, [r7, #88]	; 0x58
 8007d42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d46:	b29a      	uxth	r2, r3
 8007d48:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007d4a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007d4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	891b      	ldrh	r3, [r3, #8]
 8007d58:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007d5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d60:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	6959      	ldr	r1, [r3, #20]
 8007d68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d6c:	b29b      	uxth	r3, r3
 8007d6e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007d72:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007d76:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007d7a:	6800      	ldr	r0, [r0, #0]
 8007d7c:	f001 fa18 	bl	80091b0 <USB_WritePMA>
 8007d80:	e3e5      	b.n	800854e <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8007d82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d86:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007d8a:	681a      	ldr	r2, [r3, #0]
 8007d8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d90:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	781b      	ldrb	r3, [r3, #0]
 8007d98:	009b      	lsls	r3, r3, #2
 8007d9a:	4413      	add	r3, r2
 8007d9c:	881b      	ldrh	r3, [r3, #0]
 8007d9e:	b29b      	uxth	r3, r3
 8007da0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007da4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007da8:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8007dac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007db0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007db4:	681a      	ldr	r2, [r3, #0]
 8007db6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	781b      	ldrb	r3, [r3, #0]
 8007dc2:	009b      	lsls	r3, r3, #2
 8007dc4:	441a      	add	r2, r3
 8007dc6:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8007dca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007dce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007dd2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007dd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dda:	b29b      	uxth	r3, r3
 8007ddc:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007dde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007de2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	6a1a      	ldr	r2, [r3, #32]
 8007dea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007dee:	1ad2      	subs	r2, r2, r3
 8007df0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007df4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007dfc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e00:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007e04:	681a      	ldr	r2, [r3, #0]
 8007e06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	781b      	ldrb	r3, [r3, #0]
 8007e12:	009b      	lsls	r3, r3, #2
 8007e14:	4413      	add	r3, r2
 8007e16:	881b      	ldrh	r3, [r3, #0]
 8007e18:	b29b      	uxth	r3, r3
 8007e1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	f000 81bc 	beq.w	800819c <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007e24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e28:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007e32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	785b      	ldrb	r3, [r3, #1]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d16d      	bne.n	8007f1e <USB_EPStartXfer+0xc5a>
 8007e42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e46:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	67bb      	str	r3, [r7, #120]	; 0x78
 8007e4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e52:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e5c:	b29b      	uxth	r3, r3
 8007e5e:	461a      	mov	r2, r3
 8007e60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007e62:	4413      	add	r3, r2
 8007e64:	67bb      	str	r3, [r7, #120]	; 0x78
 8007e66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	781b      	ldrb	r3, [r3, #0]
 8007e72:	011a      	lsls	r2, r3, #4
 8007e74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007e76:	4413      	add	r3, r2
 8007e78:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007e7c:	677b      	str	r3, [r7, #116]	; 0x74
 8007e7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d112      	bne.n	8007eac <USB_EPStartXfer+0xbe8>
 8007e86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e88:	881b      	ldrh	r3, [r3, #0]
 8007e8a:	b29b      	uxth	r3, r3
 8007e8c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007e90:	b29a      	uxth	r2, r3
 8007e92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e94:	801a      	strh	r2, [r3, #0]
 8007e96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e98:	881b      	ldrh	r3, [r3, #0]
 8007e9a:	b29b      	uxth	r3, r3
 8007e9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ea0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ea4:	b29a      	uxth	r2, r3
 8007ea6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ea8:	801a      	strh	r2, [r3, #0]
 8007eaa:	e060      	b.n	8007f6e <USB_EPStartXfer+0xcaa>
 8007eac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007eb0:	2b3e      	cmp	r3, #62	; 0x3e
 8007eb2:	d817      	bhi.n	8007ee4 <USB_EPStartXfer+0xc20>
 8007eb4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007eb8:	085b      	lsrs	r3, r3, #1
 8007eba:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007ebe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ec2:	f003 0301 	and.w	r3, r3, #1
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d004      	beq.n	8007ed4 <USB_EPStartXfer+0xc10>
 8007eca:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007ece:	3301      	adds	r3, #1
 8007ed0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007ed4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007ed8:	b29b      	uxth	r3, r3
 8007eda:	029b      	lsls	r3, r3, #10
 8007edc:	b29a      	uxth	r2, r3
 8007ede:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ee0:	801a      	strh	r2, [r3, #0]
 8007ee2:	e044      	b.n	8007f6e <USB_EPStartXfer+0xcaa>
 8007ee4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ee8:	095b      	lsrs	r3, r3, #5
 8007eea:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007eee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ef2:	f003 031f 	and.w	r3, r3, #31
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d104      	bne.n	8007f04 <USB_EPStartXfer+0xc40>
 8007efa:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007efe:	3b01      	subs	r3, #1
 8007f00:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007f04:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007f08:	b29b      	uxth	r3, r3
 8007f0a:	029b      	lsls	r3, r3, #10
 8007f0c:	b29b      	uxth	r3, r3
 8007f0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f16:	b29a      	uxth	r2, r3
 8007f18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007f1a:	801a      	strh	r2, [r3, #0]
 8007f1c:	e027      	b.n	8007f6e <USB_EPStartXfer+0xcaa>
 8007f1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	785b      	ldrb	r3, [r3, #1]
 8007f2a:	2b01      	cmp	r3, #1
 8007f2c:	d11f      	bne.n	8007f6e <USB_EPStartXfer+0xcaa>
 8007f2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f32:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f3c:	b29b      	uxth	r3, r3
 8007f3e:	461a      	mov	r2, r3
 8007f40:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007f44:	4413      	add	r3, r2
 8007f46:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007f4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f4e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	781b      	ldrb	r3, [r3, #0]
 8007f56:	011a      	lsls	r2, r3, #4
 8007f58:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007f5c:	4413      	add	r3, r2
 8007f5e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007f62:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007f64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f68:	b29a      	uxth	r2, r3
 8007f6a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007f6c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007f6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	895b      	ldrh	r3, [r3, #10]
 8007f7a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007f7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f82:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	6959      	ldr	r1, [r3, #20]
 8007f8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f8e:	b29b      	uxth	r3, r3
 8007f90:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007f94:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007f98:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007f9c:	6800      	ldr	r0, [r0, #0]
 8007f9e:	f001 f907 	bl	80091b0 <USB_WritePMA>
          ep->xfer_buff += len;
 8007fa2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fa6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	695a      	ldr	r2, [r3, #20]
 8007fae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fb2:	441a      	add	r2, r3
 8007fb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fb8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8007fc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fc4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	6a1a      	ldr	r2, [r3, #32]
 8007fcc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fd0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	691b      	ldr	r3, [r3, #16]
 8007fd8:	429a      	cmp	r2, r3
 8007fda:	d90f      	bls.n	8007ffc <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8007fdc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fe0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	6a1a      	ldr	r2, [r3, #32]
 8007fe8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fec:	1ad2      	subs	r2, r2, r3
 8007fee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ff2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	621a      	str	r2, [r3, #32]
 8007ffa:	e00e      	b.n	800801a <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8007ffc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008000:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	6a1b      	ldr	r3, [r3, #32]
 8008008:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800800c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008010:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	2200      	movs	r2, #0
 8008018:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800801a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800801e:	2b00      	cmp	r3, #0
 8008020:	f000 8295 	beq.w	800854e <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008024:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008028:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	785b      	ldrb	r3, [r3, #1]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d16d      	bne.n	8008110 <USB_EPStartXfer+0xe4c>
 8008034:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008038:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008040:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008044:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800804e:	b29b      	uxth	r3, r3
 8008050:	461a      	mov	r2, r3
 8008052:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008054:	4413      	add	r3, r2
 8008056:	66bb      	str	r3, [r7, #104]	; 0x68
 8008058:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800805c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	781b      	ldrb	r3, [r3, #0]
 8008064:	011a      	lsls	r2, r3, #4
 8008066:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008068:	4413      	add	r3, r2
 800806a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800806e:	667b      	str	r3, [r7, #100]	; 0x64
 8008070:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008074:	2b00      	cmp	r3, #0
 8008076:	d112      	bne.n	800809e <USB_EPStartXfer+0xdda>
 8008078:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800807a:	881b      	ldrh	r3, [r3, #0]
 800807c:	b29b      	uxth	r3, r3
 800807e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008082:	b29a      	uxth	r2, r3
 8008084:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008086:	801a      	strh	r2, [r3, #0]
 8008088:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800808a:	881b      	ldrh	r3, [r3, #0]
 800808c:	b29b      	uxth	r3, r3
 800808e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008092:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008096:	b29a      	uxth	r2, r3
 8008098:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800809a:	801a      	strh	r2, [r3, #0]
 800809c:	e063      	b.n	8008166 <USB_EPStartXfer+0xea2>
 800809e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080a2:	2b3e      	cmp	r3, #62	; 0x3e
 80080a4:	d817      	bhi.n	80080d6 <USB_EPStartXfer+0xe12>
 80080a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080aa:	085b      	lsrs	r3, r3, #1
 80080ac:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80080b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080b4:	f003 0301 	and.w	r3, r3, #1
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d004      	beq.n	80080c6 <USB_EPStartXfer+0xe02>
 80080bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080c0:	3301      	adds	r3, #1
 80080c2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80080c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080ca:	b29b      	uxth	r3, r3
 80080cc:	029b      	lsls	r3, r3, #10
 80080ce:	b29a      	uxth	r2, r3
 80080d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80080d2:	801a      	strh	r2, [r3, #0]
 80080d4:	e047      	b.n	8008166 <USB_EPStartXfer+0xea2>
 80080d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080da:	095b      	lsrs	r3, r3, #5
 80080dc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80080e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080e4:	f003 031f 	and.w	r3, r3, #31
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d104      	bne.n	80080f6 <USB_EPStartXfer+0xe32>
 80080ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080f0:	3b01      	subs	r3, #1
 80080f2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80080f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080fa:	b29b      	uxth	r3, r3
 80080fc:	029b      	lsls	r3, r3, #10
 80080fe:	b29b      	uxth	r3, r3
 8008100:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008104:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008108:	b29a      	uxth	r2, r3
 800810a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800810c:	801a      	strh	r2, [r3, #0]
 800810e:	e02a      	b.n	8008166 <USB_EPStartXfer+0xea2>
 8008110:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008114:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	785b      	ldrb	r3, [r3, #1]
 800811c:	2b01      	cmp	r3, #1
 800811e:	d122      	bne.n	8008166 <USB_EPStartXfer+0xea2>
 8008120:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008124:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	673b      	str	r3, [r7, #112]	; 0x70
 800812c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008130:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800813a:	b29b      	uxth	r3, r3
 800813c:	461a      	mov	r2, r3
 800813e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008140:	4413      	add	r3, r2
 8008142:	673b      	str	r3, [r7, #112]	; 0x70
 8008144:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008148:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	781b      	ldrb	r3, [r3, #0]
 8008150:	011a      	lsls	r2, r3, #4
 8008152:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008154:	4413      	add	r3, r2
 8008156:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800815a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800815c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008160:	b29a      	uxth	r2, r3
 8008162:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008164:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008166:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800816a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	891b      	ldrh	r3, [r3, #8]
 8008172:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008176:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800817a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	6959      	ldr	r1, [r3, #20]
 8008182:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008186:	b29b      	uxth	r3, r3
 8008188:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800818c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8008190:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8008194:	6800      	ldr	r0, [r0, #0]
 8008196:	f001 f80b 	bl	80091b0 <USB_WritePMA>
 800819a:	e1d8      	b.n	800854e <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800819c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	785b      	ldrb	r3, [r3, #1]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d178      	bne.n	800829e <USB_EPStartXfer+0xfda>
 80081ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081b0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80081ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081be:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80081c8:	b29b      	uxth	r3, r3
 80081ca:	461a      	mov	r2, r3
 80081cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80081d0:	4413      	add	r3, r2
 80081d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80081d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	781b      	ldrb	r3, [r3, #0]
 80081e2:	011a      	lsls	r2, r3, #4
 80081e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80081e8:	4413      	add	r3, r2
 80081ea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80081ee:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80081f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d116      	bne.n	8008228 <USB_EPStartXfer+0xf64>
 80081fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80081fe:	881b      	ldrh	r3, [r3, #0]
 8008200:	b29b      	uxth	r3, r3
 8008202:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008206:	b29a      	uxth	r2, r3
 8008208:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800820c:	801a      	strh	r2, [r3, #0]
 800820e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008212:	881b      	ldrh	r3, [r3, #0]
 8008214:	b29b      	uxth	r3, r3
 8008216:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800821a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800821e:	b29a      	uxth	r2, r3
 8008220:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008224:	801a      	strh	r2, [r3, #0]
 8008226:	e06b      	b.n	8008300 <USB_EPStartXfer+0x103c>
 8008228:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800822c:	2b3e      	cmp	r3, #62	; 0x3e
 800822e:	d818      	bhi.n	8008262 <USB_EPStartXfer+0xf9e>
 8008230:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008234:	085b      	lsrs	r3, r3, #1
 8008236:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800823a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800823e:	f003 0301 	and.w	r3, r3, #1
 8008242:	2b00      	cmp	r3, #0
 8008244:	d004      	beq.n	8008250 <USB_EPStartXfer+0xf8c>
 8008246:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800824a:	3301      	adds	r3, #1
 800824c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008250:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008254:	b29b      	uxth	r3, r3
 8008256:	029b      	lsls	r3, r3, #10
 8008258:	b29a      	uxth	r2, r3
 800825a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800825e:	801a      	strh	r2, [r3, #0]
 8008260:	e04e      	b.n	8008300 <USB_EPStartXfer+0x103c>
 8008262:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008266:	095b      	lsrs	r3, r3, #5
 8008268:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800826c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008270:	f003 031f 	and.w	r3, r3, #31
 8008274:	2b00      	cmp	r3, #0
 8008276:	d104      	bne.n	8008282 <USB_EPStartXfer+0xfbe>
 8008278:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800827c:	3b01      	subs	r3, #1
 800827e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008282:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008286:	b29b      	uxth	r3, r3
 8008288:	029b      	lsls	r3, r3, #10
 800828a:	b29b      	uxth	r3, r3
 800828c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008290:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008294:	b29a      	uxth	r2, r3
 8008296:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800829a:	801a      	strh	r2, [r3, #0]
 800829c:	e030      	b.n	8008300 <USB_EPStartXfer+0x103c>
 800829e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	785b      	ldrb	r3, [r3, #1]
 80082aa:	2b01      	cmp	r3, #1
 80082ac:	d128      	bne.n	8008300 <USB_EPStartXfer+0x103c>
 80082ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082b2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80082bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082c0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80082ca:	b29b      	uxth	r3, r3
 80082cc:	461a      	mov	r2, r3
 80082ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80082d2:	4413      	add	r3, r2
 80082d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80082d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	781b      	ldrb	r3, [r3, #0]
 80082e4:	011a      	lsls	r2, r3, #4
 80082e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80082ea:	4413      	add	r3, r2
 80082ec:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80082f0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80082f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082f8:	b29a      	uxth	r2, r3
 80082fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80082fe:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008300:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008304:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	891b      	ldrh	r3, [r3, #8]
 800830c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008310:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008314:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	6959      	ldr	r1, [r3, #20]
 800831c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008320:	b29b      	uxth	r3, r3
 8008322:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008326:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800832a:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800832e:	6800      	ldr	r0, [r0, #0]
 8008330:	f000 ff3e 	bl	80091b0 <USB_WritePMA>
          ep->xfer_buff += len;
 8008334:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008338:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	695a      	ldr	r2, [r3, #20]
 8008340:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008344:	441a      	add	r2, r3
 8008346:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800834a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8008352:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008356:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	6a1a      	ldr	r2, [r3, #32]
 800835e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008362:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	691b      	ldr	r3, [r3, #16]
 800836a:	429a      	cmp	r2, r3
 800836c:	d90f      	bls.n	800838e <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 800836e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008372:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	6a1a      	ldr	r2, [r3, #32]
 800837a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800837e:	1ad2      	subs	r2, r2, r3
 8008380:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008384:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	621a      	str	r2, [r3, #32]
 800838c:	e00e      	b.n	80083ac <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 800838e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008392:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	6a1b      	ldr	r3, [r3, #32]
 800839a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800839e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	2200      	movs	r2, #0
 80083aa:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80083ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	f000 80cc 	beq.w	800854e <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80083b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083ba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80083c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	785b      	ldrb	r3, [r3, #1]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d178      	bne.n	80084c6 <USB_EPStartXfer+0x1202>
 80083d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083d8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80083e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083e6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80083f0:	b29b      	uxth	r3, r3
 80083f2:	461a      	mov	r2, r3
 80083f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80083f8:	4413      	add	r3, r2
 80083fa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80083fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008402:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	781b      	ldrb	r3, [r3, #0]
 800840a:	011a      	lsls	r2, r3, #4
 800840c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008410:	4413      	add	r3, r2
 8008412:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008416:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800841a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800841e:	2b00      	cmp	r3, #0
 8008420:	d116      	bne.n	8008450 <USB_EPStartXfer+0x118c>
 8008422:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008426:	881b      	ldrh	r3, [r3, #0]
 8008428:	b29b      	uxth	r3, r3
 800842a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800842e:	b29a      	uxth	r2, r3
 8008430:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008434:	801a      	strh	r2, [r3, #0]
 8008436:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800843a:	881b      	ldrh	r3, [r3, #0]
 800843c:	b29b      	uxth	r3, r3
 800843e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008442:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008446:	b29a      	uxth	r2, r3
 8008448:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800844c:	801a      	strh	r2, [r3, #0]
 800844e:	e064      	b.n	800851a <USB_EPStartXfer+0x1256>
 8008450:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008454:	2b3e      	cmp	r3, #62	; 0x3e
 8008456:	d818      	bhi.n	800848a <USB_EPStartXfer+0x11c6>
 8008458:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800845c:	085b      	lsrs	r3, r3, #1
 800845e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008462:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008466:	f003 0301 	and.w	r3, r3, #1
 800846a:	2b00      	cmp	r3, #0
 800846c:	d004      	beq.n	8008478 <USB_EPStartXfer+0x11b4>
 800846e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008472:	3301      	adds	r3, #1
 8008474:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008478:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800847c:	b29b      	uxth	r3, r3
 800847e:	029b      	lsls	r3, r3, #10
 8008480:	b29a      	uxth	r2, r3
 8008482:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008486:	801a      	strh	r2, [r3, #0]
 8008488:	e047      	b.n	800851a <USB_EPStartXfer+0x1256>
 800848a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800848e:	095b      	lsrs	r3, r3, #5
 8008490:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008494:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008498:	f003 031f 	and.w	r3, r3, #31
 800849c:	2b00      	cmp	r3, #0
 800849e:	d104      	bne.n	80084aa <USB_EPStartXfer+0x11e6>
 80084a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80084a4:	3b01      	subs	r3, #1
 80084a6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80084aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80084ae:	b29b      	uxth	r3, r3
 80084b0:	029b      	lsls	r3, r3, #10
 80084b2:	b29b      	uxth	r3, r3
 80084b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084bc:	b29a      	uxth	r2, r3
 80084be:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80084c2:	801a      	strh	r2, [r3, #0]
 80084c4:	e029      	b.n	800851a <USB_EPStartXfer+0x1256>
 80084c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	785b      	ldrb	r3, [r3, #1]
 80084d2:	2b01      	cmp	r3, #1
 80084d4:	d121      	bne.n	800851a <USB_EPStartXfer+0x1256>
 80084d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80084e4:	b29b      	uxth	r3, r3
 80084e6:	461a      	mov	r2, r3
 80084e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80084ec:	4413      	add	r3, r2
 80084ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80084f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	781b      	ldrb	r3, [r3, #0]
 80084fe:	011a      	lsls	r2, r3, #4
 8008500:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008504:	4413      	add	r3, r2
 8008506:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800850a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800850e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008512:	b29a      	uxth	r2, r3
 8008514:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008518:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800851a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800851e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	895b      	ldrh	r3, [r3, #10]
 8008526:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800852a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800852e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	6959      	ldr	r1, [r3, #20]
 8008536:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800853a:	b29b      	uxth	r3, r3
 800853c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008540:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8008544:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8008548:	6800      	ldr	r0, [r0, #0]
 800854a:	f000 fe31 	bl	80091b0 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800854e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008552:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008556:	681a      	ldr	r2, [r3, #0]
 8008558:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800855c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	781b      	ldrb	r3, [r3, #0]
 8008564:	009b      	lsls	r3, r3, #2
 8008566:	4413      	add	r3, r2
 8008568:	881b      	ldrh	r3, [r3, #0]
 800856a:	b29b      	uxth	r3, r3
 800856c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008570:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8008574:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008578:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800857c:	8013      	strh	r3, [r2, #0]
 800857e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008582:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8008586:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800858a:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800858e:	8812      	ldrh	r2, [r2, #0]
 8008590:	f082 0210 	eor.w	r2, r2, #16
 8008594:	801a      	strh	r2, [r3, #0]
 8008596:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800859a:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800859e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80085a2:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80085a6:	8812      	ldrh	r2, [r2, #0]
 80085a8:	f082 0220 	eor.w	r2, r2, #32
 80085ac:	801a      	strh	r2, [r3, #0]
 80085ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085b2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80085b6:	681a      	ldr	r2, [r3, #0]
 80085b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	781b      	ldrb	r3, [r3, #0]
 80085c4:	009b      	lsls	r3, r3, #2
 80085c6:	441a      	add	r2, r3
 80085c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085cc:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80085d0:	881b      	ldrh	r3, [r3, #0]
 80085d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085e2:	b29b      	uxth	r3, r3
 80085e4:	8013      	strh	r3, [r2, #0]
 80085e6:	f000 bc9f 	b.w	8008f28 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80085ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	7b1b      	ldrb	r3, [r3, #12]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	f040 80ae 	bne.w	8008758 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80085fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008600:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	699a      	ldr	r2, [r3, #24]
 8008608:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800860c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	691b      	ldr	r3, [r3, #16]
 8008614:	429a      	cmp	r2, r3
 8008616:	d917      	bls.n	8008648 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8008618:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800861c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	691b      	ldr	r3, [r3, #16]
 8008624:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8008628:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800862c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	699a      	ldr	r2, [r3, #24]
 8008634:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008638:	1ad2      	subs	r2, r2, r3
 800863a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800863e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	619a      	str	r2, [r3, #24]
 8008646:	e00e      	b.n	8008666 <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8008648:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800864c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	699b      	ldr	r3, [r3, #24]
 8008654:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8008658:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800865c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	2200      	movs	r2, #0
 8008664:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008666:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800866a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008674:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008678:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008682:	b29b      	uxth	r3, r3
 8008684:	461a      	mov	r2, r3
 8008686:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800868a:	4413      	add	r3, r2
 800868c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008690:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008694:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	781b      	ldrb	r3, [r3, #0]
 800869c:	011a      	lsls	r2, r3, #4
 800869e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80086a2:	4413      	add	r3, r2
 80086a4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80086a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80086ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d116      	bne.n	80086e2 <USB_EPStartXfer+0x141e>
 80086b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80086b8:	881b      	ldrh	r3, [r3, #0]
 80086ba:	b29b      	uxth	r3, r3
 80086bc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80086c0:	b29a      	uxth	r2, r3
 80086c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80086c6:	801a      	strh	r2, [r3, #0]
 80086c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80086cc:	881b      	ldrh	r3, [r3, #0]
 80086ce:	b29b      	uxth	r3, r3
 80086d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086d8:	b29a      	uxth	r2, r3
 80086da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80086de:	801a      	strh	r2, [r3, #0]
 80086e0:	e3e8      	b.n	8008eb4 <USB_EPStartXfer+0x1bf0>
 80086e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086e6:	2b3e      	cmp	r3, #62	; 0x3e
 80086e8:	d818      	bhi.n	800871c <USB_EPStartXfer+0x1458>
 80086ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086ee:	085b      	lsrs	r3, r3, #1
 80086f0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80086f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086f8:	f003 0301 	and.w	r3, r3, #1
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d004      	beq.n	800870a <USB_EPStartXfer+0x1446>
 8008700:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008704:	3301      	adds	r3, #1
 8008706:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800870a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800870e:	b29b      	uxth	r3, r3
 8008710:	029b      	lsls	r3, r3, #10
 8008712:	b29a      	uxth	r2, r3
 8008714:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008718:	801a      	strh	r2, [r3, #0]
 800871a:	e3cb      	b.n	8008eb4 <USB_EPStartXfer+0x1bf0>
 800871c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008720:	095b      	lsrs	r3, r3, #5
 8008722:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008726:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800872a:	f003 031f 	and.w	r3, r3, #31
 800872e:	2b00      	cmp	r3, #0
 8008730:	d104      	bne.n	800873c <USB_EPStartXfer+0x1478>
 8008732:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008736:	3b01      	subs	r3, #1
 8008738:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800873c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008740:	b29b      	uxth	r3, r3
 8008742:	029b      	lsls	r3, r3, #10
 8008744:	b29b      	uxth	r3, r3
 8008746:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800874a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800874e:	b29a      	uxth	r2, r3
 8008750:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008754:	801a      	strh	r2, [r3, #0]
 8008756:	e3ad      	b.n	8008eb4 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8008758:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800875c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	78db      	ldrb	r3, [r3, #3]
 8008764:	2b02      	cmp	r3, #2
 8008766:	f040 8200 	bne.w	8008b6a <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800876a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800876e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	785b      	ldrb	r3, [r3, #1]
 8008776:	2b00      	cmp	r3, #0
 8008778:	f040 8091 	bne.w	800889e <USB_EPStartXfer+0x15da>
 800877c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008780:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800878a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800878e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008798:	b29b      	uxth	r3, r3
 800879a:	461a      	mov	r2, r3
 800879c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80087a0:	4413      	add	r3, r2
 80087a2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80087a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	781b      	ldrb	r3, [r3, #0]
 80087b2:	011a      	lsls	r2, r3, #4
 80087b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80087b8:	4413      	add	r3, r2
 80087ba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80087be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80087c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	691b      	ldr	r3, [r3, #16]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d116      	bne.n	8008800 <USB_EPStartXfer+0x153c>
 80087d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80087d6:	881b      	ldrh	r3, [r3, #0]
 80087d8:	b29b      	uxth	r3, r3
 80087da:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80087de:	b29a      	uxth	r2, r3
 80087e0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80087e4:	801a      	strh	r2, [r3, #0]
 80087e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80087ea:	881b      	ldrh	r3, [r3, #0]
 80087ec:	b29b      	uxth	r3, r3
 80087ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80087f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80087f6:	b29a      	uxth	r2, r3
 80087f8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80087fc:	801a      	strh	r2, [r3, #0]
 80087fe:	e083      	b.n	8008908 <USB_EPStartXfer+0x1644>
 8008800:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008804:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	691b      	ldr	r3, [r3, #16]
 800880c:	2b3e      	cmp	r3, #62	; 0x3e
 800880e:	d820      	bhi.n	8008852 <USB_EPStartXfer+0x158e>
 8008810:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008814:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	691b      	ldr	r3, [r3, #16]
 800881c:	085b      	lsrs	r3, r3, #1
 800881e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008822:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008826:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	691b      	ldr	r3, [r3, #16]
 800882e:	f003 0301 	and.w	r3, r3, #1
 8008832:	2b00      	cmp	r3, #0
 8008834:	d004      	beq.n	8008840 <USB_EPStartXfer+0x157c>
 8008836:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800883a:	3301      	adds	r3, #1
 800883c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008840:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008844:	b29b      	uxth	r3, r3
 8008846:	029b      	lsls	r3, r3, #10
 8008848:	b29a      	uxth	r2, r3
 800884a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800884e:	801a      	strh	r2, [r3, #0]
 8008850:	e05a      	b.n	8008908 <USB_EPStartXfer+0x1644>
 8008852:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008856:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	691b      	ldr	r3, [r3, #16]
 800885e:	095b      	lsrs	r3, r3, #5
 8008860:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008864:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008868:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	691b      	ldr	r3, [r3, #16]
 8008870:	f003 031f 	and.w	r3, r3, #31
 8008874:	2b00      	cmp	r3, #0
 8008876:	d104      	bne.n	8008882 <USB_EPStartXfer+0x15be>
 8008878:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800887c:	3b01      	subs	r3, #1
 800887e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008882:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008886:	b29b      	uxth	r3, r3
 8008888:	029b      	lsls	r3, r3, #10
 800888a:	b29b      	uxth	r3, r3
 800888c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008890:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008894:	b29a      	uxth	r2, r3
 8008896:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800889a:	801a      	strh	r2, [r3, #0]
 800889c:	e034      	b.n	8008908 <USB_EPStartXfer+0x1644>
 800889e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	785b      	ldrb	r3, [r3, #1]
 80088aa:	2b01      	cmp	r3, #1
 80088ac:	d12c      	bne.n	8008908 <USB_EPStartXfer+0x1644>
 80088ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088b2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80088bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088c0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80088ca:	b29b      	uxth	r3, r3
 80088cc:	461a      	mov	r2, r3
 80088ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80088d2:	4413      	add	r3, r2
 80088d4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80088d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	781b      	ldrb	r3, [r3, #0]
 80088e4:	011a      	lsls	r2, r3, #4
 80088e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80088ea:	4413      	add	r3, r2
 80088ec:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80088f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80088f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	691b      	ldr	r3, [r3, #16]
 8008900:	b29a      	uxth	r2, r3
 8008902:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008906:	801a      	strh	r2, [r3, #0]
 8008908:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800890c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008916:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800891a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	785b      	ldrb	r3, [r3, #1]
 8008922:	2b00      	cmp	r3, #0
 8008924:	f040 8091 	bne.w	8008a4a <USB_EPStartXfer+0x1786>
 8008928:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800892c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008936:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800893a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008944:	b29b      	uxth	r3, r3
 8008946:	461a      	mov	r2, r3
 8008948:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800894c:	4413      	add	r3, r2
 800894e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008952:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008956:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	781b      	ldrb	r3, [r3, #0]
 800895e:	011a      	lsls	r2, r3, #4
 8008960:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008964:	4413      	add	r3, r2
 8008966:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800896a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800896e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008972:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	691b      	ldr	r3, [r3, #16]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d116      	bne.n	80089ac <USB_EPStartXfer+0x16e8>
 800897e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008982:	881b      	ldrh	r3, [r3, #0]
 8008984:	b29b      	uxth	r3, r3
 8008986:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800898a:	b29a      	uxth	r2, r3
 800898c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008990:	801a      	strh	r2, [r3, #0]
 8008992:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008996:	881b      	ldrh	r3, [r3, #0]
 8008998:	b29b      	uxth	r3, r3
 800899a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800899e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80089a2:	b29a      	uxth	r2, r3
 80089a4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80089a8:	801a      	strh	r2, [r3, #0]
 80089aa:	e07c      	b.n	8008aa6 <USB_EPStartXfer+0x17e2>
 80089ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	691b      	ldr	r3, [r3, #16]
 80089b8:	2b3e      	cmp	r3, #62	; 0x3e
 80089ba:	d820      	bhi.n	80089fe <USB_EPStartXfer+0x173a>
 80089bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	691b      	ldr	r3, [r3, #16]
 80089c8:	085b      	lsrs	r3, r3, #1
 80089ca:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80089ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	691b      	ldr	r3, [r3, #16]
 80089da:	f003 0301 	and.w	r3, r3, #1
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d004      	beq.n	80089ec <USB_EPStartXfer+0x1728>
 80089e2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80089e6:	3301      	adds	r3, #1
 80089e8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80089ec:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80089f0:	b29b      	uxth	r3, r3
 80089f2:	029b      	lsls	r3, r3, #10
 80089f4:	b29a      	uxth	r2, r3
 80089f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80089fa:	801a      	strh	r2, [r3, #0]
 80089fc:	e053      	b.n	8008aa6 <USB_EPStartXfer+0x17e2>
 80089fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a02:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	691b      	ldr	r3, [r3, #16]
 8008a0a:	095b      	lsrs	r3, r3, #5
 8008a0c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008a10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a14:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	691b      	ldr	r3, [r3, #16]
 8008a1c:	f003 031f 	and.w	r3, r3, #31
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d104      	bne.n	8008a2e <USB_EPStartXfer+0x176a>
 8008a24:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008a28:	3b01      	subs	r3, #1
 8008a2a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008a2e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008a32:	b29b      	uxth	r3, r3
 8008a34:	029b      	lsls	r3, r3, #10
 8008a36:	b29b      	uxth	r3, r3
 8008a38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a40:	b29a      	uxth	r2, r3
 8008a42:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008a46:	801a      	strh	r2, [r3, #0]
 8008a48:	e02d      	b.n	8008aa6 <USB_EPStartXfer+0x17e2>
 8008a4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a4e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	785b      	ldrb	r3, [r3, #1]
 8008a56:	2b01      	cmp	r3, #1
 8008a58:	d125      	bne.n	8008aa6 <USB_EPStartXfer+0x17e2>
 8008a5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a5e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a68:	b29b      	uxth	r3, r3
 8008a6a:	461a      	mov	r2, r3
 8008a6c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008a70:	4413      	add	r3, r2
 8008a72:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008a76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	781b      	ldrb	r3, [r3, #0]
 8008a82:	011a      	lsls	r2, r3, #4
 8008a84:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008a88:	4413      	add	r3, r2
 8008a8a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008a8e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008a92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a96:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	691b      	ldr	r3, [r3, #16]
 8008a9e:	b29a      	uxth	r2, r3
 8008aa0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008aa4:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008aa6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008aaa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	69db      	ldr	r3, [r3, #28]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	f000 81fe 	beq.w	8008eb4 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008ab8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008abc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008ac0:	681a      	ldr	r2, [r3, #0]
 8008ac2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ac6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	781b      	ldrb	r3, [r3, #0]
 8008ace:	009b      	lsls	r3, r3, #2
 8008ad0:	4413      	add	r3, r2
 8008ad2:	881b      	ldrh	r3, [r3, #0]
 8008ad4:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008ad8:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008adc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d005      	beq.n	8008af0 <USB_EPStartXfer+0x182c>
 8008ae4:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008ae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d10d      	bne.n	8008b0c <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008af0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008af4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	f040 81db 	bne.w	8008eb4 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008afe:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008b02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	f040 81d4 	bne.w	8008eb4 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8008b0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b10:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008b14:	681a      	ldr	r2, [r3, #0]
 8008b16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	781b      	ldrb	r3, [r3, #0]
 8008b22:	009b      	lsls	r3, r3, #2
 8008b24:	4413      	add	r3, r2
 8008b26:	881b      	ldrh	r3, [r3, #0]
 8008b28:	b29b      	uxth	r3, r3
 8008b2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b32:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8008b36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b3a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008b3e:	681a      	ldr	r2, [r3, #0]
 8008b40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	781b      	ldrb	r3, [r3, #0]
 8008b4c:	009b      	lsls	r3, r3, #2
 8008b4e:	441a      	add	r2, r3
 8008b50:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8008b54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b60:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008b64:	b29b      	uxth	r3, r3
 8008b66:	8013      	strh	r3, [r2, #0]
 8008b68:	e1a4      	b.n	8008eb4 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008b6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	78db      	ldrb	r3, [r3, #3]
 8008b76:	2b01      	cmp	r3, #1
 8008b78:	f040 819a 	bne.w	8008eb0 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008b7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b80:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	699a      	ldr	r2, [r3, #24]
 8008b88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b8c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	691b      	ldr	r3, [r3, #16]
 8008b94:	429a      	cmp	r2, r3
 8008b96:	d917      	bls.n	8008bc8 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8008b98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b9c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	691b      	ldr	r3, [r3, #16]
 8008ba4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8008ba8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	699a      	ldr	r2, [r3, #24]
 8008bb4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008bb8:	1ad2      	subs	r2, r2, r3
 8008bba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bbe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	619a      	str	r2, [r3, #24]
 8008bc6:	e00e      	b.n	8008be6 <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8008bc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bcc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	699b      	ldr	r3, [r3, #24]
 8008bd4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8008bd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bdc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	2200      	movs	r2, #0
 8008be4:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008be6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	785b      	ldrb	r3, [r3, #1]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d178      	bne.n	8008ce8 <USB_EPStartXfer+0x1a24>
 8008bf6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bfa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008c04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c08:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c12:	b29b      	uxth	r3, r3
 8008c14:	461a      	mov	r2, r3
 8008c16:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008c1a:	4413      	add	r3, r2
 8008c1c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008c20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c24:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	781b      	ldrb	r3, [r3, #0]
 8008c2c:	011a      	lsls	r2, r3, #4
 8008c2e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008c32:	4413      	add	r3, r2
 8008c34:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008c38:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008c3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d116      	bne.n	8008c72 <USB_EPStartXfer+0x19ae>
 8008c44:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008c48:	881b      	ldrh	r3, [r3, #0]
 8008c4a:	b29b      	uxth	r3, r3
 8008c4c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008c50:	b29a      	uxth	r2, r3
 8008c52:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008c56:	801a      	strh	r2, [r3, #0]
 8008c58:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008c5c:	881b      	ldrh	r3, [r3, #0]
 8008c5e:	b29b      	uxth	r3, r3
 8008c60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c68:	b29a      	uxth	r2, r3
 8008c6a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008c6e:	801a      	strh	r2, [r3, #0]
 8008c70:	e06b      	b.n	8008d4a <USB_EPStartXfer+0x1a86>
 8008c72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c76:	2b3e      	cmp	r3, #62	; 0x3e
 8008c78:	d818      	bhi.n	8008cac <USB_EPStartXfer+0x19e8>
 8008c7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c7e:	085b      	lsrs	r3, r3, #1
 8008c80:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008c84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c88:	f003 0301 	and.w	r3, r3, #1
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d004      	beq.n	8008c9a <USB_EPStartXfer+0x19d6>
 8008c90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008c94:	3301      	adds	r3, #1
 8008c96:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008c9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008c9e:	b29b      	uxth	r3, r3
 8008ca0:	029b      	lsls	r3, r3, #10
 8008ca2:	b29a      	uxth	r2, r3
 8008ca4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008ca8:	801a      	strh	r2, [r3, #0]
 8008caa:	e04e      	b.n	8008d4a <USB_EPStartXfer+0x1a86>
 8008cac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008cb0:	095b      	lsrs	r3, r3, #5
 8008cb2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008cb6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008cba:	f003 031f 	and.w	r3, r3, #31
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d104      	bne.n	8008ccc <USB_EPStartXfer+0x1a08>
 8008cc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008cc6:	3b01      	subs	r3, #1
 8008cc8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008ccc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008cd0:	b29b      	uxth	r3, r3
 8008cd2:	029b      	lsls	r3, r3, #10
 8008cd4:	b29b      	uxth	r3, r3
 8008cd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008cda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008cde:	b29a      	uxth	r2, r3
 8008ce0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008ce4:	801a      	strh	r2, [r3, #0]
 8008ce6:	e030      	b.n	8008d4a <USB_EPStartXfer+0x1a86>
 8008ce8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	785b      	ldrb	r3, [r3, #1]
 8008cf4:	2b01      	cmp	r3, #1
 8008cf6:	d128      	bne.n	8008d4a <USB_EPStartXfer+0x1a86>
 8008cf8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cfc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008d06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d0a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d14:	b29b      	uxth	r3, r3
 8008d16:	461a      	mov	r2, r3
 8008d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d1c:	4413      	add	r3, r2
 8008d1e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008d22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	781b      	ldrb	r3, [r3, #0]
 8008d2e:	011a      	lsls	r2, r3, #4
 8008d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d34:	4413      	add	r3, r2
 8008d36:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008d3a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008d3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d42:	b29a      	uxth	r2, r3
 8008d44:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008d48:	801a      	strh	r2, [r3, #0]
 8008d4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d4e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008d58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d5c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	785b      	ldrb	r3, [r3, #1]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d178      	bne.n	8008e5a <USB_EPStartXfer+0x1b96>
 8008d68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d6c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008d76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d7a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d84:	b29b      	uxth	r3, r3
 8008d86:	461a      	mov	r2, r3
 8008d88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008d8c:	4413      	add	r3, r2
 8008d8e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008d92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d96:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	781b      	ldrb	r3, [r3, #0]
 8008d9e:	011a      	lsls	r2, r3, #4
 8008da0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008da4:	4413      	add	r3, r2
 8008da6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008daa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008dae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d116      	bne.n	8008de4 <USB_EPStartXfer+0x1b20>
 8008db6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008dba:	881b      	ldrh	r3, [r3, #0]
 8008dbc:	b29b      	uxth	r3, r3
 8008dbe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008dc2:	b29a      	uxth	r2, r3
 8008dc4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008dc8:	801a      	strh	r2, [r3, #0]
 8008dca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008dce:	881b      	ldrh	r3, [r3, #0]
 8008dd0:	b29b      	uxth	r3, r3
 8008dd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008dd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008dda:	b29a      	uxth	r2, r3
 8008ddc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008de0:	801a      	strh	r2, [r3, #0]
 8008de2:	e067      	b.n	8008eb4 <USB_EPStartXfer+0x1bf0>
 8008de4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008de8:	2b3e      	cmp	r3, #62	; 0x3e
 8008dea:	d818      	bhi.n	8008e1e <USB_EPStartXfer+0x1b5a>
 8008dec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008df0:	085b      	lsrs	r3, r3, #1
 8008df2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008df6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008dfa:	f003 0301 	and.w	r3, r3, #1
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d004      	beq.n	8008e0c <USB_EPStartXfer+0x1b48>
 8008e02:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008e06:	3301      	adds	r3, #1
 8008e08:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008e0c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008e10:	b29b      	uxth	r3, r3
 8008e12:	029b      	lsls	r3, r3, #10
 8008e14:	b29a      	uxth	r2, r3
 8008e16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008e1a:	801a      	strh	r2, [r3, #0]
 8008e1c:	e04a      	b.n	8008eb4 <USB_EPStartXfer+0x1bf0>
 8008e1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e22:	095b      	lsrs	r3, r3, #5
 8008e24:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008e28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e2c:	f003 031f 	and.w	r3, r3, #31
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d104      	bne.n	8008e3e <USB_EPStartXfer+0x1b7a>
 8008e34:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008e38:	3b01      	subs	r3, #1
 8008e3a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008e3e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008e42:	b29b      	uxth	r3, r3
 8008e44:	029b      	lsls	r3, r3, #10
 8008e46:	b29b      	uxth	r3, r3
 8008e48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e50:	b29a      	uxth	r2, r3
 8008e52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008e56:	801a      	strh	r2, [r3, #0]
 8008e58:	e02c      	b.n	8008eb4 <USB_EPStartXfer+0x1bf0>
 8008e5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	785b      	ldrb	r3, [r3, #1]
 8008e66:	2b01      	cmp	r3, #1
 8008e68:	d124      	bne.n	8008eb4 <USB_EPStartXfer+0x1bf0>
 8008e6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e6e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e78:	b29b      	uxth	r3, r3
 8008e7a:	461a      	mov	r2, r3
 8008e7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e80:	4413      	add	r3, r2
 8008e82:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008e86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	781b      	ldrb	r3, [r3, #0]
 8008e92:	011a      	lsls	r2, r3, #4
 8008e94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e98:	4413      	add	r3, r2
 8008e9a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008e9e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008ea2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ea6:	b29a      	uxth	r2, r3
 8008ea8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008eac:	801a      	strh	r2, [r3, #0]
 8008eae:	e001      	b.n	8008eb4 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8008eb0:	2301      	movs	r3, #1
 8008eb2:	e03a      	b.n	8008f2a <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008eb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008eb8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008ebc:	681a      	ldr	r2, [r3, #0]
 8008ebe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ec2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	781b      	ldrb	r3, [r3, #0]
 8008eca:	009b      	lsls	r3, r3, #2
 8008ecc:	4413      	add	r3, r2
 8008ece:	881b      	ldrh	r3, [r3, #0]
 8008ed0:	b29b      	uxth	r3, r3
 8008ed2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008ed6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008eda:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008ede:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008ee2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008ee6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008eea:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008eee:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008ef2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008ef6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008efa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008efe:	681a      	ldr	r2, [r3, #0]
 8008f00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f04:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	781b      	ldrb	r3, [r3, #0]
 8008f0c:	009b      	lsls	r3, r3, #2
 8008f0e:	441a      	add	r2, r3
 8008f10:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008f14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f24:	b29b      	uxth	r3, r3
 8008f26:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008f28:	2300      	movs	r3, #0
}
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}

08008f34 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008f34:	b480      	push	{r7}
 8008f36:	b085      	sub	sp, #20
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
 8008f3c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	785b      	ldrb	r3, [r3, #1]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d020      	beq.n	8008f88 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008f46:	687a      	ldr	r2, [r7, #4]
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	781b      	ldrb	r3, [r3, #0]
 8008f4c:	009b      	lsls	r3, r3, #2
 8008f4e:	4413      	add	r3, r2
 8008f50:	881b      	ldrh	r3, [r3, #0]
 8008f52:	b29b      	uxth	r3, r3
 8008f54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f5c:	81bb      	strh	r3, [r7, #12]
 8008f5e:	89bb      	ldrh	r3, [r7, #12]
 8008f60:	f083 0310 	eor.w	r3, r3, #16
 8008f64:	81bb      	strh	r3, [r7, #12]
 8008f66:	687a      	ldr	r2, [r7, #4]
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	781b      	ldrb	r3, [r3, #0]
 8008f6c:	009b      	lsls	r3, r3, #2
 8008f6e:	441a      	add	r2, r3
 8008f70:	89bb      	ldrh	r3, [r7, #12]
 8008f72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f82:	b29b      	uxth	r3, r3
 8008f84:	8013      	strh	r3, [r2, #0]
 8008f86:	e01f      	b.n	8008fc8 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008f88:	687a      	ldr	r2, [r7, #4]
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	781b      	ldrb	r3, [r3, #0]
 8008f8e:	009b      	lsls	r3, r3, #2
 8008f90:	4413      	add	r3, r2
 8008f92:	881b      	ldrh	r3, [r3, #0]
 8008f94:	b29b      	uxth	r3, r3
 8008f96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008f9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f9e:	81fb      	strh	r3, [r7, #14]
 8008fa0:	89fb      	ldrh	r3, [r7, #14]
 8008fa2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008fa6:	81fb      	strh	r3, [r7, #14]
 8008fa8:	687a      	ldr	r2, [r7, #4]
 8008faa:	683b      	ldr	r3, [r7, #0]
 8008fac:	781b      	ldrb	r3, [r3, #0]
 8008fae:	009b      	lsls	r3, r3, #2
 8008fb0:	441a      	add	r2, r3
 8008fb2:	89fb      	ldrh	r3, [r7, #14]
 8008fb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008fb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008fbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008fc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fc4:	b29b      	uxth	r3, r3
 8008fc6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008fc8:	2300      	movs	r3, #0
}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	3714      	adds	r7, #20
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bc80      	pop	{r7}
 8008fd2:	4770      	bx	lr

08008fd4 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008fd4:	b480      	push	{r7}
 8008fd6:	b087      	sub	sp, #28
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
 8008fdc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	7b1b      	ldrb	r3, [r3, #12]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	f040 809d 	bne.w	8009122 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	785b      	ldrb	r3, [r3, #1]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d04c      	beq.n	800908a <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008ff0:	687a      	ldr	r2, [r7, #4]
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	781b      	ldrb	r3, [r3, #0]
 8008ff6:	009b      	lsls	r3, r3, #2
 8008ff8:	4413      	add	r3, r2
 8008ffa:	881b      	ldrh	r3, [r3, #0]
 8008ffc:	823b      	strh	r3, [r7, #16]
 8008ffe:	8a3b      	ldrh	r3, [r7, #16]
 8009000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009004:	2b00      	cmp	r3, #0
 8009006:	d01b      	beq.n	8009040 <USB_EPClearStall+0x6c>
 8009008:	687a      	ldr	r2, [r7, #4]
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	781b      	ldrb	r3, [r3, #0]
 800900e:	009b      	lsls	r3, r3, #2
 8009010:	4413      	add	r3, r2
 8009012:	881b      	ldrh	r3, [r3, #0]
 8009014:	b29b      	uxth	r3, r3
 8009016:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800901a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800901e:	81fb      	strh	r3, [r7, #14]
 8009020:	687a      	ldr	r2, [r7, #4]
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	781b      	ldrb	r3, [r3, #0]
 8009026:	009b      	lsls	r3, r3, #2
 8009028:	441a      	add	r2, r3
 800902a:	89fb      	ldrh	r3, [r7, #14]
 800902c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009030:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009034:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009038:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800903c:	b29b      	uxth	r3, r3
 800903e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	78db      	ldrb	r3, [r3, #3]
 8009044:	2b01      	cmp	r3, #1
 8009046:	d06c      	beq.n	8009122 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009048:	687a      	ldr	r2, [r7, #4]
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	781b      	ldrb	r3, [r3, #0]
 800904e:	009b      	lsls	r3, r3, #2
 8009050:	4413      	add	r3, r2
 8009052:	881b      	ldrh	r3, [r3, #0]
 8009054:	b29b      	uxth	r3, r3
 8009056:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800905a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800905e:	81bb      	strh	r3, [r7, #12]
 8009060:	89bb      	ldrh	r3, [r7, #12]
 8009062:	f083 0320 	eor.w	r3, r3, #32
 8009066:	81bb      	strh	r3, [r7, #12]
 8009068:	687a      	ldr	r2, [r7, #4]
 800906a:	683b      	ldr	r3, [r7, #0]
 800906c:	781b      	ldrb	r3, [r3, #0]
 800906e:	009b      	lsls	r3, r3, #2
 8009070:	441a      	add	r2, r3
 8009072:	89bb      	ldrh	r3, [r7, #12]
 8009074:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009078:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800907c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009080:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009084:	b29b      	uxth	r3, r3
 8009086:	8013      	strh	r3, [r2, #0]
 8009088:	e04b      	b.n	8009122 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800908a:	687a      	ldr	r2, [r7, #4]
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	781b      	ldrb	r3, [r3, #0]
 8009090:	009b      	lsls	r3, r3, #2
 8009092:	4413      	add	r3, r2
 8009094:	881b      	ldrh	r3, [r3, #0]
 8009096:	82fb      	strh	r3, [r7, #22]
 8009098:	8afb      	ldrh	r3, [r7, #22]
 800909a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d01b      	beq.n	80090da <USB_EPClearStall+0x106>
 80090a2:	687a      	ldr	r2, [r7, #4]
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	781b      	ldrb	r3, [r3, #0]
 80090a8:	009b      	lsls	r3, r3, #2
 80090aa:	4413      	add	r3, r2
 80090ac:	881b      	ldrh	r3, [r3, #0]
 80090ae:	b29b      	uxth	r3, r3
 80090b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80090b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090b8:	82bb      	strh	r3, [r7, #20]
 80090ba:	687a      	ldr	r2, [r7, #4]
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	781b      	ldrb	r3, [r3, #0]
 80090c0:	009b      	lsls	r3, r3, #2
 80090c2:	441a      	add	r2, r3
 80090c4:	8abb      	ldrh	r3, [r7, #20]
 80090c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80090ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80090ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80090d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090d6:	b29b      	uxth	r3, r3
 80090d8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80090da:	687a      	ldr	r2, [r7, #4]
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	781b      	ldrb	r3, [r3, #0]
 80090e0:	009b      	lsls	r3, r3, #2
 80090e2:	4413      	add	r3, r2
 80090e4:	881b      	ldrh	r3, [r3, #0]
 80090e6:	b29b      	uxth	r3, r3
 80090e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80090ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090f0:	827b      	strh	r3, [r7, #18]
 80090f2:	8a7b      	ldrh	r3, [r7, #18]
 80090f4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80090f8:	827b      	strh	r3, [r7, #18]
 80090fa:	8a7b      	ldrh	r3, [r7, #18]
 80090fc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009100:	827b      	strh	r3, [r7, #18]
 8009102:	687a      	ldr	r2, [r7, #4]
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	781b      	ldrb	r3, [r3, #0]
 8009108:	009b      	lsls	r3, r3, #2
 800910a:	441a      	add	r2, r3
 800910c:	8a7b      	ldrh	r3, [r7, #18]
 800910e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009112:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009116:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800911a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800911e:	b29b      	uxth	r3, r3
 8009120:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009122:	2300      	movs	r3, #0
}
 8009124:	4618      	mov	r0, r3
 8009126:	371c      	adds	r7, #28
 8009128:	46bd      	mov	sp, r7
 800912a:	bc80      	pop	{r7}
 800912c:	4770      	bx	lr

0800912e <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800912e:	b480      	push	{r7}
 8009130:	b083      	sub	sp, #12
 8009132:	af00      	add	r7, sp, #0
 8009134:	6078      	str	r0, [r7, #4]
 8009136:	460b      	mov	r3, r1
 8009138:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800913a:	78fb      	ldrb	r3, [r7, #3]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d103      	bne.n	8009148 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2280      	movs	r2, #128	; 0x80
 8009144:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8009148:	2300      	movs	r3, #0
}
 800914a:	4618      	mov	r0, r3
 800914c:	370c      	adds	r7, #12
 800914e:	46bd      	mov	sp, r7
 8009150:	bc80      	pop	{r7}
 8009152:	4770      	bx	lr

08009154 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8009154:	b480      	push	{r7}
 8009156:	b083      	sub	sp, #12
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800915c:	2300      	movs	r3, #0
}
 800915e:	4618      	mov	r0, r3
 8009160:	370c      	adds	r7, #12
 8009162:	46bd      	mov	sp, r7
 8009164:	bc80      	pop	{r7}
 8009166:	4770      	bx	lr

08009168 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8009168:	b480      	push	{r7}
 800916a:	b083      	sub	sp, #12
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8009170:	2300      	movs	r3, #0
}
 8009172:	4618      	mov	r0, r3
 8009174:	370c      	adds	r7, #12
 8009176:	46bd      	mov	sp, r7
 8009178:	bc80      	pop	{r7}
 800917a:	4770      	bx	lr

0800917c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800917c:	b480      	push	{r7}
 800917e:	b085      	sub	sp, #20
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800918a:	b29b      	uxth	r3, r3
 800918c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800918e:	68fb      	ldr	r3, [r7, #12]
}
 8009190:	4618      	mov	r0, r3
 8009192:	3714      	adds	r7, #20
 8009194:	46bd      	mov	sp, r7
 8009196:	bc80      	pop	{r7}
 8009198:	4770      	bx	lr

0800919a <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800919a:	b480      	push	{r7}
 800919c:	b083      	sub	sp, #12
 800919e:	af00      	add	r7, sp, #0
 80091a0:	6078      	str	r0, [r7, #4]
 80091a2:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80091a4:	2300      	movs	r3, #0
}
 80091a6:	4618      	mov	r0, r3
 80091a8:	370c      	adds	r7, #12
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bc80      	pop	{r7}
 80091ae:	4770      	bx	lr

080091b0 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80091b0:	b480      	push	{r7}
 80091b2:	b08d      	sub	sp, #52	; 0x34
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	60f8      	str	r0, [r7, #12]
 80091b8:	60b9      	str	r1, [r7, #8]
 80091ba:	4611      	mov	r1, r2
 80091bc:	461a      	mov	r2, r3
 80091be:	460b      	mov	r3, r1
 80091c0:	80fb      	strh	r3, [r7, #6]
 80091c2:	4613      	mov	r3, r2
 80091c4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80091c6:	88bb      	ldrh	r3, [r7, #4]
 80091c8:	3301      	adds	r3, #1
 80091ca:	085b      	lsrs	r3, r3, #1
 80091cc:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80091d2:	68bb      	ldr	r3, [r7, #8]
 80091d4:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80091d6:	88fb      	ldrh	r3, [r7, #6]
 80091d8:	005a      	lsls	r2, r3, #1
 80091da:	69fb      	ldr	r3, [r7, #28]
 80091dc:	4413      	add	r3, r2
 80091de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80091e2:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80091e4:	6a3b      	ldr	r3, [r7, #32]
 80091e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80091e8:	e01e      	b.n	8009228 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80091ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ec:	781b      	ldrb	r3, [r3, #0]
 80091ee:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80091f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091f2:	3301      	adds	r3, #1
 80091f4:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80091f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091f8:	781b      	ldrb	r3, [r3, #0]
 80091fa:	b29b      	uxth	r3, r3
 80091fc:	021b      	lsls	r3, r3, #8
 80091fe:	b29b      	uxth	r3, r3
 8009200:	461a      	mov	r2, r3
 8009202:	69bb      	ldr	r3, [r7, #24]
 8009204:	4313      	orrs	r3, r2
 8009206:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8009208:	697b      	ldr	r3, [r7, #20]
 800920a:	b29a      	uxth	r2, r3
 800920c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800920e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009212:	3302      	adds	r3, #2
 8009214:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8009216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009218:	3302      	adds	r3, #2
 800921a:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800921c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800921e:	3301      	adds	r3, #1
 8009220:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8009222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009224:	3b01      	subs	r3, #1
 8009226:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800922a:	2b00      	cmp	r3, #0
 800922c:	d1dd      	bne.n	80091ea <USB_WritePMA+0x3a>
  }
}
 800922e:	bf00      	nop
 8009230:	bf00      	nop
 8009232:	3734      	adds	r7, #52	; 0x34
 8009234:	46bd      	mov	sp, r7
 8009236:	bc80      	pop	{r7}
 8009238:	4770      	bx	lr

0800923a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800923a:	b480      	push	{r7}
 800923c:	b08b      	sub	sp, #44	; 0x2c
 800923e:	af00      	add	r7, sp, #0
 8009240:	60f8      	str	r0, [r7, #12]
 8009242:	60b9      	str	r1, [r7, #8]
 8009244:	4611      	mov	r1, r2
 8009246:	461a      	mov	r2, r3
 8009248:	460b      	mov	r3, r1
 800924a:	80fb      	strh	r3, [r7, #6]
 800924c:	4613      	mov	r3, r2
 800924e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009250:	88bb      	ldrh	r3, [r7, #4]
 8009252:	085b      	lsrs	r3, r3, #1
 8009254:	b29b      	uxth	r3, r3
 8009256:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800925c:	68bb      	ldr	r3, [r7, #8]
 800925e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009260:	88fb      	ldrh	r3, [r7, #6]
 8009262:	005a      	lsls	r2, r3, #1
 8009264:	697b      	ldr	r3, [r7, #20]
 8009266:	4413      	add	r3, r2
 8009268:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800926c:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800926e:	69bb      	ldr	r3, [r7, #24]
 8009270:	627b      	str	r3, [r7, #36]	; 0x24
 8009272:	e01b      	b.n	80092ac <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8009274:	6a3b      	ldr	r3, [r7, #32]
 8009276:	881b      	ldrh	r3, [r3, #0]
 8009278:	b29b      	uxth	r3, r3
 800927a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800927c:	6a3b      	ldr	r3, [r7, #32]
 800927e:	3302      	adds	r3, #2
 8009280:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009282:	693b      	ldr	r3, [r7, #16]
 8009284:	b2da      	uxtb	r2, r3
 8009286:	69fb      	ldr	r3, [r7, #28]
 8009288:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800928a:	69fb      	ldr	r3, [r7, #28]
 800928c:	3301      	adds	r3, #1
 800928e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8009290:	693b      	ldr	r3, [r7, #16]
 8009292:	0a1b      	lsrs	r3, r3, #8
 8009294:	b2da      	uxtb	r2, r3
 8009296:	69fb      	ldr	r3, [r7, #28]
 8009298:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800929a:	69fb      	ldr	r3, [r7, #28]
 800929c:	3301      	adds	r3, #1
 800929e:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80092a0:	6a3b      	ldr	r3, [r7, #32]
 80092a2:	3302      	adds	r3, #2
 80092a4:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80092a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092a8:	3b01      	subs	r3, #1
 80092aa:	627b      	str	r3, [r7, #36]	; 0x24
 80092ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d1e0      	bne.n	8009274 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80092b2:	88bb      	ldrh	r3, [r7, #4]
 80092b4:	f003 0301 	and.w	r3, r3, #1
 80092b8:	b29b      	uxth	r3, r3
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d007      	beq.n	80092ce <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80092be:	6a3b      	ldr	r3, [r7, #32]
 80092c0:	881b      	ldrh	r3, [r3, #0]
 80092c2:	b29b      	uxth	r3, r3
 80092c4:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80092c6:	693b      	ldr	r3, [r7, #16]
 80092c8:	b2da      	uxtb	r2, r3
 80092ca:	69fb      	ldr	r3, [r7, #28]
 80092cc:	701a      	strb	r2, [r3, #0]
  }
}
 80092ce:	bf00      	nop
 80092d0:	372c      	adds	r7, #44	; 0x2c
 80092d2:	46bd      	mov	sp, r7
 80092d4:	bc80      	pop	{r7}
 80092d6:	4770      	bx	lr

080092d8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b084      	sub	sp, #16
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
 80092e0:	460b      	mov	r3, r1
 80092e2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80092e4:	2300      	movs	r3, #0
 80092e6:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	7c1b      	ldrb	r3, [r3, #16]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d115      	bne.n	800931c <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80092f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80092f4:	2202      	movs	r2, #2
 80092f6:	2181      	movs	r1, #129	; 0x81
 80092f8:	6878      	ldr	r0, [r7, #4]
 80092fa:	f7f9 f9c6 	bl	800268a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	2201      	movs	r2, #1
 8009302:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009304:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009308:	2202      	movs	r2, #2
 800930a:	2101      	movs	r1, #1
 800930c:	6878      	ldr	r0, [r7, #4]
 800930e:	f7f9 f9bc 	bl	800268a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	2201      	movs	r2, #1
 8009316:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800931a:	e012      	b.n	8009342 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800931c:	2340      	movs	r3, #64	; 0x40
 800931e:	2202      	movs	r2, #2
 8009320:	2181      	movs	r1, #129	; 0x81
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	f7f9 f9b1 	bl	800268a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2201      	movs	r2, #1
 800932c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800932e:	2340      	movs	r3, #64	; 0x40
 8009330:	2202      	movs	r2, #2
 8009332:	2101      	movs	r1, #1
 8009334:	6878      	ldr	r0, [r7, #4]
 8009336:	f7f9 f9a8 	bl	800268a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	2201      	movs	r2, #1
 800933e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009342:	2308      	movs	r3, #8
 8009344:	2203      	movs	r2, #3
 8009346:	2182      	movs	r1, #130	; 0x82
 8009348:	6878      	ldr	r0, [r7, #4]
 800934a:	f7f9 f99e 	bl	800268a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	2201      	movs	r2, #1
 8009352:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009354:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009358:	f7f9 fabe 	bl	80028d8 <USBD_static_malloc>
 800935c:	4602      	mov	r2, r0
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800936a:	2b00      	cmp	r3, #0
 800936c:	d102      	bne.n	8009374 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800936e:	2301      	movs	r3, #1
 8009370:	73fb      	strb	r3, [r7, #15]
 8009372:	e026      	b.n	80093c2 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800937a:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8009386:	68bb      	ldr	r3, [r7, #8]
 8009388:	2200      	movs	r2, #0
 800938a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800938e:	68bb      	ldr	r3, [r7, #8]
 8009390:	2200      	movs	r2, #0
 8009392:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	7c1b      	ldrb	r3, [r3, #16]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d109      	bne.n	80093b2 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800939e:	68bb      	ldr	r3, [r7, #8]
 80093a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80093a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80093a8:	2101      	movs	r1, #1
 80093aa:	6878      	ldr	r0, [r7, #4]
 80093ac:	f7f9 fa5e 	bl	800286c <USBD_LL_PrepareReceive>
 80093b0:	e007      	b.n	80093c2 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80093b2:	68bb      	ldr	r3, [r7, #8]
 80093b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80093b8:	2340      	movs	r3, #64	; 0x40
 80093ba:	2101      	movs	r1, #1
 80093bc:	6878      	ldr	r0, [r7, #4]
 80093be:	f7f9 fa55 	bl	800286c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80093c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80093c4:	4618      	mov	r0, r3
 80093c6:	3710      	adds	r7, #16
 80093c8:	46bd      	mov	sp, r7
 80093ca:	bd80      	pop	{r7, pc}

080093cc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b084      	sub	sp, #16
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
 80093d4:	460b      	mov	r3, r1
 80093d6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80093d8:	2300      	movs	r3, #0
 80093da:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80093dc:	2181      	movs	r1, #129	; 0x81
 80093de:	6878      	ldr	r0, [r7, #4]
 80093e0:	f7f9 f979 	bl	80026d6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	2200      	movs	r2, #0
 80093e8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80093ea:	2101      	movs	r1, #1
 80093ec:	6878      	ldr	r0, [r7, #4]
 80093ee:	f7f9 f972 	bl	80026d6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	2200      	movs	r2, #0
 80093f6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80093fa:	2182      	movs	r1, #130	; 0x82
 80093fc:	6878      	ldr	r0, [r7, #4]
 80093fe:	f7f9 f96a 	bl	80026d6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	2200      	movs	r2, #0
 8009406:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800940e:	2b00      	cmp	r3, #0
 8009410:	d00e      	beq.n	8009430 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009418:	685b      	ldr	r3, [r3, #4]
 800941a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009422:	4618      	mov	r0, r3
 8009424:	f7f9 fa64 	bl	80028f0 <USBD_static_free>
    pdev->pClassData = NULL;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2200      	movs	r2, #0
 800942c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8009430:	7bfb      	ldrb	r3, [r7, #15]
}
 8009432:	4618      	mov	r0, r3
 8009434:	3710      	adds	r7, #16
 8009436:	46bd      	mov	sp, r7
 8009438:	bd80      	pop	{r7, pc}

0800943a <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800943a:	b580      	push	{r7, lr}
 800943c:	b086      	sub	sp, #24
 800943e:	af00      	add	r7, sp, #0
 8009440:	6078      	str	r0, [r7, #4]
 8009442:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800944a:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800944c:	2300      	movs	r3, #0
 800944e:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8009450:	2300      	movs	r3, #0
 8009452:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8009454:	2300      	movs	r3, #0
 8009456:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	781b      	ldrb	r3, [r3, #0]
 800945c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009460:	2b00      	cmp	r3, #0
 8009462:	d039      	beq.n	80094d8 <USBD_CDC_Setup+0x9e>
 8009464:	2b20      	cmp	r3, #32
 8009466:	d17f      	bne.n	8009568 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	88db      	ldrh	r3, [r3, #6]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d029      	beq.n	80094c4 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	781b      	ldrb	r3, [r3, #0]
 8009474:	b25b      	sxtb	r3, r3
 8009476:	2b00      	cmp	r3, #0
 8009478:	da11      	bge.n	800949e <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009480:	689b      	ldr	r3, [r3, #8]
 8009482:	683a      	ldr	r2, [r7, #0]
 8009484:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8009486:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009488:	683a      	ldr	r2, [r7, #0]
 800948a:	88d2      	ldrh	r2, [r2, #6]
 800948c:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800948e:	6939      	ldr	r1, [r7, #16]
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	88db      	ldrh	r3, [r3, #6]
 8009494:	461a      	mov	r2, r3
 8009496:	6878      	ldr	r0, [r7, #4]
 8009498:	f001 fa23 	bl	800a8e2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800949c:	e06b      	b.n	8009576 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	785a      	ldrb	r2, [r3, #1]
 80094a2:	693b      	ldr	r3, [r7, #16]
 80094a4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	88db      	ldrh	r3, [r3, #6]
 80094ac:	b2da      	uxtb	r2, r3
 80094ae:	693b      	ldr	r3, [r7, #16]
 80094b0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80094b4:	6939      	ldr	r1, [r7, #16]
 80094b6:	683b      	ldr	r3, [r7, #0]
 80094b8:	88db      	ldrh	r3, [r3, #6]
 80094ba:	461a      	mov	r2, r3
 80094bc:	6878      	ldr	r0, [r7, #4]
 80094be:	f001 fa3e 	bl	800a93e <USBD_CtlPrepareRx>
      break;
 80094c2:	e058      	b.n	8009576 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80094ca:	689b      	ldr	r3, [r3, #8]
 80094cc:	683a      	ldr	r2, [r7, #0]
 80094ce:	7850      	ldrb	r0, [r2, #1]
 80094d0:	2200      	movs	r2, #0
 80094d2:	6839      	ldr	r1, [r7, #0]
 80094d4:	4798      	blx	r3
      break;
 80094d6:	e04e      	b.n	8009576 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	785b      	ldrb	r3, [r3, #1]
 80094dc:	2b0b      	cmp	r3, #11
 80094de:	d02e      	beq.n	800953e <USBD_CDC_Setup+0x104>
 80094e0:	2b0b      	cmp	r3, #11
 80094e2:	dc38      	bgt.n	8009556 <USBD_CDC_Setup+0x11c>
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d002      	beq.n	80094ee <USBD_CDC_Setup+0xb4>
 80094e8:	2b0a      	cmp	r3, #10
 80094ea:	d014      	beq.n	8009516 <USBD_CDC_Setup+0xdc>
 80094ec:	e033      	b.n	8009556 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094f4:	2b03      	cmp	r3, #3
 80094f6:	d107      	bne.n	8009508 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80094f8:	f107 030c 	add.w	r3, r7, #12
 80094fc:	2202      	movs	r2, #2
 80094fe:	4619      	mov	r1, r3
 8009500:	6878      	ldr	r0, [r7, #4]
 8009502:	f001 f9ee 	bl	800a8e2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009506:	e02e      	b.n	8009566 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8009508:	6839      	ldr	r1, [r7, #0]
 800950a:	6878      	ldr	r0, [r7, #4]
 800950c:	f001 f97f 	bl	800a80e <USBD_CtlError>
            ret = USBD_FAIL;
 8009510:	2302      	movs	r3, #2
 8009512:	75fb      	strb	r3, [r7, #23]
          break;
 8009514:	e027      	b.n	8009566 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800951c:	2b03      	cmp	r3, #3
 800951e:	d107      	bne.n	8009530 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8009520:	f107 030f 	add.w	r3, r7, #15
 8009524:	2201      	movs	r2, #1
 8009526:	4619      	mov	r1, r3
 8009528:	6878      	ldr	r0, [r7, #4]
 800952a:	f001 f9da 	bl	800a8e2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800952e:	e01a      	b.n	8009566 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8009530:	6839      	ldr	r1, [r7, #0]
 8009532:	6878      	ldr	r0, [r7, #4]
 8009534:	f001 f96b 	bl	800a80e <USBD_CtlError>
            ret = USBD_FAIL;
 8009538:	2302      	movs	r3, #2
 800953a:	75fb      	strb	r3, [r7, #23]
          break;
 800953c:	e013      	b.n	8009566 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009544:	2b03      	cmp	r3, #3
 8009546:	d00d      	beq.n	8009564 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8009548:	6839      	ldr	r1, [r7, #0]
 800954a:	6878      	ldr	r0, [r7, #4]
 800954c:	f001 f95f 	bl	800a80e <USBD_CtlError>
            ret = USBD_FAIL;
 8009550:	2302      	movs	r3, #2
 8009552:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009554:	e006      	b.n	8009564 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8009556:	6839      	ldr	r1, [r7, #0]
 8009558:	6878      	ldr	r0, [r7, #4]
 800955a:	f001 f958 	bl	800a80e <USBD_CtlError>
          ret = USBD_FAIL;
 800955e:	2302      	movs	r3, #2
 8009560:	75fb      	strb	r3, [r7, #23]
          break;
 8009562:	e000      	b.n	8009566 <USBD_CDC_Setup+0x12c>
          break;
 8009564:	bf00      	nop
      }
      break;
 8009566:	e006      	b.n	8009576 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009568:	6839      	ldr	r1, [r7, #0]
 800956a:	6878      	ldr	r0, [r7, #4]
 800956c:	f001 f94f 	bl	800a80e <USBD_CtlError>
      ret = USBD_FAIL;
 8009570:	2302      	movs	r3, #2
 8009572:	75fb      	strb	r3, [r7, #23]
      break;
 8009574:	bf00      	nop
  }

  return ret;
 8009576:	7dfb      	ldrb	r3, [r7, #23]
}
 8009578:	4618      	mov	r0, r3
 800957a:	3718      	adds	r7, #24
 800957c:	46bd      	mov	sp, r7
 800957e:	bd80      	pop	{r7, pc}

08009580 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b084      	sub	sp, #16
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
 8009588:	460b      	mov	r3, r1
 800958a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009592:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800959a:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d03a      	beq.n	800961c <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80095a6:	78fa      	ldrb	r2, [r7, #3]
 80095a8:	6879      	ldr	r1, [r7, #4]
 80095aa:	4613      	mov	r3, r2
 80095ac:	009b      	lsls	r3, r3, #2
 80095ae:	4413      	add	r3, r2
 80095b0:	009b      	lsls	r3, r3, #2
 80095b2:	440b      	add	r3, r1
 80095b4:	331c      	adds	r3, #28
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d029      	beq.n	8009610 <USBD_CDC_DataIn+0x90>
 80095bc:	78fa      	ldrb	r2, [r7, #3]
 80095be:	6879      	ldr	r1, [r7, #4]
 80095c0:	4613      	mov	r3, r2
 80095c2:	009b      	lsls	r3, r3, #2
 80095c4:	4413      	add	r3, r2
 80095c6:	009b      	lsls	r3, r3, #2
 80095c8:	440b      	add	r3, r1
 80095ca:	331c      	adds	r3, #28
 80095cc:	681a      	ldr	r2, [r3, #0]
 80095ce:	78f9      	ldrb	r1, [r7, #3]
 80095d0:	68b8      	ldr	r0, [r7, #8]
 80095d2:	460b      	mov	r3, r1
 80095d4:	009b      	lsls	r3, r3, #2
 80095d6:	440b      	add	r3, r1
 80095d8:	00db      	lsls	r3, r3, #3
 80095da:	4403      	add	r3, r0
 80095dc:	3338      	adds	r3, #56	; 0x38
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	fbb2 f1f3 	udiv	r1, r2, r3
 80095e4:	fb01 f303 	mul.w	r3, r1, r3
 80095e8:	1ad3      	subs	r3, r2, r3
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d110      	bne.n	8009610 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80095ee:	78fa      	ldrb	r2, [r7, #3]
 80095f0:	6879      	ldr	r1, [r7, #4]
 80095f2:	4613      	mov	r3, r2
 80095f4:	009b      	lsls	r3, r3, #2
 80095f6:	4413      	add	r3, r2
 80095f8:	009b      	lsls	r3, r3, #2
 80095fa:	440b      	add	r3, r1
 80095fc:	331c      	adds	r3, #28
 80095fe:	2200      	movs	r2, #0
 8009600:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009602:	78f9      	ldrb	r1, [r7, #3]
 8009604:	2300      	movs	r3, #0
 8009606:	2200      	movs	r2, #0
 8009608:	6878      	ldr	r0, [r7, #4]
 800960a:	f7f9 f90c 	bl	8002826 <USBD_LL_Transmit>
 800960e:	e003      	b.n	8009618 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	2200      	movs	r2, #0
 8009614:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8009618:	2300      	movs	r3, #0
 800961a:	e000      	b.n	800961e <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800961c:	2302      	movs	r3, #2
  }
}
 800961e:	4618      	mov	r0, r3
 8009620:	3710      	adds	r7, #16
 8009622:	46bd      	mov	sp, r7
 8009624:	bd80      	pop	{r7, pc}

08009626 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009626:	b580      	push	{r7, lr}
 8009628:	b084      	sub	sp, #16
 800962a:	af00      	add	r7, sp, #0
 800962c:	6078      	str	r0, [r7, #4]
 800962e:	460b      	mov	r3, r1
 8009630:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009638:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800963a:	78fb      	ldrb	r3, [r7, #3]
 800963c:	4619      	mov	r1, r3
 800963e:	6878      	ldr	r0, [r7, #4]
 8009640:	f7f9 f937 	bl	80028b2 <USBD_LL_GetRxDataSize>
 8009644:	4602      	mov	r2, r0
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009652:	2b00      	cmp	r3, #0
 8009654:	d00d      	beq.n	8009672 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800965c:	68db      	ldr	r3, [r3, #12]
 800965e:	68fa      	ldr	r2, [r7, #12]
 8009660:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009664:	68fa      	ldr	r2, [r7, #12]
 8009666:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800966a:	4611      	mov	r1, r2
 800966c:	4798      	blx	r3

    return USBD_OK;
 800966e:	2300      	movs	r3, #0
 8009670:	e000      	b.n	8009674 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8009672:	2302      	movs	r3, #2
  }
}
 8009674:	4618      	mov	r0, r3
 8009676:	3710      	adds	r7, #16
 8009678:	46bd      	mov	sp, r7
 800967a:	bd80      	pop	{r7, pc}

0800967c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b084      	sub	sp, #16
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800968a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009692:	2b00      	cmp	r3, #0
 8009694:	d015      	beq.n	80096c2 <USBD_CDC_EP0_RxReady+0x46>
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800969c:	2bff      	cmp	r3, #255	; 0xff
 800969e:	d010      	beq.n	80096c2 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80096a6:	689b      	ldr	r3, [r3, #8]
 80096a8:	68fa      	ldr	r2, [r7, #12]
 80096aa:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80096ae:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80096b0:	68fa      	ldr	r2, [r7, #12]
 80096b2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80096b6:	b292      	uxth	r2, r2
 80096b8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	22ff      	movs	r2, #255	; 0xff
 80096be:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80096c2:	2300      	movs	r3, #0
}
 80096c4:	4618      	mov	r0, r3
 80096c6:	3710      	adds	r7, #16
 80096c8:	46bd      	mov	sp, r7
 80096ca:	bd80      	pop	{r7, pc}

080096cc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80096cc:	b480      	push	{r7}
 80096ce:	b083      	sub	sp, #12
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2243      	movs	r2, #67	; 0x43
 80096d8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80096da:	4b03      	ldr	r3, [pc, #12]	; (80096e8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80096dc:	4618      	mov	r0, r3
 80096de:	370c      	adds	r7, #12
 80096e0:	46bd      	mov	sp, r7
 80096e2:	bc80      	pop	{r7}
 80096e4:	4770      	bx	lr
 80096e6:	bf00      	nop
 80096e8:	20000100 	.word	0x20000100

080096ec <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80096ec:	b480      	push	{r7}
 80096ee:	b083      	sub	sp, #12
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2243      	movs	r2, #67	; 0x43
 80096f8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80096fa:	4b03      	ldr	r3, [pc, #12]	; (8009708 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80096fc:	4618      	mov	r0, r3
 80096fe:	370c      	adds	r7, #12
 8009700:	46bd      	mov	sp, r7
 8009702:	bc80      	pop	{r7}
 8009704:	4770      	bx	lr
 8009706:	bf00      	nop
 8009708:	200000bc 	.word	0x200000bc

0800970c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800970c:	b480      	push	{r7}
 800970e:	b083      	sub	sp, #12
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2243      	movs	r2, #67	; 0x43
 8009718:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800971a:	4b03      	ldr	r3, [pc, #12]	; (8009728 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800971c:	4618      	mov	r0, r3
 800971e:	370c      	adds	r7, #12
 8009720:	46bd      	mov	sp, r7
 8009722:	bc80      	pop	{r7}
 8009724:	4770      	bx	lr
 8009726:	bf00      	nop
 8009728:	20000144 	.word	0x20000144

0800972c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800972c:	b480      	push	{r7}
 800972e:	b083      	sub	sp, #12
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	220a      	movs	r2, #10
 8009738:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800973a:	4b03      	ldr	r3, [pc, #12]	; (8009748 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800973c:	4618      	mov	r0, r3
 800973e:	370c      	adds	r7, #12
 8009740:	46bd      	mov	sp, r7
 8009742:	bc80      	pop	{r7}
 8009744:	4770      	bx	lr
 8009746:	bf00      	nop
 8009748:	20000078 	.word	0x20000078

0800974c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800974c:	b480      	push	{r7}
 800974e:	b085      	sub	sp, #20
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
 8009754:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8009756:	2302      	movs	r3, #2
 8009758:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d005      	beq.n	800976c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	683a      	ldr	r2, [r7, #0]
 8009764:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8009768:	2300      	movs	r3, #0
 800976a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800976c:	7bfb      	ldrb	r3, [r7, #15]
}
 800976e:	4618      	mov	r0, r3
 8009770:	3714      	adds	r7, #20
 8009772:	46bd      	mov	sp, r7
 8009774:	bc80      	pop	{r7}
 8009776:	4770      	bx	lr

08009778 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8009778:	b480      	push	{r7}
 800977a:	b087      	sub	sp, #28
 800977c:	af00      	add	r7, sp, #0
 800977e:	60f8      	str	r0, [r7, #12]
 8009780:	60b9      	str	r1, [r7, #8]
 8009782:	4613      	mov	r3, r2
 8009784:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800978c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800978e:	697b      	ldr	r3, [r7, #20]
 8009790:	68ba      	ldr	r2, [r7, #8]
 8009792:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009796:	88fa      	ldrh	r2, [r7, #6]
 8009798:	697b      	ldr	r3, [r7, #20]
 800979a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800979e:	2300      	movs	r3, #0
}
 80097a0:	4618      	mov	r0, r3
 80097a2:	371c      	adds	r7, #28
 80097a4:	46bd      	mov	sp, r7
 80097a6:	bc80      	pop	{r7}
 80097a8:	4770      	bx	lr

080097aa <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80097aa:	b480      	push	{r7}
 80097ac:	b085      	sub	sp, #20
 80097ae:	af00      	add	r7, sp, #0
 80097b0:	6078      	str	r0, [r7, #4]
 80097b2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097ba:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	683a      	ldr	r2, [r7, #0]
 80097c0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80097c4:	2300      	movs	r3, #0
}
 80097c6:	4618      	mov	r0, r3
 80097c8:	3714      	adds	r7, #20
 80097ca:	46bd      	mov	sp, r7
 80097cc:	bc80      	pop	{r7}
 80097ce:	4770      	bx	lr

080097d0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b084      	sub	sp, #16
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097de:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d01c      	beq.n	8009824 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d115      	bne.n	8009820 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	2201      	movs	r2, #1
 80097f8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009812:	b29b      	uxth	r3, r3
 8009814:	2181      	movs	r1, #129	; 0x81
 8009816:	6878      	ldr	r0, [r7, #4]
 8009818:	f7f9 f805 	bl	8002826 <USBD_LL_Transmit>

      return USBD_OK;
 800981c:	2300      	movs	r3, #0
 800981e:	e002      	b.n	8009826 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8009820:	2301      	movs	r3, #1
 8009822:	e000      	b.n	8009826 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8009824:	2302      	movs	r3, #2
  }
}
 8009826:	4618      	mov	r0, r3
 8009828:	3710      	adds	r7, #16
 800982a:	46bd      	mov	sp, r7
 800982c:	bd80      	pop	{r7, pc}

0800982e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800982e:	b580      	push	{r7, lr}
 8009830:	b084      	sub	sp, #16
 8009832:	af00      	add	r7, sp, #0
 8009834:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800983c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009844:	2b00      	cmp	r3, #0
 8009846:	d017      	beq.n	8009878 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	7c1b      	ldrb	r3, [r3, #16]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d109      	bne.n	8009864 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009856:	f44f 7300 	mov.w	r3, #512	; 0x200
 800985a:	2101      	movs	r1, #1
 800985c:	6878      	ldr	r0, [r7, #4]
 800985e:	f7f9 f805 	bl	800286c <USBD_LL_PrepareReceive>
 8009862:	e007      	b.n	8009874 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800986a:	2340      	movs	r3, #64	; 0x40
 800986c:	2101      	movs	r1, #1
 800986e:	6878      	ldr	r0, [r7, #4]
 8009870:	f7f8 fffc 	bl	800286c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8009874:	2300      	movs	r3, #0
 8009876:	e000      	b.n	800987a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8009878:	2302      	movs	r3, #2
  }
}
 800987a:	4618      	mov	r0, r3
 800987c:	3710      	adds	r7, #16
 800987e:	46bd      	mov	sp, r7
 8009880:	bd80      	pop	{r7, pc}
	...

08009884 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009884:	b580      	push	{r7, lr}
 8009886:	b084      	sub	sp, #16
 8009888:	af00      	add	r7, sp, #0
 800988a:	60f8      	str	r0, [r7, #12]
 800988c:	60b9      	str	r1, [r7, #8]
 800988e:	4613      	mov	r3, r2
 8009890:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d10a      	bne.n	80098ae <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 8009898:	4814      	ldr	r0, [pc, #80]	; (80098ec <USBD_Init+0x68>)
 800989a:	f001 fd39 	bl	800b310 <iprintf>
 800989e:	4814      	ldr	r0, [pc, #80]	; (80098f0 <USBD_Init+0x6c>)
 80098a0:	f001 fd36 	bl	800b310 <iprintf>
 80098a4:	200a      	movs	r0, #10
 80098a6:	f001 fd4b 	bl	800b340 <putchar>
#endif
    return USBD_FAIL;
 80098aa:	2302      	movs	r3, #2
 80098ac:	e01a      	b.n	80098e4 <USBD_Init+0x60>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d003      	beq.n	80098c0 <USBD_Init+0x3c>
  {
    pdev->pClass = NULL;
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	2200      	movs	r2, #0
 80098bc:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80098c0:	68bb      	ldr	r3, [r7, #8]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d003      	beq.n	80098ce <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	68ba      	ldr	r2, [r7, #8]
 80098ca:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	2201      	movs	r2, #1
 80098d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	79fa      	ldrb	r2, [r7, #7]
 80098da:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80098dc:	68f8      	ldr	r0, [r7, #12]
 80098de:	f7f8 fe5f 	bl	80025a0 <USBD_LL_Init>

  return USBD_OK;
 80098e2:	2300      	movs	r3, #0
}
 80098e4:	4618      	mov	r0, r3
 80098e6:	3710      	adds	r7, #16
 80098e8:	46bd      	mov	sp, r7
 80098ea:	bd80      	pop	{r7, pc}
 80098ec:	0800d990 	.word	0x0800d990
 80098f0:	0800d998 	.word	0x0800d998

080098f4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b084      	sub	sp, #16
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
 80098fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80098fe:	2300      	movs	r3, #0
 8009900:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d006      	beq.n	8009916 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	683a      	ldr	r2, [r7, #0]
 800990c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8009910:	2300      	movs	r3, #0
 8009912:	73fb      	strb	r3, [r7, #15]
 8009914:	e00a      	b.n	800992c <USBD_RegisterClass+0x38>
  }
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 8009916:	4808      	ldr	r0, [pc, #32]	; (8009938 <USBD_RegisterClass+0x44>)
 8009918:	f001 fcfa 	bl	800b310 <iprintf>
 800991c:	4807      	ldr	r0, [pc, #28]	; (800993c <USBD_RegisterClass+0x48>)
 800991e:	f001 fcf7 	bl	800b310 <iprintf>
 8009922:	200a      	movs	r0, #10
 8009924:	f001 fd0c 	bl	800b340 <putchar>
#endif
    status = USBD_FAIL;
 8009928:	2302      	movs	r3, #2
 800992a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800992c:	7bfb      	ldrb	r3, [r7, #15]
}
 800992e:	4618      	mov	r0, r3
 8009930:	3710      	adds	r7, #16
 8009932:	46bd      	mov	sp, r7
 8009934:	bd80      	pop	{r7, pc}
 8009936:	bf00      	nop
 8009938:	0800d990 	.word	0x0800d990
 800993c:	0800d9b0 	.word	0x0800d9b0

08009940 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009940:	b580      	push	{r7, lr}
 8009942:	b082      	sub	sp, #8
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8009948:	6878      	ldr	r0, [r7, #4]
 800994a:	f7f8 fe83 	bl	8002654 <USBD_LL_Start>

  return USBD_OK;
 800994e:	2300      	movs	r3, #0
}
 8009950:	4618      	mov	r0, r3
 8009952:	3708      	adds	r7, #8
 8009954:	46bd      	mov	sp, r7
 8009956:	bd80      	pop	{r7, pc}

08009958 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009958:	b480      	push	{r7}
 800995a:	b083      	sub	sp, #12
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009960:	2300      	movs	r3, #0
}
 8009962:	4618      	mov	r0, r3
 8009964:	370c      	adds	r7, #12
 8009966:	46bd      	mov	sp, r7
 8009968:	bc80      	pop	{r7}
 800996a:	4770      	bx	lr

0800996c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b084      	sub	sp, #16
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
 8009974:	460b      	mov	r3, r1
 8009976:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009978:	2302      	movs	r3, #2
 800997a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009982:	2b00      	cmp	r3, #0
 8009984:	d00c      	beq.n	80099a0 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	78fa      	ldrb	r2, [r7, #3]
 8009990:	4611      	mov	r1, r2
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	4798      	blx	r3
 8009996:	4603      	mov	r3, r0
 8009998:	2b00      	cmp	r3, #0
 800999a:	d101      	bne.n	80099a0 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800999c:	2300      	movs	r3, #0
 800999e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80099a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80099a2:	4618      	mov	r0, r3
 80099a4:	3710      	adds	r7, #16
 80099a6:	46bd      	mov	sp, r7
 80099a8:	bd80      	pop	{r7, pc}

080099aa <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80099aa:	b580      	push	{r7, lr}
 80099ac:	b082      	sub	sp, #8
 80099ae:	af00      	add	r7, sp, #0
 80099b0:	6078      	str	r0, [r7, #4]
 80099b2:	460b      	mov	r3, r1
 80099b4:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099bc:	685b      	ldr	r3, [r3, #4]
 80099be:	78fa      	ldrb	r2, [r7, #3]
 80099c0:	4611      	mov	r1, r2
 80099c2:	6878      	ldr	r0, [r7, #4]
 80099c4:	4798      	blx	r3

  return USBD_OK;
 80099c6:	2300      	movs	r3, #0
}
 80099c8:	4618      	mov	r0, r3
 80099ca:	3708      	adds	r7, #8
 80099cc:	46bd      	mov	sp, r7
 80099ce:	bd80      	pop	{r7, pc}

080099d0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b082      	sub	sp, #8
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
 80099d8:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80099e0:	6839      	ldr	r1, [r7, #0]
 80099e2:	4618      	mov	r0, r3
 80099e4:	f000 fed7 	bl	800a796 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	2201      	movs	r2, #1
 80099ec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80099f6:	461a      	mov	r2, r3
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009a04:	f003 031f 	and.w	r3, r3, #31
 8009a08:	2b02      	cmp	r3, #2
 8009a0a:	d016      	beq.n	8009a3a <USBD_LL_SetupStage+0x6a>
 8009a0c:	2b02      	cmp	r3, #2
 8009a0e:	d81c      	bhi.n	8009a4a <USBD_LL_SetupStage+0x7a>
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d002      	beq.n	8009a1a <USBD_LL_SetupStage+0x4a>
 8009a14:	2b01      	cmp	r3, #1
 8009a16:	d008      	beq.n	8009a2a <USBD_LL_SetupStage+0x5a>
 8009a18:	e017      	b.n	8009a4a <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009a20:	4619      	mov	r1, r3
 8009a22:	6878      	ldr	r0, [r7, #4]
 8009a24:	f000 f9ca 	bl	8009dbc <USBD_StdDevReq>
      break;
 8009a28:	e01a      	b.n	8009a60 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009a30:	4619      	mov	r1, r3
 8009a32:	6878      	ldr	r0, [r7, #4]
 8009a34:	f000 fa2c 	bl	8009e90 <USBD_StdItfReq>
      break;
 8009a38:	e012      	b.n	8009a60 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009a40:	4619      	mov	r1, r3
 8009a42:	6878      	ldr	r0, [r7, #4]
 8009a44:	f000 fa6c 	bl	8009f20 <USBD_StdEPReq>
      break;
 8009a48:	e00a      	b.n	8009a60 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009a50:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009a54:	b2db      	uxtb	r3, r3
 8009a56:	4619      	mov	r1, r3
 8009a58:	6878      	ldr	r0, [r7, #4]
 8009a5a:	f7f8 fe5b 	bl	8002714 <USBD_LL_StallEP>
      break;
 8009a5e:	bf00      	nop
  }

  return USBD_OK;
 8009a60:	2300      	movs	r3, #0
}
 8009a62:	4618      	mov	r0, r3
 8009a64:	3708      	adds	r7, #8
 8009a66:	46bd      	mov	sp, r7
 8009a68:	bd80      	pop	{r7, pc}

08009a6a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009a6a:	b580      	push	{r7, lr}
 8009a6c:	b086      	sub	sp, #24
 8009a6e:	af00      	add	r7, sp, #0
 8009a70:	60f8      	str	r0, [r7, #12]
 8009a72:	460b      	mov	r3, r1
 8009a74:	607a      	str	r2, [r7, #4]
 8009a76:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009a78:	7afb      	ldrb	r3, [r7, #11]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d14b      	bne.n	8009b16 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009a84:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009a8c:	2b03      	cmp	r3, #3
 8009a8e:	d134      	bne.n	8009afa <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8009a90:	697b      	ldr	r3, [r7, #20]
 8009a92:	68da      	ldr	r2, [r3, #12]
 8009a94:	697b      	ldr	r3, [r7, #20]
 8009a96:	691b      	ldr	r3, [r3, #16]
 8009a98:	429a      	cmp	r2, r3
 8009a9a:	d919      	bls.n	8009ad0 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8009a9c:	697b      	ldr	r3, [r7, #20]
 8009a9e:	68da      	ldr	r2, [r3, #12]
 8009aa0:	697b      	ldr	r3, [r7, #20]
 8009aa2:	691b      	ldr	r3, [r3, #16]
 8009aa4:	1ad2      	subs	r2, r2, r3
 8009aa6:	697b      	ldr	r3, [r7, #20]
 8009aa8:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009aaa:	697b      	ldr	r3, [r7, #20]
 8009aac:	68da      	ldr	r2, [r3, #12]
 8009aae:	697b      	ldr	r3, [r7, #20]
 8009ab0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009ab2:	429a      	cmp	r2, r3
 8009ab4:	d203      	bcs.n	8009abe <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009ab6:	697b      	ldr	r3, [r7, #20]
 8009ab8:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8009aba:	b29b      	uxth	r3, r3
 8009abc:	e002      	b.n	8009ac4 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009abe:	697b      	ldr	r3, [r7, #20]
 8009ac0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009ac2:	b29b      	uxth	r3, r3
 8009ac4:	461a      	mov	r2, r3
 8009ac6:	6879      	ldr	r1, [r7, #4]
 8009ac8:	68f8      	ldr	r0, [r7, #12]
 8009aca:	f000 ff56 	bl	800a97a <USBD_CtlContinueRx>
 8009ace:	e038      	b.n	8009b42 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ad6:	691b      	ldr	r3, [r3, #16]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d00a      	beq.n	8009af2 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009ae2:	2b03      	cmp	r3, #3
 8009ae4:	d105      	bne.n	8009af2 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009aec:	691b      	ldr	r3, [r3, #16]
 8009aee:	68f8      	ldr	r0, [r7, #12]
 8009af0:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8009af2:	68f8      	ldr	r0, [r7, #12]
 8009af4:	f000 ff53 	bl	800a99e <USBD_CtlSendStatus>
 8009af8:	e023      	b.n	8009b42 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009b00:	2b05      	cmp	r3, #5
 8009b02:	d11e      	bne.n	8009b42 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	2200      	movs	r2, #0
 8009b08:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8009b0c:	2100      	movs	r1, #0
 8009b0e:	68f8      	ldr	r0, [r7, #12]
 8009b10:	f7f8 fe00 	bl	8002714 <USBD_LL_StallEP>
 8009b14:	e015      	b.n	8009b42 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b1c:	699b      	ldr	r3, [r3, #24]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d00d      	beq.n	8009b3e <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8009b28:	2b03      	cmp	r3, #3
 8009b2a:	d108      	bne.n	8009b3e <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b32:	699b      	ldr	r3, [r3, #24]
 8009b34:	7afa      	ldrb	r2, [r7, #11]
 8009b36:	4611      	mov	r1, r2
 8009b38:	68f8      	ldr	r0, [r7, #12]
 8009b3a:	4798      	blx	r3
 8009b3c:	e001      	b.n	8009b42 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009b3e:	2302      	movs	r3, #2
 8009b40:	e000      	b.n	8009b44 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8009b42:	2300      	movs	r3, #0
}
 8009b44:	4618      	mov	r0, r3
 8009b46:	3718      	adds	r7, #24
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	bd80      	pop	{r7, pc}

08009b4c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b086      	sub	sp, #24
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	60f8      	str	r0, [r7, #12]
 8009b54:	460b      	mov	r3, r1
 8009b56:	607a      	str	r2, [r7, #4]
 8009b58:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009b5a:	7afb      	ldrb	r3, [r7, #11]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d17f      	bne.n	8009c60 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	3314      	adds	r3, #20
 8009b64:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009b6c:	2b02      	cmp	r3, #2
 8009b6e:	d15c      	bne.n	8009c2a <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8009b70:	697b      	ldr	r3, [r7, #20]
 8009b72:	68da      	ldr	r2, [r3, #12]
 8009b74:	697b      	ldr	r3, [r7, #20]
 8009b76:	691b      	ldr	r3, [r3, #16]
 8009b78:	429a      	cmp	r2, r3
 8009b7a:	d915      	bls.n	8009ba8 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8009b7c:	697b      	ldr	r3, [r7, #20]
 8009b7e:	68da      	ldr	r2, [r3, #12]
 8009b80:	697b      	ldr	r3, [r7, #20]
 8009b82:	691b      	ldr	r3, [r3, #16]
 8009b84:	1ad2      	subs	r2, r2, r3
 8009b86:	697b      	ldr	r3, [r7, #20]
 8009b88:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8009b8a:	697b      	ldr	r3, [r7, #20]
 8009b8c:	68db      	ldr	r3, [r3, #12]
 8009b8e:	b29b      	uxth	r3, r3
 8009b90:	461a      	mov	r2, r3
 8009b92:	6879      	ldr	r1, [r7, #4]
 8009b94:	68f8      	ldr	r0, [r7, #12]
 8009b96:	f000 fec0 	bl	800a91a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	2100      	movs	r1, #0
 8009ba0:	68f8      	ldr	r0, [r7, #12]
 8009ba2:	f7f8 fe63 	bl	800286c <USBD_LL_PrepareReceive>
 8009ba6:	e04e      	b.n	8009c46 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009ba8:	697b      	ldr	r3, [r7, #20]
 8009baa:	689b      	ldr	r3, [r3, #8]
 8009bac:	697a      	ldr	r2, [r7, #20]
 8009bae:	6912      	ldr	r2, [r2, #16]
 8009bb0:	fbb3 f1f2 	udiv	r1, r3, r2
 8009bb4:	fb01 f202 	mul.w	r2, r1, r2
 8009bb8:	1a9b      	subs	r3, r3, r2
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d11c      	bne.n	8009bf8 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8009bbe:	697b      	ldr	r3, [r7, #20]
 8009bc0:	689a      	ldr	r2, [r3, #8]
 8009bc2:	697b      	ldr	r3, [r7, #20]
 8009bc4:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009bc6:	429a      	cmp	r2, r3
 8009bc8:	d316      	bcc.n	8009bf8 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8009bca:	697b      	ldr	r3, [r7, #20]
 8009bcc:	689a      	ldr	r2, [r3, #8]
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009bd4:	429a      	cmp	r2, r3
 8009bd6:	d20f      	bcs.n	8009bf8 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009bd8:	2200      	movs	r2, #0
 8009bda:	2100      	movs	r1, #0
 8009bdc:	68f8      	ldr	r0, [r7, #12]
 8009bde:	f000 fe9c 	bl	800a91a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	2200      	movs	r2, #0
 8009be6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009bea:	2300      	movs	r3, #0
 8009bec:	2200      	movs	r2, #0
 8009bee:	2100      	movs	r1, #0
 8009bf0:	68f8      	ldr	r0, [r7, #12]
 8009bf2:	f7f8 fe3b 	bl	800286c <USBD_LL_PrepareReceive>
 8009bf6:	e026      	b.n	8009c46 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009bfe:	68db      	ldr	r3, [r3, #12]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d00a      	beq.n	8009c1a <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009c0a:	2b03      	cmp	r3, #3
 8009c0c:	d105      	bne.n	8009c1a <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c14:	68db      	ldr	r3, [r3, #12]
 8009c16:	68f8      	ldr	r0, [r7, #12]
 8009c18:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8009c1a:	2180      	movs	r1, #128	; 0x80
 8009c1c:	68f8      	ldr	r0, [r7, #12]
 8009c1e:	f7f8 fd79 	bl	8002714 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8009c22:	68f8      	ldr	r0, [r7, #12]
 8009c24:	f000 fece 	bl	800a9c4 <USBD_CtlReceiveStatus>
 8009c28:	e00d      	b.n	8009c46 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009c30:	2b04      	cmp	r3, #4
 8009c32:	d004      	beq.n	8009c3e <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d103      	bne.n	8009c46 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8009c3e:	2180      	movs	r1, #128	; 0x80
 8009c40:	68f8      	ldr	r0, [r7, #12]
 8009c42:	f7f8 fd67 	bl	8002714 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009c4c:	2b01      	cmp	r3, #1
 8009c4e:	d11d      	bne.n	8009c8c <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8009c50:	68f8      	ldr	r0, [r7, #12]
 8009c52:	f7ff fe81 	bl	8009958 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	2200      	movs	r2, #0
 8009c5a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009c5e:	e015      	b.n	8009c8c <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c66:	695b      	ldr	r3, [r3, #20]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d00d      	beq.n	8009c88 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009c72:	2b03      	cmp	r3, #3
 8009c74:	d108      	bne.n	8009c88 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c7c:	695b      	ldr	r3, [r3, #20]
 8009c7e:	7afa      	ldrb	r2, [r7, #11]
 8009c80:	4611      	mov	r1, r2
 8009c82:	68f8      	ldr	r0, [r7, #12]
 8009c84:	4798      	blx	r3
 8009c86:	e001      	b.n	8009c8c <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009c88:	2302      	movs	r3, #2
 8009c8a:	e000      	b.n	8009c8e <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8009c8c:	2300      	movs	r3, #0
}
 8009c8e:	4618      	mov	r0, r3
 8009c90:	3718      	adds	r7, #24
 8009c92:	46bd      	mov	sp, r7
 8009c94:	bd80      	pop	{r7, pc}

08009c96 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009c96:	b580      	push	{r7, lr}
 8009c98:	b082      	sub	sp, #8
 8009c9a:	af00      	add	r7, sp, #0
 8009c9c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009c9e:	2340      	movs	r3, #64	; 0x40
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	2100      	movs	r1, #0
 8009ca4:	6878      	ldr	r0, [r7, #4]
 8009ca6:	f7f8 fcf0 	bl	800268a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	2201      	movs	r2, #1
 8009cae:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	2240      	movs	r2, #64	; 0x40
 8009cb6:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009cba:	2340      	movs	r3, #64	; 0x40
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	2180      	movs	r1, #128	; 0x80
 8009cc0:	6878      	ldr	r0, [r7, #4]
 8009cc2:	f7f8 fce2 	bl	800268a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	2201      	movs	r2, #1
 8009cca:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	2240      	movs	r2, #64	; 0x40
 8009cd0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	2201      	movs	r2, #1
 8009cd6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	2200      	movs	r2, #0
 8009cde:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2200      	movs	r2, #0
 8009cec:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d009      	beq.n	8009d0e <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d00:	685b      	ldr	r3, [r3, #4]
 8009d02:	687a      	ldr	r2, [r7, #4]
 8009d04:	6852      	ldr	r2, [r2, #4]
 8009d06:	b2d2      	uxtb	r2, r2
 8009d08:	4611      	mov	r1, r2
 8009d0a:	6878      	ldr	r0, [r7, #4]
 8009d0c:	4798      	blx	r3
  }

  return USBD_OK;
 8009d0e:	2300      	movs	r3, #0
}
 8009d10:	4618      	mov	r0, r3
 8009d12:	3708      	adds	r7, #8
 8009d14:	46bd      	mov	sp, r7
 8009d16:	bd80      	pop	{r7, pc}

08009d18 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009d18:	b480      	push	{r7}
 8009d1a:	b083      	sub	sp, #12
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
 8009d20:	460b      	mov	r3, r1
 8009d22:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	78fa      	ldrb	r2, [r7, #3]
 8009d28:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009d2a:	2300      	movs	r3, #0
}
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	370c      	adds	r7, #12
 8009d30:	46bd      	mov	sp, r7
 8009d32:	bc80      	pop	{r7}
 8009d34:	4770      	bx	lr

08009d36 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009d36:	b480      	push	{r7}
 8009d38:	b083      	sub	sp, #12
 8009d3a:	af00      	add	r7, sp, #0
 8009d3c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	2204      	movs	r2, #4
 8009d4e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009d52:	2300      	movs	r3, #0
}
 8009d54:	4618      	mov	r0, r3
 8009d56:	370c      	adds	r7, #12
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	bc80      	pop	{r7}
 8009d5c:	4770      	bx	lr

08009d5e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009d5e:	b480      	push	{r7}
 8009d60:	b083      	sub	sp, #12
 8009d62:	af00      	add	r7, sp, #0
 8009d64:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d6c:	2b04      	cmp	r3, #4
 8009d6e:	d105      	bne.n	8009d7c <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009d7c:	2300      	movs	r3, #0
}
 8009d7e:	4618      	mov	r0, r3
 8009d80:	370c      	adds	r7, #12
 8009d82:	46bd      	mov	sp, r7
 8009d84:	bc80      	pop	{r7}
 8009d86:	4770      	bx	lr

08009d88 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b082      	sub	sp, #8
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d96:	2b03      	cmp	r3, #3
 8009d98:	d10b      	bne.n	8009db2 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009da0:	69db      	ldr	r3, [r3, #28]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d005      	beq.n	8009db2 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009dac:	69db      	ldr	r3, [r3, #28]
 8009dae:	6878      	ldr	r0, [r7, #4]
 8009db0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009db2:	2300      	movs	r3, #0
}
 8009db4:	4618      	mov	r0, r3
 8009db6:	3708      	adds	r7, #8
 8009db8:	46bd      	mov	sp, r7
 8009dba:	bd80      	pop	{r7, pc}

08009dbc <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b084      	sub	sp, #16
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	6078      	str	r0, [r7, #4]
 8009dc4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	781b      	ldrb	r3, [r3, #0]
 8009dce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009dd2:	2b40      	cmp	r3, #64	; 0x40
 8009dd4:	d005      	beq.n	8009de2 <USBD_StdDevReq+0x26>
 8009dd6:	2b40      	cmp	r3, #64	; 0x40
 8009dd8:	d84f      	bhi.n	8009e7a <USBD_StdDevReq+0xbe>
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d009      	beq.n	8009df2 <USBD_StdDevReq+0x36>
 8009dde:	2b20      	cmp	r3, #32
 8009de0:	d14b      	bne.n	8009e7a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009de8:	689b      	ldr	r3, [r3, #8]
 8009dea:	6839      	ldr	r1, [r7, #0]
 8009dec:	6878      	ldr	r0, [r7, #4]
 8009dee:	4798      	blx	r3
      break;
 8009df0:	e048      	b.n	8009e84 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009df2:	683b      	ldr	r3, [r7, #0]
 8009df4:	785b      	ldrb	r3, [r3, #1]
 8009df6:	2b09      	cmp	r3, #9
 8009df8:	d839      	bhi.n	8009e6e <USBD_StdDevReq+0xb2>
 8009dfa:	a201      	add	r2, pc, #4	; (adr r2, 8009e00 <USBD_StdDevReq+0x44>)
 8009dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e00:	08009e51 	.word	0x08009e51
 8009e04:	08009e65 	.word	0x08009e65
 8009e08:	08009e6f 	.word	0x08009e6f
 8009e0c:	08009e5b 	.word	0x08009e5b
 8009e10:	08009e6f 	.word	0x08009e6f
 8009e14:	08009e33 	.word	0x08009e33
 8009e18:	08009e29 	.word	0x08009e29
 8009e1c:	08009e6f 	.word	0x08009e6f
 8009e20:	08009e47 	.word	0x08009e47
 8009e24:	08009e3d 	.word	0x08009e3d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009e28:	6839      	ldr	r1, [r7, #0]
 8009e2a:	6878      	ldr	r0, [r7, #4]
 8009e2c:	f000 f9dc 	bl	800a1e8 <USBD_GetDescriptor>
          break;
 8009e30:	e022      	b.n	8009e78 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009e32:	6839      	ldr	r1, [r7, #0]
 8009e34:	6878      	ldr	r0, [r7, #4]
 8009e36:	f000 fb3f 	bl	800a4b8 <USBD_SetAddress>
          break;
 8009e3a:	e01d      	b.n	8009e78 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8009e3c:	6839      	ldr	r1, [r7, #0]
 8009e3e:	6878      	ldr	r0, [r7, #4]
 8009e40:	f000 fb7e 	bl	800a540 <USBD_SetConfig>
          break;
 8009e44:	e018      	b.n	8009e78 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009e46:	6839      	ldr	r1, [r7, #0]
 8009e48:	6878      	ldr	r0, [r7, #4]
 8009e4a:	f000 fc07 	bl	800a65c <USBD_GetConfig>
          break;
 8009e4e:	e013      	b.n	8009e78 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009e50:	6839      	ldr	r1, [r7, #0]
 8009e52:	6878      	ldr	r0, [r7, #4]
 8009e54:	f000 fc37 	bl	800a6c6 <USBD_GetStatus>
          break;
 8009e58:	e00e      	b.n	8009e78 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009e5a:	6839      	ldr	r1, [r7, #0]
 8009e5c:	6878      	ldr	r0, [r7, #4]
 8009e5e:	f000 fc65 	bl	800a72c <USBD_SetFeature>
          break;
 8009e62:	e009      	b.n	8009e78 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009e64:	6839      	ldr	r1, [r7, #0]
 8009e66:	6878      	ldr	r0, [r7, #4]
 8009e68:	f000 fc74 	bl	800a754 <USBD_ClrFeature>
          break;
 8009e6c:	e004      	b.n	8009e78 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8009e6e:	6839      	ldr	r1, [r7, #0]
 8009e70:	6878      	ldr	r0, [r7, #4]
 8009e72:	f000 fccc 	bl	800a80e <USBD_CtlError>
          break;
 8009e76:	bf00      	nop
      }
      break;
 8009e78:	e004      	b.n	8009e84 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8009e7a:	6839      	ldr	r1, [r7, #0]
 8009e7c:	6878      	ldr	r0, [r7, #4]
 8009e7e:	f000 fcc6 	bl	800a80e <USBD_CtlError>
      break;
 8009e82:	bf00      	nop
  }

  return ret;
 8009e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e86:	4618      	mov	r0, r3
 8009e88:	3710      	adds	r7, #16
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	bd80      	pop	{r7, pc}
 8009e8e:	bf00      	nop

08009e90 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b084      	sub	sp, #16
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	6078      	str	r0, [r7, #4]
 8009e98:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	781b      	ldrb	r3, [r3, #0]
 8009ea2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009ea6:	2b40      	cmp	r3, #64	; 0x40
 8009ea8:	d005      	beq.n	8009eb6 <USBD_StdItfReq+0x26>
 8009eaa:	2b40      	cmp	r3, #64	; 0x40
 8009eac:	d82e      	bhi.n	8009f0c <USBD_StdItfReq+0x7c>
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d001      	beq.n	8009eb6 <USBD_StdItfReq+0x26>
 8009eb2:	2b20      	cmp	r3, #32
 8009eb4:	d12a      	bne.n	8009f0c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ebc:	3b01      	subs	r3, #1
 8009ebe:	2b02      	cmp	r3, #2
 8009ec0:	d81d      	bhi.n	8009efe <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009ec2:	683b      	ldr	r3, [r7, #0]
 8009ec4:	889b      	ldrh	r3, [r3, #4]
 8009ec6:	b2db      	uxtb	r3, r3
 8009ec8:	2b01      	cmp	r3, #1
 8009eca:	d813      	bhi.n	8009ef4 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ed2:	689b      	ldr	r3, [r3, #8]
 8009ed4:	6839      	ldr	r1, [r7, #0]
 8009ed6:	6878      	ldr	r0, [r7, #4]
 8009ed8:	4798      	blx	r3
 8009eda:	4603      	mov	r3, r0
 8009edc:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009ede:	683b      	ldr	r3, [r7, #0]
 8009ee0:	88db      	ldrh	r3, [r3, #6]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d110      	bne.n	8009f08 <USBD_StdItfReq+0x78>
 8009ee6:	7bfb      	ldrb	r3, [r7, #15]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d10d      	bne.n	8009f08 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8009eec:	6878      	ldr	r0, [r7, #4]
 8009eee:	f000 fd56 	bl	800a99e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009ef2:	e009      	b.n	8009f08 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8009ef4:	6839      	ldr	r1, [r7, #0]
 8009ef6:	6878      	ldr	r0, [r7, #4]
 8009ef8:	f000 fc89 	bl	800a80e <USBD_CtlError>
          break;
 8009efc:	e004      	b.n	8009f08 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8009efe:	6839      	ldr	r1, [r7, #0]
 8009f00:	6878      	ldr	r0, [r7, #4]
 8009f02:	f000 fc84 	bl	800a80e <USBD_CtlError>
          break;
 8009f06:	e000      	b.n	8009f0a <USBD_StdItfReq+0x7a>
          break;
 8009f08:	bf00      	nop
      }
      break;
 8009f0a:	e004      	b.n	8009f16 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8009f0c:	6839      	ldr	r1, [r7, #0]
 8009f0e:	6878      	ldr	r0, [r7, #4]
 8009f10:	f000 fc7d 	bl	800a80e <USBD_CtlError>
      break;
 8009f14:	bf00      	nop
  }

  return USBD_OK;
 8009f16:	2300      	movs	r3, #0
}
 8009f18:	4618      	mov	r0, r3
 8009f1a:	3710      	adds	r7, #16
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	bd80      	pop	{r7, pc}

08009f20 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b084      	sub	sp, #16
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
 8009f28:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8009f2e:	683b      	ldr	r3, [r7, #0]
 8009f30:	889b      	ldrh	r3, [r3, #4]
 8009f32:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009f34:	683b      	ldr	r3, [r7, #0]
 8009f36:	781b      	ldrb	r3, [r3, #0]
 8009f38:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009f3c:	2b40      	cmp	r3, #64	; 0x40
 8009f3e:	d007      	beq.n	8009f50 <USBD_StdEPReq+0x30>
 8009f40:	2b40      	cmp	r3, #64	; 0x40
 8009f42:	f200 8146 	bhi.w	800a1d2 <USBD_StdEPReq+0x2b2>
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d00a      	beq.n	8009f60 <USBD_StdEPReq+0x40>
 8009f4a:	2b20      	cmp	r3, #32
 8009f4c:	f040 8141 	bne.w	800a1d2 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f56:	689b      	ldr	r3, [r3, #8]
 8009f58:	6839      	ldr	r1, [r7, #0]
 8009f5a:	6878      	ldr	r0, [r7, #4]
 8009f5c:	4798      	blx	r3
      break;
 8009f5e:	e13d      	b.n	800a1dc <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8009f60:	683b      	ldr	r3, [r7, #0]
 8009f62:	781b      	ldrb	r3, [r3, #0]
 8009f64:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009f68:	2b20      	cmp	r3, #32
 8009f6a:	d10a      	bne.n	8009f82 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f72:	689b      	ldr	r3, [r3, #8]
 8009f74:	6839      	ldr	r1, [r7, #0]
 8009f76:	6878      	ldr	r0, [r7, #4]
 8009f78:	4798      	blx	r3
 8009f7a:	4603      	mov	r3, r0
 8009f7c:	73fb      	strb	r3, [r7, #15]

        return ret;
 8009f7e:	7bfb      	ldrb	r3, [r7, #15]
 8009f80:	e12d      	b.n	800a1de <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8009f82:	683b      	ldr	r3, [r7, #0]
 8009f84:	785b      	ldrb	r3, [r3, #1]
 8009f86:	2b03      	cmp	r3, #3
 8009f88:	d007      	beq.n	8009f9a <USBD_StdEPReq+0x7a>
 8009f8a:	2b03      	cmp	r3, #3
 8009f8c:	f300 811b 	bgt.w	800a1c6 <USBD_StdEPReq+0x2a6>
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d072      	beq.n	800a07a <USBD_StdEPReq+0x15a>
 8009f94:	2b01      	cmp	r3, #1
 8009f96:	d03a      	beq.n	800a00e <USBD_StdEPReq+0xee>
 8009f98:	e115      	b.n	800a1c6 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009fa0:	2b02      	cmp	r3, #2
 8009fa2:	d002      	beq.n	8009faa <USBD_StdEPReq+0x8a>
 8009fa4:	2b03      	cmp	r3, #3
 8009fa6:	d015      	beq.n	8009fd4 <USBD_StdEPReq+0xb4>
 8009fa8:	e02b      	b.n	800a002 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009faa:	7bbb      	ldrb	r3, [r7, #14]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d00c      	beq.n	8009fca <USBD_StdEPReq+0xaa>
 8009fb0:	7bbb      	ldrb	r3, [r7, #14]
 8009fb2:	2b80      	cmp	r3, #128	; 0x80
 8009fb4:	d009      	beq.n	8009fca <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009fb6:	7bbb      	ldrb	r3, [r7, #14]
 8009fb8:	4619      	mov	r1, r3
 8009fba:	6878      	ldr	r0, [r7, #4]
 8009fbc:	f7f8 fbaa 	bl	8002714 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009fc0:	2180      	movs	r1, #128	; 0x80
 8009fc2:	6878      	ldr	r0, [r7, #4]
 8009fc4:	f7f8 fba6 	bl	8002714 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009fc8:	e020      	b.n	800a00c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8009fca:	6839      	ldr	r1, [r7, #0]
 8009fcc:	6878      	ldr	r0, [r7, #4]
 8009fce:	f000 fc1e 	bl	800a80e <USBD_CtlError>
              break;
 8009fd2:	e01b      	b.n	800a00c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009fd4:	683b      	ldr	r3, [r7, #0]
 8009fd6:	885b      	ldrh	r3, [r3, #2]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d10e      	bne.n	8009ffa <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8009fdc:	7bbb      	ldrb	r3, [r7, #14]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d00b      	beq.n	8009ffa <USBD_StdEPReq+0xda>
 8009fe2:	7bbb      	ldrb	r3, [r7, #14]
 8009fe4:	2b80      	cmp	r3, #128	; 0x80
 8009fe6:	d008      	beq.n	8009ffa <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009fe8:	683b      	ldr	r3, [r7, #0]
 8009fea:	88db      	ldrh	r3, [r3, #6]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d104      	bne.n	8009ffa <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009ff0:	7bbb      	ldrb	r3, [r7, #14]
 8009ff2:	4619      	mov	r1, r3
 8009ff4:	6878      	ldr	r0, [r7, #4]
 8009ff6:	f7f8 fb8d 	bl	8002714 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8009ffa:	6878      	ldr	r0, [r7, #4]
 8009ffc:	f000 fccf 	bl	800a99e <USBD_CtlSendStatus>

              break;
 800a000:	e004      	b.n	800a00c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800a002:	6839      	ldr	r1, [r7, #0]
 800a004:	6878      	ldr	r0, [r7, #4]
 800a006:	f000 fc02 	bl	800a80e <USBD_CtlError>
              break;
 800a00a:	bf00      	nop
          }
          break;
 800a00c:	e0e0      	b.n	800a1d0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a014:	2b02      	cmp	r3, #2
 800a016:	d002      	beq.n	800a01e <USBD_StdEPReq+0xfe>
 800a018:	2b03      	cmp	r3, #3
 800a01a:	d015      	beq.n	800a048 <USBD_StdEPReq+0x128>
 800a01c:	e026      	b.n	800a06c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a01e:	7bbb      	ldrb	r3, [r7, #14]
 800a020:	2b00      	cmp	r3, #0
 800a022:	d00c      	beq.n	800a03e <USBD_StdEPReq+0x11e>
 800a024:	7bbb      	ldrb	r3, [r7, #14]
 800a026:	2b80      	cmp	r3, #128	; 0x80
 800a028:	d009      	beq.n	800a03e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a02a:	7bbb      	ldrb	r3, [r7, #14]
 800a02c:	4619      	mov	r1, r3
 800a02e:	6878      	ldr	r0, [r7, #4]
 800a030:	f7f8 fb70 	bl	8002714 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a034:	2180      	movs	r1, #128	; 0x80
 800a036:	6878      	ldr	r0, [r7, #4]
 800a038:	f7f8 fb6c 	bl	8002714 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a03c:	e01c      	b.n	800a078 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800a03e:	6839      	ldr	r1, [r7, #0]
 800a040:	6878      	ldr	r0, [r7, #4]
 800a042:	f000 fbe4 	bl	800a80e <USBD_CtlError>
              break;
 800a046:	e017      	b.n	800a078 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	885b      	ldrh	r3, [r3, #2]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d112      	bne.n	800a076 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a050:	7bbb      	ldrb	r3, [r7, #14]
 800a052:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a056:	2b00      	cmp	r3, #0
 800a058:	d004      	beq.n	800a064 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800a05a:	7bbb      	ldrb	r3, [r7, #14]
 800a05c:	4619      	mov	r1, r3
 800a05e:	6878      	ldr	r0, [r7, #4]
 800a060:	f7f8 fb77 	bl	8002752 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800a064:	6878      	ldr	r0, [r7, #4]
 800a066:	f000 fc9a 	bl	800a99e <USBD_CtlSendStatus>
              }
              break;
 800a06a:	e004      	b.n	800a076 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800a06c:	6839      	ldr	r1, [r7, #0]
 800a06e:	6878      	ldr	r0, [r7, #4]
 800a070:	f000 fbcd 	bl	800a80e <USBD_CtlError>
              break;
 800a074:	e000      	b.n	800a078 <USBD_StdEPReq+0x158>
              break;
 800a076:	bf00      	nop
          }
          break;
 800a078:	e0aa      	b.n	800a1d0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a080:	2b02      	cmp	r3, #2
 800a082:	d002      	beq.n	800a08a <USBD_StdEPReq+0x16a>
 800a084:	2b03      	cmp	r3, #3
 800a086:	d032      	beq.n	800a0ee <USBD_StdEPReq+0x1ce>
 800a088:	e097      	b.n	800a1ba <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a08a:	7bbb      	ldrb	r3, [r7, #14]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d007      	beq.n	800a0a0 <USBD_StdEPReq+0x180>
 800a090:	7bbb      	ldrb	r3, [r7, #14]
 800a092:	2b80      	cmp	r3, #128	; 0x80
 800a094:	d004      	beq.n	800a0a0 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800a096:	6839      	ldr	r1, [r7, #0]
 800a098:	6878      	ldr	r0, [r7, #4]
 800a09a:	f000 fbb8 	bl	800a80e <USBD_CtlError>
                break;
 800a09e:	e091      	b.n	800a1c4 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a0a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	da0b      	bge.n	800a0c0 <USBD_StdEPReq+0x1a0>
 800a0a8:	7bbb      	ldrb	r3, [r7, #14]
 800a0aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a0ae:	4613      	mov	r3, r2
 800a0b0:	009b      	lsls	r3, r3, #2
 800a0b2:	4413      	add	r3, r2
 800a0b4:	009b      	lsls	r3, r3, #2
 800a0b6:	3310      	adds	r3, #16
 800a0b8:	687a      	ldr	r2, [r7, #4]
 800a0ba:	4413      	add	r3, r2
 800a0bc:	3304      	adds	r3, #4
 800a0be:	e00b      	b.n	800a0d8 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a0c0:	7bbb      	ldrb	r3, [r7, #14]
 800a0c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a0c6:	4613      	mov	r3, r2
 800a0c8:	009b      	lsls	r3, r3, #2
 800a0ca:	4413      	add	r3, r2
 800a0cc:	009b      	lsls	r3, r3, #2
 800a0ce:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a0d2:	687a      	ldr	r2, [r7, #4]
 800a0d4:	4413      	add	r3, r2
 800a0d6:	3304      	adds	r3, #4
 800a0d8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a0da:	68bb      	ldr	r3, [r7, #8]
 800a0dc:	2200      	movs	r2, #0
 800a0de:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a0e0:	68bb      	ldr	r3, [r7, #8]
 800a0e2:	2202      	movs	r2, #2
 800a0e4:	4619      	mov	r1, r3
 800a0e6:	6878      	ldr	r0, [r7, #4]
 800a0e8:	f000 fbfb 	bl	800a8e2 <USBD_CtlSendData>
              break;
 800a0ec:	e06a      	b.n	800a1c4 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a0ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	da11      	bge.n	800a11a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a0f6:	7bbb      	ldrb	r3, [r7, #14]
 800a0f8:	f003 020f 	and.w	r2, r3, #15
 800a0fc:	6879      	ldr	r1, [r7, #4]
 800a0fe:	4613      	mov	r3, r2
 800a100:	009b      	lsls	r3, r3, #2
 800a102:	4413      	add	r3, r2
 800a104:	009b      	lsls	r3, r3, #2
 800a106:	440b      	add	r3, r1
 800a108:	3318      	adds	r3, #24
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d117      	bne.n	800a140 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800a110:	6839      	ldr	r1, [r7, #0]
 800a112:	6878      	ldr	r0, [r7, #4]
 800a114:	f000 fb7b 	bl	800a80e <USBD_CtlError>
                  break;
 800a118:	e054      	b.n	800a1c4 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a11a:	7bbb      	ldrb	r3, [r7, #14]
 800a11c:	f003 020f 	and.w	r2, r3, #15
 800a120:	6879      	ldr	r1, [r7, #4]
 800a122:	4613      	mov	r3, r2
 800a124:	009b      	lsls	r3, r3, #2
 800a126:	4413      	add	r3, r2
 800a128:	009b      	lsls	r3, r3, #2
 800a12a:	440b      	add	r3, r1
 800a12c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d104      	bne.n	800a140 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800a136:	6839      	ldr	r1, [r7, #0]
 800a138:	6878      	ldr	r0, [r7, #4]
 800a13a:	f000 fb68 	bl	800a80e <USBD_CtlError>
                  break;
 800a13e:	e041      	b.n	800a1c4 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a140:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a144:	2b00      	cmp	r3, #0
 800a146:	da0b      	bge.n	800a160 <USBD_StdEPReq+0x240>
 800a148:	7bbb      	ldrb	r3, [r7, #14]
 800a14a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a14e:	4613      	mov	r3, r2
 800a150:	009b      	lsls	r3, r3, #2
 800a152:	4413      	add	r3, r2
 800a154:	009b      	lsls	r3, r3, #2
 800a156:	3310      	adds	r3, #16
 800a158:	687a      	ldr	r2, [r7, #4]
 800a15a:	4413      	add	r3, r2
 800a15c:	3304      	adds	r3, #4
 800a15e:	e00b      	b.n	800a178 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a160:	7bbb      	ldrb	r3, [r7, #14]
 800a162:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a166:	4613      	mov	r3, r2
 800a168:	009b      	lsls	r3, r3, #2
 800a16a:	4413      	add	r3, r2
 800a16c:	009b      	lsls	r3, r3, #2
 800a16e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a172:	687a      	ldr	r2, [r7, #4]
 800a174:	4413      	add	r3, r2
 800a176:	3304      	adds	r3, #4
 800a178:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a17a:	7bbb      	ldrb	r3, [r7, #14]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d002      	beq.n	800a186 <USBD_StdEPReq+0x266>
 800a180:	7bbb      	ldrb	r3, [r7, #14]
 800a182:	2b80      	cmp	r3, #128	; 0x80
 800a184:	d103      	bne.n	800a18e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800a186:	68bb      	ldr	r3, [r7, #8]
 800a188:	2200      	movs	r2, #0
 800a18a:	601a      	str	r2, [r3, #0]
 800a18c:	e00e      	b.n	800a1ac <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800a18e:	7bbb      	ldrb	r3, [r7, #14]
 800a190:	4619      	mov	r1, r3
 800a192:	6878      	ldr	r0, [r7, #4]
 800a194:	f7f8 fafc 	bl	8002790 <USBD_LL_IsStallEP>
 800a198:	4603      	mov	r3, r0
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d003      	beq.n	800a1a6 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800a19e:	68bb      	ldr	r3, [r7, #8]
 800a1a0:	2201      	movs	r2, #1
 800a1a2:	601a      	str	r2, [r3, #0]
 800a1a4:	e002      	b.n	800a1ac <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800a1a6:	68bb      	ldr	r3, [r7, #8]
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a1ac:	68bb      	ldr	r3, [r7, #8]
 800a1ae:	2202      	movs	r2, #2
 800a1b0:	4619      	mov	r1, r3
 800a1b2:	6878      	ldr	r0, [r7, #4]
 800a1b4:	f000 fb95 	bl	800a8e2 <USBD_CtlSendData>
              break;
 800a1b8:	e004      	b.n	800a1c4 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800a1ba:	6839      	ldr	r1, [r7, #0]
 800a1bc:	6878      	ldr	r0, [r7, #4]
 800a1be:	f000 fb26 	bl	800a80e <USBD_CtlError>
              break;
 800a1c2:	bf00      	nop
          }
          break;
 800a1c4:	e004      	b.n	800a1d0 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800a1c6:	6839      	ldr	r1, [r7, #0]
 800a1c8:	6878      	ldr	r0, [r7, #4]
 800a1ca:	f000 fb20 	bl	800a80e <USBD_CtlError>
          break;
 800a1ce:	bf00      	nop
      }
      break;
 800a1d0:	e004      	b.n	800a1dc <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800a1d2:	6839      	ldr	r1, [r7, #0]
 800a1d4:	6878      	ldr	r0, [r7, #4]
 800a1d6:	f000 fb1a 	bl	800a80e <USBD_CtlError>
      break;
 800a1da:	bf00      	nop
  }

  return ret;
 800a1dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1de:	4618      	mov	r0, r3
 800a1e0:	3710      	adds	r7, #16
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	bd80      	pop	{r7, pc}
	...

0800a1e8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b084      	sub	sp, #16
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
 800a1f0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a1fe:	683b      	ldr	r3, [r7, #0]
 800a200:	885b      	ldrh	r3, [r3, #2]
 800a202:	0a1b      	lsrs	r3, r3, #8
 800a204:	b29b      	uxth	r3, r3
 800a206:	3b01      	subs	r3, #1
 800a208:	2b06      	cmp	r3, #6
 800a20a:	f200 8128 	bhi.w	800a45e <USBD_GetDescriptor+0x276>
 800a20e:	a201      	add	r2, pc, #4	; (adr r2, 800a214 <USBD_GetDescriptor+0x2c>)
 800a210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a214:	0800a231 	.word	0x0800a231
 800a218:	0800a249 	.word	0x0800a249
 800a21c:	0800a289 	.word	0x0800a289
 800a220:	0800a45f 	.word	0x0800a45f
 800a224:	0800a45f 	.word	0x0800a45f
 800a228:	0800a3ff 	.word	0x0800a3ff
 800a22c:	0800a42b 	.word	0x0800a42b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	687a      	ldr	r2, [r7, #4]
 800a23a:	7c12      	ldrb	r2, [r2, #16]
 800a23c:	f107 0108 	add.w	r1, r7, #8
 800a240:	4610      	mov	r0, r2
 800a242:	4798      	blx	r3
 800a244:	60f8      	str	r0, [r7, #12]
      break;
 800a246:	e112      	b.n	800a46e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	7c1b      	ldrb	r3, [r3, #16]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d10d      	bne.n	800a26c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a258:	f107 0208 	add.w	r2, r7, #8
 800a25c:	4610      	mov	r0, r2
 800a25e:	4798      	blx	r3
 800a260:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	3301      	adds	r3, #1
 800a266:	2202      	movs	r2, #2
 800a268:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a26a:	e100      	b.n	800a46e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a274:	f107 0208 	add.w	r2, r7, #8
 800a278:	4610      	mov	r0, r2
 800a27a:	4798      	blx	r3
 800a27c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	3301      	adds	r3, #1
 800a282:	2202      	movs	r2, #2
 800a284:	701a      	strb	r2, [r3, #0]
      break;
 800a286:	e0f2      	b.n	800a46e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a288:	683b      	ldr	r3, [r7, #0]
 800a28a:	885b      	ldrh	r3, [r3, #2]
 800a28c:	b2db      	uxtb	r3, r3
 800a28e:	2b05      	cmp	r3, #5
 800a290:	f200 80ac 	bhi.w	800a3ec <USBD_GetDescriptor+0x204>
 800a294:	a201      	add	r2, pc, #4	; (adr r2, 800a29c <USBD_GetDescriptor+0xb4>)
 800a296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a29a:	bf00      	nop
 800a29c:	0800a2b5 	.word	0x0800a2b5
 800a2a0:	0800a2e9 	.word	0x0800a2e9
 800a2a4:	0800a31d 	.word	0x0800a31d
 800a2a8:	0800a351 	.word	0x0800a351
 800a2ac:	0800a385 	.word	0x0800a385
 800a2b0:	0800a3b9 	.word	0x0800a3b9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a2ba:	685b      	ldr	r3, [r3, #4]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d00b      	beq.n	800a2d8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a2c6:	685b      	ldr	r3, [r3, #4]
 800a2c8:	687a      	ldr	r2, [r7, #4]
 800a2ca:	7c12      	ldrb	r2, [r2, #16]
 800a2cc:	f107 0108 	add.w	r1, r7, #8
 800a2d0:	4610      	mov	r0, r2
 800a2d2:	4798      	blx	r3
 800a2d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a2d6:	e091      	b.n	800a3fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a2d8:	6839      	ldr	r1, [r7, #0]
 800a2da:	6878      	ldr	r0, [r7, #4]
 800a2dc:	f000 fa97 	bl	800a80e <USBD_CtlError>
            err++;
 800a2e0:	7afb      	ldrb	r3, [r7, #11]
 800a2e2:	3301      	adds	r3, #1
 800a2e4:	72fb      	strb	r3, [r7, #11]
          break;
 800a2e6:	e089      	b.n	800a3fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a2ee:	689b      	ldr	r3, [r3, #8]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d00b      	beq.n	800a30c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a2fa:	689b      	ldr	r3, [r3, #8]
 800a2fc:	687a      	ldr	r2, [r7, #4]
 800a2fe:	7c12      	ldrb	r2, [r2, #16]
 800a300:	f107 0108 	add.w	r1, r7, #8
 800a304:	4610      	mov	r0, r2
 800a306:	4798      	blx	r3
 800a308:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a30a:	e077      	b.n	800a3fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a30c:	6839      	ldr	r1, [r7, #0]
 800a30e:	6878      	ldr	r0, [r7, #4]
 800a310:	f000 fa7d 	bl	800a80e <USBD_CtlError>
            err++;
 800a314:	7afb      	ldrb	r3, [r7, #11]
 800a316:	3301      	adds	r3, #1
 800a318:	72fb      	strb	r3, [r7, #11]
          break;
 800a31a:	e06f      	b.n	800a3fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a322:	68db      	ldr	r3, [r3, #12]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d00b      	beq.n	800a340 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a32e:	68db      	ldr	r3, [r3, #12]
 800a330:	687a      	ldr	r2, [r7, #4]
 800a332:	7c12      	ldrb	r2, [r2, #16]
 800a334:	f107 0108 	add.w	r1, r7, #8
 800a338:	4610      	mov	r0, r2
 800a33a:	4798      	blx	r3
 800a33c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a33e:	e05d      	b.n	800a3fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a340:	6839      	ldr	r1, [r7, #0]
 800a342:	6878      	ldr	r0, [r7, #4]
 800a344:	f000 fa63 	bl	800a80e <USBD_CtlError>
            err++;
 800a348:	7afb      	ldrb	r3, [r7, #11]
 800a34a:	3301      	adds	r3, #1
 800a34c:	72fb      	strb	r3, [r7, #11]
          break;
 800a34e:	e055      	b.n	800a3fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a356:	691b      	ldr	r3, [r3, #16]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d00b      	beq.n	800a374 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a362:	691b      	ldr	r3, [r3, #16]
 800a364:	687a      	ldr	r2, [r7, #4]
 800a366:	7c12      	ldrb	r2, [r2, #16]
 800a368:	f107 0108 	add.w	r1, r7, #8
 800a36c:	4610      	mov	r0, r2
 800a36e:	4798      	blx	r3
 800a370:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a372:	e043      	b.n	800a3fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a374:	6839      	ldr	r1, [r7, #0]
 800a376:	6878      	ldr	r0, [r7, #4]
 800a378:	f000 fa49 	bl	800a80e <USBD_CtlError>
            err++;
 800a37c:	7afb      	ldrb	r3, [r7, #11]
 800a37e:	3301      	adds	r3, #1
 800a380:	72fb      	strb	r3, [r7, #11]
          break;
 800a382:	e03b      	b.n	800a3fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a38a:	695b      	ldr	r3, [r3, #20]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d00b      	beq.n	800a3a8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a396:	695b      	ldr	r3, [r3, #20]
 800a398:	687a      	ldr	r2, [r7, #4]
 800a39a:	7c12      	ldrb	r2, [r2, #16]
 800a39c:	f107 0108 	add.w	r1, r7, #8
 800a3a0:	4610      	mov	r0, r2
 800a3a2:	4798      	blx	r3
 800a3a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a3a6:	e029      	b.n	800a3fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a3a8:	6839      	ldr	r1, [r7, #0]
 800a3aa:	6878      	ldr	r0, [r7, #4]
 800a3ac:	f000 fa2f 	bl	800a80e <USBD_CtlError>
            err++;
 800a3b0:	7afb      	ldrb	r3, [r7, #11]
 800a3b2:	3301      	adds	r3, #1
 800a3b4:	72fb      	strb	r3, [r7, #11]
          break;
 800a3b6:	e021      	b.n	800a3fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a3be:	699b      	ldr	r3, [r3, #24]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d00b      	beq.n	800a3dc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a3ca:	699b      	ldr	r3, [r3, #24]
 800a3cc:	687a      	ldr	r2, [r7, #4]
 800a3ce:	7c12      	ldrb	r2, [r2, #16]
 800a3d0:	f107 0108 	add.w	r1, r7, #8
 800a3d4:	4610      	mov	r0, r2
 800a3d6:	4798      	blx	r3
 800a3d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a3da:	e00f      	b.n	800a3fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a3dc:	6839      	ldr	r1, [r7, #0]
 800a3de:	6878      	ldr	r0, [r7, #4]
 800a3e0:	f000 fa15 	bl	800a80e <USBD_CtlError>
            err++;
 800a3e4:	7afb      	ldrb	r3, [r7, #11]
 800a3e6:	3301      	adds	r3, #1
 800a3e8:	72fb      	strb	r3, [r7, #11]
          break;
 800a3ea:	e007      	b.n	800a3fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800a3ec:	6839      	ldr	r1, [r7, #0]
 800a3ee:	6878      	ldr	r0, [r7, #4]
 800a3f0:	f000 fa0d 	bl	800a80e <USBD_CtlError>
          err++;
 800a3f4:	7afb      	ldrb	r3, [r7, #11]
 800a3f6:	3301      	adds	r3, #1
 800a3f8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800a3fa:	e038      	b.n	800a46e <USBD_GetDescriptor+0x286>
 800a3fc:	e037      	b.n	800a46e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	7c1b      	ldrb	r3, [r3, #16]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d109      	bne.n	800a41a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a40c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a40e:	f107 0208 	add.w	r2, r7, #8
 800a412:	4610      	mov	r0, r2
 800a414:	4798      	blx	r3
 800a416:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a418:	e029      	b.n	800a46e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a41a:	6839      	ldr	r1, [r7, #0]
 800a41c:	6878      	ldr	r0, [r7, #4]
 800a41e:	f000 f9f6 	bl	800a80e <USBD_CtlError>
        err++;
 800a422:	7afb      	ldrb	r3, [r7, #11]
 800a424:	3301      	adds	r3, #1
 800a426:	72fb      	strb	r3, [r7, #11]
      break;
 800a428:	e021      	b.n	800a46e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	7c1b      	ldrb	r3, [r3, #16]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d10d      	bne.n	800a44e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a43a:	f107 0208 	add.w	r2, r7, #8
 800a43e:	4610      	mov	r0, r2
 800a440:	4798      	blx	r3
 800a442:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	3301      	adds	r3, #1
 800a448:	2207      	movs	r2, #7
 800a44a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a44c:	e00f      	b.n	800a46e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a44e:	6839      	ldr	r1, [r7, #0]
 800a450:	6878      	ldr	r0, [r7, #4]
 800a452:	f000 f9dc 	bl	800a80e <USBD_CtlError>
        err++;
 800a456:	7afb      	ldrb	r3, [r7, #11]
 800a458:	3301      	adds	r3, #1
 800a45a:	72fb      	strb	r3, [r7, #11]
      break;
 800a45c:	e007      	b.n	800a46e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a45e:	6839      	ldr	r1, [r7, #0]
 800a460:	6878      	ldr	r0, [r7, #4]
 800a462:	f000 f9d4 	bl	800a80e <USBD_CtlError>
      err++;
 800a466:	7afb      	ldrb	r3, [r7, #11]
 800a468:	3301      	adds	r3, #1
 800a46a:	72fb      	strb	r3, [r7, #11]
      break;
 800a46c:	bf00      	nop
  }

  if (err != 0U)
 800a46e:	7afb      	ldrb	r3, [r7, #11]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d11c      	bne.n	800a4ae <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800a474:	893b      	ldrh	r3, [r7, #8]
 800a476:	2b00      	cmp	r3, #0
 800a478:	d011      	beq.n	800a49e <USBD_GetDescriptor+0x2b6>
 800a47a:	683b      	ldr	r3, [r7, #0]
 800a47c:	88db      	ldrh	r3, [r3, #6]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d00d      	beq.n	800a49e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800a482:	683b      	ldr	r3, [r7, #0]
 800a484:	88da      	ldrh	r2, [r3, #6]
 800a486:	893b      	ldrh	r3, [r7, #8]
 800a488:	4293      	cmp	r3, r2
 800a48a:	bf28      	it	cs
 800a48c:	4613      	movcs	r3, r2
 800a48e:	b29b      	uxth	r3, r3
 800a490:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a492:	893b      	ldrh	r3, [r7, #8]
 800a494:	461a      	mov	r2, r3
 800a496:	68f9      	ldr	r1, [r7, #12]
 800a498:	6878      	ldr	r0, [r7, #4]
 800a49a:	f000 fa22 	bl	800a8e2 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800a49e:	683b      	ldr	r3, [r7, #0]
 800a4a0:	88db      	ldrh	r3, [r3, #6]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d104      	bne.n	800a4b0 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800a4a6:	6878      	ldr	r0, [r7, #4]
 800a4a8:	f000 fa79 	bl	800a99e <USBD_CtlSendStatus>
 800a4ac:	e000      	b.n	800a4b0 <USBD_GetDescriptor+0x2c8>
    return;
 800a4ae:	bf00      	nop
    }
  }
}
 800a4b0:	3710      	adds	r7, #16
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	bd80      	pop	{r7, pc}
 800a4b6:	bf00      	nop

0800a4b8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	b084      	sub	sp, #16
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
 800a4c0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a4c2:	683b      	ldr	r3, [r7, #0]
 800a4c4:	889b      	ldrh	r3, [r3, #4]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d130      	bne.n	800a52c <USBD_SetAddress+0x74>
 800a4ca:	683b      	ldr	r3, [r7, #0]
 800a4cc:	88db      	ldrh	r3, [r3, #6]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d12c      	bne.n	800a52c <USBD_SetAddress+0x74>
 800a4d2:	683b      	ldr	r3, [r7, #0]
 800a4d4:	885b      	ldrh	r3, [r3, #2]
 800a4d6:	2b7f      	cmp	r3, #127	; 0x7f
 800a4d8:	d828      	bhi.n	800a52c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a4da:	683b      	ldr	r3, [r7, #0]
 800a4dc:	885b      	ldrh	r3, [r3, #2]
 800a4de:	b2db      	uxtb	r3, r3
 800a4e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a4e4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4ec:	2b03      	cmp	r3, #3
 800a4ee:	d104      	bne.n	800a4fa <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800a4f0:	6839      	ldr	r1, [r7, #0]
 800a4f2:	6878      	ldr	r0, [r7, #4]
 800a4f4:	f000 f98b 	bl	800a80e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4f8:	e01d      	b.n	800a536 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	7bfa      	ldrb	r2, [r7, #15]
 800a4fe:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a502:	7bfb      	ldrb	r3, [r7, #15]
 800a504:	4619      	mov	r1, r3
 800a506:	6878      	ldr	r0, [r7, #4]
 800a508:	f7f8 f96e 	bl	80027e8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800a50c:	6878      	ldr	r0, [r7, #4]
 800a50e:	f000 fa46 	bl	800a99e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a512:	7bfb      	ldrb	r3, [r7, #15]
 800a514:	2b00      	cmp	r3, #0
 800a516:	d004      	beq.n	800a522 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	2202      	movs	r2, #2
 800a51c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a520:	e009      	b.n	800a536 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	2201      	movs	r2, #1
 800a526:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a52a:	e004      	b.n	800a536 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a52c:	6839      	ldr	r1, [r7, #0]
 800a52e:	6878      	ldr	r0, [r7, #4]
 800a530:	f000 f96d 	bl	800a80e <USBD_CtlError>
  }
}
 800a534:	bf00      	nop
 800a536:	bf00      	nop
 800a538:	3710      	adds	r7, #16
 800a53a:	46bd      	mov	sp, r7
 800a53c:	bd80      	pop	{r7, pc}
	...

0800a540 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a540:	b580      	push	{r7, lr}
 800a542:	b082      	sub	sp, #8
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
 800a548:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a54a:	683b      	ldr	r3, [r7, #0]
 800a54c:	885b      	ldrh	r3, [r3, #2]
 800a54e:	b2da      	uxtb	r2, r3
 800a550:	4b41      	ldr	r3, [pc, #260]	; (800a658 <USBD_SetConfig+0x118>)
 800a552:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a554:	4b40      	ldr	r3, [pc, #256]	; (800a658 <USBD_SetConfig+0x118>)
 800a556:	781b      	ldrb	r3, [r3, #0]
 800a558:	2b01      	cmp	r3, #1
 800a55a:	d904      	bls.n	800a566 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800a55c:	6839      	ldr	r1, [r7, #0]
 800a55e:	6878      	ldr	r0, [r7, #4]
 800a560:	f000 f955 	bl	800a80e <USBD_CtlError>
 800a564:	e075      	b.n	800a652 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a56c:	2b02      	cmp	r3, #2
 800a56e:	d002      	beq.n	800a576 <USBD_SetConfig+0x36>
 800a570:	2b03      	cmp	r3, #3
 800a572:	d023      	beq.n	800a5bc <USBD_SetConfig+0x7c>
 800a574:	e062      	b.n	800a63c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800a576:	4b38      	ldr	r3, [pc, #224]	; (800a658 <USBD_SetConfig+0x118>)
 800a578:	781b      	ldrb	r3, [r3, #0]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d01a      	beq.n	800a5b4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800a57e:	4b36      	ldr	r3, [pc, #216]	; (800a658 <USBD_SetConfig+0x118>)
 800a580:	781b      	ldrb	r3, [r3, #0]
 800a582:	461a      	mov	r2, r3
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	2203      	movs	r2, #3
 800a58c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a590:	4b31      	ldr	r3, [pc, #196]	; (800a658 <USBD_SetConfig+0x118>)
 800a592:	781b      	ldrb	r3, [r3, #0]
 800a594:	4619      	mov	r1, r3
 800a596:	6878      	ldr	r0, [r7, #4]
 800a598:	f7ff f9e8 	bl	800996c <USBD_SetClassConfig>
 800a59c:	4603      	mov	r3, r0
 800a59e:	2b02      	cmp	r3, #2
 800a5a0:	d104      	bne.n	800a5ac <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800a5a2:	6839      	ldr	r1, [r7, #0]
 800a5a4:	6878      	ldr	r0, [r7, #4]
 800a5a6:	f000 f932 	bl	800a80e <USBD_CtlError>
            return;
 800a5aa:	e052      	b.n	800a652 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800a5ac:	6878      	ldr	r0, [r7, #4]
 800a5ae:	f000 f9f6 	bl	800a99e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a5b2:	e04e      	b.n	800a652 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a5b4:	6878      	ldr	r0, [r7, #4]
 800a5b6:	f000 f9f2 	bl	800a99e <USBD_CtlSendStatus>
        break;
 800a5ba:	e04a      	b.n	800a652 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800a5bc:	4b26      	ldr	r3, [pc, #152]	; (800a658 <USBD_SetConfig+0x118>)
 800a5be:	781b      	ldrb	r3, [r3, #0]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d112      	bne.n	800a5ea <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	2202      	movs	r2, #2
 800a5c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800a5cc:	4b22      	ldr	r3, [pc, #136]	; (800a658 <USBD_SetConfig+0x118>)
 800a5ce:	781b      	ldrb	r3, [r3, #0]
 800a5d0:	461a      	mov	r2, r3
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800a5d6:	4b20      	ldr	r3, [pc, #128]	; (800a658 <USBD_SetConfig+0x118>)
 800a5d8:	781b      	ldrb	r3, [r3, #0]
 800a5da:	4619      	mov	r1, r3
 800a5dc:	6878      	ldr	r0, [r7, #4]
 800a5de:	f7ff f9e4 	bl	80099aa <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800a5e2:	6878      	ldr	r0, [r7, #4]
 800a5e4:	f000 f9db 	bl	800a99e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a5e8:	e033      	b.n	800a652 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800a5ea:	4b1b      	ldr	r3, [pc, #108]	; (800a658 <USBD_SetConfig+0x118>)
 800a5ec:	781b      	ldrb	r3, [r3, #0]
 800a5ee:	461a      	mov	r2, r3
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	685b      	ldr	r3, [r3, #4]
 800a5f4:	429a      	cmp	r2, r3
 800a5f6:	d01d      	beq.n	800a634 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	685b      	ldr	r3, [r3, #4]
 800a5fc:	b2db      	uxtb	r3, r3
 800a5fe:	4619      	mov	r1, r3
 800a600:	6878      	ldr	r0, [r7, #4]
 800a602:	f7ff f9d2 	bl	80099aa <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800a606:	4b14      	ldr	r3, [pc, #80]	; (800a658 <USBD_SetConfig+0x118>)
 800a608:	781b      	ldrb	r3, [r3, #0]
 800a60a:	461a      	mov	r2, r3
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a610:	4b11      	ldr	r3, [pc, #68]	; (800a658 <USBD_SetConfig+0x118>)
 800a612:	781b      	ldrb	r3, [r3, #0]
 800a614:	4619      	mov	r1, r3
 800a616:	6878      	ldr	r0, [r7, #4]
 800a618:	f7ff f9a8 	bl	800996c <USBD_SetClassConfig>
 800a61c:	4603      	mov	r3, r0
 800a61e:	2b02      	cmp	r3, #2
 800a620:	d104      	bne.n	800a62c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800a622:	6839      	ldr	r1, [r7, #0]
 800a624:	6878      	ldr	r0, [r7, #4]
 800a626:	f000 f8f2 	bl	800a80e <USBD_CtlError>
            return;
 800a62a:	e012      	b.n	800a652 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a62c:	6878      	ldr	r0, [r7, #4]
 800a62e:	f000 f9b6 	bl	800a99e <USBD_CtlSendStatus>
        break;
 800a632:	e00e      	b.n	800a652 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a634:	6878      	ldr	r0, [r7, #4]
 800a636:	f000 f9b2 	bl	800a99e <USBD_CtlSendStatus>
        break;
 800a63a:	e00a      	b.n	800a652 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800a63c:	6839      	ldr	r1, [r7, #0]
 800a63e:	6878      	ldr	r0, [r7, #4]
 800a640:	f000 f8e5 	bl	800a80e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800a644:	4b04      	ldr	r3, [pc, #16]	; (800a658 <USBD_SetConfig+0x118>)
 800a646:	781b      	ldrb	r3, [r3, #0]
 800a648:	4619      	mov	r1, r3
 800a64a:	6878      	ldr	r0, [r7, #4]
 800a64c:	f7ff f9ad 	bl	80099aa <USBD_ClrClassConfig>
        break;
 800a650:	bf00      	nop
    }
  }
}
 800a652:	3708      	adds	r7, #8
 800a654:	46bd      	mov	sp, r7
 800a656:	bd80      	pop	{r7, pc}
 800a658:	20001658 	.word	0x20001658

0800a65c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b082      	sub	sp, #8
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
 800a664:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a666:	683b      	ldr	r3, [r7, #0]
 800a668:	88db      	ldrh	r3, [r3, #6]
 800a66a:	2b01      	cmp	r3, #1
 800a66c:	d004      	beq.n	800a678 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a66e:	6839      	ldr	r1, [r7, #0]
 800a670:	6878      	ldr	r0, [r7, #4]
 800a672:	f000 f8cc 	bl	800a80e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a676:	e022      	b.n	800a6be <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a67e:	2b02      	cmp	r3, #2
 800a680:	dc02      	bgt.n	800a688 <USBD_GetConfig+0x2c>
 800a682:	2b00      	cmp	r3, #0
 800a684:	dc03      	bgt.n	800a68e <USBD_GetConfig+0x32>
 800a686:	e015      	b.n	800a6b4 <USBD_GetConfig+0x58>
 800a688:	2b03      	cmp	r3, #3
 800a68a:	d00b      	beq.n	800a6a4 <USBD_GetConfig+0x48>
 800a68c:	e012      	b.n	800a6b4 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	2200      	movs	r2, #0
 800a692:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	3308      	adds	r3, #8
 800a698:	2201      	movs	r2, #1
 800a69a:	4619      	mov	r1, r3
 800a69c:	6878      	ldr	r0, [r7, #4]
 800a69e:	f000 f920 	bl	800a8e2 <USBD_CtlSendData>
        break;
 800a6a2:	e00c      	b.n	800a6be <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	3304      	adds	r3, #4
 800a6a8:	2201      	movs	r2, #1
 800a6aa:	4619      	mov	r1, r3
 800a6ac:	6878      	ldr	r0, [r7, #4]
 800a6ae:	f000 f918 	bl	800a8e2 <USBD_CtlSendData>
        break;
 800a6b2:	e004      	b.n	800a6be <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800a6b4:	6839      	ldr	r1, [r7, #0]
 800a6b6:	6878      	ldr	r0, [r7, #4]
 800a6b8:	f000 f8a9 	bl	800a80e <USBD_CtlError>
        break;
 800a6bc:	bf00      	nop
}
 800a6be:	bf00      	nop
 800a6c0:	3708      	adds	r7, #8
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	bd80      	pop	{r7, pc}

0800a6c6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a6c6:	b580      	push	{r7, lr}
 800a6c8:	b082      	sub	sp, #8
 800a6ca:	af00      	add	r7, sp, #0
 800a6cc:	6078      	str	r0, [r7, #4]
 800a6ce:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6d6:	3b01      	subs	r3, #1
 800a6d8:	2b02      	cmp	r3, #2
 800a6da:	d81e      	bhi.n	800a71a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a6dc:	683b      	ldr	r3, [r7, #0]
 800a6de:	88db      	ldrh	r3, [r3, #6]
 800a6e0:	2b02      	cmp	r3, #2
 800a6e2:	d004      	beq.n	800a6ee <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800a6e4:	6839      	ldr	r1, [r7, #0]
 800a6e6:	6878      	ldr	r0, [r7, #4]
 800a6e8:	f000 f891 	bl	800a80e <USBD_CtlError>
        break;
 800a6ec:	e01a      	b.n	800a724 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	2201      	movs	r2, #1
 800a6f2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d005      	beq.n	800a70a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	68db      	ldr	r3, [r3, #12]
 800a702:	f043 0202 	orr.w	r2, r3, #2
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	330c      	adds	r3, #12
 800a70e:	2202      	movs	r2, #2
 800a710:	4619      	mov	r1, r3
 800a712:	6878      	ldr	r0, [r7, #4]
 800a714:	f000 f8e5 	bl	800a8e2 <USBD_CtlSendData>
      break;
 800a718:	e004      	b.n	800a724 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800a71a:	6839      	ldr	r1, [r7, #0]
 800a71c:	6878      	ldr	r0, [r7, #4]
 800a71e:	f000 f876 	bl	800a80e <USBD_CtlError>
      break;
 800a722:	bf00      	nop
  }
}
 800a724:	bf00      	nop
 800a726:	3708      	adds	r7, #8
 800a728:	46bd      	mov	sp, r7
 800a72a:	bd80      	pop	{r7, pc}

0800a72c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b082      	sub	sp, #8
 800a730:	af00      	add	r7, sp, #0
 800a732:	6078      	str	r0, [r7, #4]
 800a734:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a736:	683b      	ldr	r3, [r7, #0]
 800a738:	885b      	ldrh	r3, [r3, #2]
 800a73a:	2b01      	cmp	r3, #1
 800a73c:	d106      	bne.n	800a74c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	2201      	movs	r2, #1
 800a742:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800a746:	6878      	ldr	r0, [r7, #4]
 800a748:	f000 f929 	bl	800a99e <USBD_CtlSendStatus>
  }
}
 800a74c:	bf00      	nop
 800a74e:	3708      	adds	r7, #8
 800a750:	46bd      	mov	sp, r7
 800a752:	bd80      	pop	{r7, pc}

0800a754 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a754:	b580      	push	{r7, lr}
 800a756:	b082      	sub	sp, #8
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
 800a75c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a764:	3b01      	subs	r3, #1
 800a766:	2b02      	cmp	r3, #2
 800a768:	d80b      	bhi.n	800a782 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a76a:	683b      	ldr	r3, [r7, #0]
 800a76c:	885b      	ldrh	r3, [r3, #2]
 800a76e:	2b01      	cmp	r3, #1
 800a770:	d10c      	bne.n	800a78c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	2200      	movs	r2, #0
 800a776:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800a77a:	6878      	ldr	r0, [r7, #4]
 800a77c:	f000 f90f 	bl	800a99e <USBD_CtlSendStatus>
      }
      break;
 800a780:	e004      	b.n	800a78c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800a782:	6839      	ldr	r1, [r7, #0]
 800a784:	6878      	ldr	r0, [r7, #4]
 800a786:	f000 f842 	bl	800a80e <USBD_CtlError>
      break;
 800a78a:	e000      	b.n	800a78e <USBD_ClrFeature+0x3a>
      break;
 800a78c:	bf00      	nop
  }
}
 800a78e:	bf00      	nop
 800a790:	3708      	adds	r7, #8
 800a792:	46bd      	mov	sp, r7
 800a794:	bd80      	pop	{r7, pc}

0800a796 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a796:	b480      	push	{r7}
 800a798:	b083      	sub	sp, #12
 800a79a:	af00      	add	r7, sp, #0
 800a79c:	6078      	str	r0, [r7, #4]
 800a79e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800a7a0:	683b      	ldr	r3, [r7, #0]
 800a7a2:	781a      	ldrb	r2, [r3, #0]
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800a7a8:	683b      	ldr	r3, [r7, #0]
 800a7aa:	785a      	ldrb	r2, [r3, #1]
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	3302      	adds	r3, #2
 800a7b4:	781b      	ldrb	r3, [r3, #0]
 800a7b6:	b29a      	uxth	r2, r3
 800a7b8:	683b      	ldr	r3, [r7, #0]
 800a7ba:	3303      	adds	r3, #3
 800a7bc:	781b      	ldrb	r3, [r3, #0]
 800a7be:	b29b      	uxth	r3, r3
 800a7c0:	021b      	lsls	r3, r3, #8
 800a7c2:	b29b      	uxth	r3, r3
 800a7c4:	4413      	add	r3, r2
 800a7c6:	b29a      	uxth	r2, r3
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800a7cc:	683b      	ldr	r3, [r7, #0]
 800a7ce:	3304      	adds	r3, #4
 800a7d0:	781b      	ldrb	r3, [r3, #0]
 800a7d2:	b29a      	uxth	r2, r3
 800a7d4:	683b      	ldr	r3, [r7, #0]
 800a7d6:	3305      	adds	r3, #5
 800a7d8:	781b      	ldrb	r3, [r3, #0]
 800a7da:	b29b      	uxth	r3, r3
 800a7dc:	021b      	lsls	r3, r3, #8
 800a7de:	b29b      	uxth	r3, r3
 800a7e0:	4413      	add	r3, r2
 800a7e2:	b29a      	uxth	r2, r3
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800a7e8:	683b      	ldr	r3, [r7, #0]
 800a7ea:	3306      	adds	r3, #6
 800a7ec:	781b      	ldrb	r3, [r3, #0]
 800a7ee:	b29a      	uxth	r2, r3
 800a7f0:	683b      	ldr	r3, [r7, #0]
 800a7f2:	3307      	adds	r3, #7
 800a7f4:	781b      	ldrb	r3, [r3, #0]
 800a7f6:	b29b      	uxth	r3, r3
 800a7f8:	021b      	lsls	r3, r3, #8
 800a7fa:	b29b      	uxth	r3, r3
 800a7fc:	4413      	add	r3, r2
 800a7fe:	b29a      	uxth	r2, r3
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	80da      	strh	r2, [r3, #6]

}
 800a804:	bf00      	nop
 800a806:	370c      	adds	r7, #12
 800a808:	46bd      	mov	sp, r7
 800a80a:	bc80      	pop	{r7}
 800a80c:	4770      	bx	lr

0800a80e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800a80e:	b580      	push	{r7, lr}
 800a810:	b082      	sub	sp, #8
 800a812:	af00      	add	r7, sp, #0
 800a814:	6078      	str	r0, [r7, #4]
 800a816:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800a818:	2180      	movs	r1, #128	; 0x80
 800a81a:	6878      	ldr	r0, [r7, #4]
 800a81c:	f7f7 ff7a 	bl	8002714 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800a820:	2100      	movs	r1, #0
 800a822:	6878      	ldr	r0, [r7, #4]
 800a824:	f7f7 ff76 	bl	8002714 <USBD_LL_StallEP>
}
 800a828:	bf00      	nop
 800a82a:	3708      	adds	r7, #8
 800a82c:	46bd      	mov	sp, r7
 800a82e:	bd80      	pop	{r7, pc}

0800a830 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a830:	b580      	push	{r7, lr}
 800a832:	b086      	sub	sp, #24
 800a834:	af00      	add	r7, sp, #0
 800a836:	60f8      	str	r0, [r7, #12]
 800a838:	60b9      	str	r1, [r7, #8]
 800a83a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a83c:	2300      	movs	r3, #0
 800a83e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d032      	beq.n	800a8ac <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800a846:	68f8      	ldr	r0, [r7, #12]
 800a848:	f000 f834 	bl	800a8b4 <USBD_GetLen>
 800a84c:	4603      	mov	r3, r0
 800a84e:	3301      	adds	r3, #1
 800a850:	b29b      	uxth	r3, r3
 800a852:	005b      	lsls	r3, r3, #1
 800a854:	b29a      	uxth	r2, r3
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a85a:	7dfb      	ldrb	r3, [r7, #23]
 800a85c:	1c5a      	adds	r2, r3, #1
 800a85e:	75fa      	strb	r2, [r7, #23]
 800a860:	461a      	mov	r2, r3
 800a862:	68bb      	ldr	r3, [r7, #8]
 800a864:	4413      	add	r3, r2
 800a866:	687a      	ldr	r2, [r7, #4]
 800a868:	7812      	ldrb	r2, [r2, #0]
 800a86a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a86c:	7dfb      	ldrb	r3, [r7, #23]
 800a86e:	1c5a      	adds	r2, r3, #1
 800a870:	75fa      	strb	r2, [r7, #23]
 800a872:	461a      	mov	r2, r3
 800a874:	68bb      	ldr	r3, [r7, #8]
 800a876:	4413      	add	r3, r2
 800a878:	2203      	movs	r2, #3
 800a87a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800a87c:	e012      	b.n	800a8a4 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	1c5a      	adds	r2, r3, #1
 800a882:	60fa      	str	r2, [r7, #12]
 800a884:	7dfa      	ldrb	r2, [r7, #23]
 800a886:	1c51      	adds	r1, r2, #1
 800a888:	75f9      	strb	r1, [r7, #23]
 800a88a:	4611      	mov	r1, r2
 800a88c:	68ba      	ldr	r2, [r7, #8]
 800a88e:	440a      	add	r2, r1
 800a890:	781b      	ldrb	r3, [r3, #0]
 800a892:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800a894:	7dfb      	ldrb	r3, [r7, #23]
 800a896:	1c5a      	adds	r2, r3, #1
 800a898:	75fa      	strb	r2, [r7, #23]
 800a89a:	461a      	mov	r2, r3
 800a89c:	68bb      	ldr	r3, [r7, #8]
 800a89e:	4413      	add	r3, r2
 800a8a0:	2200      	movs	r2, #0
 800a8a2:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	781b      	ldrb	r3, [r3, #0]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d1e8      	bne.n	800a87e <USBD_GetString+0x4e>
    }
  }
}
 800a8ac:	bf00      	nop
 800a8ae:	3718      	adds	r7, #24
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	bd80      	pop	{r7, pc}

0800a8b4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a8b4:	b480      	push	{r7}
 800a8b6:	b085      	sub	sp, #20
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a8bc:	2300      	movs	r3, #0
 800a8be:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800a8c0:	e005      	b.n	800a8ce <USBD_GetLen+0x1a>
  {
    len++;
 800a8c2:	7bfb      	ldrb	r3, [r7, #15]
 800a8c4:	3301      	adds	r3, #1
 800a8c6:	73fb      	strb	r3, [r7, #15]
    buf++;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	3301      	adds	r3, #1
 800a8cc:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	781b      	ldrb	r3, [r3, #0]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d1f5      	bne.n	800a8c2 <USBD_GetLen+0xe>
  }

  return len;
 800a8d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8d8:	4618      	mov	r0, r3
 800a8da:	3714      	adds	r7, #20
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	bc80      	pop	{r7}
 800a8e0:	4770      	bx	lr

0800a8e2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800a8e2:	b580      	push	{r7, lr}
 800a8e4:	b084      	sub	sp, #16
 800a8e6:	af00      	add	r7, sp, #0
 800a8e8:	60f8      	str	r0, [r7, #12]
 800a8ea:	60b9      	str	r1, [r7, #8]
 800a8ec:	4613      	mov	r3, r2
 800a8ee:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	2202      	movs	r2, #2
 800a8f4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a8f8:	88fa      	ldrh	r2, [r7, #6]
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a8fe:	88fa      	ldrh	r2, [r7, #6]
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a904:	88fb      	ldrh	r3, [r7, #6]
 800a906:	68ba      	ldr	r2, [r7, #8]
 800a908:	2100      	movs	r1, #0
 800a90a:	68f8      	ldr	r0, [r7, #12]
 800a90c:	f7f7 ff8b 	bl	8002826 <USBD_LL_Transmit>

  return USBD_OK;
 800a910:	2300      	movs	r3, #0
}
 800a912:	4618      	mov	r0, r3
 800a914:	3710      	adds	r7, #16
 800a916:	46bd      	mov	sp, r7
 800a918:	bd80      	pop	{r7, pc}

0800a91a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800a91a:	b580      	push	{r7, lr}
 800a91c:	b084      	sub	sp, #16
 800a91e:	af00      	add	r7, sp, #0
 800a920:	60f8      	str	r0, [r7, #12]
 800a922:	60b9      	str	r1, [r7, #8]
 800a924:	4613      	mov	r3, r2
 800a926:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a928:	88fb      	ldrh	r3, [r7, #6]
 800a92a:	68ba      	ldr	r2, [r7, #8]
 800a92c:	2100      	movs	r1, #0
 800a92e:	68f8      	ldr	r0, [r7, #12]
 800a930:	f7f7 ff79 	bl	8002826 <USBD_LL_Transmit>

  return USBD_OK;
 800a934:	2300      	movs	r3, #0
}
 800a936:	4618      	mov	r0, r3
 800a938:	3710      	adds	r7, #16
 800a93a:	46bd      	mov	sp, r7
 800a93c:	bd80      	pop	{r7, pc}

0800a93e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800a93e:	b580      	push	{r7, lr}
 800a940:	b084      	sub	sp, #16
 800a942:	af00      	add	r7, sp, #0
 800a944:	60f8      	str	r0, [r7, #12]
 800a946:	60b9      	str	r1, [r7, #8]
 800a948:	4613      	mov	r3, r2
 800a94a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	2203      	movs	r2, #3
 800a950:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a954:	88fa      	ldrh	r2, [r7, #6]
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800a95c:	88fa      	ldrh	r2, [r7, #6]
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a964:	88fb      	ldrh	r3, [r7, #6]
 800a966:	68ba      	ldr	r2, [r7, #8]
 800a968:	2100      	movs	r1, #0
 800a96a:	68f8      	ldr	r0, [r7, #12]
 800a96c:	f7f7 ff7e 	bl	800286c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a970:	2300      	movs	r3, #0
}
 800a972:	4618      	mov	r0, r3
 800a974:	3710      	adds	r7, #16
 800a976:	46bd      	mov	sp, r7
 800a978:	bd80      	pop	{r7, pc}

0800a97a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800a97a:	b580      	push	{r7, lr}
 800a97c:	b084      	sub	sp, #16
 800a97e:	af00      	add	r7, sp, #0
 800a980:	60f8      	str	r0, [r7, #12]
 800a982:	60b9      	str	r1, [r7, #8]
 800a984:	4613      	mov	r3, r2
 800a986:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a988:	88fb      	ldrh	r3, [r7, #6]
 800a98a:	68ba      	ldr	r2, [r7, #8]
 800a98c:	2100      	movs	r1, #0
 800a98e:	68f8      	ldr	r0, [r7, #12]
 800a990:	f7f7 ff6c 	bl	800286c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a994:	2300      	movs	r3, #0
}
 800a996:	4618      	mov	r0, r3
 800a998:	3710      	adds	r7, #16
 800a99a:	46bd      	mov	sp, r7
 800a99c:	bd80      	pop	{r7, pc}

0800a99e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a99e:	b580      	push	{r7, lr}
 800a9a0:	b082      	sub	sp, #8
 800a9a2:	af00      	add	r7, sp, #0
 800a9a4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	2204      	movs	r2, #4
 800a9aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	2100      	movs	r1, #0
 800a9b4:	6878      	ldr	r0, [r7, #4]
 800a9b6:	f7f7 ff36 	bl	8002826 <USBD_LL_Transmit>

  return USBD_OK;
 800a9ba:	2300      	movs	r3, #0
}
 800a9bc:	4618      	mov	r0, r3
 800a9be:	3708      	adds	r7, #8
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	bd80      	pop	{r7, pc}

0800a9c4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a9c4:	b580      	push	{r7, lr}
 800a9c6:	b082      	sub	sp, #8
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	2205      	movs	r2, #5
 800a9d0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	2100      	movs	r1, #0
 800a9da:	6878      	ldr	r0, [r7, #4]
 800a9dc:	f7f7 ff46 	bl	800286c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a9e0:	2300      	movs	r3, #0
}
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	3708      	adds	r7, #8
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	bd80      	pop	{r7, pc}
	...

0800a9ec <__errno>:
 800a9ec:	4b01      	ldr	r3, [pc, #4]	; (800a9f4 <__errno+0x8>)
 800a9ee:	6818      	ldr	r0, [r3, #0]
 800a9f0:	4770      	bx	lr
 800a9f2:	bf00      	nop
 800a9f4:	20000188 	.word	0x20000188

0800a9f8 <__libc_init_array>:
 800a9f8:	b570      	push	{r4, r5, r6, lr}
 800a9fa:	2600      	movs	r6, #0
 800a9fc:	4d0c      	ldr	r5, [pc, #48]	; (800aa30 <__libc_init_array+0x38>)
 800a9fe:	4c0d      	ldr	r4, [pc, #52]	; (800aa34 <__libc_init_array+0x3c>)
 800aa00:	1b64      	subs	r4, r4, r5
 800aa02:	10a4      	asrs	r4, r4, #2
 800aa04:	42a6      	cmp	r6, r4
 800aa06:	d109      	bne.n	800aa1c <__libc_init_array+0x24>
 800aa08:	f002 ff70 	bl	800d8ec <_init>
 800aa0c:	2600      	movs	r6, #0
 800aa0e:	4d0a      	ldr	r5, [pc, #40]	; (800aa38 <__libc_init_array+0x40>)
 800aa10:	4c0a      	ldr	r4, [pc, #40]	; (800aa3c <__libc_init_array+0x44>)
 800aa12:	1b64      	subs	r4, r4, r5
 800aa14:	10a4      	asrs	r4, r4, #2
 800aa16:	42a6      	cmp	r6, r4
 800aa18:	d105      	bne.n	800aa26 <__libc_init_array+0x2e>
 800aa1a:	bd70      	pop	{r4, r5, r6, pc}
 800aa1c:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa20:	4798      	blx	r3
 800aa22:	3601      	adds	r6, #1
 800aa24:	e7ee      	b.n	800aa04 <__libc_init_array+0xc>
 800aa26:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa2a:	4798      	blx	r3
 800aa2c:	3601      	adds	r6, #1
 800aa2e:	e7f2      	b.n	800aa16 <__libc_init_array+0x1e>
 800aa30:	0800deac 	.word	0x0800deac
 800aa34:	0800deac 	.word	0x0800deac
 800aa38:	0800deac 	.word	0x0800deac
 800aa3c:	0800deb0 	.word	0x0800deb0

0800aa40 <memset>:
 800aa40:	4603      	mov	r3, r0
 800aa42:	4402      	add	r2, r0
 800aa44:	4293      	cmp	r3, r2
 800aa46:	d100      	bne.n	800aa4a <memset+0xa>
 800aa48:	4770      	bx	lr
 800aa4a:	f803 1b01 	strb.w	r1, [r3], #1
 800aa4e:	e7f9      	b.n	800aa44 <memset+0x4>

0800aa50 <__cvt>:
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa56:	461f      	mov	r7, r3
 800aa58:	bfbb      	ittet	lt
 800aa5a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800aa5e:	461f      	movlt	r7, r3
 800aa60:	2300      	movge	r3, #0
 800aa62:	232d      	movlt	r3, #45	; 0x2d
 800aa64:	b088      	sub	sp, #32
 800aa66:	4614      	mov	r4, r2
 800aa68:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800aa6a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800aa6c:	7013      	strb	r3, [r2, #0]
 800aa6e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800aa70:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800aa74:	f023 0820 	bic.w	r8, r3, #32
 800aa78:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800aa7c:	d005      	beq.n	800aa8a <__cvt+0x3a>
 800aa7e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800aa82:	d100      	bne.n	800aa86 <__cvt+0x36>
 800aa84:	3501      	adds	r5, #1
 800aa86:	2302      	movs	r3, #2
 800aa88:	e000      	b.n	800aa8c <__cvt+0x3c>
 800aa8a:	2303      	movs	r3, #3
 800aa8c:	aa07      	add	r2, sp, #28
 800aa8e:	9204      	str	r2, [sp, #16]
 800aa90:	aa06      	add	r2, sp, #24
 800aa92:	e9cd a202 	strd	sl, r2, [sp, #8]
 800aa96:	e9cd 3500 	strd	r3, r5, [sp]
 800aa9a:	4622      	mov	r2, r4
 800aa9c:	463b      	mov	r3, r7
 800aa9e:	f000 fd0f 	bl	800b4c0 <_dtoa_r>
 800aaa2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800aaa6:	4606      	mov	r6, r0
 800aaa8:	d102      	bne.n	800aab0 <__cvt+0x60>
 800aaaa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800aaac:	07db      	lsls	r3, r3, #31
 800aaae:	d522      	bpl.n	800aaf6 <__cvt+0xa6>
 800aab0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800aab4:	eb06 0905 	add.w	r9, r6, r5
 800aab8:	d110      	bne.n	800aadc <__cvt+0x8c>
 800aaba:	7833      	ldrb	r3, [r6, #0]
 800aabc:	2b30      	cmp	r3, #48	; 0x30
 800aabe:	d10a      	bne.n	800aad6 <__cvt+0x86>
 800aac0:	2200      	movs	r2, #0
 800aac2:	2300      	movs	r3, #0
 800aac4:	4620      	mov	r0, r4
 800aac6:	4639      	mov	r1, r7
 800aac8:	f7f5 ff6e 	bl	80009a8 <__aeabi_dcmpeq>
 800aacc:	b918      	cbnz	r0, 800aad6 <__cvt+0x86>
 800aace:	f1c5 0501 	rsb	r5, r5, #1
 800aad2:	f8ca 5000 	str.w	r5, [sl]
 800aad6:	f8da 3000 	ldr.w	r3, [sl]
 800aada:	4499      	add	r9, r3
 800aadc:	2200      	movs	r2, #0
 800aade:	2300      	movs	r3, #0
 800aae0:	4620      	mov	r0, r4
 800aae2:	4639      	mov	r1, r7
 800aae4:	f7f5 ff60 	bl	80009a8 <__aeabi_dcmpeq>
 800aae8:	b108      	cbz	r0, 800aaee <__cvt+0x9e>
 800aaea:	f8cd 901c 	str.w	r9, [sp, #28]
 800aaee:	2230      	movs	r2, #48	; 0x30
 800aaf0:	9b07      	ldr	r3, [sp, #28]
 800aaf2:	454b      	cmp	r3, r9
 800aaf4:	d307      	bcc.n	800ab06 <__cvt+0xb6>
 800aaf6:	4630      	mov	r0, r6
 800aaf8:	9b07      	ldr	r3, [sp, #28]
 800aafa:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800aafc:	1b9b      	subs	r3, r3, r6
 800aafe:	6013      	str	r3, [r2, #0]
 800ab00:	b008      	add	sp, #32
 800ab02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab06:	1c59      	adds	r1, r3, #1
 800ab08:	9107      	str	r1, [sp, #28]
 800ab0a:	701a      	strb	r2, [r3, #0]
 800ab0c:	e7f0      	b.n	800aaf0 <__cvt+0xa0>

0800ab0e <__exponent>:
 800ab0e:	4603      	mov	r3, r0
 800ab10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ab12:	2900      	cmp	r1, #0
 800ab14:	f803 2b02 	strb.w	r2, [r3], #2
 800ab18:	bfb6      	itet	lt
 800ab1a:	222d      	movlt	r2, #45	; 0x2d
 800ab1c:	222b      	movge	r2, #43	; 0x2b
 800ab1e:	4249      	neglt	r1, r1
 800ab20:	2909      	cmp	r1, #9
 800ab22:	7042      	strb	r2, [r0, #1]
 800ab24:	dd2b      	ble.n	800ab7e <__exponent+0x70>
 800ab26:	f10d 0407 	add.w	r4, sp, #7
 800ab2a:	46a4      	mov	ip, r4
 800ab2c:	270a      	movs	r7, #10
 800ab2e:	fb91 f6f7 	sdiv	r6, r1, r7
 800ab32:	460a      	mov	r2, r1
 800ab34:	46a6      	mov	lr, r4
 800ab36:	fb07 1516 	mls	r5, r7, r6, r1
 800ab3a:	2a63      	cmp	r2, #99	; 0x63
 800ab3c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800ab40:	4631      	mov	r1, r6
 800ab42:	f104 34ff 	add.w	r4, r4, #4294967295
 800ab46:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800ab4a:	dcf0      	bgt.n	800ab2e <__exponent+0x20>
 800ab4c:	3130      	adds	r1, #48	; 0x30
 800ab4e:	f1ae 0502 	sub.w	r5, lr, #2
 800ab52:	f804 1c01 	strb.w	r1, [r4, #-1]
 800ab56:	4629      	mov	r1, r5
 800ab58:	1c44      	adds	r4, r0, #1
 800ab5a:	4561      	cmp	r1, ip
 800ab5c:	d30a      	bcc.n	800ab74 <__exponent+0x66>
 800ab5e:	f10d 0209 	add.w	r2, sp, #9
 800ab62:	eba2 020e 	sub.w	r2, r2, lr
 800ab66:	4565      	cmp	r5, ip
 800ab68:	bf88      	it	hi
 800ab6a:	2200      	movhi	r2, #0
 800ab6c:	4413      	add	r3, r2
 800ab6e:	1a18      	subs	r0, r3, r0
 800ab70:	b003      	add	sp, #12
 800ab72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab74:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ab78:	f804 2f01 	strb.w	r2, [r4, #1]!
 800ab7c:	e7ed      	b.n	800ab5a <__exponent+0x4c>
 800ab7e:	2330      	movs	r3, #48	; 0x30
 800ab80:	3130      	adds	r1, #48	; 0x30
 800ab82:	7083      	strb	r3, [r0, #2]
 800ab84:	70c1      	strb	r1, [r0, #3]
 800ab86:	1d03      	adds	r3, r0, #4
 800ab88:	e7f1      	b.n	800ab6e <__exponent+0x60>
	...

0800ab8c <_printf_float>:
 800ab8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab90:	b091      	sub	sp, #68	; 0x44
 800ab92:	460c      	mov	r4, r1
 800ab94:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800ab98:	4616      	mov	r6, r2
 800ab9a:	461f      	mov	r7, r3
 800ab9c:	4605      	mov	r5, r0
 800ab9e:	f001 fb73 	bl	800c288 <_localeconv_r>
 800aba2:	6803      	ldr	r3, [r0, #0]
 800aba4:	4618      	mov	r0, r3
 800aba6:	9309      	str	r3, [sp, #36]	; 0x24
 800aba8:	f7f5 fad2 	bl	8000150 <strlen>
 800abac:	2300      	movs	r3, #0
 800abae:	930e      	str	r3, [sp, #56]	; 0x38
 800abb0:	f8d8 3000 	ldr.w	r3, [r8]
 800abb4:	900a      	str	r0, [sp, #40]	; 0x28
 800abb6:	3307      	adds	r3, #7
 800abb8:	f023 0307 	bic.w	r3, r3, #7
 800abbc:	f103 0208 	add.w	r2, r3, #8
 800abc0:	f894 9018 	ldrb.w	r9, [r4, #24]
 800abc4:	f8d4 b000 	ldr.w	fp, [r4]
 800abc8:	f8c8 2000 	str.w	r2, [r8]
 800abcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abd0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800abd4:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800abd8:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800abdc:	930b      	str	r3, [sp, #44]	; 0x2c
 800abde:	f04f 32ff 	mov.w	r2, #4294967295
 800abe2:	4640      	mov	r0, r8
 800abe4:	4b9c      	ldr	r3, [pc, #624]	; (800ae58 <_printf_float+0x2cc>)
 800abe6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800abe8:	f7f5 ff10 	bl	8000a0c <__aeabi_dcmpun>
 800abec:	bb70      	cbnz	r0, 800ac4c <_printf_float+0xc0>
 800abee:	f04f 32ff 	mov.w	r2, #4294967295
 800abf2:	4640      	mov	r0, r8
 800abf4:	4b98      	ldr	r3, [pc, #608]	; (800ae58 <_printf_float+0x2cc>)
 800abf6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800abf8:	f7f5 feea 	bl	80009d0 <__aeabi_dcmple>
 800abfc:	bb30      	cbnz	r0, 800ac4c <_printf_float+0xc0>
 800abfe:	2200      	movs	r2, #0
 800ac00:	2300      	movs	r3, #0
 800ac02:	4640      	mov	r0, r8
 800ac04:	4651      	mov	r1, sl
 800ac06:	f7f5 fed9 	bl	80009bc <__aeabi_dcmplt>
 800ac0a:	b110      	cbz	r0, 800ac12 <_printf_float+0x86>
 800ac0c:	232d      	movs	r3, #45	; 0x2d
 800ac0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac12:	4b92      	ldr	r3, [pc, #584]	; (800ae5c <_printf_float+0x2d0>)
 800ac14:	4892      	ldr	r0, [pc, #584]	; (800ae60 <_printf_float+0x2d4>)
 800ac16:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800ac1a:	bf94      	ite	ls
 800ac1c:	4698      	movls	r8, r3
 800ac1e:	4680      	movhi	r8, r0
 800ac20:	2303      	movs	r3, #3
 800ac22:	f04f 0a00 	mov.w	sl, #0
 800ac26:	6123      	str	r3, [r4, #16]
 800ac28:	f02b 0304 	bic.w	r3, fp, #4
 800ac2c:	6023      	str	r3, [r4, #0]
 800ac2e:	4633      	mov	r3, r6
 800ac30:	4621      	mov	r1, r4
 800ac32:	4628      	mov	r0, r5
 800ac34:	9700      	str	r7, [sp, #0]
 800ac36:	aa0f      	add	r2, sp, #60	; 0x3c
 800ac38:	f000 f9d4 	bl	800afe4 <_printf_common>
 800ac3c:	3001      	adds	r0, #1
 800ac3e:	f040 8090 	bne.w	800ad62 <_printf_float+0x1d6>
 800ac42:	f04f 30ff 	mov.w	r0, #4294967295
 800ac46:	b011      	add	sp, #68	; 0x44
 800ac48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac4c:	4642      	mov	r2, r8
 800ac4e:	4653      	mov	r3, sl
 800ac50:	4640      	mov	r0, r8
 800ac52:	4651      	mov	r1, sl
 800ac54:	f7f5 feda 	bl	8000a0c <__aeabi_dcmpun>
 800ac58:	b148      	cbz	r0, 800ac6e <_printf_float+0xe2>
 800ac5a:	f1ba 0f00 	cmp.w	sl, #0
 800ac5e:	bfb8      	it	lt
 800ac60:	232d      	movlt	r3, #45	; 0x2d
 800ac62:	4880      	ldr	r0, [pc, #512]	; (800ae64 <_printf_float+0x2d8>)
 800ac64:	bfb8      	it	lt
 800ac66:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ac6a:	4b7f      	ldr	r3, [pc, #508]	; (800ae68 <_printf_float+0x2dc>)
 800ac6c:	e7d3      	b.n	800ac16 <_printf_float+0x8a>
 800ac6e:	6863      	ldr	r3, [r4, #4]
 800ac70:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800ac74:	1c5a      	adds	r2, r3, #1
 800ac76:	d142      	bne.n	800acfe <_printf_float+0x172>
 800ac78:	2306      	movs	r3, #6
 800ac7a:	6063      	str	r3, [r4, #4]
 800ac7c:	2200      	movs	r2, #0
 800ac7e:	9206      	str	r2, [sp, #24]
 800ac80:	aa0e      	add	r2, sp, #56	; 0x38
 800ac82:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800ac86:	aa0d      	add	r2, sp, #52	; 0x34
 800ac88:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800ac8c:	9203      	str	r2, [sp, #12]
 800ac8e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800ac92:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800ac96:	6023      	str	r3, [r4, #0]
 800ac98:	6863      	ldr	r3, [r4, #4]
 800ac9a:	4642      	mov	r2, r8
 800ac9c:	9300      	str	r3, [sp, #0]
 800ac9e:	4628      	mov	r0, r5
 800aca0:	4653      	mov	r3, sl
 800aca2:	910b      	str	r1, [sp, #44]	; 0x2c
 800aca4:	f7ff fed4 	bl	800aa50 <__cvt>
 800aca8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800acaa:	4680      	mov	r8, r0
 800acac:	2947      	cmp	r1, #71	; 0x47
 800acae:	990d      	ldr	r1, [sp, #52]	; 0x34
 800acb0:	d108      	bne.n	800acc4 <_printf_float+0x138>
 800acb2:	1cc8      	adds	r0, r1, #3
 800acb4:	db02      	blt.n	800acbc <_printf_float+0x130>
 800acb6:	6863      	ldr	r3, [r4, #4]
 800acb8:	4299      	cmp	r1, r3
 800acba:	dd40      	ble.n	800ad3e <_printf_float+0x1b2>
 800acbc:	f1a9 0902 	sub.w	r9, r9, #2
 800acc0:	fa5f f989 	uxtb.w	r9, r9
 800acc4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800acc8:	d81f      	bhi.n	800ad0a <_printf_float+0x17e>
 800acca:	464a      	mov	r2, r9
 800accc:	3901      	subs	r1, #1
 800acce:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800acd2:	910d      	str	r1, [sp, #52]	; 0x34
 800acd4:	f7ff ff1b 	bl	800ab0e <__exponent>
 800acd8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800acda:	4682      	mov	sl, r0
 800acdc:	1813      	adds	r3, r2, r0
 800acde:	2a01      	cmp	r2, #1
 800ace0:	6123      	str	r3, [r4, #16]
 800ace2:	dc02      	bgt.n	800acea <_printf_float+0x15e>
 800ace4:	6822      	ldr	r2, [r4, #0]
 800ace6:	07d2      	lsls	r2, r2, #31
 800ace8:	d501      	bpl.n	800acee <_printf_float+0x162>
 800acea:	3301      	adds	r3, #1
 800acec:	6123      	str	r3, [r4, #16]
 800acee:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d09b      	beq.n	800ac2e <_printf_float+0xa2>
 800acf6:	232d      	movs	r3, #45	; 0x2d
 800acf8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800acfc:	e797      	b.n	800ac2e <_printf_float+0xa2>
 800acfe:	2947      	cmp	r1, #71	; 0x47
 800ad00:	d1bc      	bne.n	800ac7c <_printf_float+0xf0>
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d1ba      	bne.n	800ac7c <_printf_float+0xf0>
 800ad06:	2301      	movs	r3, #1
 800ad08:	e7b7      	b.n	800ac7a <_printf_float+0xee>
 800ad0a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800ad0e:	d118      	bne.n	800ad42 <_printf_float+0x1b6>
 800ad10:	2900      	cmp	r1, #0
 800ad12:	6863      	ldr	r3, [r4, #4]
 800ad14:	dd0b      	ble.n	800ad2e <_printf_float+0x1a2>
 800ad16:	6121      	str	r1, [r4, #16]
 800ad18:	b913      	cbnz	r3, 800ad20 <_printf_float+0x194>
 800ad1a:	6822      	ldr	r2, [r4, #0]
 800ad1c:	07d0      	lsls	r0, r2, #31
 800ad1e:	d502      	bpl.n	800ad26 <_printf_float+0x19a>
 800ad20:	3301      	adds	r3, #1
 800ad22:	440b      	add	r3, r1
 800ad24:	6123      	str	r3, [r4, #16]
 800ad26:	f04f 0a00 	mov.w	sl, #0
 800ad2a:	65a1      	str	r1, [r4, #88]	; 0x58
 800ad2c:	e7df      	b.n	800acee <_printf_float+0x162>
 800ad2e:	b913      	cbnz	r3, 800ad36 <_printf_float+0x1aa>
 800ad30:	6822      	ldr	r2, [r4, #0]
 800ad32:	07d2      	lsls	r2, r2, #31
 800ad34:	d501      	bpl.n	800ad3a <_printf_float+0x1ae>
 800ad36:	3302      	adds	r3, #2
 800ad38:	e7f4      	b.n	800ad24 <_printf_float+0x198>
 800ad3a:	2301      	movs	r3, #1
 800ad3c:	e7f2      	b.n	800ad24 <_printf_float+0x198>
 800ad3e:	f04f 0967 	mov.w	r9, #103	; 0x67
 800ad42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ad44:	4299      	cmp	r1, r3
 800ad46:	db05      	blt.n	800ad54 <_printf_float+0x1c8>
 800ad48:	6823      	ldr	r3, [r4, #0]
 800ad4a:	6121      	str	r1, [r4, #16]
 800ad4c:	07d8      	lsls	r0, r3, #31
 800ad4e:	d5ea      	bpl.n	800ad26 <_printf_float+0x19a>
 800ad50:	1c4b      	adds	r3, r1, #1
 800ad52:	e7e7      	b.n	800ad24 <_printf_float+0x198>
 800ad54:	2900      	cmp	r1, #0
 800ad56:	bfcc      	ite	gt
 800ad58:	2201      	movgt	r2, #1
 800ad5a:	f1c1 0202 	rsble	r2, r1, #2
 800ad5e:	4413      	add	r3, r2
 800ad60:	e7e0      	b.n	800ad24 <_printf_float+0x198>
 800ad62:	6823      	ldr	r3, [r4, #0]
 800ad64:	055a      	lsls	r2, r3, #21
 800ad66:	d407      	bmi.n	800ad78 <_printf_float+0x1ec>
 800ad68:	6923      	ldr	r3, [r4, #16]
 800ad6a:	4642      	mov	r2, r8
 800ad6c:	4631      	mov	r1, r6
 800ad6e:	4628      	mov	r0, r5
 800ad70:	47b8      	blx	r7
 800ad72:	3001      	adds	r0, #1
 800ad74:	d12b      	bne.n	800adce <_printf_float+0x242>
 800ad76:	e764      	b.n	800ac42 <_printf_float+0xb6>
 800ad78:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800ad7c:	f240 80dd 	bls.w	800af3a <_printf_float+0x3ae>
 800ad80:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ad84:	2200      	movs	r2, #0
 800ad86:	2300      	movs	r3, #0
 800ad88:	f7f5 fe0e 	bl	80009a8 <__aeabi_dcmpeq>
 800ad8c:	2800      	cmp	r0, #0
 800ad8e:	d033      	beq.n	800adf8 <_printf_float+0x26c>
 800ad90:	2301      	movs	r3, #1
 800ad92:	4631      	mov	r1, r6
 800ad94:	4628      	mov	r0, r5
 800ad96:	4a35      	ldr	r2, [pc, #212]	; (800ae6c <_printf_float+0x2e0>)
 800ad98:	47b8      	blx	r7
 800ad9a:	3001      	adds	r0, #1
 800ad9c:	f43f af51 	beq.w	800ac42 <_printf_float+0xb6>
 800ada0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800ada4:	429a      	cmp	r2, r3
 800ada6:	db02      	blt.n	800adae <_printf_float+0x222>
 800ada8:	6823      	ldr	r3, [r4, #0]
 800adaa:	07d8      	lsls	r0, r3, #31
 800adac:	d50f      	bpl.n	800adce <_printf_float+0x242>
 800adae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800adb2:	4631      	mov	r1, r6
 800adb4:	4628      	mov	r0, r5
 800adb6:	47b8      	blx	r7
 800adb8:	3001      	adds	r0, #1
 800adba:	f43f af42 	beq.w	800ac42 <_printf_float+0xb6>
 800adbe:	f04f 0800 	mov.w	r8, #0
 800adc2:	f104 091a 	add.w	r9, r4, #26
 800adc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800adc8:	3b01      	subs	r3, #1
 800adca:	4543      	cmp	r3, r8
 800adcc:	dc09      	bgt.n	800ade2 <_printf_float+0x256>
 800adce:	6823      	ldr	r3, [r4, #0]
 800add0:	079b      	lsls	r3, r3, #30
 800add2:	f100 8102 	bmi.w	800afda <_printf_float+0x44e>
 800add6:	68e0      	ldr	r0, [r4, #12]
 800add8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800adda:	4298      	cmp	r0, r3
 800addc:	bfb8      	it	lt
 800adde:	4618      	movlt	r0, r3
 800ade0:	e731      	b.n	800ac46 <_printf_float+0xba>
 800ade2:	2301      	movs	r3, #1
 800ade4:	464a      	mov	r2, r9
 800ade6:	4631      	mov	r1, r6
 800ade8:	4628      	mov	r0, r5
 800adea:	47b8      	blx	r7
 800adec:	3001      	adds	r0, #1
 800adee:	f43f af28 	beq.w	800ac42 <_printf_float+0xb6>
 800adf2:	f108 0801 	add.w	r8, r8, #1
 800adf6:	e7e6      	b.n	800adc6 <_printf_float+0x23a>
 800adf8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	dc38      	bgt.n	800ae70 <_printf_float+0x2e4>
 800adfe:	2301      	movs	r3, #1
 800ae00:	4631      	mov	r1, r6
 800ae02:	4628      	mov	r0, r5
 800ae04:	4a19      	ldr	r2, [pc, #100]	; (800ae6c <_printf_float+0x2e0>)
 800ae06:	47b8      	blx	r7
 800ae08:	3001      	adds	r0, #1
 800ae0a:	f43f af1a 	beq.w	800ac42 <_printf_float+0xb6>
 800ae0e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800ae12:	4313      	orrs	r3, r2
 800ae14:	d102      	bne.n	800ae1c <_printf_float+0x290>
 800ae16:	6823      	ldr	r3, [r4, #0]
 800ae18:	07d9      	lsls	r1, r3, #31
 800ae1a:	d5d8      	bpl.n	800adce <_printf_float+0x242>
 800ae1c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ae20:	4631      	mov	r1, r6
 800ae22:	4628      	mov	r0, r5
 800ae24:	47b8      	blx	r7
 800ae26:	3001      	adds	r0, #1
 800ae28:	f43f af0b 	beq.w	800ac42 <_printf_float+0xb6>
 800ae2c:	f04f 0900 	mov.w	r9, #0
 800ae30:	f104 0a1a 	add.w	sl, r4, #26
 800ae34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ae36:	425b      	negs	r3, r3
 800ae38:	454b      	cmp	r3, r9
 800ae3a:	dc01      	bgt.n	800ae40 <_printf_float+0x2b4>
 800ae3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ae3e:	e794      	b.n	800ad6a <_printf_float+0x1de>
 800ae40:	2301      	movs	r3, #1
 800ae42:	4652      	mov	r2, sl
 800ae44:	4631      	mov	r1, r6
 800ae46:	4628      	mov	r0, r5
 800ae48:	47b8      	blx	r7
 800ae4a:	3001      	adds	r0, #1
 800ae4c:	f43f aef9 	beq.w	800ac42 <_printf_float+0xb6>
 800ae50:	f109 0901 	add.w	r9, r9, #1
 800ae54:	e7ee      	b.n	800ae34 <_printf_float+0x2a8>
 800ae56:	bf00      	nop
 800ae58:	7fefffff 	.word	0x7fefffff
 800ae5c:	0800dad8 	.word	0x0800dad8
 800ae60:	0800dadc 	.word	0x0800dadc
 800ae64:	0800dae4 	.word	0x0800dae4
 800ae68:	0800dae0 	.word	0x0800dae0
 800ae6c:	0800dae8 	.word	0x0800dae8
 800ae70:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ae72:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ae74:	429a      	cmp	r2, r3
 800ae76:	bfa8      	it	ge
 800ae78:	461a      	movge	r2, r3
 800ae7a:	2a00      	cmp	r2, #0
 800ae7c:	4691      	mov	r9, r2
 800ae7e:	dc37      	bgt.n	800aef0 <_printf_float+0x364>
 800ae80:	f04f 0b00 	mov.w	fp, #0
 800ae84:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ae88:	f104 021a 	add.w	r2, r4, #26
 800ae8c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800ae90:	ebaa 0309 	sub.w	r3, sl, r9
 800ae94:	455b      	cmp	r3, fp
 800ae96:	dc33      	bgt.n	800af00 <_printf_float+0x374>
 800ae98:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800ae9c:	429a      	cmp	r2, r3
 800ae9e:	db3b      	blt.n	800af18 <_printf_float+0x38c>
 800aea0:	6823      	ldr	r3, [r4, #0]
 800aea2:	07da      	lsls	r2, r3, #31
 800aea4:	d438      	bmi.n	800af18 <_printf_float+0x38c>
 800aea6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aea8:	990d      	ldr	r1, [sp, #52]	; 0x34
 800aeaa:	eba3 020a 	sub.w	r2, r3, sl
 800aeae:	eba3 0901 	sub.w	r9, r3, r1
 800aeb2:	4591      	cmp	r9, r2
 800aeb4:	bfa8      	it	ge
 800aeb6:	4691      	movge	r9, r2
 800aeb8:	f1b9 0f00 	cmp.w	r9, #0
 800aebc:	dc34      	bgt.n	800af28 <_printf_float+0x39c>
 800aebe:	f04f 0800 	mov.w	r8, #0
 800aec2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aec6:	f104 0a1a 	add.w	sl, r4, #26
 800aeca:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800aece:	1a9b      	subs	r3, r3, r2
 800aed0:	eba3 0309 	sub.w	r3, r3, r9
 800aed4:	4543      	cmp	r3, r8
 800aed6:	f77f af7a 	ble.w	800adce <_printf_float+0x242>
 800aeda:	2301      	movs	r3, #1
 800aedc:	4652      	mov	r2, sl
 800aede:	4631      	mov	r1, r6
 800aee0:	4628      	mov	r0, r5
 800aee2:	47b8      	blx	r7
 800aee4:	3001      	adds	r0, #1
 800aee6:	f43f aeac 	beq.w	800ac42 <_printf_float+0xb6>
 800aeea:	f108 0801 	add.w	r8, r8, #1
 800aeee:	e7ec      	b.n	800aeca <_printf_float+0x33e>
 800aef0:	4613      	mov	r3, r2
 800aef2:	4631      	mov	r1, r6
 800aef4:	4642      	mov	r2, r8
 800aef6:	4628      	mov	r0, r5
 800aef8:	47b8      	blx	r7
 800aefa:	3001      	adds	r0, #1
 800aefc:	d1c0      	bne.n	800ae80 <_printf_float+0x2f4>
 800aefe:	e6a0      	b.n	800ac42 <_printf_float+0xb6>
 800af00:	2301      	movs	r3, #1
 800af02:	4631      	mov	r1, r6
 800af04:	4628      	mov	r0, r5
 800af06:	920b      	str	r2, [sp, #44]	; 0x2c
 800af08:	47b8      	blx	r7
 800af0a:	3001      	adds	r0, #1
 800af0c:	f43f ae99 	beq.w	800ac42 <_printf_float+0xb6>
 800af10:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800af12:	f10b 0b01 	add.w	fp, fp, #1
 800af16:	e7b9      	b.n	800ae8c <_printf_float+0x300>
 800af18:	4631      	mov	r1, r6
 800af1a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800af1e:	4628      	mov	r0, r5
 800af20:	47b8      	blx	r7
 800af22:	3001      	adds	r0, #1
 800af24:	d1bf      	bne.n	800aea6 <_printf_float+0x31a>
 800af26:	e68c      	b.n	800ac42 <_printf_float+0xb6>
 800af28:	464b      	mov	r3, r9
 800af2a:	4631      	mov	r1, r6
 800af2c:	4628      	mov	r0, r5
 800af2e:	eb08 020a 	add.w	r2, r8, sl
 800af32:	47b8      	blx	r7
 800af34:	3001      	adds	r0, #1
 800af36:	d1c2      	bne.n	800aebe <_printf_float+0x332>
 800af38:	e683      	b.n	800ac42 <_printf_float+0xb6>
 800af3a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800af3c:	2a01      	cmp	r2, #1
 800af3e:	dc01      	bgt.n	800af44 <_printf_float+0x3b8>
 800af40:	07db      	lsls	r3, r3, #31
 800af42:	d537      	bpl.n	800afb4 <_printf_float+0x428>
 800af44:	2301      	movs	r3, #1
 800af46:	4642      	mov	r2, r8
 800af48:	4631      	mov	r1, r6
 800af4a:	4628      	mov	r0, r5
 800af4c:	47b8      	blx	r7
 800af4e:	3001      	adds	r0, #1
 800af50:	f43f ae77 	beq.w	800ac42 <_printf_float+0xb6>
 800af54:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800af58:	4631      	mov	r1, r6
 800af5a:	4628      	mov	r0, r5
 800af5c:	47b8      	blx	r7
 800af5e:	3001      	adds	r0, #1
 800af60:	f43f ae6f 	beq.w	800ac42 <_printf_float+0xb6>
 800af64:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800af68:	2200      	movs	r2, #0
 800af6a:	2300      	movs	r3, #0
 800af6c:	f7f5 fd1c 	bl	80009a8 <__aeabi_dcmpeq>
 800af70:	b9d8      	cbnz	r0, 800afaa <_printf_float+0x41e>
 800af72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800af74:	f108 0201 	add.w	r2, r8, #1
 800af78:	3b01      	subs	r3, #1
 800af7a:	4631      	mov	r1, r6
 800af7c:	4628      	mov	r0, r5
 800af7e:	47b8      	blx	r7
 800af80:	3001      	adds	r0, #1
 800af82:	d10e      	bne.n	800afa2 <_printf_float+0x416>
 800af84:	e65d      	b.n	800ac42 <_printf_float+0xb6>
 800af86:	2301      	movs	r3, #1
 800af88:	464a      	mov	r2, r9
 800af8a:	4631      	mov	r1, r6
 800af8c:	4628      	mov	r0, r5
 800af8e:	47b8      	blx	r7
 800af90:	3001      	adds	r0, #1
 800af92:	f43f ae56 	beq.w	800ac42 <_printf_float+0xb6>
 800af96:	f108 0801 	add.w	r8, r8, #1
 800af9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800af9c:	3b01      	subs	r3, #1
 800af9e:	4543      	cmp	r3, r8
 800afa0:	dcf1      	bgt.n	800af86 <_printf_float+0x3fa>
 800afa2:	4653      	mov	r3, sl
 800afa4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800afa8:	e6e0      	b.n	800ad6c <_printf_float+0x1e0>
 800afaa:	f04f 0800 	mov.w	r8, #0
 800afae:	f104 091a 	add.w	r9, r4, #26
 800afb2:	e7f2      	b.n	800af9a <_printf_float+0x40e>
 800afb4:	2301      	movs	r3, #1
 800afb6:	4642      	mov	r2, r8
 800afb8:	e7df      	b.n	800af7a <_printf_float+0x3ee>
 800afba:	2301      	movs	r3, #1
 800afbc:	464a      	mov	r2, r9
 800afbe:	4631      	mov	r1, r6
 800afc0:	4628      	mov	r0, r5
 800afc2:	47b8      	blx	r7
 800afc4:	3001      	adds	r0, #1
 800afc6:	f43f ae3c 	beq.w	800ac42 <_printf_float+0xb6>
 800afca:	f108 0801 	add.w	r8, r8, #1
 800afce:	68e3      	ldr	r3, [r4, #12]
 800afd0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800afd2:	1a5b      	subs	r3, r3, r1
 800afd4:	4543      	cmp	r3, r8
 800afd6:	dcf0      	bgt.n	800afba <_printf_float+0x42e>
 800afd8:	e6fd      	b.n	800add6 <_printf_float+0x24a>
 800afda:	f04f 0800 	mov.w	r8, #0
 800afde:	f104 0919 	add.w	r9, r4, #25
 800afe2:	e7f4      	b.n	800afce <_printf_float+0x442>

0800afe4 <_printf_common>:
 800afe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800afe8:	4616      	mov	r6, r2
 800afea:	4699      	mov	r9, r3
 800afec:	688a      	ldr	r2, [r1, #8]
 800afee:	690b      	ldr	r3, [r1, #16]
 800aff0:	4607      	mov	r7, r0
 800aff2:	4293      	cmp	r3, r2
 800aff4:	bfb8      	it	lt
 800aff6:	4613      	movlt	r3, r2
 800aff8:	6033      	str	r3, [r6, #0]
 800affa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800affe:	460c      	mov	r4, r1
 800b000:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b004:	b10a      	cbz	r2, 800b00a <_printf_common+0x26>
 800b006:	3301      	adds	r3, #1
 800b008:	6033      	str	r3, [r6, #0]
 800b00a:	6823      	ldr	r3, [r4, #0]
 800b00c:	0699      	lsls	r1, r3, #26
 800b00e:	bf42      	ittt	mi
 800b010:	6833      	ldrmi	r3, [r6, #0]
 800b012:	3302      	addmi	r3, #2
 800b014:	6033      	strmi	r3, [r6, #0]
 800b016:	6825      	ldr	r5, [r4, #0]
 800b018:	f015 0506 	ands.w	r5, r5, #6
 800b01c:	d106      	bne.n	800b02c <_printf_common+0x48>
 800b01e:	f104 0a19 	add.w	sl, r4, #25
 800b022:	68e3      	ldr	r3, [r4, #12]
 800b024:	6832      	ldr	r2, [r6, #0]
 800b026:	1a9b      	subs	r3, r3, r2
 800b028:	42ab      	cmp	r3, r5
 800b02a:	dc28      	bgt.n	800b07e <_printf_common+0x9a>
 800b02c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b030:	1e13      	subs	r3, r2, #0
 800b032:	6822      	ldr	r2, [r4, #0]
 800b034:	bf18      	it	ne
 800b036:	2301      	movne	r3, #1
 800b038:	0692      	lsls	r2, r2, #26
 800b03a:	d42d      	bmi.n	800b098 <_printf_common+0xb4>
 800b03c:	4649      	mov	r1, r9
 800b03e:	4638      	mov	r0, r7
 800b040:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b044:	47c0      	blx	r8
 800b046:	3001      	adds	r0, #1
 800b048:	d020      	beq.n	800b08c <_printf_common+0xa8>
 800b04a:	6823      	ldr	r3, [r4, #0]
 800b04c:	68e5      	ldr	r5, [r4, #12]
 800b04e:	f003 0306 	and.w	r3, r3, #6
 800b052:	2b04      	cmp	r3, #4
 800b054:	bf18      	it	ne
 800b056:	2500      	movne	r5, #0
 800b058:	6832      	ldr	r2, [r6, #0]
 800b05a:	f04f 0600 	mov.w	r6, #0
 800b05e:	68a3      	ldr	r3, [r4, #8]
 800b060:	bf08      	it	eq
 800b062:	1aad      	subeq	r5, r5, r2
 800b064:	6922      	ldr	r2, [r4, #16]
 800b066:	bf08      	it	eq
 800b068:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b06c:	4293      	cmp	r3, r2
 800b06e:	bfc4      	itt	gt
 800b070:	1a9b      	subgt	r3, r3, r2
 800b072:	18ed      	addgt	r5, r5, r3
 800b074:	341a      	adds	r4, #26
 800b076:	42b5      	cmp	r5, r6
 800b078:	d11a      	bne.n	800b0b0 <_printf_common+0xcc>
 800b07a:	2000      	movs	r0, #0
 800b07c:	e008      	b.n	800b090 <_printf_common+0xac>
 800b07e:	2301      	movs	r3, #1
 800b080:	4652      	mov	r2, sl
 800b082:	4649      	mov	r1, r9
 800b084:	4638      	mov	r0, r7
 800b086:	47c0      	blx	r8
 800b088:	3001      	adds	r0, #1
 800b08a:	d103      	bne.n	800b094 <_printf_common+0xb0>
 800b08c:	f04f 30ff 	mov.w	r0, #4294967295
 800b090:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b094:	3501      	adds	r5, #1
 800b096:	e7c4      	b.n	800b022 <_printf_common+0x3e>
 800b098:	2030      	movs	r0, #48	; 0x30
 800b09a:	18e1      	adds	r1, r4, r3
 800b09c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b0a0:	1c5a      	adds	r2, r3, #1
 800b0a2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b0a6:	4422      	add	r2, r4
 800b0a8:	3302      	adds	r3, #2
 800b0aa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b0ae:	e7c5      	b.n	800b03c <_printf_common+0x58>
 800b0b0:	2301      	movs	r3, #1
 800b0b2:	4622      	mov	r2, r4
 800b0b4:	4649      	mov	r1, r9
 800b0b6:	4638      	mov	r0, r7
 800b0b8:	47c0      	blx	r8
 800b0ba:	3001      	adds	r0, #1
 800b0bc:	d0e6      	beq.n	800b08c <_printf_common+0xa8>
 800b0be:	3601      	adds	r6, #1
 800b0c0:	e7d9      	b.n	800b076 <_printf_common+0x92>
	...

0800b0c4 <_printf_i>:
 800b0c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b0c8:	7e0f      	ldrb	r7, [r1, #24]
 800b0ca:	4691      	mov	r9, r2
 800b0cc:	2f78      	cmp	r7, #120	; 0x78
 800b0ce:	4680      	mov	r8, r0
 800b0d0:	460c      	mov	r4, r1
 800b0d2:	469a      	mov	sl, r3
 800b0d4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b0d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b0da:	d807      	bhi.n	800b0ec <_printf_i+0x28>
 800b0dc:	2f62      	cmp	r7, #98	; 0x62
 800b0de:	d80a      	bhi.n	800b0f6 <_printf_i+0x32>
 800b0e0:	2f00      	cmp	r7, #0
 800b0e2:	f000 80d9 	beq.w	800b298 <_printf_i+0x1d4>
 800b0e6:	2f58      	cmp	r7, #88	; 0x58
 800b0e8:	f000 80a4 	beq.w	800b234 <_printf_i+0x170>
 800b0ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b0f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b0f4:	e03a      	b.n	800b16c <_printf_i+0xa8>
 800b0f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b0fa:	2b15      	cmp	r3, #21
 800b0fc:	d8f6      	bhi.n	800b0ec <_printf_i+0x28>
 800b0fe:	a101      	add	r1, pc, #4	; (adr r1, 800b104 <_printf_i+0x40>)
 800b100:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b104:	0800b15d 	.word	0x0800b15d
 800b108:	0800b171 	.word	0x0800b171
 800b10c:	0800b0ed 	.word	0x0800b0ed
 800b110:	0800b0ed 	.word	0x0800b0ed
 800b114:	0800b0ed 	.word	0x0800b0ed
 800b118:	0800b0ed 	.word	0x0800b0ed
 800b11c:	0800b171 	.word	0x0800b171
 800b120:	0800b0ed 	.word	0x0800b0ed
 800b124:	0800b0ed 	.word	0x0800b0ed
 800b128:	0800b0ed 	.word	0x0800b0ed
 800b12c:	0800b0ed 	.word	0x0800b0ed
 800b130:	0800b27f 	.word	0x0800b27f
 800b134:	0800b1a1 	.word	0x0800b1a1
 800b138:	0800b261 	.word	0x0800b261
 800b13c:	0800b0ed 	.word	0x0800b0ed
 800b140:	0800b0ed 	.word	0x0800b0ed
 800b144:	0800b2a1 	.word	0x0800b2a1
 800b148:	0800b0ed 	.word	0x0800b0ed
 800b14c:	0800b1a1 	.word	0x0800b1a1
 800b150:	0800b0ed 	.word	0x0800b0ed
 800b154:	0800b0ed 	.word	0x0800b0ed
 800b158:	0800b269 	.word	0x0800b269
 800b15c:	682b      	ldr	r3, [r5, #0]
 800b15e:	1d1a      	adds	r2, r3, #4
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	602a      	str	r2, [r5, #0]
 800b164:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b168:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b16c:	2301      	movs	r3, #1
 800b16e:	e0a4      	b.n	800b2ba <_printf_i+0x1f6>
 800b170:	6820      	ldr	r0, [r4, #0]
 800b172:	6829      	ldr	r1, [r5, #0]
 800b174:	0606      	lsls	r6, r0, #24
 800b176:	f101 0304 	add.w	r3, r1, #4
 800b17a:	d50a      	bpl.n	800b192 <_printf_i+0xce>
 800b17c:	680e      	ldr	r6, [r1, #0]
 800b17e:	602b      	str	r3, [r5, #0]
 800b180:	2e00      	cmp	r6, #0
 800b182:	da03      	bge.n	800b18c <_printf_i+0xc8>
 800b184:	232d      	movs	r3, #45	; 0x2d
 800b186:	4276      	negs	r6, r6
 800b188:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b18c:	230a      	movs	r3, #10
 800b18e:	485e      	ldr	r0, [pc, #376]	; (800b308 <_printf_i+0x244>)
 800b190:	e019      	b.n	800b1c6 <_printf_i+0x102>
 800b192:	680e      	ldr	r6, [r1, #0]
 800b194:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b198:	602b      	str	r3, [r5, #0]
 800b19a:	bf18      	it	ne
 800b19c:	b236      	sxthne	r6, r6
 800b19e:	e7ef      	b.n	800b180 <_printf_i+0xbc>
 800b1a0:	682b      	ldr	r3, [r5, #0]
 800b1a2:	6820      	ldr	r0, [r4, #0]
 800b1a4:	1d19      	adds	r1, r3, #4
 800b1a6:	6029      	str	r1, [r5, #0]
 800b1a8:	0601      	lsls	r1, r0, #24
 800b1aa:	d501      	bpl.n	800b1b0 <_printf_i+0xec>
 800b1ac:	681e      	ldr	r6, [r3, #0]
 800b1ae:	e002      	b.n	800b1b6 <_printf_i+0xf2>
 800b1b0:	0646      	lsls	r6, r0, #25
 800b1b2:	d5fb      	bpl.n	800b1ac <_printf_i+0xe8>
 800b1b4:	881e      	ldrh	r6, [r3, #0]
 800b1b6:	2f6f      	cmp	r7, #111	; 0x6f
 800b1b8:	bf0c      	ite	eq
 800b1ba:	2308      	moveq	r3, #8
 800b1bc:	230a      	movne	r3, #10
 800b1be:	4852      	ldr	r0, [pc, #328]	; (800b308 <_printf_i+0x244>)
 800b1c0:	2100      	movs	r1, #0
 800b1c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b1c6:	6865      	ldr	r5, [r4, #4]
 800b1c8:	2d00      	cmp	r5, #0
 800b1ca:	bfa8      	it	ge
 800b1cc:	6821      	ldrge	r1, [r4, #0]
 800b1ce:	60a5      	str	r5, [r4, #8]
 800b1d0:	bfa4      	itt	ge
 800b1d2:	f021 0104 	bicge.w	r1, r1, #4
 800b1d6:	6021      	strge	r1, [r4, #0]
 800b1d8:	b90e      	cbnz	r6, 800b1de <_printf_i+0x11a>
 800b1da:	2d00      	cmp	r5, #0
 800b1dc:	d04d      	beq.n	800b27a <_printf_i+0x1b6>
 800b1de:	4615      	mov	r5, r2
 800b1e0:	fbb6 f1f3 	udiv	r1, r6, r3
 800b1e4:	fb03 6711 	mls	r7, r3, r1, r6
 800b1e8:	5dc7      	ldrb	r7, [r0, r7]
 800b1ea:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b1ee:	4637      	mov	r7, r6
 800b1f0:	42bb      	cmp	r3, r7
 800b1f2:	460e      	mov	r6, r1
 800b1f4:	d9f4      	bls.n	800b1e0 <_printf_i+0x11c>
 800b1f6:	2b08      	cmp	r3, #8
 800b1f8:	d10b      	bne.n	800b212 <_printf_i+0x14e>
 800b1fa:	6823      	ldr	r3, [r4, #0]
 800b1fc:	07de      	lsls	r6, r3, #31
 800b1fe:	d508      	bpl.n	800b212 <_printf_i+0x14e>
 800b200:	6923      	ldr	r3, [r4, #16]
 800b202:	6861      	ldr	r1, [r4, #4]
 800b204:	4299      	cmp	r1, r3
 800b206:	bfde      	ittt	le
 800b208:	2330      	movle	r3, #48	; 0x30
 800b20a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b20e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b212:	1b52      	subs	r2, r2, r5
 800b214:	6122      	str	r2, [r4, #16]
 800b216:	464b      	mov	r3, r9
 800b218:	4621      	mov	r1, r4
 800b21a:	4640      	mov	r0, r8
 800b21c:	f8cd a000 	str.w	sl, [sp]
 800b220:	aa03      	add	r2, sp, #12
 800b222:	f7ff fedf 	bl	800afe4 <_printf_common>
 800b226:	3001      	adds	r0, #1
 800b228:	d14c      	bne.n	800b2c4 <_printf_i+0x200>
 800b22a:	f04f 30ff 	mov.w	r0, #4294967295
 800b22e:	b004      	add	sp, #16
 800b230:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b234:	4834      	ldr	r0, [pc, #208]	; (800b308 <_printf_i+0x244>)
 800b236:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b23a:	6829      	ldr	r1, [r5, #0]
 800b23c:	6823      	ldr	r3, [r4, #0]
 800b23e:	f851 6b04 	ldr.w	r6, [r1], #4
 800b242:	6029      	str	r1, [r5, #0]
 800b244:	061d      	lsls	r5, r3, #24
 800b246:	d514      	bpl.n	800b272 <_printf_i+0x1ae>
 800b248:	07df      	lsls	r7, r3, #31
 800b24a:	bf44      	itt	mi
 800b24c:	f043 0320 	orrmi.w	r3, r3, #32
 800b250:	6023      	strmi	r3, [r4, #0]
 800b252:	b91e      	cbnz	r6, 800b25c <_printf_i+0x198>
 800b254:	6823      	ldr	r3, [r4, #0]
 800b256:	f023 0320 	bic.w	r3, r3, #32
 800b25a:	6023      	str	r3, [r4, #0]
 800b25c:	2310      	movs	r3, #16
 800b25e:	e7af      	b.n	800b1c0 <_printf_i+0xfc>
 800b260:	6823      	ldr	r3, [r4, #0]
 800b262:	f043 0320 	orr.w	r3, r3, #32
 800b266:	6023      	str	r3, [r4, #0]
 800b268:	2378      	movs	r3, #120	; 0x78
 800b26a:	4828      	ldr	r0, [pc, #160]	; (800b30c <_printf_i+0x248>)
 800b26c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b270:	e7e3      	b.n	800b23a <_printf_i+0x176>
 800b272:	0659      	lsls	r1, r3, #25
 800b274:	bf48      	it	mi
 800b276:	b2b6      	uxthmi	r6, r6
 800b278:	e7e6      	b.n	800b248 <_printf_i+0x184>
 800b27a:	4615      	mov	r5, r2
 800b27c:	e7bb      	b.n	800b1f6 <_printf_i+0x132>
 800b27e:	682b      	ldr	r3, [r5, #0]
 800b280:	6826      	ldr	r6, [r4, #0]
 800b282:	1d18      	adds	r0, r3, #4
 800b284:	6961      	ldr	r1, [r4, #20]
 800b286:	6028      	str	r0, [r5, #0]
 800b288:	0635      	lsls	r5, r6, #24
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	d501      	bpl.n	800b292 <_printf_i+0x1ce>
 800b28e:	6019      	str	r1, [r3, #0]
 800b290:	e002      	b.n	800b298 <_printf_i+0x1d4>
 800b292:	0670      	lsls	r0, r6, #25
 800b294:	d5fb      	bpl.n	800b28e <_printf_i+0x1ca>
 800b296:	8019      	strh	r1, [r3, #0]
 800b298:	2300      	movs	r3, #0
 800b29a:	4615      	mov	r5, r2
 800b29c:	6123      	str	r3, [r4, #16]
 800b29e:	e7ba      	b.n	800b216 <_printf_i+0x152>
 800b2a0:	682b      	ldr	r3, [r5, #0]
 800b2a2:	2100      	movs	r1, #0
 800b2a4:	1d1a      	adds	r2, r3, #4
 800b2a6:	602a      	str	r2, [r5, #0]
 800b2a8:	681d      	ldr	r5, [r3, #0]
 800b2aa:	6862      	ldr	r2, [r4, #4]
 800b2ac:	4628      	mov	r0, r5
 800b2ae:	f000 fffb 	bl	800c2a8 <memchr>
 800b2b2:	b108      	cbz	r0, 800b2b8 <_printf_i+0x1f4>
 800b2b4:	1b40      	subs	r0, r0, r5
 800b2b6:	6060      	str	r0, [r4, #4]
 800b2b8:	6863      	ldr	r3, [r4, #4]
 800b2ba:	6123      	str	r3, [r4, #16]
 800b2bc:	2300      	movs	r3, #0
 800b2be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b2c2:	e7a8      	b.n	800b216 <_printf_i+0x152>
 800b2c4:	462a      	mov	r2, r5
 800b2c6:	4649      	mov	r1, r9
 800b2c8:	4640      	mov	r0, r8
 800b2ca:	6923      	ldr	r3, [r4, #16]
 800b2cc:	47d0      	blx	sl
 800b2ce:	3001      	adds	r0, #1
 800b2d0:	d0ab      	beq.n	800b22a <_printf_i+0x166>
 800b2d2:	6823      	ldr	r3, [r4, #0]
 800b2d4:	079b      	lsls	r3, r3, #30
 800b2d6:	d413      	bmi.n	800b300 <_printf_i+0x23c>
 800b2d8:	68e0      	ldr	r0, [r4, #12]
 800b2da:	9b03      	ldr	r3, [sp, #12]
 800b2dc:	4298      	cmp	r0, r3
 800b2de:	bfb8      	it	lt
 800b2e0:	4618      	movlt	r0, r3
 800b2e2:	e7a4      	b.n	800b22e <_printf_i+0x16a>
 800b2e4:	2301      	movs	r3, #1
 800b2e6:	4632      	mov	r2, r6
 800b2e8:	4649      	mov	r1, r9
 800b2ea:	4640      	mov	r0, r8
 800b2ec:	47d0      	blx	sl
 800b2ee:	3001      	adds	r0, #1
 800b2f0:	d09b      	beq.n	800b22a <_printf_i+0x166>
 800b2f2:	3501      	adds	r5, #1
 800b2f4:	68e3      	ldr	r3, [r4, #12]
 800b2f6:	9903      	ldr	r1, [sp, #12]
 800b2f8:	1a5b      	subs	r3, r3, r1
 800b2fa:	42ab      	cmp	r3, r5
 800b2fc:	dcf2      	bgt.n	800b2e4 <_printf_i+0x220>
 800b2fe:	e7eb      	b.n	800b2d8 <_printf_i+0x214>
 800b300:	2500      	movs	r5, #0
 800b302:	f104 0619 	add.w	r6, r4, #25
 800b306:	e7f5      	b.n	800b2f4 <_printf_i+0x230>
 800b308:	0800daea 	.word	0x0800daea
 800b30c:	0800dafb 	.word	0x0800dafb

0800b310 <iprintf>:
 800b310:	b40f      	push	{r0, r1, r2, r3}
 800b312:	4b0a      	ldr	r3, [pc, #40]	; (800b33c <iprintf+0x2c>)
 800b314:	b513      	push	{r0, r1, r4, lr}
 800b316:	681c      	ldr	r4, [r3, #0]
 800b318:	b124      	cbz	r4, 800b324 <iprintf+0x14>
 800b31a:	69a3      	ldr	r3, [r4, #24]
 800b31c:	b913      	cbnz	r3, 800b324 <iprintf+0x14>
 800b31e:	4620      	mov	r0, r4
 800b320:	f000 ff14 	bl	800c14c <__sinit>
 800b324:	ab05      	add	r3, sp, #20
 800b326:	4620      	mov	r0, r4
 800b328:	9a04      	ldr	r2, [sp, #16]
 800b32a:	68a1      	ldr	r1, [r4, #8]
 800b32c:	9301      	str	r3, [sp, #4]
 800b32e:	f001 fdcd 	bl	800cecc <_vfiprintf_r>
 800b332:	b002      	add	sp, #8
 800b334:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b338:	b004      	add	sp, #16
 800b33a:	4770      	bx	lr
 800b33c:	20000188 	.word	0x20000188

0800b340 <putchar>:
 800b340:	b538      	push	{r3, r4, r5, lr}
 800b342:	4b08      	ldr	r3, [pc, #32]	; (800b364 <putchar+0x24>)
 800b344:	4605      	mov	r5, r0
 800b346:	681c      	ldr	r4, [r3, #0]
 800b348:	b124      	cbz	r4, 800b354 <putchar+0x14>
 800b34a:	69a3      	ldr	r3, [r4, #24]
 800b34c:	b913      	cbnz	r3, 800b354 <putchar+0x14>
 800b34e:	4620      	mov	r0, r4
 800b350:	f000 fefc 	bl	800c14c <__sinit>
 800b354:	4629      	mov	r1, r5
 800b356:	4620      	mov	r0, r4
 800b358:	68a2      	ldr	r2, [r4, #8]
 800b35a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b35e:	f001 bee5 	b.w	800d12c <_putc_r>
 800b362:	bf00      	nop
 800b364:	20000188 	.word	0x20000188

0800b368 <siprintf>:
 800b368:	b40e      	push	{r1, r2, r3}
 800b36a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b36e:	b500      	push	{lr}
 800b370:	b09c      	sub	sp, #112	; 0x70
 800b372:	ab1d      	add	r3, sp, #116	; 0x74
 800b374:	9002      	str	r0, [sp, #8]
 800b376:	9006      	str	r0, [sp, #24]
 800b378:	9107      	str	r1, [sp, #28]
 800b37a:	9104      	str	r1, [sp, #16]
 800b37c:	4808      	ldr	r0, [pc, #32]	; (800b3a0 <siprintf+0x38>)
 800b37e:	4909      	ldr	r1, [pc, #36]	; (800b3a4 <siprintf+0x3c>)
 800b380:	f853 2b04 	ldr.w	r2, [r3], #4
 800b384:	9105      	str	r1, [sp, #20]
 800b386:	6800      	ldr	r0, [r0, #0]
 800b388:	a902      	add	r1, sp, #8
 800b38a:	9301      	str	r3, [sp, #4]
 800b38c:	f001 fc76 	bl	800cc7c <_svfiprintf_r>
 800b390:	2200      	movs	r2, #0
 800b392:	9b02      	ldr	r3, [sp, #8]
 800b394:	701a      	strb	r2, [r3, #0]
 800b396:	b01c      	add	sp, #112	; 0x70
 800b398:	f85d eb04 	ldr.w	lr, [sp], #4
 800b39c:	b003      	add	sp, #12
 800b39e:	4770      	bx	lr
 800b3a0:	20000188 	.word	0x20000188
 800b3a4:	ffff0208 	.word	0xffff0208

0800b3a8 <quorem>:
 800b3a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3ac:	6903      	ldr	r3, [r0, #16]
 800b3ae:	690c      	ldr	r4, [r1, #16]
 800b3b0:	4607      	mov	r7, r0
 800b3b2:	42a3      	cmp	r3, r4
 800b3b4:	f2c0 8082 	blt.w	800b4bc <quorem+0x114>
 800b3b8:	3c01      	subs	r4, #1
 800b3ba:	f100 0514 	add.w	r5, r0, #20
 800b3be:	f101 0814 	add.w	r8, r1, #20
 800b3c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b3c6:	9301      	str	r3, [sp, #4]
 800b3c8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b3cc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b3d0:	3301      	adds	r3, #1
 800b3d2:	429a      	cmp	r2, r3
 800b3d4:	fbb2 f6f3 	udiv	r6, r2, r3
 800b3d8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b3dc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b3e0:	d331      	bcc.n	800b446 <quorem+0x9e>
 800b3e2:	f04f 0e00 	mov.w	lr, #0
 800b3e6:	4640      	mov	r0, r8
 800b3e8:	46ac      	mov	ip, r5
 800b3ea:	46f2      	mov	sl, lr
 800b3ec:	f850 2b04 	ldr.w	r2, [r0], #4
 800b3f0:	b293      	uxth	r3, r2
 800b3f2:	fb06 e303 	mla	r3, r6, r3, lr
 800b3f6:	0c12      	lsrs	r2, r2, #16
 800b3f8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b3fc:	b29b      	uxth	r3, r3
 800b3fe:	fb06 e202 	mla	r2, r6, r2, lr
 800b402:	ebaa 0303 	sub.w	r3, sl, r3
 800b406:	f8dc a000 	ldr.w	sl, [ip]
 800b40a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b40e:	fa1f fa8a 	uxth.w	sl, sl
 800b412:	4453      	add	r3, sl
 800b414:	f8dc a000 	ldr.w	sl, [ip]
 800b418:	b292      	uxth	r2, r2
 800b41a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b41e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b422:	b29b      	uxth	r3, r3
 800b424:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b428:	4581      	cmp	r9, r0
 800b42a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b42e:	f84c 3b04 	str.w	r3, [ip], #4
 800b432:	d2db      	bcs.n	800b3ec <quorem+0x44>
 800b434:	f855 300b 	ldr.w	r3, [r5, fp]
 800b438:	b92b      	cbnz	r3, 800b446 <quorem+0x9e>
 800b43a:	9b01      	ldr	r3, [sp, #4]
 800b43c:	3b04      	subs	r3, #4
 800b43e:	429d      	cmp	r5, r3
 800b440:	461a      	mov	r2, r3
 800b442:	d32f      	bcc.n	800b4a4 <quorem+0xfc>
 800b444:	613c      	str	r4, [r7, #16]
 800b446:	4638      	mov	r0, r7
 800b448:	f001 f9c8 	bl	800c7dc <__mcmp>
 800b44c:	2800      	cmp	r0, #0
 800b44e:	db25      	blt.n	800b49c <quorem+0xf4>
 800b450:	4628      	mov	r0, r5
 800b452:	f04f 0c00 	mov.w	ip, #0
 800b456:	3601      	adds	r6, #1
 800b458:	f858 1b04 	ldr.w	r1, [r8], #4
 800b45c:	f8d0 e000 	ldr.w	lr, [r0]
 800b460:	b28b      	uxth	r3, r1
 800b462:	ebac 0303 	sub.w	r3, ip, r3
 800b466:	fa1f f28e 	uxth.w	r2, lr
 800b46a:	4413      	add	r3, r2
 800b46c:	0c0a      	lsrs	r2, r1, #16
 800b46e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b472:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b476:	b29b      	uxth	r3, r3
 800b478:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b47c:	45c1      	cmp	r9, r8
 800b47e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b482:	f840 3b04 	str.w	r3, [r0], #4
 800b486:	d2e7      	bcs.n	800b458 <quorem+0xb0>
 800b488:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b48c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b490:	b922      	cbnz	r2, 800b49c <quorem+0xf4>
 800b492:	3b04      	subs	r3, #4
 800b494:	429d      	cmp	r5, r3
 800b496:	461a      	mov	r2, r3
 800b498:	d30a      	bcc.n	800b4b0 <quorem+0x108>
 800b49a:	613c      	str	r4, [r7, #16]
 800b49c:	4630      	mov	r0, r6
 800b49e:	b003      	add	sp, #12
 800b4a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4a4:	6812      	ldr	r2, [r2, #0]
 800b4a6:	3b04      	subs	r3, #4
 800b4a8:	2a00      	cmp	r2, #0
 800b4aa:	d1cb      	bne.n	800b444 <quorem+0x9c>
 800b4ac:	3c01      	subs	r4, #1
 800b4ae:	e7c6      	b.n	800b43e <quorem+0x96>
 800b4b0:	6812      	ldr	r2, [r2, #0]
 800b4b2:	3b04      	subs	r3, #4
 800b4b4:	2a00      	cmp	r2, #0
 800b4b6:	d1f0      	bne.n	800b49a <quorem+0xf2>
 800b4b8:	3c01      	subs	r4, #1
 800b4ba:	e7eb      	b.n	800b494 <quorem+0xec>
 800b4bc:	2000      	movs	r0, #0
 800b4be:	e7ee      	b.n	800b49e <quorem+0xf6>

0800b4c0 <_dtoa_r>:
 800b4c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4c4:	4616      	mov	r6, r2
 800b4c6:	461f      	mov	r7, r3
 800b4c8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800b4ca:	b099      	sub	sp, #100	; 0x64
 800b4cc:	4605      	mov	r5, r0
 800b4ce:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b4d2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800b4d6:	b974      	cbnz	r4, 800b4f6 <_dtoa_r+0x36>
 800b4d8:	2010      	movs	r0, #16
 800b4da:	f000 fedd 	bl	800c298 <malloc>
 800b4de:	4602      	mov	r2, r0
 800b4e0:	6268      	str	r0, [r5, #36]	; 0x24
 800b4e2:	b920      	cbnz	r0, 800b4ee <_dtoa_r+0x2e>
 800b4e4:	21ea      	movs	r1, #234	; 0xea
 800b4e6:	4ba8      	ldr	r3, [pc, #672]	; (800b788 <_dtoa_r+0x2c8>)
 800b4e8:	48a8      	ldr	r0, [pc, #672]	; (800b78c <_dtoa_r+0x2cc>)
 800b4ea:	f001 ff8d 	bl	800d408 <__assert_func>
 800b4ee:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b4f2:	6004      	str	r4, [r0, #0]
 800b4f4:	60c4      	str	r4, [r0, #12]
 800b4f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b4f8:	6819      	ldr	r1, [r3, #0]
 800b4fa:	b151      	cbz	r1, 800b512 <_dtoa_r+0x52>
 800b4fc:	685a      	ldr	r2, [r3, #4]
 800b4fe:	2301      	movs	r3, #1
 800b500:	4093      	lsls	r3, r2
 800b502:	604a      	str	r2, [r1, #4]
 800b504:	608b      	str	r3, [r1, #8]
 800b506:	4628      	mov	r0, r5
 800b508:	f000 ff2a 	bl	800c360 <_Bfree>
 800b50c:	2200      	movs	r2, #0
 800b50e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b510:	601a      	str	r2, [r3, #0]
 800b512:	1e3b      	subs	r3, r7, #0
 800b514:	bfaf      	iteee	ge
 800b516:	2300      	movge	r3, #0
 800b518:	2201      	movlt	r2, #1
 800b51a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b51e:	9305      	strlt	r3, [sp, #20]
 800b520:	bfa8      	it	ge
 800b522:	f8c8 3000 	strge.w	r3, [r8]
 800b526:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800b52a:	4b99      	ldr	r3, [pc, #612]	; (800b790 <_dtoa_r+0x2d0>)
 800b52c:	bfb8      	it	lt
 800b52e:	f8c8 2000 	strlt.w	r2, [r8]
 800b532:	ea33 0309 	bics.w	r3, r3, r9
 800b536:	d119      	bne.n	800b56c <_dtoa_r+0xac>
 800b538:	f242 730f 	movw	r3, #9999	; 0x270f
 800b53c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b53e:	6013      	str	r3, [r2, #0]
 800b540:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b544:	4333      	orrs	r3, r6
 800b546:	f000 857f 	beq.w	800c048 <_dtoa_r+0xb88>
 800b54a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b54c:	b953      	cbnz	r3, 800b564 <_dtoa_r+0xa4>
 800b54e:	4b91      	ldr	r3, [pc, #580]	; (800b794 <_dtoa_r+0x2d4>)
 800b550:	e022      	b.n	800b598 <_dtoa_r+0xd8>
 800b552:	4b91      	ldr	r3, [pc, #580]	; (800b798 <_dtoa_r+0x2d8>)
 800b554:	9303      	str	r3, [sp, #12]
 800b556:	3308      	adds	r3, #8
 800b558:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800b55a:	6013      	str	r3, [r2, #0]
 800b55c:	9803      	ldr	r0, [sp, #12]
 800b55e:	b019      	add	sp, #100	; 0x64
 800b560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b564:	4b8b      	ldr	r3, [pc, #556]	; (800b794 <_dtoa_r+0x2d4>)
 800b566:	9303      	str	r3, [sp, #12]
 800b568:	3303      	adds	r3, #3
 800b56a:	e7f5      	b.n	800b558 <_dtoa_r+0x98>
 800b56c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800b570:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800b574:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b578:	2200      	movs	r2, #0
 800b57a:	2300      	movs	r3, #0
 800b57c:	f7f5 fa14 	bl	80009a8 <__aeabi_dcmpeq>
 800b580:	4680      	mov	r8, r0
 800b582:	b158      	cbz	r0, 800b59c <_dtoa_r+0xdc>
 800b584:	2301      	movs	r3, #1
 800b586:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b588:	6013      	str	r3, [r2, #0]
 800b58a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	f000 8558 	beq.w	800c042 <_dtoa_r+0xb82>
 800b592:	4882      	ldr	r0, [pc, #520]	; (800b79c <_dtoa_r+0x2dc>)
 800b594:	6018      	str	r0, [r3, #0]
 800b596:	1e43      	subs	r3, r0, #1
 800b598:	9303      	str	r3, [sp, #12]
 800b59a:	e7df      	b.n	800b55c <_dtoa_r+0x9c>
 800b59c:	ab16      	add	r3, sp, #88	; 0x58
 800b59e:	9301      	str	r3, [sp, #4]
 800b5a0:	ab17      	add	r3, sp, #92	; 0x5c
 800b5a2:	9300      	str	r3, [sp, #0]
 800b5a4:	4628      	mov	r0, r5
 800b5a6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800b5aa:	f001 f9bf 	bl	800c92c <__d2b>
 800b5ae:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800b5b2:	4683      	mov	fp, r0
 800b5b4:	2c00      	cmp	r4, #0
 800b5b6:	d07f      	beq.n	800b6b8 <_dtoa_r+0x1f8>
 800b5b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b5bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b5be:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800b5c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b5c6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800b5ca:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800b5ce:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800b5d2:	2200      	movs	r2, #0
 800b5d4:	4b72      	ldr	r3, [pc, #456]	; (800b7a0 <_dtoa_r+0x2e0>)
 800b5d6:	f7f4 fdc7 	bl	8000168 <__aeabi_dsub>
 800b5da:	a365      	add	r3, pc, #404	; (adr r3, 800b770 <_dtoa_r+0x2b0>)
 800b5dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5e0:	f7f4 ff7a 	bl	80004d8 <__aeabi_dmul>
 800b5e4:	a364      	add	r3, pc, #400	; (adr r3, 800b778 <_dtoa_r+0x2b8>)
 800b5e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5ea:	f7f4 fdbf 	bl	800016c <__adddf3>
 800b5ee:	4606      	mov	r6, r0
 800b5f0:	4620      	mov	r0, r4
 800b5f2:	460f      	mov	r7, r1
 800b5f4:	f7f4 ff06 	bl	8000404 <__aeabi_i2d>
 800b5f8:	a361      	add	r3, pc, #388	; (adr r3, 800b780 <_dtoa_r+0x2c0>)
 800b5fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5fe:	f7f4 ff6b 	bl	80004d8 <__aeabi_dmul>
 800b602:	4602      	mov	r2, r0
 800b604:	460b      	mov	r3, r1
 800b606:	4630      	mov	r0, r6
 800b608:	4639      	mov	r1, r7
 800b60a:	f7f4 fdaf 	bl	800016c <__adddf3>
 800b60e:	4606      	mov	r6, r0
 800b610:	460f      	mov	r7, r1
 800b612:	f7f5 fa11 	bl	8000a38 <__aeabi_d2iz>
 800b616:	2200      	movs	r2, #0
 800b618:	4682      	mov	sl, r0
 800b61a:	2300      	movs	r3, #0
 800b61c:	4630      	mov	r0, r6
 800b61e:	4639      	mov	r1, r7
 800b620:	f7f5 f9cc 	bl	80009bc <__aeabi_dcmplt>
 800b624:	b148      	cbz	r0, 800b63a <_dtoa_r+0x17a>
 800b626:	4650      	mov	r0, sl
 800b628:	f7f4 feec 	bl	8000404 <__aeabi_i2d>
 800b62c:	4632      	mov	r2, r6
 800b62e:	463b      	mov	r3, r7
 800b630:	f7f5 f9ba 	bl	80009a8 <__aeabi_dcmpeq>
 800b634:	b908      	cbnz	r0, 800b63a <_dtoa_r+0x17a>
 800b636:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b63a:	f1ba 0f16 	cmp.w	sl, #22
 800b63e:	d858      	bhi.n	800b6f2 <_dtoa_r+0x232>
 800b640:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b644:	4b57      	ldr	r3, [pc, #348]	; (800b7a4 <_dtoa_r+0x2e4>)
 800b646:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b64a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b64e:	f7f5 f9b5 	bl	80009bc <__aeabi_dcmplt>
 800b652:	2800      	cmp	r0, #0
 800b654:	d04f      	beq.n	800b6f6 <_dtoa_r+0x236>
 800b656:	2300      	movs	r3, #0
 800b658:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b65c:	930f      	str	r3, [sp, #60]	; 0x3c
 800b65e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b660:	1b1c      	subs	r4, r3, r4
 800b662:	1e63      	subs	r3, r4, #1
 800b664:	9309      	str	r3, [sp, #36]	; 0x24
 800b666:	bf49      	itett	mi
 800b668:	f1c4 0301 	rsbmi	r3, r4, #1
 800b66c:	2300      	movpl	r3, #0
 800b66e:	9306      	strmi	r3, [sp, #24]
 800b670:	2300      	movmi	r3, #0
 800b672:	bf54      	ite	pl
 800b674:	9306      	strpl	r3, [sp, #24]
 800b676:	9309      	strmi	r3, [sp, #36]	; 0x24
 800b678:	f1ba 0f00 	cmp.w	sl, #0
 800b67c:	db3d      	blt.n	800b6fa <_dtoa_r+0x23a>
 800b67e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b680:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800b684:	4453      	add	r3, sl
 800b686:	9309      	str	r3, [sp, #36]	; 0x24
 800b688:	2300      	movs	r3, #0
 800b68a:	930a      	str	r3, [sp, #40]	; 0x28
 800b68c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b68e:	2b09      	cmp	r3, #9
 800b690:	f200 808c 	bhi.w	800b7ac <_dtoa_r+0x2ec>
 800b694:	2b05      	cmp	r3, #5
 800b696:	bfc4      	itt	gt
 800b698:	3b04      	subgt	r3, #4
 800b69a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800b69c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b69e:	bfc8      	it	gt
 800b6a0:	2400      	movgt	r4, #0
 800b6a2:	f1a3 0302 	sub.w	r3, r3, #2
 800b6a6:	bfd8      	it	le
 800b6a8:	2401      	movle	r4, #1
 800b6aa:	2b03      	cmp	r3, #3
 800b6ac:	f200 808a 	bhi.w	800b7c4 <_dtoa_r+0x304>
 800b6b0:	e8df f003 	tbb	[pc, r3]
 800b6b4:	5b4d4f2d 	.word	0x5b4d4f2d
 800b6b8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800b6bc:	441c      	add	r4, r3
 800b6be:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800b6c2:	2b20      	cmp	r3, #32
 800b6c4:	bfc3      	ittte	gt
 800b6c6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b6ca:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800b6ce:	fa09 f303 	lslgt.w	r3, r9, r3
 800b6d2:	f1c3 0320 	rsble	r3, r3, #32
 800b6d6:	bfc6      	itte	gt
 800b6d8:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b6dc:	4318      	orrgt	r0, r3
 800b6de:	fa06 f003 	lslle.w	r0, r6, r3
 800b6e2:	f7f4 fe7f 	bl	80003e4 <__aeabi_ui2d>
 800b6e6:	2301      	movs	r3, #1
 800b6e8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800b6ec:	3c01      	subs	r4, #1
 800b6ee:	9313      	str	r3, [sp, #76]	; 0x4c
 800b6f0:	e76f      	b.n	800b5d2 <_dtoa_r+0x112>
 800b6f2:	2301      	movs	r3, #1
 800b6f4:	e7b2      	b.n	800b65c <_dtoa_r+0x19c>
 800b6f6:	900f      	str	r0, [sp, #60]	; 0x3c
 800b6f8:	e7b1      	b.n	800b65e <_dtoa_r+0x19e>
 800b6fa:	9b06      	ldr	r3, [sp, #24]
 800b6fc:	eba3 030a 	sub.w	r3, r3, sl
 800b700:	9306      	str	r3, [sp, #24]
 800b702:	f1ca 0300 	rsb	r3, sl, #0
 800b706:	930a      	str	r3, [sp, #40]	; 0x28
 800b708:	2300      	movs	r3, #0
 800b70a:	930e      	str	r3, [sp, #56]	; 0x38
 800b70c:	e7be      	b.n	800b68c <_dtoa_r+0x1cc>
 800b70e:	2300      	movs	r3, #0
 800b710:	930b      	str	r3, [sp, #44]	; 0x2c
 800b712:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b714:	2b00      	cmp	r3, #0
 800b716:	dc58      	bgt.n	800b7ca <_dtoa_r+0x30a>
 800b718:	f04f 0901 	mov.w	r9, #1
 800b71c:	464b      	mov	r3, r9
 800b71e:	f8cd 9020 	str.w	r9, [sp, #32]
 800b722:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800b726:	2200      	movs	r2, #0
 800b728:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800b72a:	6042      	str	r2, [r0, #4]
 800b72c:	2204      	movs	r2, #4
 800b72e:	f102 0614 	add.w	r6, r2, #20
 800b732:	429e      	cmp	r6, r3
 800b734:	6841      	ldr	r1, [r0, #4]
 800b736:	d94e      	bls.n	800b7d6 <_dtoa_r+0x316>
 800b738:	4628      	mov	r0, r5
 800b73a:	f000 fdd1 	bl	800c2e0 <_Balloc>
 800b73e:	9003      	str	r0, [sp, #12]
 800b740:	2800      	cmp	r0, #0
 800b742:	d14c      	bne.n	800b7de <_dtoa_r+0x31e>
 800b744:	4602      	mov	r2, r0
 800b746:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b74a:	4b17      	ldr	r3, [pc, #92]	; (800b7a8 <_dtoa_r+0x2e8>)
 800b74c:	e6cc      	b.n	800b4e8 <_dtoa_r+0x28>
 800b74e:	2301      	movs	r3, #1
 800b750:	e7de      	b.n	800b710 <_dtoa_r+0x250>
 800b752:	2300      	movs	r3, #0
 800b754:	930b      	str	r3, [sp, #44]	; 0x2c
 800b756:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b758:	eb0a 0903 	add.w	r9, sl, r3
 800b75c:	f109 0301 	add.w	r3, r9, #1
 800b760:	2b01      	cmp	r3, #1
 800b762:	9308      	str	r3, [sp, #32]
 800b764:	bfb8      	it	lt
 800b766:	2301      	movlt	r3, #1
 800b768:	e7dd      	b.n	800b726 <_dtoa_r+0x266>
 800b76a:	2301      	movs	r3, #1
 800b76c:	e7f2      	b.n	800b754 <_dtoa_r+0x294>
 800b76e:	bf00      	nop
 800b770:	636f4361 	.word	0x636f4361
 800b774:	3fd287a7 	.word	0x3fd287a7
 800b778:	8b60c8b3 	.word	0x8b60c8b3
 800b77c:	3fc68a28 	.word	0x3fc68a28
 800b780:	509f79fb 	.word	0x509f79fb
 800b784:	3fd34413 	.word	0x3fd34413
 800b788:	0800db19 	.word	0x0800db19
 800b78c:	0800db30 	.word	0x0800db30
 800b790:	7ff00000 	.word	0x7ff00000
 800b794:	0800db15 	.word	0x0800db15
 800b798:	0800db0c 	.word	0x0800db0c
 800b79c:	0800dae9 	.word	0x0800dae9
 800b7a0:	3ff80000 	.word	0x3ff80000
 800b7a4:	0800dc80 	.word	0x0800dc80
 800b7a8:	0800db8b 	.word	0x0800db8b
 800b7ac:	2401      	movs	r4, #1
 800b7ae:	2300      	movs	r3, #0
 800b7b0:	940b      	str	r4, [sp, #44]	; 0x2c
 800b7b2:	9322      	str	r3, [sp, #136]	; 0x88
 800b7b4:	f04f 39ff 	mov.w	r9, #4294967295
 800b7b8:	2200      	movs	r2, #0
 800b7ba:	2312      	movs	r3, #18
 800b7bc:	f8cd 9020 	str.w	r9, [sp, #32]
 800b7c0:	9223      	str	r2, [sp, #140]	; 0x8c
 800b7c2:	e7b0      	b.n	800b726 <_dtoa_r+0x266>
 800b7c4:	2301      	movs	r3, #1
 800b7c6:	930b      	str	r3, [sp, #44]	; 0x2c
 800b7c8:	e7f4      	b.n	800b7b4 <_dtoa_r+0x2f4>
 800b7ca:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800b7ce:	464b      	mov	r3, r9
 800b7d0:	f8cd 9020 	str.w	r9, [sp, #32]
 800b7d4:	e7a7      	b.n	800b726 <_dtoa_r+0x266>
 800b7d6:	3101      	adds	r1, #1
 800b7d8:	6041      	str	r1, [r0, #4]
 800b7da:	0052      	lsls	r2, r2, #1
 800b7dc:	e7a7      	b.n	800b72e <_dtoa_r+0x26e>
 800b7de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b7e0:	9a03      	ldr	r2, [sp, #12]
 800b7e2:	601a      	str	r2, [r3, #0]
 800b7e4:	9b08      	ldr	r3, [sp, #32]
 800b7e6:	2b0e      	cmp	r3, #14
 800b7e8:	f200 80a8 	bhi.w	800b93c <_dtoa_r+0x47c>
 800b7ec:	2c00      	cmp	r4, #0
 800b7ee:	f000 80a5 	beq.w	800b93c <_dtoa_r+0x47c>
 800b7f2:	f1ba 0f00 	cmp.w	sl, #0
 800b7f6:	dd34      	ble.n	800b862 <_dtoa_r+0x3a2>
 800b7f8:	4a9a      	ldr	r2, [pc, #616]	; (800ba64 <_dtoa_r+0x5a4>)
 800b7fa:	f00a 030f 	and.w	r3, sl, #15
 800b7fe:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b802:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800b806:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b80a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800b80e:	ea4f 142a 	mov.w	r4, sl, asr #4
 800b812:	d016      	beq.n	800b842 <_dtoa_r+0x382>
 800b814:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b818:	4b93      	ldr	r3, [pc, #588]	; (800ba68 <_dtoa_r+0x5a8>)
 800b81a:	2703      	movs	r7, #3
 800b81c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b820:	f7f4 ff84 	bl	800072c <__aeabi_ddiv>
 800b824:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b828:	f004 040f 	and.w	r4, r4, #15
 800b82c:	4e8e      	ldr	r6, [pc, #568]	; (800ba68 <_dtoa_r+0x5a8>)
 800b82e:	b954      	cbnz	r4, 800b846 <_dtoa_r+0x386>
 800b830:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b834:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b838:	f7f4 ff78 	bl	800072c <__aeabi_ddiv>
 800b83c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b840:	e029      	b.n	800b896 <_dtoa_r+0x3d6>
 800b842:	2702      	movs	r7, #2
 800b844:	e7f2      	b.n	800b82c <_dtoa_r+0x36c>
 800b846:	07e1      	lsls	r1, r4, #31
 800b848:	d508      	bpl.n	800b85c <_dtoa_r+0x39c>
 800b84a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b84e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b852:	f7f4 fe41 	bl	80004d8 <__aeabi_dmul>
 800b856:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b85a:	3701      	adds	r7, #1
 800b85c:	1064      	asrs	r4, r4, #1
 800b85e:	3608      	adds	r6, #8
 800b860:	e7e5      	b.n	800b82e <_dtoa_r+0x36e>
 800b862:	f000 80a5 	beq.w	800b9b0 <_dtoa_r+0x4f0>
 800b866:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b86a:	f1ca 0400 	rsb	r4, sl, #0
 800b86e:	4b7d      	ldr	r3, [pc, #500]	; (800ba64 <_dtoa_r+0x5a4>)
 800b870:	f004 020f 	and.w	r2, r4, #15
 800b874:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b87c:	f7f4 fe2c 	bl	80004d8 <__aeabi_dmul>
 800b880:	2702      	movs	r7, #2
 800b882:	2300      	movs	r3, #0
 800b884:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b888:	4e77      	ldr	r6, [pc, #476]	; (800ba68 <_dtoa_r+0x5a8>)
 800b88a:	1124      	asrs	r4, r4, #4
 800b88c:	2c00      	cmp	r4, #0
 800b88e:	f040 8084 	bne.w	800b99a <_dtoa_r+0x4da>
 800b892:	2b00      	cmp	r3, #0
 800b894:	d1d2      	bne.n	800b83c <_dtoa_r+0x37c>
 800b896:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b898:	2b00      	cmp	r3, #0
 800b89a:	f000 808b 	beq.w	800b9b4 <_dtoa_r+0x4f4>
 800b89e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800b8a2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800b8a6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b8aa:	2200      	movs	r2, #0
 800b8ac:	4b6f      	ldr	r3, [pc, #444]	; (800ba6c <_dtoa_r+0x5ac>)
 800b8ae:	f7f5 f885 	bl	80009bc <__aeabi_dcmplt>
 800b8b2:	2800      	cmp	r0, #0
 800b8b4:	d07e      	beq.n	800b9b4 <_dtoa_r+0x4f4>
 800b8b6:	9b08      	ldr	r3, [sp, #32]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d07b      	beq.n	800b9b4 <_dtoa_r+0x4f4>
 800b8bc:	f1b9 0f00 	cmp.w	r9, #0
 800b8c0:	dd38      	ble.n	800b934 <_dtoa_r+0x474>
 800b8c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b8c6:	2200      	movs	r2, #0
 800b8c8:	4b69      	ldr	r3, [pc, #420]	; (800ba70 <_dtoa_r+0x5b0>)
 800b8ca:	f7f4 fe05 	bl	80004d8 <__aeabi_dmul>
 800b8ce:	464c      	mov	r4, r9
 800b8d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b8d4:	f10a 38ff 	add.w	r8, sl, #4294967295
 800b8d8:	3701      	adds	r7, #1
 800b8da:	4638      	mov	r0, r7
 800b8dc:	f7f4 fd92 	bl	8000404 <__aeabi_i2d>
 800b8e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b8e4:	f7f4 fdf8 	bl	80004d8 <__aeabi_dmul>
 800b8e8:	2200      	movs	r2, #0
 800b8ea:	4b62      	ldr	r3, [pc, #392]	; (800ba74 <_dtoa_r+0x5b4>)
 800b8ec:	f7f4 fc3e 	bl	800016c <__adddf3>
 800b8f0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800b8f4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b8f8:	9611      	str	r6, [sp, #68]	; 0x44
 800b8fa:	2c00      	cmp	r4, #0
 800b8fc:	d15d      	bne.n	800b9ba <_dtoa_r+0x4fa>
 800b8fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b902:	2200      	movs	r2, #0
 800b904:	4b5c      	ldr	r3, [pc, #368]	; (800ba78 <_dtoa_r+0x5b8>)
 800b906:	f7f4 fc2f 	bl	8000168 <__aeabi_dsub>
 800b90a:	4602      	mov	r2, r0
 800b90c:	460b      	mov	r3, r1
 800b90e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b912:	4633      	mov	r3, r6
 800b914:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b916:	f7f5 f86f 	bl	80009f8 <__aeabi_dcmpgt>
 800b91a:	2800      	cmp	r0, #0
 800b91c:	f040 829c 	bne.w	800be58 <_dtoa_r+0x998>
 800b920:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b924:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b926:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800b92a:	f7f5 f847 	bl	80009bc <__aeabi_dcmplt>
 800b92e:	2800      	cmp	r0, #0
 800b930:	f040 8290 	bne.w	800be54 <_dtoa_r+0x994>
 800b934:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800b938:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b93c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b93e:	2b00      	cmp	r3, #0
 800b940:	f2c0 8152 	blt.w	800bbe8 <_dtoa_r+0x728>
 800b944:	f1ba 0f0e 	cmp.w	sl, #14
 800b948:	f300 814e 	bgt.w	800bbe8 <_dtoa_r+0x728>
 800b94c:	4b45      	ldr	r3, [pc, #276]	; (800ba64 <_dtoa_r+0x5a4>)
 800b94e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b952:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b956:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800b95a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	f280 80db 	bge.w	800bb18 <_dtoa_r+0x658>
 800b962:	9b08      	ldr	r3, [sp, #32]
 800b964:	2b00      	cmp	r3, #0
 800b966:	f300 80d7 	bgt.w	800bb18 <_dtoa_r+0x658>
 800b96a:	f040 8272 	bne.w	800be52 <_dtoa_r+0x992>
 800b96e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b972:	2200      	movs	r2, #0
 800b974:	4b40      	ldr	r3, [pc, #256]	; (800ba78 <_dtoa_r+0x5b8>)
 800b976:	f7f4 fdaf 	bl	80004d8 <__aeabi_dmul>
 800b97a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b97e:	f7f5 f831 	bl	80009e4 <__aeabi_dcmpge>
 800b982:	9c08      	ldr	r4, [sp, #32]
 800b984:	4626      	mov	r6, r4
 800b986:	2800      	cmp	r0, #0
 800b988:	f040 8248 	bne.w	800be1c <_dtoa_r+0x95c>
 800b98c:	2331      	movs	r3, #49	; 0x31
 800b98e:	9f03      	ldr	r7, [sp, #12]
 800b990:	f10a 0a01 	add.w	sl, sl, #1
 800b994:	f807 3b01 	strb.w	r3, [r7], #1
 800b998:	e244      	b.n	800be24 <_dtoa_r+0x964>
 800b99a:	07e2      	lsls	r2, r4, #31
 800b99c:	d505      	bpl.n	800b9aa <_dtoa_r+0x4ea>
 800b99e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b9a2:	f7f4 fd99 	bl	80004d8 <__aeabi_dmul>
 800b9a6:	2301      	movs	r3, #1
 800b9a8:	3701      	adds	r7, #1
 800b9aa:	1064      	asrs	r4, r4, #1
 800b9ac:	3608      	adds	r6, #8
 800b9ae:	e76d      	b.n	800b88c <_dtoa_r+0x3cc>
 800b9b0:	2702      	movs	r7, #2
 800b9b2:	e770      	b.n	800b896 <_dtoa_r+0x3d6>
 800b9b4:	46d0      	mov	r8, sl
 800b9b6:	9c08      	ldr	r4, [sp, #32]
 800b9b8:	e78f      	b.n	800b8da <_dtoa_r+0x41a>
 800b9ba:	9903      	ldr	r1, [sp, #12]
 800b9bc:	4b29      	ldr	r3, [pc, #164]	; (800ba64 <_dtoa_r+0x5a4>)
 800b9be:	4421      	add	r1, r4
 800b9c0:	9112      	str	r1, [sp, #72]	; 0x48
 800b9c2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b9c4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b9c8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800b9cc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b9d0:	2900      	cmp	r1, #0
 800b9d2:	d055      	beq.n	800ba80 <_dtoa_r+0x5c0>
 800b9d4:	2000      	movs	r0, #0
 800b9d6:	4929      	ldr	r1, [pc, #164]	; (800ba7c <_dtoa_r+0x5bc>)
 800b9d8:	f7f4 fea8 	bl	800072c <__aeabi_ddiv>
 800b9dc:	463b      	mov	r3, r7
 800b9de:	4632      	mov	r2, r6
 800b9e0:	f7f4 fbc2 	bl	8000168 <__aeabi_dsub>
 800b9e4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b9e8:	9f03      	ldr	r7, [sp, #12]
 800b9ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b9ee:	f7f5 f823 	bl	8000a38 <__aeabi_d2iz>
 800b9f2:	4604      	mov	r4, r0
 800b9f4:	f7f4 fd06 	bl	8000404 <__aeabi_i2d>
 800b9f8:	4602      	mov	r2, r0
 800b9fa:	460b      	mov	r3, r1
 800b9fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ba00:	f7f4 fbb2 	bl	8000168 <__aeabi_dsub>
 800ba04:	4602      	mov	r2, r0
 800ba06:	460b      	mov	r3, r1
 800ba08:	3430      	adds	r4, #48	; 0x30
 800ba0a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ba0e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ba12:	f807 4b01 	strb.w	r4, [r7], #1
 800ba16:	f7f4 ffd1 	bl	80009bc <__aeabi_dcmplt>
 800ba1a:	2800      	cmp	r0, #0
 800ba1c:	d174      	bne.n	800bb08 <_dtoa_r+0x648>
 800ba1e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ba22:	2000      	movs	r0, #0
 800ba24:	4911      	ldr	r1, [pc, #68]	; (800ba6c <_dtoa_r+0x5ac>)
 800ba26:	f7f4 fb9f 	bl	8000168 <__aeabi_dsub>
 800ba2a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ba2e:	f7f4 ffc5 	bl	80009bc <__aeabi_dcmplt>
 800ba32:	2800      	cmp	r0, #0
 800ba34:	f040 80b7 	bne.w	800bba6 <_dtoa_r+0x6e6>
 800ba38:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ba3a:	429f      	cmp	r7, r3
 800ba3c:	f43f af7a 	beq.w	800b934 <_dtoa_r+0x474>
 800ba40:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ba44:	2200      	movs	r2, #0
 800ba46:	4b0a      	ldr	r3, [pc, #40]	; (800ba70 <_dtoa_r+0x5b0>)
 800ba48:	f7f4 fd46 	bl	80004d8 <__aeabi_dmul>
 800ba4c:	2200      	movs	r2, #0
 800ba4e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ba52:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ba56:	4b06      	ldr	r3, [pc, #24]	; (800ba70 <_dtoa_r+0x5b0>)
 800ba58:	f7f4 fd3e 	bl	80004d8 <__aeabi_dmul>
 800ba5c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ba60:	e7c3      	b.n	800b9ea <_dtoa_r+0x52a>
 800ba62:	bf00      	nop
 800ba64:	0800dc80 	.word	0x0800dc80
 800ba68:	0800dc58 	.word	0x0800dc58
 800ba6c:	3ff00000 	.word	0x3ff00000
 800ba70:	40240000 	.word	0x40240000
 800ba74:	401c0000 	.word	0x401c0000
 800ba78:	40140000 	.word	0x40140000
 800ba7c:	3fe00000 	.word	0x3fe00000
 800ba80:	4630      	mov	r0, r6
 800ba82:	4639      	mov	r1, r7
 800ba84:	f7f4 fd28 	bl	80004d8 <__aeabi_dmul>
 800ba88:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ba8a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ba8e:	9c03      	ldr	r4, [sp, #12]
 800ba90:	9314      	str	r3, [sp, #80]	; 0x50
 800ba92:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ba96:	f7f4 ffcf 	bl	8000a38 <__aeabi_d2iz>
 800ba9a:	9015      	str	r0, [sp, #84]	; 0x54
 800ba9c:	f7f4 fcb2 	bl	8000404 <__aeabi_i2d>
 800baa0:	4602      	mov	r2, r0
 800baa2:	460b      	mov	r3, r1
 800baa4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800baa8:	f7f4 fb5e 	bl	8000168 <__aeabi_dsub>
 800baac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800baae:	4606      	mov	r6, r0
 800bab0:	3330      	adds	r3, #48	; 0x30
 800bab2:	f804 3b01 	strb.w	r3, [r4], #1
 800bab6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bab8:	460f      	mov	r7, r1
 800baba:	429c      	cmp	r4, r3
 800babc:	f04f 0200 	mov.w	r2, #0
 800bac0:	d124      	bne.n	800bb0c <_dtoa_r+0x64c>
 800bac2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bac6:	4bb0      	ldr	r3, [pc, #704]	; (800bd88 <_dtoa_r+0x8c8>)
 800bac8:	f7f4 fb50 	bl	800016c <__adddf3>
 800bacc:	4602      	mov	r2, r0
 800bace:	460b      	mov	r3, r1
 800bad0:	4630      	mov	r0, r6
 800bad2:	4639      	mov	r1, r7
 800bad4:	f7f4 ff90 	bl	80009f8 <__aeabi_dcmpgt>
 800bad8:	2800      	cmp	r0, #0
 800bada:	d163      	bne.n	800bba4 <_dtoa_r+0x6e4>
 800badc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bae0:	2000      	movs	r0, #0
 800bae2:	49a9      	ldr	r1, [pc, #676]	; (800bd88 <_dtoa_r+0x8c8>)
 800bae4:	f7f4 fb40 	bl	8000168 <__aeabi_dsub>
 800bae8:	4602      	mov	r2, r0
 800baea:	460b      	mov	r3, r1
 800baec:	4630      	mov	r0, r6
 800baee:	4639      	mov	r1, r7
 800baf0:	f7f4 ff64 	bl	80009bc <__aeabi_dcmplt>
 800baf4:	2800      	cmp	r0, #0
 800baf6:	f43f af1d 	beq.w	800b934 <_dtoa_r+0x474>
 800bafa:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800bafc:	1e7b      	subs	r3, r7, #1
 800bafe:	9314      	str	r3, [sp, #80]	; 0x50
 800bb00:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800bb04:	2b30      	cmp	r3, #48	; 0x30
 800bb06:	d0f8      	beq.n	800bafa <_dtoa_r+0x63a>
 800bb08:	46c2      	mov	sl, r8
 800bb0a:	e03b      	b.n	800bb84 <_dtoa_r+0x6c4>
 800bb0c:	4b9f      	ldr	r3, [pc, #636]	; (800bd8c <_dtoa_r+0x8cc>)
 800bb0e:	f7f4 fce3 	bl	80004d8 <__aeabi_dmul>
 800bb12:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bb16:	e7bc      	b.n	800ba92 <_dtoa_r+0x5d2>
 800bb18:	9f03      	ldr	r7, [sp, #12]
 800bb1a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800bb1e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bb22:	4640      	mov	r0, r8
 800bb24:	4649      	mov	r1, r9
 800bb26:	f7f4 fe01 	bl	800072c <__aeabi_ddiv>
 800bb2a:	f7f4 ff85 	bl	8000a38 <__aeabi_d2iz>
 800bb2e:	4604      	mov	r4, r0
 800bb30:	f7f4 fc68 	bl	8000404 <__aeabi_i2d>
 800bb34:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bb38:	f7f4 fcce 	bl	80004d8 <__aeabi_dmul>
 800bb3c:	4602      	mov	r2, r0
 800bb3e:	460b      	mov	r3, r1
 800bb40:	4640      	mov	r0, r8
 800bb42:	4649      	mov	r1, r9
 800bb44:	f7f4 fb10 	bl	8000168 <__aeabi_dsub>
 800bb48:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800bb4c:	f807 6b01 	strb.w	r6, [r7], #1
 800bb50:	9e03      	ldr	r6, [sp, #12]
 800bb52:	f8dd c020 	ldr.w	ip, [sp, #32]
 800bb56:	1bbe      	subs	r6, r7, r6
 800bb58:	45b4      	cmp	ip, r6
 800bb5a:	4602      	mov	r2, r0
 800bb5c:	460b      	mov	r3, r1
 800bb5e:	d136      	bne.n	800bbce <_dtoa_r+0x70e>
 800bb60:	f7f4 fb04 	bl	800016c <__adddf3>
 800bb64:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bb68:	4680      	mov	r8, r0
 800bb6a:	4689      	mov	r9, r1
 800bb6c:	f7f4 ff44 	bl	80009f8 <__aeabi_dcmpgt>
 800bb70:	bb58      	cbnz	r0, 800bbca <_dtoa_r+0x70a>
 800bb72:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bb76:	4640      	mov	r0, r8
 800bb78:	4649      	mov	r1, r9
 800bb7a:	f7f4 ff15 	bl	80009a8 <__aeabi_dcmpeq>
 800bb7e:	b108      	cbz	r0, 800bb84 <_dtoa_r+0x6c4>
 800bb80:	07e1      	lsls	r1, r4, #31
 800bb82:	d422      	bmi.n	800bbca <_dtoa_r+0x70a>
 800bb84:	4628      	mov	r0, r5
 800bb86:	4659      	mov	r1, fp
 800bb88:	f000 fbea 	bl	800c360 <_Bfree>
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	703b      	strb	r3, [r7, #0]
 800bb90:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800bb92:	f10a 0001 	add.w	r0, sl, #1
 800bb96:	6018      	str	r0, [r3, #0]
 800bb98:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	f43f acde 	beq.w	800b55c <_dtoa_r+0x9c>
 800bba0:	601f      	str	r7, [r3, #0]
 800bba2:	e4db      	b.n	800b55c <_dtoa_r+0x9c>
 800bba4:	4627      	mov	r7, r4
 800bba6:	463b      	mov	r3, r7
 800bba8:	461f      	mov	r7, r3
 800bbaa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bbae:	2a39      	cmp	r2, #57	; 0x39
 800bbb0:	d107      	bne.n	800bbc2 <_dtoa_r+0x702>
 800bbb2:	9a03      	ldr	r2, [sp, #12]
 800bbb4:	429a      	cmp	r2, r3
 800bbb6:	d1f7      	bne.n	800bba8 <_dtoa_r+0x6e8>
 800bbb8:	2230      	movs	r2, #48	; 0x30
 800bbba:	9903      	ldr	r1, [sp, #12]
 800bbbc:	f108 0801 	add.w	r8, r8, #1
 800bbc0:	700a      	strb	r2, [r1, #0]
 800bbc2:	781a      	ldrb	r2, [r3, #0]
 800bbc4:	3201      	adds	r2, #1
 800bbc6:	701a      	strb	r2, [r3, #0]
 800bbc8:	e79e      	b.n	800bb08 <_dtoa_r+0x648>
 800bbca:	46d0      	mov	r8, sl
 800bbcc:	e7eb      	b.n	800bba6 <_dtoa_r+0x6e6>
 800bbce:	2200      	movs	r2, #0
 800bbd0:	4b6e      	ldr	r3, [pc, #440]	; (800bd8c <_dtoa_r+0x8cc>)
 800bbd2:	f7f4 fc81 	bl	80004d8 <__aeabi_dmul>
 800bbd6:	2200      	movs	r2, #0
 800bbd8:	2300      	movs	r3, #0
 800bbda:	4680      	mov	r8, r0
 800bbdc:	4689      	mov	r9, r1
 800bbde:	f7f4 fee3 	bl	80009a8 <__aeabi_dcmpeq>
 800bbe2:	2800      	cmp	r0, #0
 800bbe4:	d09b      	beq.n	800bb1e <_dtoa_r+0x65e>
 800bbe6:	e7cd      	b.n	800bb84 <_dtoa_r+0x6c4>
 800bbe8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bbea:	2a00      	cmp	r2, #0
 800bbec:	f000 80d0 	beq.w	800bd90 <_dtoa_r+0x8d0>
 800bbf0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800bbf2:	2a01      	cmp	r2, #1
 800bbf4:	f300 80ae 	bgt.w	800bd54 <_dtoa_r+0x894>
 800bbf8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800bbfa:	2a00      	cmp	r2, #0
 800bbfc:	f000 80a6 	beq.w	800bd4c <_dtoa_r+0x88c>
 800bc00:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bc04:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800bc06:	9f06      	ldr	r7, [sp, #24]
 800bc08:	9a06      	ldr	r2, [sp, #24]
 800bc0a:	2101      	movs	r1, #1
 800bc0c:	441a      	add	r2, r3
 800bc0e:	9206      	str	r2, [sp, #24]
 800bc10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bc12:	4628      	mov	r0, r5
 800bc14:	441a      	add	r2, r3
 800bc16:	9209      	str	r2, [sp, #36]	; 0x24
 800bc18:	f000 fc58 	bl	800c4cc <__i2b>
 800bc1c:	4606      	mov	r6, r0
 800bc1e:	2f00      	cmp	r7, #0
 800bc20:	dd0c      	ble.n	800bc3c <_dtoa_r+0x77c>
 800bc22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	dd09      	ble.n	800bc3c <_dtoa_r+0x77c>
 800bc28:	42bb      	cmp	r3, r7
 800bc2a:	bfa8      	it	ge
 800bc2c:	463b      	movge	r3, r7
 800bc2e:	9a06      	ldr	r2, [sp, #24]
 800bc30:	1aff      	subs	r7, r7, r3
 800bc32:	1ad2      	subs	r2, r2, r3
 800bc34:	9206      	str	r2, [sp, #24]
 800bc36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bc38:	1ad3      	subs	r3, r2, r3
 800bc3a:	9309      	str	r3, [sp, #36]	; 0x24
 800bc3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc3e:	b1f3      	cbz	r3, 800bc7e <_dtoa_r+0x7be>
 800bc40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	f000 80a8 	beq.w	800bd98 <_dtoa_r+0x8d8>
 800bc48:	2c00      	cmp	r4, #0
 800bc4a:	dd10      	ble.n	800bc6e <_dtoa_r+0x7ae>
 800bc4c:	4631      	mov	r1, r6
 800bc4e:	4622      	mov	r2, r4
 800bc50:	4628      	mov	r0, r5
 800bc52:	f000 fcf9 	bl	800c648 <__pow5mult>
 800bc56:	465a      	mov	r2, fp
 800bc58:	4601      	mov	r1, r0
 800bc5a:	4606      	mov	r6, r0
 800bc5c:	4628      	mov	r0, r5
 800bc5e:	f000 fc4b 	bl	800c4f8 <__multiply>
 800bc62:	4680      	mov	r8, r0
 800bc64:	4659      	mov	r1, fp
 800bc66:	4628      	mov	r0, r5
 800bc68:	f000 fb7a 	bl	800c360 <_Bfree>
 800bc6c:	46c3      	mov	fp, r8
 800bc6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc70:	1b1a      	subs	r2, r3, r4
 800bc72:	d004      	beq.n	800bc7e <_dtoa_r+0x7be>
 800bc74:	4659      	mov	r1, fp
 800bc76:	4628      	mov	r0, r5
 800bc78:	f000 fce6 	bl	800c648 <__pow5mult>
 800bc7c:	4683      	mov	fp, r0
 800bc7e:	2101      	movs	r1, #1
 800bc80:	4628      	mov	r0, r5
 800bc82:	f000 fc23 	bl	800c4cc <__i2b>
 800bc86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bc88:	4604      	mov	r4, r0
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	f340 8086 	ble.w	800bd9c <_dtoa_r+0x8dc>
 800bc90:	461a      	mov	r2, r3
 800bc92:	4601      	mov	r1, r0
 800bc94:	4628      	mov	r0, r5
 800bc96:	f000 fcd7 	bl	800c648 <__pow5mult>
 800bc9a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bc9c:	4604      	mov	r4, r0
 800bc9e:	2b01      	cmp	r3, #1
 800bca0:	dd7f      	ble.n	800bda2 <_dtoa_r+0x8e2>
 800bca2:	f04f 0800 	mov.w	r8, #0
 800bca6:	6923      	ldr	r3, [r4, #16]
 800bca8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bcac:	6918      	ldr	r0, [r3, #16]
 800bcae:	f000 fbbf 	bl	800c430 <__hi0bits>
 800bcb2:	f1c0 0020 	rsb	r0, r0, #32
 800bcb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bcb8:	4418      	add	r0, r3
 800bcba:	f010 001f 	ands.w	r0, r0, #31
 800bcbe:	f000 8092 	beq.w	800bde6 <_dtoa_r+0x926>
 800bcc2:	f1c0 0320 	rsb	r3, r0, #32
 800bcc6:	2b04      	cmp	r3, #4
 800bcc8:	f340 808a 	ble.w	800bde0 <_dtoa_r+0x920>
 800bccc:	f1c0 001c 	rsb	r0, r0, #28
 800bcd0:	9b06      	ldr	r3, [sp, #24]
 800bcd2:	4407      	add	r7, r0
 800bcd4:	4403      	add	r3, r0
 800bcd6:	9306      	str	r3, [sp, #24]
 800bcd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bcda:	4403      	add	r3, r0
 800bcdc:	9309      	str	r3, [sp, #36]	; 0x24
 800bcde:	9b06      	ldr	r3, [sp, #24]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	dd05      	ble.n	800bcf0 <_dtoa_r+0x830>
 800bce4:	4659      	mov	r1, fp
 800bce6:	461a      	mov	r2, r3
 800bce8:	4628      	mov	r0, r5
 800bcea:	f000 fd07 	bl	800c6fc <__lshift>
 800bcee:	4683      	mov	fp, r0
 800bcf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	dd05      	ble.n	800bd02 <_dtoa_r+0x842>
 800bcf6:	4621      	mov	r1, r4
 800bcf8:	461a      	mov	r2, r3
 800bcfa:	4628      	mov	r0, r5
 800bcfc:	f000 fcfe 	bl	800c6fc <__lshift>
 800bd00:	4604      	mov	r4, r0
 800bd02:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d070      	beq.n	800bdea <_dtoa_r+0x92a>
 800bd08:	4621      	mov	r1, r4
 800bd0a:	4658      	mov	r0, fp
 800bd0c:	f000 fd66 	bl	800c7dc <__mcmp>
 800bd10:	2800      	cmp	r0, #0
 800bd12:	da6a      	bge.n	800bdea <_dtoa_r+0x92a>
 800bd14:	2300      	movs	r3, #0
 800bd16:	4659      	mov	r1, fp
 800bd18:	220a      	movs	r2, #10
 800bd1a:	4628      	mov	r0, r5
 800bd1c:	f000 fb42 	bl	800c3a4 <__multadd>
 800bd20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd22:	4683      	mov	fp, r0
 800bd24:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	f000 8194 	beq.w	800c056 <_dtoa_r+0xb96>
 800bd2e:	4631      	mov	r1, r6
 800bd30:	2300      	movs	r3, #0
 800bd32:	220a      	movs	r2, #10
 800bd34:	4628      	mov	r0, r5
 800bd36:	f000 fb35 	bl	800c3a4 <__multadd>
 800bd3a:	f1b9 0f00 	cmp.w	r9, #0
 800bd3e:	4606      	mov	r6, r0
 800bd40:	f300 8093 	bgt.w	800be6a <_dtoa_r+0x9aa>
 800bd44:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bd46:	2b02      	cmp	r3, #2
 800bd48:	dc57      	bgt.n	800bdfa <_dtoa_r+0x93a>
 800bd4a:	e08e      	b.n	800be6a <_dtoa_r+0x9aa>
 800bd4c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800bd4e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800bd52:	e757      	b.n	800bc04 <_dtoa_r+0x744>
 800bd54:	9b08      	ldr	r3, [sp, #32]
 800bd56:	1e5c      	subs	r4, r3, #1
 800bd58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd5a:	42a3      	cmp	r3, r4
 800bd5c:	bfb7      	itett	lt
 800bd5e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800bd60:	1b1c      	subge	r4, r3, r4
 800bd62:	1ae2      	sublt	r2, r4, r3
 800bd64:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800bd66:	bfbe      	ittt	lt
 800bd68:	940a      	strlt	r4, [sp, #40]	; 0x28
 800bd6a:	189b      	addlt	r3, r3, r2
 800bd6c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800bd6e:	9b08      	ldr	r3, [sp, #32]
 800bd70:	bfb8      	it	lt
 800bd72:	2400      	movlt	r4, #0
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	bfbb      	ittet	lt
 800bd78:	9b06      	ldrlt	r3, [sp, #24]
 800bd7a:	9a08      	ldrlt	r2, [sp, #32]
 800bd7c:	9f06      	ldrge	r7, [sp, #24]
 800bd7e:	1a9f      	sublt	r7, r3, r2
 800bd80:	bfac      	ite	ge
 800bd82:	9b08      	ldrge	r3, [sp, #32]
 800bd84:	2300      	movlt	r3, #0
 800bd86:	e73f      	b.n	800bc08 <_dtoa_r+0x748>
 800bd88:	3fe00000 	.word	0x3fe00000
 800bd8c:	40240000 	.word	0x40240000
 800bd90:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800bd92:	9f06      	ldr	r7, [sp, #24]
 800bd94:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800bd96:	e742      	b.n	800bc1e <_dtoa_r+0x75e>
 800bd98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bd9a:	e76b      	b.n	800bc74 <_dtoa_r+0x7b4>
 800bd9c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bd9e:	2b01      	cmp	r3, #1
 800bda0:	dc19      	bgt.n	800bdd6 <_dtoa_r+0x916>
 800bda2:	9b04      	ldr	r3, [sp, #16]
 800bda4:	b9bb      	cbnz	r3, 800bdd6 <_dtoa_r+0x916>
 800bda6:	9b05      	ldr	r3, [sp, #20]
 800bda8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bdac:	b99b      	cbnz	r3, 800bdd6 <_dtoa_r+0x916>
 800bdae:	9b05      	ldr	r3, [sp, #20]
 800bdb0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bdb4:	0d1b      	lsrs	r3, r3, #20
 800bdb6:	051b      	lsls	r3, r3, #20
 800bdb8:	b183      	cbz	r3, 800bddc <_dtoa_r+0x91c>
 800bdba:	f04f 0801 	mov.w	r8, #1
 800bdbe:	9b06      	ldr	r3, [sp, #24]
 800bdc0:	3301      	adds	r3, #1
 800bdc2:	9306      	str	r3, [sp, #24]
 800bdc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdc6:	3301      	adds	r3, #1
 800bdc8:	9309      	str	r3, [sp, #36]	; 0x24
 800bdca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	f47f af6a 	bne.w	800bca6 <_dtoa_r+0x7e6>
 800bdd2:	2001      	movs	r0, #1
 800bdd4:	e76f      	b.n	800bcb6 <_dtoa_r+0x7f6>
 800bdd6:	f04f 0800 	mov.w	r8, #0
 800bdda:	e7f6      	b.n	800bdca <_dtoa_r+0x90a>
 800bddc:	4698      	mov	r8, r3
 800bdde:	e7f4      	b.n	800bdca <_dtoa_r+0x90a>
 800bde0:	f43f af7d 	beq.w	800bcde <_dtoa_r+0x81e>
 800bde4:	4618      	mov	r0, r3
 800bde6:	301c      	adds	r0, #28
 800bde8:	e772      	b.n	800bcd0 <_dtoa_r+0x810>
 800bdea:	9b08      	ldr	r3, [sp, #32]
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	dc36      	bgt.n	800be5e <_dtoa_r+0x99e>
 800bdf0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bdf2:	2b02      	cmp	r3, #2
 800bdf4:	dd33      	ble.n	800be5e <_dtoa_r+0x99e>
 800bdf6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bdfa:	f1b9 0f00 	cmp.w	r9, #0
 800bdfe:	d10d      	bne.n	800be1c <_dtoa_r+0x95c>
 800be00:	4621      	mov	r1, r4
 800be02:	464b      	mov	r3, r9
 800be04:	2205      	movs	r2, #5
 800be06:	4628      	mov	r0, r5
 800be08:	f000 facc 	bl	800c3a4 <__multadd>
 800be0c:	4601      	mov	r1, r0
 800be0e:	4604      	mov	r4, r0
 800be10:	4658      	mov	r0, fp
 800be12:	f000 fce3 	bl	800c7dc <__mcmp>
 800be16:	2800      	cmp	r0, #0
 800be18:	f73f adb8 	bgt.w	800b98c <_dtoa_r+0x4cc>
 800be1c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800be1e:	9f03      	ldr	r7, [sp, #12]
 800be20:	ea6f 0a03 	mvn.w	sl, r3
 800be24:	f04f 0800 	mov.w	r8, #0
 800be28:	4621      	mov	r1, r4
 800be2a:	4628      	mov	r0, r5
 800be2c:	f000 fa98 	bl	800c360 <_Bfree>
 800be30:	2e00      	cmp	r6, #0
 800be32:	f43f aea7 	beq.w	800bb84 <_dtoa_r+0x6c4>
 800be36:	f1b8 0f00 	cmp.w	r8, #0
 800be3a:	d005      	beq.n	800be48 <_dtoa_r+0x988>
 800be3c:	45b0      	cmp	r8, r6
 800be3e:	d003      	beq.n	800be48 <_dtoa_r+0x988>
 800be40:	4641      	mov	r1, r8
 800be42:	4628      	mov	r0, r5
 800be44:	f000 fa8c 	bl	800c360 <_Bfree>
 800be48:	4631      	mov	r1, r6
 800be4a:	4628      	mov	r0, r5
 800be4c:	f000 fa88 	bl	800c360 <_Bfree>
 800be50:	e698      	b.n	800bb84 <_dtoa_r+0x6c4>
 800be52:	2400      	movs	r4, #0
 800be54:	4626      	mov	r6, r4
 800be56:	e7e1      	b.n	800be1c <_dtoa_r+0x95c>
 800be58:	46c2      	mov	sl, r8
 800be5a:	4626      	mov	r6, r4
 800be5c:	e596      	b.n	800b98c <_dtoa_r+0x4cc>
 800be5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800be60:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800be64:	2b00      	cmp	r3, #0
 800be66:	f000 80fd 	beq.w	800c064 <_dtoa_r+0xba4>
 800be6a:	2f00      	cmp	r7, #0
 800be6c:	dd05      	ble.n	800be7a <_dtoa_r+0x9ba>
 800be6e:	4631      	mov	r1, r6
 800be70:	463a      	mov	r2, r7
 800be72:	4628      	mov	r0, r5
 800be74:	f000 fc42 	bl	800c6fc <__lshift>
 800be78:	4606      	mov	r6, r0
 800be7a:	f1b8 0f00 	cmp.w	r8, #0
 800be7e:	d05c      	beq.n	800bf3a <_dtoa_r+0xa7a>
 800be80:	4628      	mov	r0, r5
 800be82:	6871      	ldr	r1, [r6, #4]
 800be84:	f000 fa2c 	bl	800c2e0 <_Balloc>
 800be88:	4607      	mov	r7, r0
 800be8a:	b928      	cbnz	r0, 800be98 <_dtoa_r+0x9d8>
 800be8c:	4602      	mov	r2, r0
 800be8e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800be92:	4b7f      	ldr	r3, [pc, #508]	; (800c090 <_dtoa_r+0xbd0>)
 800be94:	f7ff bb28 	b.w	800b4e8 <_dtoa_r+0x28>
 800be98:	6932      	ldr	r2, [r6, #16]
 800be9a:	f106 010c 	add.w	r1, r6, #12
 800be9e:	3202      	adds	r2, #2
 800bea0:	0092      	lsls	r2, r2, #2
 800bea2:	300c      	adds	r0, #12
 800bea4:	f000 fa0e 	bl	800c2c4 <memcpy>
 800bea8:	2201      	movs	r2, #1
 800beaa:	4639      	mov	r1, r7
 800beac:	4628      	mov	r0, r5
 800beae:	f000 fc25 	bl	800c6fc <__lshift>
 800beb2:	46b0      	mov	r8, r6
 800beb4:	4606      	mov	r6, r0
 800beb6:	9b03      	ldr	r3, [sp, #12]
 800beb8:	3301      	adds	r3, #1
 800beba:	9308      	str	r3, [sp, #32]
 800bebc:	9b03      	ldr	r3, [sp, #12]
 800bebe:	444b      	add	r3, r9
 800bec0:	930a      	str	r3, [sp, #40]	; 0x28
 800bec2:	9b04      	ldr	r3, [sp, #16]
 800bec4:	f003 0301 	and.w	r3, r3, #1
 800bec8:	9309      	str	r3, [sp, #36]	; 0x24
 800beca:	9b08      	ldr	r3, [sp, #32]
 800becc:	4621      	mov	r1, r4
 800bece:	3b01      	subs	r3, #1
 800bed0:	4658      	mov	r0, fp
 800bed2:	9304      	str	r3, [sp, #16]
 800bed4:	f7ff fa68 	bl	800b3a8 <quorem>
 800bed8:	4603      	mov	r3, r0
 800beda:	4641      	mov	r1, r8
 800bedc:	3330      	adds	r3, #48	; 0x30
 800bede:	9006      	str	r0, [sp, #24]
 800bee0:	4658      	mov	r0, fp
 800bee2:	930b      	str	r3, [sp, #44]	; 0x2c
 800bee4:	f000 fc7a 	bl	800c7dc <__mcmp>
 800bee8:	4632      	mov	r2, r6
 800beea:	4681      	mov	r9, r0
 800beec:	4621      	mov	r1, r4
 800beee:	4628      	mov	r0, r5
 800bef0:	f000 fc90 	bl	800c814 <__mdiff>
 800bef4:	68c2      	ldr	r2, [r0, #12]
 800bef6:	4607      	mov	r7, r0
 800bef8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800befa:	bb02      	cbnz	r2, 800bf3e <_dtoa_r+0xa7e>
 800befc:	4601      	mov	r1, r0
 800befe:	4658      	mov	r0, fp
 800bf00:	f000 fc6c 	bl	800c7dc <__mcmp>
 800bf04:	4602      	mov	r2, r0
 800bf06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bf08:	4639      	mov	r1, r7
 800bf0a:	4628      	mov	r0, r5
 800bf0c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800bf10:	f000 fa26 	bl	800c360 <_Bfree>
 800bf14:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bf16:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bf18:	9f08      	ldr	r7, [sp, #32]
 800bf1a:	ea43 0102 	orr.w	r1, r3, r2
 800bf1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf20:	430b      	orrs	r3, r1
 800bf22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bf24:	d10d      	bne.n	800bf42 <_dtoa_r+0xa82>
 800bf26:	2b39      	cmp	r3, #57	; 0x39
 800bf28:	d029      	beq.n	800bf7e <_dtoa_r+0xabe>
 800bf2a:	f1b9 0f00 	cmp.w	r9, #0
 800bf2e:	dd01      	ble.n	800bf34 <_dtoa_r+0xa74>
 800bf30:	9b06      	ldr	r3, [sp, #24]
 800bf32:	3331      	adds	r3, #49	; 0x31
 800bf34:	9a04      	ldr	r2, [sp, #16]
 800bf36:	7013      	strb	r3, [r2, #0]
 800bf38:	e776      	b.n	800be28 <_dtoa_r+0x968>
 800bf3a:	4630      	mov	r0, r6
 800bf3c:	e7b9      	b.n	800beb2 <_dtoa_r+0x9f2>
 800bf3e:	2201      	movs	r2, #1
 800bf40:	e7e2      	b.n	800bf08 <_dtoa_r+0xa48>
 800bf42:	f1b9 0f00 	cmp.w	r9, #0
 800bf46:	db06      	blt.n	800bf56 <_dtoa_r+0xa96>
 800bf48:	9922      	ldr	r1, [sp, #136]	; 0x88
 800bf4a:	ea41 0909 	orr.w	r9, r1, r9
 800bf4e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bf50:	ea59 0101 	orrs.w	r1, r9, r1
 800bf54:	d120      	bne.n	800bf98 <_dtoa_r+0xad8>
 800bf56:	2a00      	cmp	r2, #0
 800bf58:	ddec      	ble.n	800bf34 <_dtoa_r+0xa74>
 800bf5a:	4659      	mov	r1, fp
 800bf5c:	2201      	movs	r2, #1
 800bf5e:	4628      	mov	r0, r5
 800bf60:	9308      	str	r3, [sp, #32]
 800bf62:	f000 fbcb 	bl	800c6fc <__lshift>
 800bf66:	4621      	mov	r1, r4
 800bf68:	4683      	mov	fp, r0
 800bf6a:	f000 fc37 	bl	800c7dc <__mcmp>
 800bf6e:	2800      	cmp	r0, #0
 800bf70:	9b08      	ldr	r3, [sp, #32]
 800bf72:	dc02      	bgt.n	800bf7a <_dtoa_r+0xaba>
 800bf74:	d1de      	bne.n	800bf34 <_dtoa_r+0xa74>
 800bf76:	07da      	lsls	r2, r3, #31
 800bf78:	d5dc      	bpl.n	800bf34 <_dtoa_r+0xa74>
 800bf7a:	2b39      	cmp	r3, #57	; 0x39
 800bf7c:	d1d8      	bne.n	800bf30 <_dtoa_r+0xa70>
 800bf7e:	2339      	movs	r3, #57	; 0x39
 800bf80:	9a04      	ldr	r2, [sp, #16]
 800bf82:	7013      	strb	r3, [r2, #0]
 800bf84:	463b      	mov	r3, r7
 800bf86:	461f      	mov	r7, r3
 800bf88:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800bf8c:	3b01      	subs	r3, #1
 800bf8e:	2a39      	cmp	r2, #57	; 0x39
 800bf90:	d050      	beq.n	800c034 <_dtoa_r+0xb74>
 800bf92:	3201      	adds	r2, #1
 800bf94:	701a      	strb	r2, [r3, #0]
 800bf96:	e747      	b.n	800be28 <_dtoa_r+0x968>
 800bf98:	2a00      	cmp	r2, #0
 800bf9a:	dd03      	ble.n	800bfa4 <_dtoa_r+0xae4>
 800bf9c:	2b39      	cmp	r3, #57	; 0x39
 800bf9e:	d0ee      	beq.n	800bf7e <_dtoa_r+0xabe>
 800bfa0:	3301      	adds	r3, #1
 800bfa2:	e7c7      	b.n	800bf34 <_dtoa_r+0xa74>
 800bfa4:	9a08      	ldr	r2, [sp, #32]
 800bfa6:	990a      	ldr	r1, [sp, #40]	; 0x28
 800bfa8:	f802 3c01 	strb.w	r3, [r2, #-1]
 800bfac:	428a      	cmp	r2, r1
 800bfae:	d02a      	beq.n	800c006 <_dtoa_r+0xb46>
 800bfb0:	4659      	mov	r1, fp
 800bfb2:	2300      	movs	r3, #0
 800bfb4:	220a      	movs	r2, #10
 800bfb6:	4628      	mov	r0, r5
 800bfb8:	f000 f9f4 	bl	800c3a4 <__multadd>
 800bfbc:	45b0      	cmp	r8, r6
 800bfbe:	4683      	mov	fp, r0
 800bfc0:	f04f 0300 	mov.w	r3, #0
 800bfc4:	f04f 020a 	mov.w	r2, #10
 800bfc8:	4641      	mov	r1, r8
 800bfca:	4628      	mov	r0, r5
 800bfcc:	d107      	bne.n	800bfde <_dtoa_r+0xb1e>
 800bfce:	f000 f9e9 	bl	800c3a4 <__multadd>
 800bfd2:	4680      	mov	r8, r0
 800bfd4:	4606      	mov	r6, r0
 800bfd6:	9b08      	ldr	r3, [sp, #32]
 800bfd8:	3301      	adds	r3, #1
 800bfda:	9308      	str	r3, [sp, #32]
 800bfdc:	e775      	b.n	800beca <_dtoa_r+0xa0a>
 800bfde:	f000 f9e1 	bl	800c3a4 <__multadd>
 800bfe2:	4631      	mov	r1, r6
 800bfe4:	4680      	mov	r8, r0
 800bfe6:	2300      	movs	r3, #0
 800bfe8:	220a      	movs	r2, #10
 800bfea:	4628      	mov	r0, r5
 800bfec:	f000 f9da 	bl	800c3a4 <__multadd>
 800bff0:	4606      	mov	r6, r0
 800bff2:	e7f0      	b.n	800bfd6 <_dtoa_r+0xb16>
 800bff4:	f1b9 0f00 	cmp.w	r9, #0
 800bff8:	bfcc      	ite	gt
 800bffa:	464f      	movgt	r7, r9
 800bffc:	2701      	movle	r7, #1
 800bffe:	f04f 0800 	mov.w	r8, #0
 800c002:	9a03      	ldr	r2, [sp, #12]
 800c004:	4417      	add	r7, r2
 800c006:	4659      	mov	r1, fp
 800c008:	2201      	movs	r2, #1
 800c00a:	4628      	mov	r0, r5
 800c00c:	9308      	str	r3, [sp, #32]
 800c00e:	f000 fb75 	bl	800c6fc <__lshift>
 800c012:	4621      	mov	r1, r4
 800c014:	4683      	mov	fp, r0
 800c016:	f000 fbe1 	bl	800c7dc <__mcmp>
 800c01a:	2800      	cmp	r0, #0
 800c01c:	dcb2      	bgt.n	800bf84 <_dtoa_r+0xac4>
 800c01e:	d102      	bne.n	800c026 <_dtoa_r+0xb66>
 800c020:	9b08      	ldr	r3, [sp, #32]
 800c022:	07db      	lsls	r3, r3, #31
 800c024:	d4ae      	bmi.n	800bf84 <_dtoa_r+0xac4>
 800c026:	463b      	mov	r3, r7
 800c028:	461f      	mov	r7, r3
 800c02a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c02e:	2a30      	cmp	r2, #48	; 0x30
 800c030:	d0fa      	beq.n	800c028 <_dtoa_r+0xb68>
 800c032:	e6f9      	b.n	800be28 <_dtoa_r+0x968>
 800c034:	9a03      	ldr	r2, [sp, #12]
 800c036:	429a      	cmp	r2, r3
 800c038:	d1a5      	bne.n	800bf86 <_dtoa_r+0xac6>
 800c03a:	2331      	movs	r3, #49	; 0x31
 800c03c:	f10a 0a01 	add.w	sl, sl, #1
 800c040:	e779      	b.n	800bf36 <_dtoa_r+0xa76>
 800c042:	4b14      	ldr	r3, [pc, #80]	; (800c094 <_dtoa_r+0xbd4>)
 800c044:	f7ff baa8 	b.w	800b598 <_dtoa_r+0xd8>
 800c048:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	f47f aa81 	bne.w	800b552 <_dtoa_r+0x92>
 800c050:	4b11      	ldr	r3, [pc, #68]	; (800c098 <_dtoa_r+0xbd8>)
 800c052:	f7ff baa1 	b.w	800b598 <_dtoa_r+0xd8>
 800c056:	f1b9 0f00 	cmp.w	r9, #0
 800c05a:	dc03      	bgt.n	800c064 <_dtoa_r+0xba4>
 800c05c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c05e:	2b02      	cmp	r3, #2
 800c060:	f73f aecb 	bgt.w	800bdfa <_dtoa_r+0x93a>
 800c064:	9f03      	ldr	r7, [sp, #12]
 800c066:	4621      	mov	r1, r4
 800c068:	4658      	mov	r0, fp
 800c06a:	f7ff f99d 	bl	800b3a8 <quorem>
 800c06e:	9a03      	ldr	r2, [sp, #12]
 800c070:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800c074:	f807 3b01 	strb.w	r3, [r7], #1
 800c078:	1aba      	subs	r2, r7, r2
 800c07a:	4591      	cmp	r9, r2
 800c07c:	ddba      	ble.n	800bff4 <_dtoa_r+0xb34>
 800c07e:	4659      	mov	r1, fp
 800c080:	2300      	movs	r3, #0
 800c082:	220a      	movs	r2, #10
 800c084:	4628      	mov	r0, r5
 800c086:	f000 f98d 	bl	800c3a4 <__multadd>
 800c08a:	4683      	mov	fp, r0
 800c08c:	e7eb      	b.n	800c066 <_dtoa_r+0xba6>
 800c08e:	bf00      	nop
 800c090:	0800db8b 	.word	0x0800db8b
 800c094:	0800dae8 	.word	0x0800dae8
 800c098:	0800db0c 	.word	0x0800db0c

0800c09c <std>:
 800c09c:	2300      	movs	r3, #0
 800c09e:	b510      	push	{r4, lr}
 800c0a0:	4604      	mov	r4, r0
 800c0a2:	e9c0 3300 	strd	r3, r3, [r0]
 800c0a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c0aa:	6083      	str	r3, [r0, #8]
 800c0ac:	8181      	strh	r1, [r0, #12]
 800c0ae:	6643      	str	r3, [r0, #100]	; 0x64
 800c0b0:	81c2      	strh	r2, [r0, #14]
 800c0b2:	6183      	str	r3, [r0, #24]
 800c0b4:	4619      	mov	r1, r3
 800c0b6:	2208      	movs	r2, #8
 800c0b8:	305c      	adds	r0, #92	; 0x5c
 800c0ba:	f7fe fcc1 	bl	800aa40 <memset>
 800c0be:	4b05      	ldr	r3, [pc, #20]	; (800c0d4 <std+0x38>)
 800c0c0:	6224      	str	r4, [r4, #32]
 800c0c2:	6263      	str	r3, [r4, #36]	; 0x24
 800c0c4:	4b04      	ldr	r3, [pc, #16]	; (800c0d8 <std+0x3c>)
 800c0c6:	62a3      	str	r3, [r4, #40]	; 0x28
 800c0c8:	4b04      	ldr	r3, [pc, #16]	; (800c0dc <std+0x40>)
 800c0ca:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c0cc:	4b04      	ldr	r3, [pc, #16]	; (800c0e0 <std+0x44>)
 800c0ce:	6323      	str	r3, [r4, #48]	; 0x30
 800c0d0:	bd10      	pop	{r4, pc}
 800c0d2:	bf00      	nop
 800c0d4:	0800d1dd 	.word	0x0800d1dd
 800c0d8:	0800d1ff 	.word	0x0800d1ff
 800c0dc:	0800d237 	.word	0x0800d237
 800c0e0:	0800d25b 	.word	0x0800d25b

0800c0e4 <_cleanup_r>:
 800c0e4:	4901      	ldr	r1, [pc, #4]	; (800c0ec <_cleanup_r+0x8>)
 800c0e6:	f000 b8af 	b.w	800c248 <_fwalk_reent>
 800c0ea:	bf00      	nop
 800c0ec:	0800d569 	.word	0x0800d569

0800c0f0 <__sfmoreglue>:
 800c0f0:	2268      	movs	r2, #104	; 0x68
 800c0f2:	b570      	push	{r4, r5, r6, lr}
 800c0f4:	1e4d      	subs	r5, r1, #1
 800c0f6:	4355      	muls	r5, r2
 800c0f8:	460e      	mov	r6, r1
 800c0fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c0fe:	f000 fced 	bl	800cadc <_malloc_r>
 800c102:	4604      	mov	r4, r0
 800c104:	b140      	cbz	r0, 800c118 <__sfmoreglue+0x28>
 800c106:	2100      	movs	r1, #0
 800c108:	e9c0 1600 	strd	r1, r6, [r0]
 800c10c:	300c      	adds	r0, #12
 800c10e:	60a0      	str	r0, [r4, #8]
 800c110:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c114:	f7fe fc94 	bl	800aa40 <memset>
 800c118:	4620      	mov	r0, r4
 800c11a:	bd70      	pop	{r4, r5, r6, pc}

0800c11c <__sfp_lock_acquire>:
 800c11c:	4801      	ldr	r0, [pc, #4]	; (800c124 <__sfp_lock_acquire+0x8>)
 800c11e:	f000 b8b8 	b.w	800c292 <__retarget_lock_acquire_recursive>
 800c122:	bf00      	nop
 800c124:	2000165a 	.word	0x2000165a

0800c128 <__sfp_lock_release>:
 800c128:	4801      	ldr	r0, [pc, #4]	; (800c130 <__sfp_lock_release+0x8>)
 800c12a:	f000 b8b3 	b.w	800c294 <__retarget_lock_release_recursive>
 800c12e:	bf00      	nop
 800c130:	2000165a 	.word	0x2000165a

0800c134 <__sinit_lock_acquire>:
 800c134:	4801      	ldr	r0, [pc, #4]	; (800c13c <__sinit_lock_acquire+0x8>)
 800c136:	f000 b8ac 	b.w	800c292 <__retarget_lock_acquire_recursive>
 800c13a:	bf00      	nop
 800c13c:	2000165b 	.word	0x2000165b

0800c140 <__sinit_lock_release>:
 800c140:	4801      	ldr	r0, [pc, #4]	; (800c148 <__sinit_lock_release+0x8>)
 800c142:	f000 b8a7 	b.w	800c294 <__retarget_lock_release_recursive>
 800c146:	bf00      	nop
 800c148:	2000165b 	.word	0x2000165b

0800c14c <__sinit>:
 800c14c:	b510      	push	{r4, lr}
 800c14e:	4604      	mov	r4, r0
 800c150:	f7ff fff0 	bl	800c134 <__sinit_lock_acquire>
 800c154:	69a3      	ldr	r3, [r4, #24]
 800c156:	b11b      	cbz	r3, 800c160 <__sinit+0x14>
 800c158:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c15c:	f7ff bff0 	b.w	800c140 <__sinit_lock_release>
 800c160:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c164:	6523      	str	r3, [r4, #80]	; 0x50
 800c166:	4b13      	ldr	r3, [pc, #76]	; (800c1b4 <__sinit+0x68>)
 800c168:	4a13      	ldr	r2, [pc, #76]	; (800c1b8 <__sinit+0x6c>)
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	62a2      	str	r2, [r4, #40]	; 0x28
 800c16e:	42a3      	cmp	r3, r4
 800c170:	bf08      	it	eq
 800c172:	2301      	moveq	r3, #1
 800c174:	4620      	mov	r0, r4
 800c176:	bf08      	it	eq
 800c178:	61a3      	streq	r3, [r4, #24]
 800c17a:	f000 f81f 	bl	800c1bc <__sfp>
 800c17e:	6060      	str	r0, [r4, #4]
 800c180:	4620      	mov	r0, r4
 800c182:	f000 f81b 	bl	800c1bc <__sfp>
 800c186:	60a0      	str	r0, [r4, #8]
 800c188:	4620      	mov	r0, r4
 800c18a:	f000 f817 	bl	800c1bc <__sfp>
 800c18e:	2200      	movs	r2, #0
 800c190:	2104      	movs	r1, #4
 800c192:	60e0      	str	r0, [r4, #12]
 800c194:	6860      	ldr	r0, [r4, #4]
 800c196:	f7ff ff81 	bl	800c09c <std>
 800c19a:	2201      	movs	r2, #1
 800c19c:	2109      	movs	r1, #9
 800c19e:	68a0      	ldr	r0, [r4, #8]
 800c1a0:	f7ff ff7c 	bl	800c09c <std>
 800c1a4:	2202      	movs	r2, #2
 800c1a6:	2112      	movs	r1, #18
 800c1a8:	68e0      	ldr	r0, [r4, #12]
 800c1aa:	f7ff ff77 	bl	800c09c <std>
 800c1ae:	2301      	movs	r3, #1
 800c1b0:	61a3      	str	r3, [r4, #24]
 800c1b2:	e7d1      	b.n	800c158 <__sinit+0xc>
 800c1b4:	0800dad4 	.word	0x0800dad4
 800c1b8:	0800c0e5 	.word	0x0800c0e5

0800c1bc <__sfp>:
 800c1bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1be:	4607      	mov	r7, r0
 800c1c0:	f7ff ffac 	bl	800c11c <__sfp_lock_acquire>
 800c1c4:	4b1e      	ldr	r3, [pc, #120]	; (800c240 <__sfp+0x84>)
 800c1c6:	681e      	ldr	r6, [r3, #0]
 800c1c8:	69b3      	ldr	r3, [r6, #24]
 800c1ca:	b913      	cbnz	r3, 800c1d2 <__sfp+0x16>
 800c1cc:	4630      	mov	r0, r6
 800c1ce:	f7ff ffbd 	bl	800c14c <__sinit>
 800c1d2:	3648      	adds	r6, #72	; 0x48
 800c1d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c1d8:	3b01      	subs	r3, #1
 800c1da:	d503      	bpl.n	800c1e4 <__sfp+0x28>
 800c1dc:	6833      	ldr	r3, [r6, #0]
 800c1de:	b30b      	cbz	r3, 800c224 <__sfp+0x68>
 800c1e0:	6836      	ldr	r6, [r6, #0]
 800c1e2:	e7f7      	b.n	800c1d4 <__sfp+0x18>
 800c1e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c1e8:	b9d5      	cbnz	r5, 800c220 <__sfp+0x64>
 800c1ea:	4b16      	ldr	r3, [pc, #88]	; (800c244 <__sfp+0x88>)
 800c1ec:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c1f0:	60e3      	str	r3, [r4, #12]
 800c1f2:	6665      	str	r5, [r4, #100]	; 0x64
 800c1f4:	f000 f84c 	bl	800c290 <__retarget_lock_init_recursive>
 800c1f8:	f7ff ff96 	bl	800c128 <__sfp_lock_release>
 800c1fc:	2208      	movs	r2, #8
 800c1fe:	4629      	mov	r1, r5
 800c200:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c204:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c208:	6025      	str	r5, [r4, #0]
 800c20a:	61a5      	str	r5, [r4, #24]
 800c20c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c210:	f7fe fc16 	bl	800aa40 <memset>
 800c214:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c218:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c21c:	4620      	mov	r0, r4
 800c21e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c220:	3468      	adds	r4, #104	; 0x68
 800c222:	e7d9      	b.n	800c1d8 <__sfp+0x1c>
 800c224:	2104      	movs	r1, #4
 800c226:	4638      	mov	r0, r7
 800c228:	f7ff ff62 	bl	800c0f0 <__sfmoreglue>
 800c22c:	4604      	mov	r4, r0
 800c22e:	6030      	str	r0, [r6, #0]
 800c230:	2800      	cmp	r0, #0
 800c232:	d1d5      	bne.n	800c1e0 <__sfp+0x24>
 800c234:	f7ff ff78 	bl	800c128 <__sfp_lock_release>
 800c238:	230c      	movs	r3, #12
 800c23a:	603b      	str	r3, [r7, #0]
 800c23c:	e7ee      	b.n	800c21c <__sfp+0x60>
 800c23e:	bf00      	nop
 800c240:	0800dad4 	.word	0x0800dad4
 800c244:	ffff0001 	.word	0xffff0001

0800c248 <_fwalk_reent>:
 800c248:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c24c:	4606      	mov	r6, r0
 800c24e:	4688      	mov	r8, r1
 800c250:	2700      	movs	r7, #0
 800c252:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c256:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c25a:	f1b9 0901 	subs.w	r9, r9, #1
 800c25e:	d505      	bpl.n	800c26c <_fwalk_reent+0x24>
 800c260:	6824      	ldr	r4, [r4, #0]
 800c262:	2c00      	cmp	r4, #0
 800c264:	d1f7      	bne.n	800c256 <_fwalk_reent+0xe>
 800c266:	4638      	mov	r0, r7
 800c268:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c26c:	89ab      	ldrh	r3, [r5, #12]
 800c26e:	2b01      	cmp	r3, #1
 800c270:	d907      	bls.n	800c282 <_fwalk_reent+0x3a>
 800c272:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c276:	3301      	adds	r3, #1
 800c278:	d003      	beq.n	800c282 <_fwalk_reent+0x3a>
 800c27a:	4629      	mov	r1, r5
 800c27c:	4630      	mov	r0, r6
 800c27e:	47c0      	blx	r8
 800c280:	4307      	orrs	r7, r0
 800c282:	3568      	adds	r5, #104	; 0x68
 800c284:	e7e9      	b.n	800c25a <_fwalk_reent+0x12>
	...

0800c288 <_localeconv_r>:
 800c288:	4800      	ldr	r0, [pc, #0]	; (800c28c <_localeconv_r+0x4>)
 800c28a:	4770      	bx	lr
 800c28c:	200002dc 	.word	0x200002dc

0800c290 <__retarget_lock_init_recursive>:
 800c290:	4770      	bx	lr

0800c292 <__retarget_lock_acquire_recursive>:
 800c292:	4770      	bx	lr

0800c294 <__retarget_lock_release_recursive>:
 800c294:	4770      	bx	lr
	...

0800c298 <malloc>:
 800c298:	4b02      	ldr	r3, [pc, #8]	; (800c2a4 <malloc+0xc>)
 800c29a:	4601      	mov	r1, r0
 800c29c:	6818      	ldr	r0, [r3, #0]
 800c29e:	f000 bc1d 	b.w	800cadc <_malloc_r>
 800c2a2:	bf00      	nop
 800c2a4:	20000188 	.word	0x20000188

0800c2a8 <memchr>:
 800c2a8:	4603      	mov	r3, r0
 800c2aa:	b510      	push	{r4, lr}
 800c2ac:	b2c9      	uxtb	r1, r1
 800c2ae:	4402      	add	r2, r0
 800c2b0:	4293      	cmp	r3, r2
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	d101      	bne.n	800c2ba <memchr+0x12>
 800c2b6:	2000      	movs	r0, #0
 800c2b8:	e003      	b.n	800c2c2 <memchr+0x1a>
 800c2ba:	7804      	ldrb	r4, [r0, #0]
 800c2bc:	3301      	adds	r3, #1
 800c2be:	428c      	cmp	r4, r1
 800c2c0:	d1f6      	bne.n	800c2b0 <memchr+0x8>
 800c2c2:	bd10      	pop	{r4, pc}

0800c2c4 <memcpy>:
 800c2c4:	440a      	add	r2, r1
 800c2c6:	4291      	cmp	r1, r2
 800c2c8:	f100 33ff 	add.w	r3, r0, #4294967295
 800c2cc:	d100      	bne.n	800c2d0 <memcpy+0xc>
 800c2ce:	4770      	bx	lr
 800c2d0:	b510      	push	{r4, lr}
 800c2d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c2d6:	4291      	cmp	r1, r2
 800c2d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c2dc:	d1f9      	bne.n	800c2d2 <memcpy+0xe>
 800c2de:	bd10      	pop	{r4, pc}

0800c2e0 <_Balloc>:
 800c2e0:	b570      	push	{r4, r5, r6, lr}
 800c2e2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c2e4:	4604      	mov	r4, r0
 800c2e6:	460d      	mov	r5, r1
 800c2e8:	b976      	cbnz	r6, 800c308 <_Balloc+0x28>
 800c2ea:	2010      	movs	r0, #16
 800c2ec:	f7ff ffd4 	bl	800c298 <malloc>
 800c2f0:	4602      	mov	r2, r0
 800c2f2:	6260      	str	r0, [r4, #36]	; 0x24
 800c2f4:	b920      	cbnz	r0, 800c300 <_Balloc+0x20>
 800c2f6:	2166      	movs	r1, #102	; 0x66
 800c2f8:	4b17      	ldr	r3, [pc, #92]	; (800c358 <_Balloc+0x78>)
 800c2fa:	4818      	ldr	r0, [pc, #96]	; (800c35c <_Balloc+0x7c>)
 800c2fc:	f001 f884 	bl	800d408 <__assert_func>
 800c300:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c304:	6006      	str	r6, [r0, #0]
 800c306:	60c6      	str	r6, [r0, #12]
 800c308:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c30a:	68f3      	ldr	r3, [r6, #12]
 800c30c:	b183      	cbz	r3, 800c330 <_Balloc+0x50>
 800c30e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c310:	68db      	ldr	r3, [r3, #12]
 800c312:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c316:	b9b8      	cbnz	r0, 800c348 <_Balloc+0x68>
 800c318:	2101      	movs	r1, #1
 800c31a:	fa01 f605 	lsl.w	r6, r1, r5
 800c31e:	1d72      	adds	r2, r6, #5
 800c320:	4620      	mov	r0, r4
 800c322:	0092      	lsls	r2, r2, #2
 800c324:	f000 fb5e 	bl	800c9e4 <_calloc_r>
 800c328:	b160      	cbz	r0, 800c344 <_Balloc+0x64>
 800c32a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c32e:	e00e      	b.n	800c34e <_Balloc+0x6e>
 800c330:	2221      	movs	r2, #33	; 0x21
 800c332:	2104      	movs	r1, #4
 800c334:	4620      	mov	r0, r4
 800c336:	f000 fb55 	bl	800c9e4 <_calloc_r>
 800c33a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c33c:	60f0      	str	r0, [r6, #12]
 800c33e:	68db      	ldr	r3, [r3, #12]
 800c340:	2b00      	cmp	r3, #0
 800c342:	d1e4      	bne.n	800c30e <_Balloc+0x2e>
 800c344:	2000      	movs	r0, #0
 800c346:	bd70      	pop	{r4, r5, r6, pc}
 800c348:	6802      	ldr	r2, [r0, #0]
 800c34a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c34e:	2300      	movs	r3, #0
 800c350:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c354:	e7f7      	b.n	800c346 <_Balloc+0x66>
 800c356:	bf00      	nop
 800c358:	0800db19 	.word	0x0800db19
 800c35c:	0800dbfc 	.word	0x0800dbfc

0800c360 <_Bfree>:
 800c360:	b570      	push	{r4, r5, r6, lr}
 800c362:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c364:	4605      	mov	r5, r0
 800c366:	460c      	mov	r4, r1
 800c368:	b976      	cbnz	r6, 800c388 <_Bfree+0x28>
 800c36a:	2010      	movs	r0, #16
 800c36c:	f7ff ff94 	bl	800c298 <malloc>
 800c370:	4602      	mov	r2, r0
 800c372:	6268      	str	r0, [r5, #36]	; 0x24
 800c374:	b920      	cbnz	r0, 800c380 <_Bfree+0x20>
 800c376:	218a      	movs	r1, #138	; 0x8a
 800c378:	4b08      	ldr	r3, [pc, #32]	; (800c39c <_Bfree+0x3c>)
 800c37a:	4809      	ldr	r0, [pc, #36]	; (800c3a0 <_Bfree+0x40>)
 800c37c:	f001 f844 	bl	800d408 <__assert_func>
 800c380:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c384:	6006      	str	r6, [r0, #0]
 800c386:	60c6      	str	r6, [r0, #12]
 800c388:	b13c      	cbz	r4, 800c39a <_Bfree+0x3a>
 800c38a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c38c:	6862      	ldr	r2, [r4, #4]
 800c38e:	68db      	ldr	r3, [r3, #12]
 800c390:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c394:	6021      	str	r1, [r4, #0]
 800c396:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c39a:	bd70      	pop	{r4, r5, r6, pc}
 800c39c:	0800db19 	.word	0x0800db19
 800c3a0:	0800dbfc 	.word	0x0800dbfc

0800c3a4 <__multadd>:
 800c3a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3a8:	4607      	mov	r7, r0
 800c3aa:	460c      	mov	r4, r1
 800c3ac:	461e      	mov	r6, r3
 800c3ae:	2000      	movs	r0, #0
 800c3b0:	690d      	ldr	r5, [r1, #16]
 800c3b2:	f101 0c14 	add.w	ip, r1, #20
 800c3b6:	f8dc 3000 	ldr.w	r3, [ip]
 800c3ba:	3001      	adds	r0, #1
 800c3bc:	b299      	uxth	r1, r3
 800c3be:	fb02 6101 	mla	r1, r2, r1, r6
 800c3c2:	0c1e      	lsrs	r6, r3, #16
 800c3c4:	0c0b      	lsrs	r3, r1, #16
 800c3c6:	fb02 3306 	mla	r3, r2, r6, r3
 800c3ca:	b289      	uxth	r1, r1
 800c3cc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c3d0:	4285      	cmp	r5, r0
 800c3d2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c3d6:	f84c 1b04 	str.w	r1, [ip], #4
 800c3da:	dcec      	bgt.n	800c3b6 <__multadd+0x12>
 800c3dc:	b30e      	cbz	r6, 800c422 <__multadd+0x7e>
 800c3de:	68a3      	ldr	r3, [r4, #8]
 800c3e0:	42ab      	cmp	r3, r5
 800c3e2:	dc19      	bgt.n	800c418 <__multadd+0x74>
 800c3e4:	6861      	ldr	r1, [r4, #4]
 800c3e6:	4638      	mov	r0, r7
 800c3e8:	3101      	adds	r1, #1
 800c3ea:	f7ff ff79 	bl	800c2e0 <_Balloc>
 800c3ee:	4680      	mov	r8, r0
 800c3f0:	b928      	cbnz	r0, 800c3fe <__multadd+0x5a>
 800c3f2:	4602      	mov	r2, r0
 800c3f4:	21b5      	movs	r1, #181	; 0xb5
 800c3f6:	4b0c      	ldr	r3, [pc, #48]	; (800c428 <__multadd+0x84>)
 800c3f8:	480c      	ldr	r0, [pc, #48]	; (800c42c <__multadd+0x88>)
 800c3fa:	f001 f805 	bl	800d408 <__assert_func>
 800c3fe:	6922      	ldr	r2, [r4, #16]
 800c400:	f104 010c 	add.w	r1, r4, #12
 800c404:	3202      	adds	r2, #2
 800c406:	0092      	lsls	r2, r2, #2
 800c408:	300c      	adds	r0, #12
 800c40a:	f7ff ff5b 	bl	800c2c4 <memcpy>
 800c40e:	4621      	mov	r1, r4
 800c410:	4638      	mov	r0, r7
 800c412:	f7ff ffa5 	bl	800c360 <_Bfree>
 800c416:	4644      	mov	r4, r8
 800c418:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c41c:	3501      	adds	r5, #1
 800c41e:	615e      	str	r6, [r3, #20]
 800c420:	6125      	str	r5, [r4, #16]
 800c422:	4620      	mov	r0, r4
 800c424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c428:	0800db8b 	.word	0x0800db8b
 800c42c:	0800dbfc 	.word	0x0800dbfc

0800c430 <__hi0bits>:
 800c430:	0c02      	lsrs	r2, r0, #16
 800c432:	0412      	lsls	r2, r2, #16
 800c434:	4603      	mov	r3, r0
 800c436:	b9ca      	cbnz	r2, 800c46c <__hi0bits+0x3c>
 800c438:	0403      	lsls	r3, r0, #16
 800c43a:	2010      	movs	r0, #16
 800c43c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800c440:	bf04      	itt	eq
 800c442:	021b      	lsleq	r3, r3, #8
 800c444:	3008      	addeq	r0, #8
 800c446:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800c44a:	bf04      	itt	eq
 800c44c:	011b      	lsleq	r3, r3, #4
 800c44e:	3004      	addeq	r0, #4
 800c450:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800c454:	bf04      	itt	eq
 800c456:	009b      	lsleq	r3, r3, #2
 800c458:	3002      	addeq	r0, #2
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	db05      	blt.n	800c46a <__hi0bits+0x3a>
 800c45e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800c462:	f100 0001 	add.w	r0, r0, #1
 800c466:	bf08      	it	eq
 800c468:	2020      	moveq	r0, #32
 800c46a:	4770      	bx	lr
 800c46c:	2000      	movs	r0, #0
 800c46e:	e7e5      	b.n	800c43c <__hi0bits+0xc>

0800c470 <__lo0bits>:
 800c470:	6803      	ldr	r3, [r0, #0]
 800c472:	4602      	mov	r2, r0
 800c474:	f013 0007 	ands.w	r0, r3, #7
 800c478:	d00b      	beq.n	800c492 <__lo0bits+0x22>
 800c47a:	07d9      	lsls	r1, r3, #31
 800c47c:	d421      	bmi.n	800c4c2 <__lo0bits+0x52>
 800c47e:	0798      	lsls	r0, r3, #30
 800c480:	bf49      	itett	mi
 800c482:	085b      	lsrmi	r3, r3, #1
 800c484:	089b      	lsrpl	r3, r3, #2
 800c486:	2001      	movmi	r0, #1
 800c488:	6013      	strmi	r3, [r2, #0]
 800c48a:	bf5c      	itt	pl
 800c48c:	2002      	movpl	r0, #2
 800c48e:	6013      	strpl	r3, [r2, #0]
 800c490:	4770      	bx	lr
 800c492:	b299      	uxth	r1, r3
 800c494:	b909      	cbnz	r1, 800c49a <__lo0bits+0x2a>
 800c496:	2010      	movs	r0, #16
 800c498:	0c1b      	lsrs	r3, r3, #16
 800c49a:	b2d9      	uxtb	r1, r3
 800c49c:	b909      	cbnz	r1, 800c4a2 <__lo0bits+0x32>
 800c49e:	3008      	adds	r0, #8
 800c4a0:	0a1b      	lsrs	r3, r3, #8
 800c4a2:	0719      	lsls	r1, r3, #28
 800c4a4:	bf04      	itt	eq
 800c4a6:	091b      	lsreq	r3, r3, #4
 800c4a8:	3004      	addeq	r0, #4
 800c4aa:	0799      	lsls	r1, r3, #30
 800c4ac:	bf04      	itt	eq
 800c4ae:	089b      	lsreq	r3, r3, #2
 800c4b0:	3002      	addeq	r0, #2
 800c4b2:	07d9      	lsls	r1, r3, #31
 800c4b4:	d403      	bmi.n	800c4be <__lo0bits+0x4e>
 800c4b6:	085b      	lsrs	r3, r3, #1
 800c4b8:	f100 0001 	add.w	r0, r0, #1
 800c4bc:	d003      	beq.n	800c4c6 <__lo0bits+0x56>
 800c4be:	6013      	str	r3, [r2, #0]
 800c4c0:	4770      	bx	lr
 800c4c2:	2000      	movs	r0, #0
 800c4c4:	4770      	bx	lr
 800c4c6:	2020      	movs	r0, #32
 800c4c8:	4770      	bx	lr
	...

0800c4cc <__i2b>:
 800c4cc:	b510      	push	{r4, lr}
 800c4ce:	460c      	mov	r4, r1
 800c4d0:	2101      	movs	r1, #1
 800c4d2:	f7ff ff05 	bl	800c2e0 <_Balloc>
 800c4d6:	4602      	mov	r2, r0
 800c4d8:	b928      	cbnz	r0, 800c4e6 <__i2b+0x1a>
 800c4da:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c4de:	4b04      	ldr	r3, [pc, #16]	; (800c4f0 <__i2b+0x24>)
 800c4e0:	4804      	ldr	r0, [pc, #16]	; (800c4f4 <__i2b+0x28>)
 800c4e2:	f000 ff91 	bl	800d408 <__assert_func>
 800c4e6:	2301      	movs	r3, #1
 800c4e8:	6144      	str	r4, [r0, #20]
 800c4ea:	6103      	str	r3, [r0, #16]
 800c4ec:	bd10      	pop	{r4, pc}
 800c4ee:	bf00      	nop
 800c4f0:	0800db8b 	.word	0x0800db8b
 800c4f4:	0800dbfc 	.word	0x0800dbfc

0800c4f8 <__multiply>:
 800c4f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4fc:	4691      	mov	r9, r2
 800c4fe:	690a      	ldr	r2, [r1, #16]
 800c500:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c504:	460c      	mov	r4, r1
 800c506:	429a      	cmp	r2, r3
 800c508:	bfbe      	ittt	lt
 800c50a:	460b      	movlt	r3, r1
 800c50c:	464c      	movlt	r4, r9
 800c50e:	4699      	movlt	r9, r3
 800c510:	6927      	ldr	r7, [r4, #16]
 800c512:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c516:	68a3      	ldr	r3, [r4, #8]
 800c518:	6861      	ldr	r1, [r4, #4]
 800c51a:	eb07 060a 	add.w	r6, r7, sl
 800c51e:	42b3      	cmp	r3, r6
 800c520:	b085      	sub	sp, #20
 800c522:	bfb8      	it	lt
 800c524:	3101      	addlt	r1, #1
 800c526:	f7ff fedb 	bl	800c2e0 <_Balloc>
 800c52a:	b930      	cbnz	r0, 800c53a <__multiply+0x42>
 800c52c:	4602      	mov	r2, r0
 800c52e:	f240 115d 	movw	r1, #349	; 0x15d
 800c532:	4b43      	ldr	r3, [pc, #268]	; (800c640 <__multiply+0x148>)
 800c534:	4843      	ldr	r0, [pc, #268]	; (800c644 <__multiply+0x14c>)
 800c536:	f000 ff67 	bl	800d408 <__assert_func>
 800c53a:	f100 0514 	add.w	r5, r0, #20
 800c53e:	462b      	mov	r3, r5
 800c540:	2200      	movs	r2, #0
 800c542:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c546:	4543      	cmp	r3, r8
 800c548:	d321      	bcc.n	800c58e <__multiply+0x96>
 800c54a:	f104 0314 	add.w	r3, r4, #20
 800c54e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c552:	f109 0314 	add.w	r3, r9, #20
 800c556:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c55a:	9202      	str	r2, [sp, #8]
 800c55c:	1b3a      	subs	r2, r7, r4
 800c55e:	3a15      	subs	r2, #21
 800c560:	f022 0203 	bic.w	r2, r2, #3
 800c564:	3204      	adds	r2, #4
 800c566:	f104 0115 	add.w	r1, r4, #21
 800c56a:	428f      	cmp	r7, r1
 800c56c:	bf38      	it	cc
 800c56e:	2204      	movcc	r2, #4
 800c570:	9201      	str	r2, [sp, #4]
 800c572:	9a02      	ldr	r2, [sp, #8]
 800c574:	9303      	str	r3, [sp, #12]
 800c576:	429a      	cmp	r2, r3
 800c578:	d80c      	bhi.n	800c594 <__multiply+0x9c>
 800c57a:	2e00      	cmp	r6, #0
 800c57c:	dd03      	ble.n	800c586 <__multiply+0x8e>
 800c57e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c582:	2b00      	cmp	r3, #0
 800c584:	d059      	beq.n	800c63a <__multiply+0x142>
 800c586:	6106      	str	r6, [r0, #16]
 800c588:	b005      	add	sp, #20
 800c58a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c58e:	f843 2b04 	str.w	r2, [r3], #4
 800c592:	e7d8      	b.n	800c546 <__multiply+0x4e>
 800c594:	f8b3 a000 	ldrh.w	sl, [r3]
 800c598:	f1ba 0f00 	cmp.w	sl, #0
 800c59c:	d023      	beq.n	800c5e6 <__multiply+0xee>
 800c59e:	46a9      	mov	r9, r5
 800c5a0:	f04f 0c00 	mov.w	ip, #0
 800c5a4:	f104 0e14 	add.w	lr, r4, #20
 800c5a8:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c5ac:	f8d9 1000 	ldr.w	r1, [r9]
 800c5b0:	fa1f fb82 	uxth.w	fp, r2
 800c5b4:	b289      	uxth	r1, r1
 800c5b6:	fb0a 110b 	mla	r1, sl, fp, r1
 800c5ba:	4461      	add	r1, ip
 800c5bc:	f8d9 c000 	ldr.w	ip, [r9]
 800c5c0:	0c12      	lsrs	r2, r2, #16
 800c5c2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800c5c6:	fb0a c202 	mla	r2, sl, r2, ip
 800c5ca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c5ce:	b289      	uxth	r1, r1
 800c5d0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c5d4:	4577      	cmp	r7, lr
 800c5d6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c5da:	f849 1b04 	str.w	r1, [r9], #4
 800c5de:	d8e3      	bhi.n	800c5a8 <__multiply+0xb0>
 800c5e0:	9a01      	ldr	r2, [sp, #4]
 800c5e2:	f845 c002 	str.w	ip, [r5, r2]
 800c5e6:	9a03      	ldr	r2, [sp, #12]
 800c5e8:	3304      	adds	r3, #4
 800c5ea:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c5ee:	f1b9 0f00 	cmp.w	r9, #0
 800c5f2:	d020      	beq.n	800c636 <__multiply+0x13e>
 800c5f4:	46ae      	mov	lr, r5
 800c5f6:	f04f 0a00 	mov.w	sl, #0
 800c5fa:	6829      	ldr	r1, [r5, #0]
 800c5fc:	f104 0c14 	add.w	ip, r4, #20
 800c600:	f8bc b000 	ldrh.w	fp, [ip]
 800c604:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c608:	b289      	uxth	r1, r1
 800c60a:	fb09 220b 	mla	r2, r9, fp, r2
 800c60e:	4492      	add	sl, r2
 800c610:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c614:	f84e 1b04 	str.w	r1, [lr], #4
 800c618:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c61c:	f8be 1000 	ldrh.w	r1, [lr]
 800c620:	0c12      	lsrs	r2, r2, #16
 800c622:	fb09 1102 	mla	r1, r9, r2, r1
 800c626:	4567      	cmp	r7, ip
 800c628:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c62c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c630:	d8e6      	bhi.n	800c600 <__multiply+0x108>
 800c632:	9a01      	ldr	r2, [sp, #4]
 800c634:	50a9      	str	r1, [r5, r2]
 800c636:	3504      	adds	r5, #4
 800c638:	e79b      	b.n	800c572 <__multiply+0x7a>
 800c63a:	3e01      	subs	r6, #1
 800c63c:	e79d      	b.n	800c57a <__multiply+0x82>
 800c63e:	bf00      	nop
 800c640:	0800db8b 	.word	0x0800db8b
 800c644:	0800dbfc 	.word	0x0800dbfc

0800c648 <__pow5mult>:
 800c648:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c64c:	4615      	mov	r5, r2
 800c64e:	f012 0203 	ands.w	r2, r2, #3
 800c652:	4606      	mov	r6, r0
 800c654:	460f      	mov	r7, r1
 800c656:	d007      	beq.n	800c668 <__pow5mult+0x20>
 800c658:	4c25      	ldr	r4, [pc, #148]	; (800c6f0 <__pow5mult+0xa8>)
 800c65a:	3a01      	subs	r2, #1
 800c65c:	2300      	movs	r3, #0
 800c65e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c662:	f7ff fe9f 	bl	800c3a4 <__multadd>
 800c666:	4607      	mov	r7, r0
 800c668:	10ad      	asrs	r5, r5, #2
 800c66a:	d03d      	beq.n	800c6e8 <__pow5mult+0xa0>
 800c66c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c66e:	b97c      	cbnz	r4, 800c690 <__pow5mult+0x48>
 800c670:	2010      	movs	r0, #16
 800c672:	f7ff fe11 	bl	800c298 <malloc>
 800c676:	4602      	mov	r2, r0
 800c678:	6270      	str	r0, [r6, #36]	; 0x24
 800c67a:	b928      	cbnz	r0, 800c688 <__pow5mult+0x40>
 800c67c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c680:	4b1c      	ldr	r3, [pc, #112]	; (800c6f4 <__pow5mult+0xac>)
 800c682:	481d      	ldr	r0, [pc, #116]	; (800c6f8 <__pow5mult+0xb0>)
 800c684:	f000 fec0 	bl	800d408 <__assert_func>
 800c688:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c68c:	6004      	str	r4, [r0, #0]
 800c68e:	60c4      	str	r4, [r0, #12]
 800c690:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c694:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c698:	b94c      	cbnz	r4, 800c6ae <__pow5mult+0x66>
 800c69a:	f240 2171 	movw	r1, #625	; 0x271
 800c69e:	4630      	mov	r0, r6
 800c6a0:	f7ff ff14 	bl	800c4cc <__i2b>
 800c6a4:	2300      	movs	r3, #0
 800c6a6:	4604      	mov	r4, r0
 800c6a8:	f8c8 0008 	str.w	r0, [r8, #8]
 800c6ac:	6003      	str	r3, [r0, #0]
 800c6ae:	f04f 0900 	mov.w	r9, #0
 800c6b2:	07eb      	lsls	r3, r5, #31
 800c6b4:	d50a      	bpl.n	800c6cc <__pow5mult+0x84>
 800c6b6:	4639      	mov	r1, r7
 800c6b8:	4622      	mov	r2, r4
 800c6ba:	4630      	mov	r0, r6
 800c6bc:	f7ff ff1c 	bl	800c4f8 <__multiply>
 800c6c0:	4680      	mov	r8, r0
 800c6c2:	4639      	mov	r1, r7
 800c6c4:	4630      	mov	r0, r6
 800c6c6:	f7ff fe4b 	bl	800c360 <_Bfree>
 800c6ca:	4647      	mov	r7, r8
 800c6cc:	106d      	asrs	r5, r5, #1
 800c6ce:	d00b      	beq.n	800c6e8 <__pow5mult+0xa0>
 800c6d0:	6820      	ldr	r0, [r4, #0]
 800c6d2:	b938      	cbnz	r0, 800c6e4 <__pow5mult+0x9c>
 800c6d4:	4622      	mov	r2, r4
 800c6d6:	4621      	mov	r1, r4
 800c6d8:	4630      	mov	r0, r6
 800c6da:	f7ff ff0d 	bl	800c4f8 <__multiply>
 800c6de:	6020      	str	r0, [r4, #0]
 800c6e0:	f8c0 9000 	str.w	r9, [r0]
 800c6e4:	4604      	mov	r4, r0
 800c6e6:	e7e4      	b.n	800c6b2 <__pow5mult+0x6a>
 800c6e8:	4638      	mov	r0, r7
 800c6ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c6ee:	bf00      	nop
 800c6f0:	0800dd48 	.word	0x0800dd48
 800c6f4:	0800db19 	.word	0x0800db19
 800c6f8:	0800dbfc 	.word	0x0800dbfc

0800c6fc <__lshift>:
 800c6fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c700:	460c      	mov	r4, r1
 800c702:	4607      	mov	r7, r0
 800c704:	4691      	mov	r9, r2
 800c706:	6923      	ldr	r3, [r4, #16]
 800c708:	6849      	ldr	r1, [r1, #4]
 800c70a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c70e:	68a3      	ldr	r3, [r4, #8]
 800c710:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c714:	f108 0601 	add.w	r6, r8, #1
 800c718:	42b3      	cmp	r3, r6
 800c71a:	db0b      	blt.n	800c734 <__lshift+0x38>
 800c71c:	4638      	mov	r0, r7
 800c71e:	f7ff fddf 	bl	800c2e0 <_Balloc>
 800c722:	4605      	mov	r5, r0
 800c724:	b948      	cbnz	r0, 800c73a <__lshift+0x3e>
 800c726:	4602      	mov	r2, r0
 800c728:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c72c:	4b29      	ldr	r3, [pc, #164]	; (800c7d4 <__lshift+0xd8>)
 800c72e:	482a      	ldr	r0, [pc, #168]	; (800c7d8 <__lshift+0xdc>)
 800c730:	f000 fe6a 	bl	800d408 <__assert_func>
 800c734:	3101      	adds	r1, #1
 800c736:	005b      	lsls	r3, r3, #1
 800c738:	e7ee      	b.n	800c718 <__lshift+0x1c>
 800c73a:	2300      	movs	r3, #0
 800c73c:	f100 0114 	add.w	r1, r0, #20
 800c740:	f100 0210 	add.w	r2, r0, #16
 800c744:	4618      	mov	r0, r3
 800c746:	4553      	cmp	r3, sl
 800c748:	db37      	blt.n	800c7ba <__lshift+0xbe>
 800c74a:	6920      	ldr	r0, [r4, #16]
 800c74c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c750:	f104 0314 	add.w	r3, r4, #20
 800c754:	f019 091f 	ands.w	r9, r9, #31
 800c758:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c75c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c760:	d02f      	beq.n	800c7c2 <__lshift+0xc6>
 800c762:	468a      	mov	sl, r1
 800c764:	f04f 0c00 	mov.w	ip, #0
 800c768:	f1c9 0e20 	rsb	lr, r9, #32
 800c76c:	681a      	ldr	r2, [r3, #0]
 800c76e:	fa02 f209 	lsl.w	r2, r2, r9
 800c772:	ea42 020c 	orr.w	r2, r2, ip
 800c776:	f84a 2b04 	str.w	r2, [sl], #4
 800c77a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c77e:	4298      	cmp	r0, r3
 800c780:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c784:	d8f2      	bhi.n	800c76c <__lshift+0x70>
 800c786:	1b03      	subs	r3, r0, r4
 800c788:	3b15      	subs	r3, #21
 800c78a:	f023 0303 	bic.w	r3, r3, #3
 800c78e:	3304      	adds	r3, #4
 800c790:	f104 0215 	add.w	r2, r4, #21
 800c794:	4290      	cmp	r0, r2
 800c796:	bf38      	it	cc
 800c798:	2304      	movcc	r3, #4
 800c79a:	f841 c003 	str.w	ip, [r1, r3]
 800c79e:	f1bc 0f00 	cmp.w	ip, #0
 800c7a2:	d001      	beq.n	800c7a8 <__lshift+0xac>
 800c7a4:	f108 0602 	add.w	r6, r8, #2
 800c7a8:	3e01      	subs	r6, #1
 800c7aa:	4638      	mov	r0, r7
 800c7ac:	4621      	mov	r1, r4
 800c7ae:	612e      	str	r6, [r5, #16]
 800c7b0:	f7ff fdd6 	bl	800c360 <_Bfree>
 800c7b4:	4628      	mov	r0, r5
 800c7b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7ba:	f842 0f04 	str.w	r0, [r2, #4]!
 800c7be:	3301      	adds	r3, #1
 800c7c0:	e7c1      	b.n	800c746 <__lshift+0x4a>
 800c7c2:	3904      	subs	r1, #4
 800c7c4:	f853 2b04 	ldr.w	r2, [r3], #4
 800c7c8:	4298      	cmp	r0, r3
 800c7ca:	f841 2f04 	str.w	r2, [r1, #4]!
 800c7ce:	d8f9      	bhi.n	800c7c4 <__lshift+0xc8>
 800c7d0:	e7ea      	b.n	800c7a8 <__lshift+0xac>
 800c7d2:	bf00      	nop
 800c7d4:	0800db8b 	.word	0x0800db8b
 800c7d8:	0800dbfc 	.word	0x0800dbfc

0800c7dc <__mcmp>:
 800c7dc:	4603      	mov	r3, r0
 800c7de:	690a      	ldr	r2, [r1, #16]
 800c7e0:	6900      	ldr	r0, [r0, #16]
 800c7e2:	b530      	push	{r4, r5, lr}
 800c7e4:	1a80      	subs	r0, r0, r2
 800c7e6:	d10d      	bne.n	800c804 <__mcmp+0x28>
 800c7e8:	3314      	adds	r3, #20
 800c7ea:	3114      	adds	r1, #20
 800c7ec:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c7f0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c7f4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c7f8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c7fc:	4295      	cmp	r5, r2
 800c7fe:	d002      	beq.n	800c806 <__mcmp+0x2a>
 800c800:	d304      	bcc.n	800c80c <__mcmp+0x30>
 800c802:	2001      	movs	r0, #1
 800c804:	bd30      	pop	{r4, r5, pc}
 800c806:	42a3      	cmp	r3, r4
 800c808:	d3f4      	bcc.n	800c7f4 <__mcmp+0x18>
 800c80a:	e7fb      	b.n	800c804 <__mcmp+0x28>
 800c80c:	f04f 30ff 	mov.w	r0, #4294967295
 800c810:	e7f8      	b.n	800c804 <__mcmp+0x28>
	...

0800c814 <__mdiff>:
 800c814:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c818:	460d      	mov	r5, r1
 800c81a:	4607      	mov	r7, r0
 800c81c:	4611      	mov	r1, r2
 800c81e:	4628      	mov	r0, r5
 800c820:	4614      	mov	r4, r2
 800c822:	f7ff ffdb 	bl	800c7dc <__mcmp>
 800c826:	1e06      	subs	r6, r0, #0
 800c828:	d111      	bne.n	800c84e <__mdiff+0x3a>
 800c82a:	4631      	mov	r1, r6
 800c82c:	4638      	mov	r0, r7
 800c82e:	f7ff fd57 	bl	800c2e0 <_Balloc>
 800c832:	4602      	mov	r2, r0
 800c834:	b928      	cbnz	r0, 800c842 <__mdiff+0x2e>
 800c836:	f240 2132 	movw	r1, #562	; 0x232
 800c83a:	4b3a      	ldr	r3, [pc, #232]	; (800c924 <__mdiff+0x110>)
 800c83c:	483a      	ldr	r0, [pc, #232]	; (800c928 <__mdiff+0x114>)
 800c83e:	f000 fde3 	bl	800d408 <__assert_func>
 800c842:	2301      	movs	r3, #1
 800c844:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800c848:	4610      	mov	r0, r2
 800c84a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c84e:	bfa4      	itt	ge
 800c850:	4623      	movge	r3, r4
 800c852:	462c      	movge	r4, r5
 800c854:	4638      	mov	r0, r7
 800c856:	6861      	ldr	r1, [r4, #4]
 800c858:	bfa6      	itte	ge
 800c85a:	461d      	movge	r5, r3
 800c85c:	2600      	movge	r6, #0
 800c85e:	2601      	movlt	r6, #1
 800c860:	f7ff fd3e 	bl	800c2e0 <_Balloc>
 800c864:	4602      	mov	r2, r0
 800c866:	b918      	cbnz	r0, 800c870 <__mdiff+0x5c>
 800c868:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c86c:	4b2d      	ldr	r3, [pc, #180]	; (800c924 <__mdiff+0x110>)
 800c86e:	e7e5      	b.n	800c83c <__mdiff+0x28>
 800c870:	f102 0814 	add.w	r8, r2, #20
 800c874:	46c2      	mov	sl, r8
 800c876:	f04f 0c00 	mov.w	ip, #0
 800c87a:	6927      	ldr	r7, [r4, #16]
 800c87c:	60c6      	str	r6, [r0, #12]
 800c87e:	692e      	ldr	r6, [r5, #16]
 800c880:	f104 0014 	add.w	r0, r4, #20
 800c884:	f105 0914 	add.w	r9, r5, #20
 800c888:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800c88c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c890:	3410      	adds	r4, #16
 800c892:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800c896:	f859 3b04 	ldr.w	r3, [r9], #4
 800c89a:	fa1f f18b 	uxth.w	r1, fp
 800c89e:	448c      	add	ip, r1
 800c8a0:	b299      	uxth	r1, r3
 800c8a2:	0c1b      	lsrs	r3, r3, #16
 800c8a4:	ebac 0101 	sub.w	r1, ip, r1
 800c8a8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c8ac:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800c8b0:	b289      	uxth	r1, r1
 800c8b2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800c8b6:	454e      	cmp	r6, r9
 800c8b8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800c8bc:	f84a 3b04 	str.w	r3, [sl], #4
 800c8c0:	d8e7      	bhi.n	800c892 <__mdiff+0x7e>
 800c8c2:	1b73      	subs	r3, r6, r5
 800c8c4:	3b15      	subs	r3, #21
 800c8c6:	f023 0303 	bic.w	r3, r3, #3
 800c8ca:	3515      	adds	r5, #21
 800c8cc:	3304      	adds	r3, #4
 800c8ce:	42ae      	cmp	r6, r5
 800c8d0:	bf38      	it	cc
 800c8d2:	2304      	movcc	r3, #4
 800c8d4:	4418      	add	r0, r3
 800c8d6:	4443      	add	r3, r8
 800c8d8:	461e      	mov	r6, r3
 800c8da:	4605      	mov	r5, r0
 800c8dc:	4575      	cmp	r5, lr
 800c8de:	d30e      	bcc.n	800c8fe <__mdiff+0xea>
 800c8e0:	f10e 0103 	add.w	r1, lr, #3
 800c8e4:	1a09      	subs	r1, r1, r0
 800c8e6:	f021 0103 	bic.w	r1, r1, #3
 800c8ea:	3803      	subs	r0, #3
 800c8ec:	4586      	cmp	lr, r0
 800c8ee:	bf38      	it	cc
 800c8f0:	2100      	movcc	r1, #0
 800c8f2:	4419      	add	r1, r3
 800c8f4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800c8f8:	b18b      	cbz	r3, 800c91e <__mdiff+0x10a>
 800c8fa:	6117      	str	r7, [r2, #16]
 800c8fc:	e7a4      	b.n	800c848 <__mdiff+0x34>
 800c8fe:	f855 8b04 	ldr.w	r8, [r5], #4
 800c902:	fa1f f188 	uxth.w	r1, r8
 800c906:	4461      	add	r1, ip
 800c908:	140c      	asrs	r4, r1, #16
 800c90a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c90e:	b289      	uxth	r1, r1
 800c910:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800c914:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800c918:	f846 1b04 	str.w	r1, [r6], #4
 800c91c:	e7de      	b.n	800c8dc <__mdiff+0xc8>
 800c91e:	3f01      	subs	r7, #1
 800c920:	e7e8      	b.n	800c8f4 <__mdiff+0xe0>
 800c922:	bf00      	nop
 800c924:	0800db8b 	.word	0x0800db8b
 800c928:	0800dbfc 	.word	0x0800dbfc

0800c92c <__d2b>:
 800c92c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800c930:	2101      	movs	r1, #1
 800c932:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800c936:	4690      	mov	r8, r2
 800c938:	461d      	mov	r5, r3
 800c93a:	f7ff fcd1 	bl	800c2e0 <_Balloc>
 800c93e:	4604      	mov	r4, r0
 800c940:	b930      	cbnz	r0, 800c950 <__d2b+0x24>
 800c942:	4602      	mov	r2, r0
 800c944:	f240 310a 	movw	r1, #778	; 0x30a
 800c948:	4b24      	ldr	r3, [pc, #144]	; (800c9dc <__d2b+0xb0>)
 800c94a:	4825      	ldr	r0, [pc, #148]	; (800c9e0 <__d2b+0xb4>)
 800c94c:	f000 fd5c 	bl	800d408 <__assert_func>
 800c950:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800c954:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800c958:	bb2d      	cbnz	r5, 800c9a6 <__d2b+0x7a>
 800c95a:	9301      	str	r3, [sp, #4]
 800c95c:	f1b8 0300 	subs.w	r3, r8, #0
 800c960:	d026      	beq.n	800c9b0 <__d2b+0x84>
 800c962:	4668      	mov	r0, sp
 800c964:	9300      	str	r3, [sp, #0]
 800c966:	f7ff fd83 	bl	800c470 <__lo0bits>
 800c96a:	9900      	ldr	r1, [sp, #0]
 800c96c:	b1f0      	cbz	r0, 800c9ac <__d2b+0x80>
 800c96e:	9a01      	ldr	r2, [sp, #4]
 800c970:	f1c0 0320 	rsb	r3, r0, #32
 800c974:	fa02 f303 	lsl.w	r3, r2, r3
 800c978:	430b      	orrs	r3, r1
 800c97a:	40c2      	lsrs	r2, r0
 800c97c:	6163      	str	r3, [r4, #20]
 800c97e:	9201      	str	r2, [sp, #4]
 800c980:	9b01      	ldr	r3, [sp, #4]
 800c982:	2b00      	cmp	r3, #0
 800c984:	bf14      	ite	ne
 800c986:	2102      	movne	r1, #2
 800c988:	2101      	moveq	r1, #1
 800c98a:	61a3      	str	r3, [r4, #24]
 800c98c:	6121      	str	r1, [r4, #16]
 800c98e:	b1c5      	cbz	r5, 800c9c2 <__d2b+0x96>
 800c990:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c994:	4405      	add	r5, r0
 800c996:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c99a:	603d      	str	r5, [r7, #0]
 800c99c:	6030      	str	r0, [r6, #0]
 800c99e:	4620      	mov	r0, r4
 800c9a0:	b002      	add	sp, #8
 800c9a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c9a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c9aa:	e7d6      	b.n	800c95a <__d2b+0x2e>
 800c9ac:	6161      	str	r1, [r4, #20]
 800c9ae:	e7e7      	b.n	800c980 <__d2b+0x54>
 800c9b0:	a801      	add	r0, sp, #4
 800c9b2:	f7ff fd5d 	bl	800c470 <__lo0bits>
 800c9b6:	2101      	movs	r1, #1
 800c9b8:	9b01      	ldr	r3, [sp, #4]
 800c9ba:	6121      	str	r1, [r4, #16]
 800c9bc:	6163      	str	r3, [r4, #20]
 800c9be:	3020      	adds	r0, #32
 800c9c0:	e7e5      	b.n	800c98e <__d2b+0x62>
 800c9c2:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800c9c6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c9ca:	6038      	str	r0, [r7, #0]
 800c9cc:	6918      	ldr	r0, [r3, #16]
 800c9ce:	f7ff fd2f 	bl	800c430 <__hi0bits>
 800c9d2:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800c9d6:	6031      	str	r1, [r6, #0]
 800c9d8:	e7e1      	b.n	800c99e <__d2b+0x72>
 800c9da:	bf00      	nop
 800c9dc:	0800db8b 	.word	0x0800db8b
 800c9e0:	0800dbfc 	.word	0x0800dbfc

0800c9e4 <_calloc_r>:
 800c9e4:	b570      	push	{r4, r5, r6, lr}
 800c9e6:	fba1 5402 	umull	r5, r4, r1, r2
 800c9ea:	b934      	cbnz	r4, 800c9fa <_calloc_r+0x16>
 800c9ec:	4629      	mov	r1, r5
 800c9ee:	f000 f875 	bl	800cadc <_malloc_r>
 800c9f2:	4606      	mov	r6, r0
 800c9f4:	b928      	cbnz	r0, 800ca02 <_calloc_r+0x1e>
 800c9f6:	4630      	mov	r0, r6
 800c9f8:	bd70      	pop	{r4, r5, r6, pc}
 800c9fa:	220c      	movs	r2, #12
 800c9fc:	2600      	movs	r6, #0
 800c9fe:	6002      	str	r2, [r0, #0]
 800ca00:	e7f9      	b.n	800c9f6 <_calloc_r+0x12>
 800ca02:	462a      	mov	r2, r5
 800ca04:	4621      	mov	r1, r4
 800ca06:	f7fe f81b 	bl	800aa40 <memset>
 800ca0a:	e7f4      	b.n	800c9f6 <_calloc_r+0x12>

0800ca0c <_free_r>:
 800ca0c:	b538      	push	{r3, r4, r5, lr}
 800ca0e:	4605      	mov	r5, r0
 800ca10:	2900      	cmp	r1, #0
 800ca12:	d040      	beq.n	800ca96 <_free_r+0x8a>
 800ca14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ca18:	1f0c      	subs	r4, r1, #4
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	bfb8      	it	lt
 800ca1e:	18e4      	addlt	r4, r4, r3
 800ca20:	f000 fe94 	bl	800d74c <__malloc_lock>
 800ca24:	4a1c      	ldr	r2, [pc, #112]	; (800ca98 <_free_r+0x8c>)
 800ca26:	6813      	ldr	r3, [r2, #0]
 800ca28:	b933      	cbnz	r3, 800ca38 <_free_r+0x2c>
 800ca2a:	6063      	str	r3, [r4, #4]
 800ca2c:	6014      	str	r4, [r2, #0]
 800ca2e:	4628      	mov	r0, r5
 800ca30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ca34:	f000 be90 	b.w	800d758 <__malloc_unlock>
 800ca38:	42a3      	cmp	r3, r4
 800ca3a:	d908      	bls.n	800ca4e <_free_r+0x42>
 800ca3c:	6820      	ldr	r0, [r4, #0]
 800ca3e:	1821      	adds	r1, r4, r0
 800ca40:	428b      	cmp	r3, r1
 800ca42:	bf01      	itttt	eq
 800ca44:	6819      	ldreq	r1, [r3, #0]
 800ca46:	685b      	ldreq	r3, [r3, #4]
 800ca48:	1809      	addeq	r1, r1, r0
 800ca4a:	6021      	streq	r1, [r4, #0]
 800ca4c:	e7ed      	b.n	800ca2a <_free_r+0x1e>
 800ca4e:	461a      	mov	r2, r3
 800ca50:	685b      	ldr	r3, [r3, #4]
 800ca52:	b10b      	cbz	r3, 800ca58 <_free_r+0x4c>
 800ca54:	42a3      	cmp	r3, r4
 800ca56:	d9fa      	bls.n	800ca4e <_free_r+0x42>
 800ca58:	6811      	ldr	r1, [r2, #0]
 800ca5a:	1850      	adds	r0, r2, r1
 800ca5c:	42a0      	cmp	r0, r4
 800ca5e:	d10b      	bne.n	800ca78 <_free_r+0x6c>
 800ca60:	6820      	ldr	r0, [r4, #0]
 800ca62:	4401      	add	r1, r0
 800ca64:	1850      	adds	r0, r2, r1
 800ca66:	4283      	cmp	r3, r0
 800ca68:	6011      	str	r1, [r2, #0]
 800ca6a:	d1e0      	bne.n	800ca2e <_free_r+0x22>
 800ca6c:	6818      	ldr	r0, [r3, #0]
 800ca6e:	685b      	ldr	r3, [r3, #4]
 800ca70:	4401      	add	r1, r0
 800ca72:	6011      	str	r1, [r2, #0]
 800ca74:	6053      	str	r3, [r2, #4]
 800ca76:	e7da      	b.n	800ca2e <_free_r+0x22>
 800ca78:	d902      	bls.n	800ca80 <_free_r+0x74>
 800ca7a:	230c      	movs	r3, #12
 800ca7c:	602b      	str	r3, [r5, #0]
 800ca7e:	e7d6      	b.n	800ca2e <_free_r+0x22>
 800ca80:	6820      	ldr	r0, [r4, #0]
 800ca82:	1821      	adds	r1, r4, r0
 800ca84:	428b      	cmp	r3, r1
 800ca86:	bf01      	itttt	eq
 800ca88:	6819      	ldreq	r1, [r3, #0]
 800ca8a:	685b      	ldreq	r3, [r3, #4]
 800ca8c:	1809      	addeq	r1, r1, r0
 800ca8e:	6021      	streq	r1, [r4, #0]
 800ca90:	6063      	str	r3, [r4, #4]
 800ca92:	6054      	str	r4, [r2, #4]
 800ca94:	e7cb      	b.n	800ca2e <_free_r+0x22>
 800ca96:	bd38      	pop	{r3, r4, r5, pc}
 800ca98:	2000165c 	.word	0x2000165c

0800ca9c <sbrk_aligned>:
 800ca9c:	b570      	push	{r4, r5, r6, lr}
 800ca9e:	4e0e      	ldr	r6, [pc, #56]	; (800cad8 <sbrk_aligned+0x3c>)
 800caa0:	460c      	mov	r4, r1
 800caa2:	6831      	ldr	r1, [r6, #0]
 800caa4:	4605      	mov	r5, r0
 800caa6:	b911      	cbnz	r1, 800caae <sbrk_aligned+0x12>
 800caa8:	f000 fb88 	bl	800d1bc <_sbrk_r>
 800caac:	6030      	str	r0, [r6, #0]
 800caae:	4621      	mov	r1, r4
 800cab0:	4628      	mov	r0, r5
 800cab2:	f000 fb83 	bl	800d1bc <_sbrk_r>
 800cab6:	1c43      	adds	r3, r0, #1
 800cab8:	d00a      	beq.n	800cad0 <sbrk_aligned+0x34>
 800caba:	1cc4      	adds	r4, r0, #3
 800cabc:	f024 0403 	bic.w	r4, r4, #3
 800cac0:	42a0      	cmp	r0, r4
 800cac2:	d007      	beq.n	800cad4 <sbrk_aligned+0x38>
 800cac4:	1a21      	subs	r1, r4, r0
 800cac6:	4628      	mov	r0, r5
 800cac8:	f000 fb78 	bl	800d1bc <_sbrk_r>
 800cacc:	3001      	adds	r0, #1
 800cace:	d101      	bne.n	800cad4 <sbrk_aligned+0x38>
 800cad0:	f04f 34ff 	mov.w	r4, #4294967295
 800cad4:	4620      	mov	r0, r4
 800cad6:	bd70      	pop	{r4, r5, r6, pc}
 800cad8:	20001660 	.word	0x20001660

0800cadc <_malloc_r>:
 800cadc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cae0:	1ccd      	adds	r5, r1, #3
 800cae2:	f025 0503 	bic.w	r5, r5, #3
 800cae6:	3508      	adds	r5, #8
 800cae8:	2d0c      	cmp	r5, #12
 800caea:	bf38      	it	cc
 800caec:	250c      	movcc	r5, #12
 800caee:	2d00      	cmp	r5, #0
 800caf0:	4607      	mov	r7, r0
 800caf2:	db01      	blt.n	800caf8 <_malloc_r+0x1c>
 800caf4:	42a9      	cmp	r1, r5
 800caf6:	d905      	bls.n	800cb04 <_malloc_r+0x28>
 800caf8:	230c      	movs	r3, #12
 800cafa:	2600      	movs	r6, #0
 800cafc:	603b      	str	r3, [r7, #0]
 800cafe:	4630      	mov	r0, r6
 800cb00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb04:	4e2e      	ldr	r6, [pc, #184]	; (800cbc0 <_malloc_r+0xe4>)
 800cb06:	f000 fe21 	bl	800d74c <__malloc_lock>
 800cb0a:	6833      	ldr	r3, [r6, #0]
 800cb0c:	461c      	mov	r4, r3
 800cb0e:	bb34      	cbnz	r4, 800cb5e <_malloc_r+0x82>
 800cb10:	4629      	mov	r1, r5
 800cb12:	4638      	mov	r0, r7
 800cb14:	f7ff ffc2 	bl	800ca9c <sbrk_aligned>
 800cb18:	1c43      	adds	r3, r0, #1
 800cb1a:	4604      	mov	r4, r0
 800cb1c:	d14d      	bne.n	800cbba <_malloc_r+0xde>
 800cb1e:	6834      	ldr	r4, [r6, #0]
 800cb20:	4626      	mov	r6, r4
 800cb22:	2e00      	cmp	r6, #0
 800cb24:	d140      	bne.n	800cba8 <_malloc_r+0xcc>
 800cb26:	6823      	ldr	r3, [r4, #0]
 800cb28:	4631      	mov	r1, r6
 800cb2a:	4638      	mov	r0, r7
 800cb2c:	eb04 0803 	add.w	r8, r4, r3
 800cb30:	f000 fb44 	bl	800d1bc <_sbrk_r>
 800cb34:	4580      	cmp	r8, r0
 800cb36:	d13a      	bne.n	800cbae <_malloc_r+0xd2>
 800cb38:	6821      	ldr	r1, [r4, #0]
 800cb3a:	3503      	adds	r5, #3
 800cb3c:	1a6d      	subs	r5, r5, r1
 800cb3e:	f025 0503 	bic.w	r5, r5, #3
 800cb42:	3508      	adds	r5, #8
 800cb44:	2d0c      	cmp	r5, #12
 800cb46:	bf38      	it	cc
 800cb48:	250c      	movcc	r5, #12
 800cb4a:	4638      	mov	r0, r7
 800cb4c:	4629      	mov	r1, r5
 800cb4e:	f7ff ffa5 	bl	800ca9c <sbrk_aligned>
 800cb52:	3001      	adds	r0, #1
 800cb54:	d02b      	beq.n	800cbae <_malloc_r+0xd2>
 800cb56:	6823      	ldr	r3, [r4, #0]
 800cb58:	442b      	add	r3, r5
 800cb5a:	6023      	str	r3, [r4, #0]
 800cb5c:	e00e      	b.n	800cb7c <_malloc_r+0xa0>
 800cb5e:	6822      	ldr	r2, [r4, #0]
 800cb60:	1b52      	subs	r2, r2, r5
 800cb62:	d41e      	bmi.n	800cba2 <_malloc_r+0xc6>
 800cb64:	2a0b      	cmp	r2, #11
 800cb66:	d916      	bls.n	800cb96 <_malloc_r+0xba>
 800cb68:	1961      	adds	r1, r4, r5
 800cb6a:	42a3      	cmp	r3, r4
 800cb6c:	6025      	str	r5, [r4, #0]
 800cb6e:	bf18      	it	ne
 800cb70:	6059      	strne	r1, [r3, #4]
 800cb72:	6863      	ldr	r3, [r4, #4]
 800cb74:	bf08      	it	eq
 800cb76:	6031      	streq	r1, [r6, #0]
 800cb78:	5162      	str	r2, [r4, r5]
 800cb7a:	604b      	str	r3, [r1, #4]
 800cb7c:	4638      	mov	r0, r7
 800cb7e:	f104 060b 	add.w	r6, r4, #11
 800cb82:	f000 fde9 	bl	800d758 <__malloc_unlock>
 800cb86:	f026 0607 	bic.w	r6, r6, #7
 800cb8a:	1d23      	adds	r3, r4, #4
 800cb8c:	1af2      	subs	r2, r6, r3
 800cb8e:	d0b6      	beq.n	800cafe <_malloc_r+0x22>
 800cb90:	1b9b      	subs	r3, r3, r6
 800cb92:	50a3      	str	r3, [r4, r2]
 800cb94:	e7b3      	b.n	800cafe <_malloc_r+0x22>
 800cb96:	6862      	ldr	r2, [r4, #4]
 800cb98:	42a3      	cmp	r3, r4
 800cb9a:	bf0c      	ite	eq
 800cb9c:	6032      	streq	r2, [r6, #0]
 800cb9e:	605a      	strne	r2, [r3, #4]
 800cba0:	e7ec      	b.n	800cb7c <_malloc_r+0xa0>
 800cba2:	4623      	mov	r3, r4
 800cba4:	6864      	ldr	r4, [r4, #4]
 800cba6:	e7b2      	b.n	800cb0e <_malloc_r+0x32>
 800cba8:	4634      	mov	r4, r6
 800cbaa:	6876      	ldr	r6, [r6, #4]
 800cbac:	e7b9      	b.n	800cb22 <_malloc_r+0x46>
 800cbae:	230c      	movs	r3, #12
 800cbb0:	4638      	mov	r0, r7
 800cbb2:	603b      	str	r3, [r7, #0]
 800cbb4:	f000 fdd0 	bl	800d758 <__malloc_unlock>
 800cbb8:	e7a1      	b.n	800cafe <_malloc_r+0x22>
 800cbba:	6025      	str	r5, [r4, #0]
 800cbbc:	e7de      	b.n	800cb7c <_malloc_r+0xa0>
 800cbbe:	bf00      	nop
 800cbc0:	2000165c 	.word	0x2000165c

0800cbc4 <__ssputs_r>:
 800cbc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cbc8:	688e      	ldr	r6, [r1, #8]
 800cbca:	4682      	mov	sl, r0
 800cbcc:	429e      	cmp	r6, r3
 800cbce:	460c      	mov	r4, r1
 800cbd0:	4690      	mov	r8, r2
 800cbd2:	461f      	mov	r7, r3
 800cbd4:	d838      	bhi.n	800cc48 <__ssputs_r+0x84>
 800cbd6:	898a      	ldrh	r2, [r1, #12]
 800cbd8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cbdc:	d032      	beq.n	800cc44 <__ssputs_r+0x80>
 800cbde:	6825      	ldr	r5, [r4, #0]
 800cbe0:	6909      	ldr	r1, [r1, #16]
 800cbe2:	3301      	adds	r3, #1
 800cbe4:	eba5 0901 	sub.w	r9, r5, r1
 800cbe8:	6965      	ldr	r5, [r4, #20]
 800cbea:	444b      	add	r3, r9
 800cbec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cbf0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cbf4:	106d      	asrs	r5, r5, #1
 800cbf6:	429d      	cmp	r5, r3
 800cbf8:	bf38      	it	cc
 800cbfa:	461d      	movcc	r5, r3
 800cbfc:	0553      	lsls	r3, r2, #21
 800cbfe:	d531      	bpl.n	800cc64 <__ssputs_r+0xa0>
 800cc00:	4629      	mov	r1, r5
 800cc02:	f7ff ff6b 	bl	800cadc <_malloc_r>
 800cc06:	4606      	mov	r6, r0
 800cc08:	b950      	cbnz	r0, 800cc20 <__ssputs_r+0x5c>
 800cc0a:	230c      	movs	r3, #12
 800cc0c:	f04f 30ff 	mov.w	r0, #4294967295
 800cc10:	f8ca 3000 	str.w	r3, [sl]
 800cc14:	89a3      	ldrh	r3, [r4, #12]
 800cc16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cc1a:	81a3      	strh	r3, [r4, #12]
 800cc1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc20:	464a      	mov	r2, r9
 800cc22:	6921      	ldr	r1, [r4, #16]
 800cc24:	f7ff fb4e 	bl	800c2c4 <memcpy>
 800cc28:	89a3      	ldrh	r3, [r4, #12]
 800cc2a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cc2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc32:	81a3      	strh	r3, [r4, #12]
 800cc34:	6126      	str	r6, [r4, #16]
 800cc36:	444e      	add	r6, r9
 800cc38:	6026      	str	r6, [r4, #0]
 800cc3a:	463e      	mov	r6, r7
 800cc3c:	6165      	str	r5, [r4, #20]
 800cc3e:	eba5 0509 	sub.w	r5, r5, r9
 800cc42:	60a5      	str	r5, [r4, #8]
 800cc44:	42be      	cmp	r6, r7
 800cc46:	d900      	bls.n	800cc4a <__ssputs_r+0x86>
 800cc48:	463e      	mov	r6, r7
 800cc4a:	4632      	mov	r2, r6
 800cc4c:	4641      	mov	r1, r8
 800cc4e:	6820      	ldr	r0, [r4, #0]
 800cc50:	f000 fd62 	bl	800d718 <memmove>
 800cc54:	68a3      	ldr	r3, [r4, #8]
 800cc56:	2000      	movs	r0, #0
 800cc58:	1b9b      	subs	r3, r3, r6
 800cc5a:	60a3      	str	r3, [r4, #8]
 800cc5c:	6823      	ldr	r3, [r4, #0]
 800cc5e:	4433      	add	r3, r6
 800cc60:	6023      	str	r3, [r4, #0]
 800cc62:	e7db      	b.n	800cc1c <__ssputs_r+0x58>
 800cc64:	462a      	mov	r2, r5
 800cc66:	f000 fd7d 	bl	800d764 <_realloc_r>
 800cc6a:	4606      	mov	r6, r0
 800cc6c:	2800      	cmp	r0, #0
 800cc6e:	d1e1      	bne.n	800cc34 <__ssputs_r+0x70>
 800cc70:	4650      	mov	r0, sl
 800cc72:	6921      	ldr	r1, [r4, #16]
 800cc74:	f7ff feca 	bl	800ca0c <_free_r>
 800cc78:	e7c7      	b.n	800cc0a <__ssputs_r+0x46>
	...

0800cc7c <_svfiprintf_r>:
 800cc7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc80:	4698      	mov	r8, r3
 800cc82:	898b      	ldrh	r3, [r1, #12]
 800cc84:	4607      	mov	r7, r0
 800cc86:	061b      	lsls	r3, r3, #24
 800cc88:	460d      	mov	r5, r1
 800cc8a:	4614      	mov	r4, r2
 800cc8c:	b09d      	sub	sp, #116	; 0x74
 800cc8e:	d50e      	bpl.n	800ccae <_svfiprintf_r+0x32>
 800cc90:	690b      	ldr	r3, [r1, #16]
 800cc92:	b963      	cbnz	r3, 800ccae <_svfiprintf_r+0x32>
 800cc94:	2140      	movs	r1, #64	; 0x40
 800cc96:	f7ff ff21 	bl	800cadc <_malloc_r>
 800cc9a:	6028      	str	r0, [r5, #0]
 800cc9c:	6128      	str	r0, [r5, #16]
 800cc9e:	b920      	cbnz	r0, 800ccaa <_svfiprintf_r+0x2e>
 800cca0:	230c      	movs	r3, #12
 800cca2:	603b      	str	r3, [r7, #0]
 800cca4:	f04f 30ff 	mov.w	r0, #4294967295
 800cca8:	e0d1      	b.n	800ce4e <_svfiprintf_r+0x1d2>
 800ccaa:	2340      	movs	r3, #64	; 0x40
 800ccac:	616b      	str	r3, [r5, #20]
 800ccae:	2300      	movs	r3, #0
 800ccb0:	9309      	str	r3, [sp, #36]	; 0x24
 800ccb2:	2320      	movs	r3, #32
 800ccb4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ccb8:	2330      	movs	r3, #48	; 0x30
 800ccba:	f04f 0901 	mov.w	r9, #1
 800ccbe:	f8cd 800c 	str.w	r8, [sp, #12]
 800ccc2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800ce68 <_svfiprintf_r+0x1ec>
 800ccc6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ccca:	4623      	mov	r3, r4
 800cccc:	469a      	mov	sl, r3
 800ccce:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ccd2:	b10a      	cbz	r2, 800ccd8 <_svfiprintf_r+0x5c>
 800ccd4:	2a25      	cmp	r2, #37	; 0x25
 800ccd6:	d1f9      	bne.n	800cccc <_svfiprintf_r+0x50>
 800ccd8:	ebba 0b04 	subs.w	fp, sl, r4
 800ccdc:	d00b      	beq.n	800ccf6 <_svfiprintf_r+0x7a>
 800ccde:	465b      	mov	r3, fp
 800cce0:	4622      	mov	r2, r4
 800cce2:	4629      	mov	r1, r5
 800cce4:	4638      	mov	r0, r7
 800cce6:	f7ff ff6d 	bl	800cbc4 <__ssputs_r>
 800ccea:	3001      	adds	r0, #1
 800ccec:	f000 80aa 	beq.w	800ce44 <_svfiprintf_r+0x1c8>
 800ccf0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ccf2:	445a      	add	r2, fp
 800ccf4:	9209      	str	r2, [sp, #36]	; 0x24
 800ccf6:	f89a 3000 	ldrb.w	r3, [sl]
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	f000 80a2 	beq.w	800ce44 <_svfiprintf_r+0x1c8>
 800cd00:	2300      	movs	r3, #0
 800cd02:	f04f 32ff 	mov.w	r2, #4294967295
 800cd06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cd0a:	f10a 0a01 	add.w	sl, sl, #1
 800cd0e:	9304      	str	r3, [sp, #16]
 800cd10:	9307      	str	r3, [sp, #28]
 800cd12:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cd16:	931a      	str	r3, [sp, #104]	; 0x68
 800cd18:	4654      	mov	r4, sl
 800cd1a:	2205      	movs	r2, #5
 800cd1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd20:	4851      	ldr	r0, [pc, #324]	; (800ce68 <_svfiprintf_r+0x1ec>)
 800cd22:	f7ff fac1 	bl	800c2a8 <memchr>
 800cd26:	9a04      	ldr	r2, [sp, #16]
 800cd28:	b9d8      	cbnz	r0, 800cd62 <_svfiprintf_r+0xe6>
 800cd2a:	06d0      	lsls	r0, r2, #27
 800cd2c:	bf44      	itt	mi
 800cd2e:	2320      	movmi	r3, #32
 800cd30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cd34:	0711      	lsls	r1, r2, #28
 800cd36:	bf44      	itt	mi
 800cd38:	232b      	movmi	r3, #43	; 0x2b
 800cd3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cd3e:	f89a 3000 	ldrb.w	r3, [sl]
 800cd42:	2b2a      	cmp	r3, #42	; 0x2a
 800cd44:	d015      	beq.n	800cd72 <_svfiprintf_r+0xf6>
 800cd46:	4654      	mov	r4, sl
 800cd48:	2000      	movs	r0, #0
 800cd4a:	f04f 0c0a 	mov.w	ip, #10
 800cd4e:	9a07      	ldr	r2, [sp, #28]
 800cd50:	4621      	mov	r1, r4
 800cd52:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cd56:	3b30      	subs	r3, #48	; 0x30
 800cd58:	2b09      	cmp	r3, #9
 800cd5a:	d94e      	bls.n	800cdfa <_svfiprintf_r+0x17e>
 800cd5c:	b1b0      	cbz	r0, 800cd8c <_svfiprintf_r+0x110>
 800cd5e:	9207      	str	r2, [sp, #28]
 800cd60:	e014      	b.n	800cd8c <_svfiprintf_r+0x110>
 800cd62:	eba0 0308 	sub.w	r3, r0, r8
 800cd66:	fa09 f303 	lsl.w	r3, r9, r3
 800cd6a:	4313      	orrs	r3, r2
 800cd6c:	46a2      	mov	sl, r4
 800cd6e:	9304      	str	r3, [sp, #16]
 800cd70:	e7d2      	b.n	800cd18 <_svfiprintf_r+0x9c>
 800cd72:	9b03      	ldr	r3, [sp, #12]
 800cd74:	1d19      	adds	r1, r3, #4
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	9103      	str	r1, [sp, #12]
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	bfbb      	ittet	lt
 800cd7e:	425b      	neglt	r3, r3
 800cd80:	f042 0202 	orrlt.w	r2, r2, #2
 800cd84:	9307      	strge	r3, [sp, #28]
 800cd86:	9307      	strlt	r3, [sp, #28]
 800cd88:	bfb8      	it	lt
 800cd8a:	9204      	strlt	r2, [sp, #16]
 800cd8c:	7823      	ldrb	r3, [r4, #0]
 800cd8e:	2b2e      	cmp	r3, #46	; 0x2e
 800cd90:	d10c      	bne.n	800cdac <_svfiprintf_r+0x130>
 800cd92:	7863      	ldrb	r3, [r4, #1]
 800cd94:	2b2a      	cmp	r3, #42	; 0x2a
 800cd96:	d135      	bne.n	800ce04 <_svfiprintf_r+0x188>
 800cd98:	9b03      	ldr	r3, [sp, #12]
 800cd9a:	3402      	adds	r4, #2
 800cd9c:	1d1a      	adds	r2, r3, #4
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	9203      	str	r2, [sp, #12]
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	bfb8      	it	lt
 800cda6:	f04f 33ff 	movlt.w	r3, #4294967295
 800cdaa:	9305      	str	r3, [sp, #20]
 800cdac:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800ce6c <_svfiprintf_r+0x1f0>
 800cdb0:	2203      	movs	r2, #3
 800cdb2:	4650      	mov	r0, sl
 800cdb4:	7821      	ldrb	r1, [r4, #0]
 800cdb6:	f7ff fa77 	bl	800c2a8 <memchr>
 800cdba:	b140      	cbz	r0, 800cdce <_svfiprintf_r+0x152>
 800cdbc:	2340      	movs	r3, #64	; 0x40
 800cdbe:	eba0 000a 	sub.w	r0, r0, sl
 800cdc2:	fa03 f000 	lsl.w	r0, r3, r0
 800cdc6:	9b04      	ldr	r3, [sp, #16]
 800cdc8:	3401      	adds	r4, #1
 800cdca:	4303      	orrs	r3, r0
 800cdcc:	9304      	str	r3, [sp, #16]
 800cdce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cdd2:	2206      	movs	r2, #6
 800cdd4:	4826      	ldr	r0, [pc, #152]	; (800ce70 <_svfiprintf_r+0x1f4>)
 800cdd6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cdda:	f7ff fa65 	bl	800c2a8 <memchr>
 800cdde:	2800      	cmp	r0, #0
 800cde0:	d038      	beq.n	800ce54 <_svfiprintf_r+0x1d8>
 800cde2:	4b24      	ldr	r3, [pc, #144]	; (800ce74 <_svfiprintf_r+0x1f8>)
 800cde4:	bb1b      	cbnz	r3, 800ce2e <_svfiprintf_r+0x1b2>
 800cde6:	9b03      	ldr	r3, [sp, #12]
 800cde8:	3307      	adds	r3, #7
 800cdea:	f023 0307 	bic.w	r3, r3, #7
 800cdee:	3308      	adds	r3, #8
 800cdf0:	9303      	str	r3, [sp, #12]
 800cdf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cdf4:	4433      	add	r3, r6
 800cdf6:	9309      	str	r3, [sp, #36]	; 0x24
 800cdf8:	e767      	b.n	800ccca <_svfiprintf_r+0x4e>
 800cdfa:	460c      	mov	r4, r1
 800cdfc:	2001      	movs	r0, #1
 800cdfe:	fb0c 3202 	mla	r2, ip, r2, r3
 800ce02:	e7a5      	b.n	800cd50 <_svfiprintf_r+0xd4>
 800ce04:	2300      	movs	r3, #0
 800ce06:	f04f 0c0a 	mov.w	ip, #10
 800ce0a:	4619      	mov	r1, r3
 800ce0c:	3401      	adds	r4, #1
 800ce0e:	9305      	str	r3, [sp, #20]
 800ce10:	4620      	mov	r0, r4
 800ce12:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ce16:	3a30      	subs	r2, #48	; 0x30
 800ce18:	2a09      	cmp	r2, #9
 800ce1a:	d903      	bls.n	800ce24 <_svfiprintf_r+0x1a8>
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d0c5      	beq.n	800cdac <_svfiprintf_r+0x130>
 800ce20:	9105      	str	r1, [sp, #20]
 800ce22:	e7c3      	b.n	800cdac <_svfiprintf_r+0x130>
 800ce24:	4604      	mov	r4, r0
 800ce26:	2301      	movs	r3, #1
 800ce28:	fb0c 2101 	mla	r1, ip, r1, r2
 800ce2c:	e7f0      	b.n	800ce10 <_svfiprintf_r+0x194>
 800ce2e:	ab03      	add	r3, sp, #12
 800ce30:	9300      	str	r3, [sp, #0]
 800ce32:	462a      	mov	r2, r5
 800ce34:	4638      	mov	r0, r7
 800ce36:	4b10      	ldr	r3, [pc, #64]	; (800ce78 <_svfiprintf_r+0x1fc>)
 800ce38:	a904      	add	r1, sp, #16
 800ce3a:	f7fd fea7 	bl	800ab8c <_printf_float>
 800ce3e:	1c42      	adds	r2, r0, #1
 800ce40:	4606      	mov	r6, r0
 800ce42:	d1d6      	bne.n	800cdf2 <_svfiprintf_r+0x176>
 800ce44:	89ab      	ldrh	r3, [r5, #12]
 800ce46:	065b      	lsls	r3, r3, #25
 800ce48:	f53f af2c 	bmi.w	800cca4 <_svfiprintf_r+0x28>
 800ce4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ce4e:	b01d      	add	sp, #116	; 0x74
 800ce50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce54:	ab03      	add	r3, sp, #12
 800ce56:	9300      	str	r3, [sp, #0]
 800ce58:	462a      	mov	r2, r5
 800ce5a:	4638      	mov	r0, r7
 800ce5c:	4b06      	ldr	r3, [pc, #24]	; (800ce78 <_svfiprintf_r+0x1fc>)
 800ce5e:	a904      	add	r1, sp, #16
 800ce60:	f7fe f930 	bl	800b0c4 <_printf_i>
 800ce64:	e7eb      	b.n	800ce3e <_svfiprintf_r+0x1c2>
 800ce66:	bf00      	nop
 800ce68:	0800dd54 	.word	0x0800dd54
 800ce6c:	0800dd5a 	.word	0x0800dd5a
 800ce70:	0800dd5e 	.word	0x0800dd5e
 800ce74:	0800ab8d 	.word	0x0800ab8d
 800ce78:	0800cbc5 	.word	0x0800cbc5

0800ce7c <__sfputc_r>:
 800ce7c:	6893      	ldr	r3, [r2, #8]
 800ce7e:	b410      	push	{r4}
 800ce80:	3b01      	subs	r3, #1
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	6093      	str	r3, [r2, #8]
 800ce86:	da07      	bge.n	800ce98 <__sfputc_r+0x1c>
 800ce88:	6994      	ldr	r4, [r2, #24]
 800ce8a:	42a3      	cmp	r3, r4
 800ce8c:	db01      	blt.n	800ce92 <__sfputc_r+0x16>
 800ce8e:	290a      	cmp	r1, #10
 800ce90:	d102      	bne.n	800ce98 <__sfputc_r+0x1c>
 800ce92:	bc10      	pop	{r4}
 800ce94:	f000 b9e6 	b.w	800d264 <__swbuf_r>
 800ce98:	6813      	ldr	r3, [r2, #0]
 800ce9a:	1c58      	adds	r0, r3, #1
 800ce9c:	6010      	str	r0, [r2, #0]
 800ce9e:	7019      	strb	r1, [r3, #0]
 800cea0:	4608      	mov	r0, r1
 800cea2:	bc10      	pop	{r4}
 800cea4:	4770      	bx	lr

0800cea6 <__sfputs_r>:
 800cea6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cea8:	4606      	mov	r6, r0
 800ceaa:	460f      	mov	r7, r1
 800ceac:	4614      	mov	r4, r2
 800ceae:	18d5      	adds	r5, r2, r3
 800ceb0:	42ac      	cmp	r4, r5
 800ceb2:	d101      	bne.n	800ceb8 <__sfputs_r+0x12>
 800ceb4:	2000      	movs	r0, #0
 800ceb6:	e007      	b.n	800cec8 <__sfputs_r+0x22>
 800ceb8:	463a      	mov	r2, r7
 800ceba:	4630      	mov	r0, r6
 800cebc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cec0:	f7ff ffdc 	bl	800ce7c <__sfputc_r>
 800cec4:	1c43      	adds	r3, r0, #1
 800cec6:	d1f3      	bne.n	800ceb0 <__sfputs_r+0xa>
 800cec8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cecc <_vfiprintf_r>:
 800cecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ced0:	460d      	mov	r5, r1
 800ced2:	4614      	mov	r4, r2
 800ced4:	4698      	mov	r8, r3
 800ced6:	4606      	mov	r6, r0
 800ced8:	b09d      	sub	sp, #116	; 0x74
 800ceda:	b118      	cbz	r0, 800cee4 <_vfiprintf_r+0x18>
 800cedc:	6983      	ldr	r3, [r0, #24]
 800cede:	b90b      	cbnz	r3, 800cee4 <_vfiprintf_r+0x18>
 800cee0:	f7ff f934 	bl	800c14c <__sinit>
 800cee4:	4b89      	ldr	r3, [pc, #548]	; (800d10c <_vfiprintf_r+0x240>)
 800cee6:	429d      	cmp	r5, r3
 800cee8:	d11b      	bne.n	800cf22 <_vfiprintf_r+0x56>
 800ceea:	6875      	ldr	r5, [r6, #4]
 800ceec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ceee:	07d9      	lsls	r1, r3, #31
 800cef0:	d405      	bmi.n	800cefe <_vfiprintf_r+0x32>
 800cef2:	89ab      	ldrh	r3, [r5, #12]
 800cef4:	059a      	lsls	r2, r3, #22
 800cef6:	d402      	bmi.n	800cefe <_vfiprintf_r+0x32>
 800cef8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cefa:	f7ff f9ca 	bl	800c292 <__retarget_lock_acquire_recursive>
 800cefe:	89ab      	ldrh	r3, [r5, #12]
 800cf00:	071b      	lsls	r3, r3, #28
 800cf02:	d501      	bpl.n	800cf08 <_vfiprintf_r+0x3c>
 800cf04:	692b      	ldr	r3, [r5, #16]
 800cf06:	b9eb      	cbnz	r3, 800cf44 <_vfiprintf_r+0x78>
 800cf08:	4629      	mov	r1, r5
 800cf0a:	4630      	mov	r0, r6
 800cf0c:	f000 fa0e 	bl	800d32c <__swsetup_r>
 800cf10:	b1c0      	cbz	r0, 800cf44 <_vfiprintf_r+0x78>
 800cf12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cf14:	07dc      	lsls	r4, r3, #31
 800cf16:	d50e      	bpl.n	800cf36 <_vfiprintf_r+0x6a>
 800cf18:	f04f 30ff 	mov.w	r0, #4294967295
 800cf1c:	b01d      	add	sp, #116	; 0x74
 800cf1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf22:	4b7b      	ldr	r3, [pc, #492]	; (800d110 <_vfiprintf_r+0x244>)
 800cf24:	429d      	cmp	r5, r3
 800cf26:	d101      	bne.n	800cf2c <_vfiprintf_r+0x60>
 800cf28:	68b5      	ldr	r5, [r6, #8]
 800cf2a:	e7df      	b.n	800ceec <_vfiprintf_r+0x20>
 800cf2c:	4b79      	ldr	r3, [pc, #484]	; (800d114 <_vfiprintf_r+0x248>)
 800cf2e:	429d      	cmp	r5, r3
 800cf30:	bf08      	it	eq
 800cf32:	68f5      	ldreq	r5, [r6, #12]
 800cf34:	e7da      	b.n	800ceec <_vfiprintf_r+0x20>
 800cf36:	89ab      	ldrh	r3, [r5, #12]
 800cf38:	0598      	lsls	r0, r3, #22
 800cf3a:	d4ed      	bmi.n	800cf18 <_vfiprintf_r+0x4c>
 800cf3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cf3e:	f7ff f9a9 	bl	800c294 <__retarget_lock_release_recursive>
 800cf42:	e7e9      	b.n	800cf18 <_vfiprintf_r+0x4c>
 800cf44:	2300      	movs	r3, #0
 800cf46:	9309      	str	r3, [sp, #36]	; 0x24
 800cf48:	2320      	movs	r3, #32
 800cf4a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cf4e:	2330      	movs	r3, #48	; 0x30
 800cf50:	f04f 0901 	mov.w	r9, #1
 800cf54:	f8cd 800c 	str.w	r8, [sp, #12]
 800cf58:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800d118 <_vfiprintf_r+0x24c>
 800cf5c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cf60:	4623      	mov	r3, r4
 800cf62:	469a      	mov	sl, r3
 800cf64:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cf68:	b10a      	cbz	r2, 800cf6e <_vfiprintf_r+0xa2>
 800cf6a:	2a25      	cmp	r2, #37	; 0x25
 800cf6c:	d1f9      	bne.n	800cf62 <_vfiprintf_r+0x96>
 800cf6e:	ebba 0b04 	subs.w	fp, sl, r4
 800cf72:	d00b      	beq.n	800cf8c <_vfiprintf_r+0xc0>
 800cf74:	465b      	mov	r3, fp
 800cf76:	4622      	mov	r2, r4
 800cf78:	4629      	mov	r1, r5
 800cf7a:	4630      	mov	r0, r6
 800cf7c:	f7ff ff93 	bl	800cea6 <__sfputs_r>
 800cf80:	3001      	adds	r0, #1
 800cf82:	f000 80aa 	beq.w	800d0da <_vfiprintf_r+0x20e>
 800cf86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cf88:	445a      	add	r2, fp
 800cf8a:	9209      	str	r2, [sp, #36]	; 0x24
 800cf8c:	f89a 3000 	ldrb.w	r3, [sl]
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	f000 80a2 	beq.w	800d0da <_vfiprintf_r+0x20e>
 800cf96:	2300      	movs	r3, #0
 800cf98:	f04f 32ff 	mov.w	r2, #4294967295
 800cf9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cfa0:	f10a 0a01 	add.w	sl, sl, #1
 800cfa4:	9304      	str	r3, [sp, #16]
 800cfa6:	9307      	str	r3, [sp, #28]
 800cfa8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cfac:	931a      	str	r3, [sp, #104]	; 0x68
 800cfae:	4654      	mov	r4, sl
 800cfb0:	2205      	movs	r2, #5
 800cfb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cfb6:	4858      	ldr	r0, [pc, #352]	; (800d118 <_vfiprintf_r+0x24c>)
 800cfb8:	f7ff f976 	bl	800c2a8 <memchr>
 800cfbc:	9a04      	ldr	r2, [sp, #16]
 800cfbe:	b9d8      	cbnz	r0, 800cff8 <_vfiprintf_r+0x12c>
 800cfc0:	06d1      	lsls	r1, r2, #27
 800cfc2:	bf44      	itt	mi
 800cfc4:	2320      	movmi	r3, #32
 800cfc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cfca:	0713      	lsls	r3, r2, #28
 800cfcc:	bf44      	itt	mi
 800cfce:	232b      	movmi	r3, #43	; 0x2b
 800cfd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cfd4:	f89a 3000 	ldrb.w	r3, [sl]
 800cfd8:	2b2a      	cmp	r3, #42	; 0x2a
 800cfda:	d015      	beq.n	800d008 <_vfiprintf_r+0x13c>
 800cfdc:	4654      	mov	r4, sl
 800cfde:	2000      	movs	r0, #0
 800cfe0:	f04f 0c0a 	mov.w	ip, #10
 800cfe4:	9a07      	ldr	r2, [sp, #28]
 800cfe6:	4621      	mov	r1, r4
 800cfe8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cfec:	3b30      	subs	r3, #48	; 0x30
 800cfee:	2b09      	cmp	r3, #9
 800cff0:	d94e      	bls.n	800d090 <_vfiprintf_r+0x1c4>
 800cff2:	b1b0      	cbz	r0, 800d022 <_vfiprintf_r+0x156>
 800cff4:	9207      	str	r2, [sp, #28]
 800cff6:	e014      	b.n	800d022 <_vfiprintf_r+0x156>
 800cff8:	eba0 0308 	sub.w	r3, r0, r8
 800cffc:	fa09 f303 	lsl.w	r3, r9, r3
 800d000:	4313      	orrs	r3, r2
 800d002:	46a2      	mov	sl, r4
 800d004:	9304      	str	r3, [sp, #16]
 800d006:	e7d2      	b.n	800cfae <_vfiprintf_r+0xe2>
 800d008:	9b03      	ldr	r3, [sp, #12]
 800d00a:	1d19      	adds	r1, r3, #4
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	9103      	str	r1, [sp, #12]
 800d010:	2b00      	cmp	r3, #0
 800d012:	bfbb      	ittet	lt
 800d014:	425b      	neglt	r3, r3
 800d016:	f042 0202 	orrlt.w	r2, r2, #2
 800d01a:	9307      	strge	r3, [sp, #28]
 800d01c:	9307      	strlt	r3, [sp, #28]
 800d01e:	bfb8      	it	lt
 800d020:	9204      	strlt	r2, [sp, #16]
 800d022:	7823      	ldrb	r3, [r4, #0]
 800d024:	2b2e      	cmp	r3, #46	; 0x2e
 800d026:	d10c      	bne.n	800d042 <_vfiprintf_r+0x176>
 800d028:	7863      	ldrb	r3, [r4, #1]
 800d02a:	2b2a      	cmp	r3, #42	; 0x2a
 800d02c:	d135      	bne.n	800d09a <_vfiprintf_r+0x1ce>
 800d02e:	9b03      	ldr	r3, [sp, #12]
 800d030:	3402      	adds	r4, #2
 800d032:	1d1a      	adds	r2, r3, #4
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	9203      	str	r2, [sp, #12]
 800d038:	2b00      	cmp	r3, #0
 800d03a:	bfb8      	it	lt
 800d03c:	f04f 33ff 	movlt.w	r3, #4294967295
 800d040:	9305      	str	r3, [sp, #20]
 800d042:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800d11c <_vfiprintf_r+0x250>
 800d046:	2203      	movs	r2, #3
 800d048:	4650      	mov	r0, sl
 800d04a:	7821      	ldrb	r1, [r4, #0]
 800d04c:	f7ff f92c 	bl	800c2a8 <memchr>
 800d050:	b140      	cbz	r0, 800d064 <_vfiprintf_r+0x198>
 800d052:	2340      	movs	r3, #64	; 0x40
 800d054:	eba0 000a 	sub.w	r0, r0, sl
 800d058:	fa03 f000 	lsl.w	r0, r3, r0
 800d05c:	9b04      	ldr	r3, [sp, #16]
 800d05e:	3401      	adds	r4, #1
 800d060:	4303      	orrs	r3, r0
 800d062:	9304      	str	r3, [sp, #16]
 800d064:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d068:	2206      	movs	r2, #6
 800d06a:	482d      	ldr	r0, [pc, #180]	; (800d120 <_vfiprintf_r+0x254>)
 800d06c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d070:	f7ff f91a 	bl	800c2a8 <memchr>
 800d074:	2800      	cmp	r0, #0
 800d076:	d03f      	beq.n	800d0f8 <_vfiprintf_r+0x22c>
 800d078:	4b2a      	ldr	r3, [pc, #168]	; (800d124 <_vfiprintf_r+0x258>)
 800d07a:	bb1b      	cbnz	r3, 800d0c4 <_vfiprintf_r+0x1f8>
 800d07c:	9b03      	ldr	r3, [sp, #12]
 800d07e:	3307      	adds	r3, #7
 800d080:	f023 0307 	bic.w	r3, r3, #7
 800d084:	3308      	adds	r3, #8
 800d086:	9303      	str	r3, [sp, #12]
 800d088:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d08a:	443b      	add	r3, r7
 800d08c:	9309      	str	r3, [sp, #36]	; 0x24
 800d08e:	e767      	b.n	800cf60 <_vfiprintf_r+0x94>
 800d090:	460c      	mov	r4, r1
 800d092:	2001      	movs	r0, #1
 800d094:	fb0c 3202 	mla	r2, ip, r2, r3
 800d098:	e7a5      	b.n	800cfe6 <_vfiprintf_r+0x11a>
 800d09a:	2300      	movs	r3, #0
 800d09c:	f04f 0c0a 	mov.w	ip, #10
 800d0a0:	4619      	mov	r1, r3
 800d0a2:	3401      	adds	r4, #1
 800d0a4:	9305      	str	r3, [sp, #20]
 800d0a6:	4620      	mov	r0, r4
 800d0a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d0ac:	3a30      	subs	r2, #48	; 0x30
 800d0ae:	2a09      	cmp	r2, #9
 800d0b0:	d903      	bls.n	800d0ba <_vfiprintf_r+0x1ee>
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d0c5      	beq.n	800d042 <_vfiprintf_r+0x176>
 800d0b6:	9105      	str	r1, [sp, #20]
 800d0b8:	e7c3      	b.n	800d042 <_vfiprintf_r+0x176>
 800d0ba:	4604      	mov	r4, r0
 800d0bc:	2301      	movs	r3, #1
 800d0be:	fb0c 2101 	mla	r1, ip, r1, r2
 800d0c2:	e7f0      	b.n	800d0a6 <_vfiprintf_r+0x1da>
 800d0c4:	ab03      	add	r3, sp, #12
 800d0c6:	9300      	str	r3, [sp, #0]
 800d0c8:	462a      	mov	r2, r5
 800d0ca:	4630      	mov	r0, r6
 800d0cc:	4b16      	ldr	r3, [pc, #88]	; (800d128 <_vfiprintf_r+0x25c>)
 800d0ce:	a904      	add	r1, sp, #16
 800d0d0:	f7fd fd5c 	bl	800ab8c <_printf_float>
 800d0d4:	4607      	mov	r7, r0
 800d0d6:	1c78      	adds	r0, r7, #1
 800d0d8:	d1d6      	bne.n	800d088 <_vfiprintf_r+0x1bc>
 800d0da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d0dc:	07d9      	lsls	r1, r3, #31
 800d0de:	d405      	bmi.n	800d0ec <_vfiprintf_r+0x220>
 800d0e0:	89ab      	ldrh	r3, [r5, #12]
 800d0e2:	059a      	lsls	r2, r3, #22
 800d0e4:	d402      	bmi.n	800d0ec <_vfiprintf_r+0x220>
 800d0e6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d0e8:	f7ff f8d4 	bl	800c294 <__retarget_lock_release_recursive>
 800d0ec:	89ab      	ldrh	r3, [r5, #12]
 800d0ee:	065b      	lsls	r3, r3, #25
 800d0f0:	f53f af12 	bmi.w	800cf18 <_vfiprintf_r+0x4c>
 800d0f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d0f6:	e711      	b.n	800cf1c <_vfiprintf_r+0x50>
 800d0f8:	ab03      	add	r3, sp, #12
 800d0fa:	9300      	str	r3, [sp, #0]
 800d0fc:	462a      	mov	r2, r5
 800d0fe:	4630      	mov	r0, r6
 800d100:	4b09      	ldr	r3, [pc, #36]	; (800d128 <_vfiprintf_r+0x25c>)
 800d102:	a904      	add	r1, sp, #16
 800d104:	f7fd ffde 	bl	800b0c4 <_printf_i>
 800d108:	e7e4      	b.n	800d0d4 <_vfiprintf_r+0x208>
 800d10a:	bf00      	nop
 800d10c:	0800dbbc 	.word	0x0800dbbc
 800d110:	0800dbdc 	.word	0x0800dbdc
 800d114:	0800db9c 	.word	0x0800db9c
 800d118:	0800dd54 	.word	0x0800dd54
 800d11c:	0800dd5a 	.word	0x0800dd5a
 800d120:	0800dd5e 	.word	0x0800dd5e
 800d124:	0800ab8d 	.word	0x0800ab8d
 800d128:	0800cea7 	.word	0x0800cea7

0800d12c <_putc_r>:
 800d12c:	b570      	push	{r4, r5, r6, lr}
 800d12e:	460d      	mov	r5, r1
 800d130:	4614      	mov	r4, r2
 800d132:	4606      	mov	r6, r0
 800d134:	b118      	cbz	r0, 800d13e <_putc_r+0x12>
 800d136:	6983      	ldr	r3, [r0, #24]
 800d138:	b90b      	cbnz	r3, 800d13e <_putc_r+0x12>
 800d13a:	f7ff f807 	bl	800c14c <__sinit>
 800d13e:	4b1c      	ldr	r3, [pc, #112]	; (800d1b0 <_putc_r+0x84>)
 800d140:	429c      	cmp	r4, r3
 800d142:	d124      	bne.n	800d18e <_putc_r+0x62>
 800d144:	6874      	ldr	r4, [r6, #4]
 800d146:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d148:	07d8      	lsls	r0, r3, #31
 800d14a:	d405      	bmi.n	800d158 <_putc_r+0x2c>
 800d14c:	89a3      	ldrh	r3, [r4, #12]
 800d14e:	0599      	lsls	r1, r3, #22
 800d150:	d402      	bmi.n	800d158 <_putc_r+0x2c>
 800d152:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d154:	f7ff f89d 	bl	800c292 <__retarget_lock_acquire_recursive>
 800d158:	68a3      	ldr	r3, [r4, #8]
 800d15a:	3b01      	subs	r3, #1
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	60a3      	str	r3, [r4, #8]
 800d160:	da05      	bge.n	800d16e <_putc_r+0x42>
 800d162:	69a2      	ldr	r2, [r4, #24]
 800d164:	4293      	cmp	r3, r2
 800d166:	db1c      	blt.n	800d1a2 <_putc_r+0x76>
 800d168:	b2eb      	uxtb	r3, r5
 800d16a:	2b0a      	cmp	r3, #10
 800d16c:	d019      	beq.n	800d1a2 <_putc_r+0x76>
 800d16e:	6823      	ldr	r3, [r4, #0]
 800d170:	1c5a      	adds	r2, r3, #1
 800d172:	6022      	str	r2, [r4, #0]
 800d174:	701d      	strb	r5, [r3, #0]
 800d176:	b2ed      	uxtb	r5, r5
 800d178:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d17a:	07da      	lsls	r2, r3, #31
 800d17c:	d405      	bmi.n	800d18a <_putc_r+0x5e>
 800d17e:	89a3      	ldrh	r3, [r4, #12]
 800d180:	059b      	lsls	r3, r3, #22
 800d182:	d402      	bmi.n	800d18a <_putc_r+0x5e>
 800d184:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d186:	f7ff f885 	bl	800c294 <__retarget_lock_release_recursive>
 800d18a:	4628      	mov	r0, r5
 800d18c:	bd70      	pop	{r4, r5, r6, pc}
 800d18e:	4b09      	ldr	r3, [pc, #36]	; (800d1b4 <_putc_r+0x88>)
 800d190:	429c      	cmp	r4, r3
 800d192:	d101      	bne.n	800d198 <_putc_r+0x6c>
 800d194:	68b4      	ldr	r4, [r6, #8]
 800d196:	e7d6      	b.n	800d146 <_putc_r+0x1a>
 800d198:	4b07      	ldr	r3, [pc, #28]	; (800d1b8 <_putc_r+0x8c>)
 800d19a:	429c      	cmp	r4, r3
 800d19c:	bf08      	it	eq
 800d19e:	68f4      	ldreq	r4, [r6, #12]
 800d1a0:	e7d1      	b.n	800d146 <_putc_r+0x1a>
 800d1a2:	4629      	mov	r1, r5
 800d1a4:	4622      	mov	r2, r4
 800d1a6:	4630      	mov	r0, r6
 800d1a8:	f000 f85c 	bl	800d264 <__swbuf_r>
 800d1ac:	4605      	mov	r5, r0
 800d1ae:	e7e3      	b.n	800d178 <_putc_r+0x4c>
 800d1b0:	0800dbbc 	.word	0x0800dbbc
 800d1b4:	0800dbdc 	.word	0x0800dbdc
 800d1b8:	0800db9c 	.word	0x0800db9c

0800d1bc <_sbrk_r>:
 800d1bc:	b538      	push	{r3, r4, r5, lr}
 800d1be:	2300      	movs	r3, #0
 800d1c0:	4d05      	ldr	r5, [pc, #20]	; (800d1d8 <_sbrk_r+0x1c>)
 800d1c2:	4604      	mov	r4, r0
 800d1c4:	4608      	mov	r0, r1
 800d1c6:	602b      	str	r3, [r5, #0]
 800d1c8:	f7f4 fed2 	bl	8001f70 <_sbrk>
 800d1cc:	1c43      	adds	r3, r0, #1
 800d1ce:	d102      	bne.n	800d1d6 <_sbrk_r+0x1a>
 800d1d0:	682b      	ldr	r3, [r5, #0]
 800d1d2:	b103      	cbz	r3, 800d1d6 <_sbrk_r+0x1a>
 800d1d4:	6023      	str	r3, [r4, #0]
 800d1d6:	bd38      	pop	{r3, r4, r5, pc}
 800d1d8:	20001664 	.word	0x20001664

0800d1dc <__sread>:
 800d1dc:	b510      	push	{r4, lr}
 800d1de:	460c      	mov	r4, r1
 800d1e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d1e4:	f000 faee 	bl	800d7c4 <_read_r>
 800d1e8:	2800      	cmp	r0, #0
 800d1ea:	bfab      	itete	ge
 800d1ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d1ee:	89a3      	ldrhlt	r3, [r4, #12]
 800d1f0:	181b      	addge	r3, r3, r0
 800d1f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d1f6:	bfac      	ite	ge
 800d1f8:	6563      	strge	r3, [r4, #84]	; 0x54
 800d1fa:	81a3      	strhlt	r3, [r4, #12]
 800d1fc:	bd10      	pop	{r4, pc}

0800d1fe <__swrite>:
 800d1fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d202:	461f      	mov	r7, r3
 800d204:	898b      	ldrh	r3, [r1, #12]
 800d206:	4605      	mov	r5, r0
 800d208:	05db      	lsls	r3, r3, #23
 800d20a:	460c      	mov	r4, r1
 800d20c:	4616      	mov	r6, r2
 800d20e:	d505      	bpl.n	800d21c <__swrite+0x1e>
 800d210:	2302      	movs	r3, #2
 800d212:	2200      	movs	r2, #0
 800d214:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d218:	f000 f9f4 	bl	800d604 <_lseek_r>
 800d21c:	89a3      	ldrh	r3, [r4, #12]
 800d21e:	4632      	mov	r2, r6
 800d220:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d224:	81a3      	strh	r3, [r4, #12]
 800d226:	4628      	mov	r0, r5
 800d228:	463b      	mov	r3, r7
 800d22a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d22e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d232:	f000 b869 	b.w	800d308 <_write_r>

0800d236 <__sseek>:
 800d236:	b510      	push	{r4, lr}
 800d238:	460c      	mov	r4, r1
 800d23a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d23e:	f000 f9e1 	bl	800d604 <_lseek_r>
 800d242:	1c43      	adds	r3, r0, #1
 800d244:	89a3      	ldrh	r3, [r4, #12]
 800d246:	bf15      	itete	ne
 800d248:	6560      	strne	r0, [r4, #84]	; 0x54
 800d24a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d24e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d252:	81a3      	strheq	r3, [r4, #12]
 800d254:	bf18      	it	ne
 800d256:	81a3      	strhne	r3, [r4, #12]
 800d258:	bd10      	pop	{r4, pc}

0800d25a <__sclose>:
 800d25a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d25e:	f000 b8f1 	b.w	800d444 <_close_r>
	...

0800d264 <__swbuf_r>:
 800d264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d266:	460e      	mov	r6, r1
 800d268:	4614      	mov	r4, r2
 800d26a:	4605      	mov	r5, r0
 800d26c:	b118      	cbz	r0, 800d276 <__swbuf_r+0x12>
 800d26e:	6983      	ldr	r3, [r0, #24]
 800d270:	b90b      	cbnz	r3, 800d276 <__swbuf_r+0x12>
 800d272:	f7fe ff6b 	bl	800c14c <__sinit>
 800d276:	4b21      	ldr	r3, [pc, #132]	; (800d2fc <__swbuf_r+0x98>)
 800d278:	429c      	cmp	r4, r3
 800d27a:	d12b      	bne.n	800d2d4 <__swbuf_r+0x70>
 800d27c:	686c      	ldr	r4, [r5, #4]
 800d27e:	69a3      	ldr	r3, [r4, #24]
 800d280:	60a3      	str	r3, [r4, #8]
 800d282:	89a3      	ldrh	r3, [r4, #12]
 800d284:	071a      	lsls	r2, r3, #28
 800d286:	d52f      	bpl.n	800d2e8 <__swbuf_r+0x84>
 800d288:	6923      	ldr	r3, [r4, #16]
 800d28a:	b36b      	cbz	r3, 800d2e8 <__swbuf_r+0x84>
 800d28c:	6923      	ldr	r3, [r4, #16]
 800d28e:	6820      	ldr	r0, [r4, #0]
 800d290:	b2f6      	uxtb	r6, r6
 800d292:	1ac0      	subs	r0, r0, r3
 800d294:	6963      	ldr	r3, [r4, #20]
 800d296:	4637      	mov	r7, r6
 800d298:	4283      	cmp	r3, r0
 800d29a:	dc04      	bgt.n	800d2a6 <__swbuf_r+0x42>
 800d29c:	4621      	mov	r1, r4
 800d29e:	4628      	mov	r0, r5
 800d2a0:	f000 f962 	bl	800d568 <_fflush_r>
 800d2a4:	bb30      	cbnz	r0, 800d2f4 <__swbuf_r+0x90>
 800d2a6:	68a3      	ldr	r3, [r4, #8]
 800d2a8:	3001      	adds	r0, #1
 800d2aa:	3b01      	subs	r3, #1
 800d2ac:	60a3      	str	r3, [r4, #8]
 800d2ae:	6823      	ldr	r3, [r4, #0]
 800d2b0:	1c5a      	adds	r2, r3, #1
 800d2b2:	6022      	str	r2, [r4, #0]
 800d2b4:	701e      	strb	r6, [r3, #0]
 800d2b6:	6963      	ldr	r3, [r4, #20]
 800d2b8:	4283      	cmp	r3, r0
 800d2ba:	d004      	beq.n	800d2c6 <__swbuf_r+0x62>
 800d2bc:	89a3      	ldrh	r3, [r4, #12]
 800d2be:	07db      	lsls	r3, r3, #31
 800d2c0:	d506      	bpl.n	800d2d0 <__swbuf_r+0x6c>
 800d2c2:	2e0a      	cmp	r6, #10
 800d2c4:	d104      	bne.n	800d2d0 <__swbuf_r+0x6c>
 800d2c6:	4621      	mov	r1, r4
 800d2c8:	4628      	mov	r0, r5
 800d2ca:	f000 f94d 	bl	800d568 <_fflush_r>
 800d2ce:	b988      	cbnz	r0, 800d2f4 <__swbuf_r+0x90>
 800d2d0:	4638      	mov	r0, r7
 800d2d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d2d4:	4b0a      	ldr	r3, [pc, #40]	; (800d300 <__swbuf_r+0x9c>)
 800d2d6:	429c      	cmp	r4, r3
 800d2d8:	d101      	bne.n	800d2de <__swbuf_r+0x7a>
 800d2da:	68ac      	ldr	r4, [r5, #8]
 800d2dc:	e7cf      	b.n	800d27e <__swbuf_r+0x1a>
 800d2de:	4b09      	ldr	r3, [pc, #36]	; (800d304 <__swbuf_r+0xa0>)
 800d2e0:	429c      	cmp	r4, r3
 800d2e2:	bf08      	it	eq
 800d2e4:	68ec      	ldreq	r4, [r5, #12]
 800d2e6:	e7ca      	b.n	800d27e <__swbuf_r+0x1a>
 800d2e8:	4621      	mov	r1, r4
 800d2ea:	4628      	mov	r0, r5
 800d2ec:	f000 f81e 	bl	800d32c <__swsetup_r>
 800d2f0:	2800      	cmp	r0, #0
 800d2f2:	d0cb      	beq.n	800d28c <__swbuf_r+0x28>
 800d2f4:	f04f 37ff 	mov.w	r7, #4294967295
 800d2f8:	e7ea      	b.n	800d2d0 <__swbuf_r+0x6c>
 800d2fa:	bf00      	nop
 800d2fc:	0800dbbc 	.word	0x0800dbbc
 800d300:	0800dbdc 	.word	0x0800dbdc
 800d304:	0800db9c 	.word	0x0800db9c

0800d308 <_write_r>:
 800d308:	b538      	push	{r3, r4, r5, lr}
 800d30a:	4604      	mov	r4, r0
 800d30c:	4608      	mov	r0, r1
 800d30e:	4611      	mov	r1, r2
 800d310:	2200      	movs	r2, #0
 800d312:	4d05      	ldr	r5, [pc, #20]	; (800d328 <_write_r+0x20>)
 800d314:	602a      	str	r2, [r5, #0]
 800d316:	461a      	mov	r2, r3
 800d318:	f7f4 fdde 	bl	8001ed8 <_write>
 800d31c:	1c43      	adds	r3, r0, #1
 800d31e:	d102      	bne.n	800d326 <_write_r+0x1e>
 800d320:	682b      	ldr	r3, [r5, #0]
 800d322:	b103      	cbz	r3, 800d326 <_write_r+0x1e>
 800d324:	6023      	str	r3, [r4, #0]
 800d326:	bd38      	pop	{r3, r4, r5, pc}
 800d328:	20001664 	.word	0x20001664

0800d32c <__swsetup_r>:
 800d32c:	4b32      	ldr	r3, [pc, #200]	; (800d3f8 <__swsetup_r+0xcc>)
 800d32e:	b570      	push	{r4, r5, r6, lr}
 800d330:	681d      	ldr	r5, [r3, #0]
 800d332:	4606      	mov	r6, r0
 800d334:	460c      	mov	r4, r1
 800d336:	b125      	cbz	r5, 800d342 <__swsetup_r+0x16>
 800d338:	69ab      	ldr	r3, [r5, #24]
 800d33a:	b913      	cbnz	r3, 800d342 <__swsetup_r+0x16>
 800d33c:	4628      	mov	r0, r5
 800d33e:	f7fe ff05 	bl	800c14c <__sinit>
 800d342:	4b2e      	ldr	r3, [pc, #184]	; (800d3fc <__swsetup_r+0xd0>)
 800d344:	429c      	cmp	r4, r3
 800d346:	d10f      	bne.n	800d368 <__swsetup_r+0x3c>
 800d348:	686c      	ldr	r4, [r5, #4]
 800d34a:	89a3      	ldrh	r3, [r4, #12]
 800d34c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d350:	0719      	lsls	r1, r3, #28
 800d352:	d42c      	bmi.n	800d3ae <__swsetup_r+0x82>
 800d354:	06dd      	lsls	r5, r3, #27
 800d356:	d411      	bmi.n	800d37c <__swsetup_r+0x50>
 800d358:	2309      	movs	r3, #9
 800d35a:	6033      	str	r3, [r6, #0]
 800d35c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d360:	f04f 30ff 	mov.w	r0, #4294967295
 800d364:	81a3      	strh	r3, [r4, #12]
 800d366:	e03e      	b.n	800d3e6 <__swsetup_r+0xba>
 800d368:	4b25      	ldr	r3, [pc, #148]	; (800d400 <__swsetup_r+0xd4>)
 800d36a:	429c      	cmp	r4, r3
 800d36c:	d101      	bne.n	800d372 <__swsetup_r+0x46>
 800d36e:	68ac      	ldr	r4, [r5, #8]
 800d370:	e7eb      	b.n	800d34a <__swsetup_r+0x1e>
 800d372:	4b24      	ldr	r3, [pc, #144]	; (800d404 <__swsetup_r+0xd8>)
 800d374:	429c      	cmp	r4, r3
 800d376:	bf08      	it	eq
 800d378:	68ec      	ldreq	r4, [r5, #12]
 800d37a:	e7e6      	b.n	800d34a <__swsetup_r+0x1e>
 800d37c:	0758      	lsls	r0, r3, #29
 800d37e:	d512      	bpl.n	800d3a6 <__swsetup_r+0x7a>
 800d380:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d382:	b141      	cbz	r1, 800d396 <__swsetup_r+0x6a>
 800d384:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d388:	4299      	cmp	r1, r3
 800d38a:	d002      	beq.n	800d392 <__swsetup_r+0x66>
 800d38c:	4630      	mov	r0, r6
 800d38e:	f7ff fb3d 	bl	800ca0c <_free_r>
 800d392:	2300      	movs	r3, #0
 800d394:	6363      	str	r3, [r4, #52]	; 0x34
 800d396:	89a3      	ldrh	r3, [r4, #12]
 800d398:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d39c:	81a3      	strh	r3, [r4, #12]
 800d39e:	2300      	movs	r3, #0
 800d3a0:	6063      	str	r3, [r4, #4]
 800d3a2:	6923      	ldr	r3, [r4, #16]
 800d3a4:	6023      	str	r3, [r4, #0]
 800d3a6:	89a3      	ldrh	r3, [r4, #12]
 800d3a8:	f043 0308 	orr.w	r3, r3, #8
 800d3ac:	81a3      	strh	r3, [r4, #12]
 800d3ae:	6923      	ldr	r3, [r4, #16]
 800d3b0:	b94b      	cbnz	r3, 800d3c6 <__swsetup_r+0x9a>
 800d3b2:	89a3      	ldrh	r3, [r4, #12]
 800d3b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d3b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d3bc:	d003      	beq.n	800d3c6 <__swsetup_r+0x9a>
 800d3be:	4621      	mov	r1, r4
 800d3c0:	4630      	mov	r0, r6
 800d3c2:	f000 f957 	bl	800d674 <__smakebuf_r>
 800d3c6:	89a0      	ldrh	r0, [r4, #12]
 800d3c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d3cc:	f010 0301 	ands.w	r3, r0, #1
 800d3d0:	d00a      	beq.n	800d3e8 <__swsetup_r+0xbc>
 800d3d2:	2300      	movs	r3, #0
 800d3d4:	60a3      	str	r3, [r4, #8]
 800d3d6:	6963      	ldr	r3, [r4, #20]
 800d3d8:	425b      	negs	r3, r3
 800d3da:	61a3      	str	r3, [r4, #24]
 800d3dc:	6923      	ldr	r3, [r4, #16]
 800d3de:	b943      	cbnz	r3, 800d3f2 <__swsetup_r+0xc6>
 800d3e0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d3e4:	d1ba      	bne.n	800d35c <__swsetup_r+0x30>
 800d3e6:	bd70      	pop	{r4, r5, r6, pc}
 800d3e8:	0781      	lsls	r1, r0, #30
 800d3ea:	bf58      	it	pl
 800d3ec:	6963      	ldrpl	r3, [r4, #20]
 800d3ee:	60a3      	str	r3, [r4, #8]
 800d3f0:	e7f4      	b.n	800d3dc <__swsetup_r+0xb0>
 800d3f2:	2000      	movs	r0, #0
 800d3f4:	e7f7      	b.n	800d3e6 <__swsetup_r+0xba>
 800d3f6:	bf00      	nop
 800d3f8:	20000188 	.word	0x20000188
 800d3fc:	0800dbbc 	.word	0x0800dbbc
 800d400:	0800dbdc 	.word	0x0800dbdc
 800d404:	0800db9c 	.word	0x0800db9c

0800d408 <__assert_func>:
 800d408:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d40a:	4614      	mov	r4, r2
 800d40c:	461a      	mov	r2, r3
 800d40e:	4b09      	ldr	r3, [pc, #36]	; (800d434 <__assert_func+0x2c>)
 800d410:	4605      	mov	r5, r0
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	68d8      	ldr	r0, [r3, #12]
 800d416:	b14c      	cbz	r4, 800d42c <__assert_func+0x24>
 800d418:	4b07      	ldr	r3, [pc, #28]	; (800d438 <__assert_func+0x30>)
 800d41a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d41e:	9100      	str	r1, [sp, #0]
 800d420:	462b      	mov	r3, r5
 800d422:	4906      	ldr	r1, [pc, #24]	; (800d43c <__assert_func+0x34>)
 800d424:	f000 f8dc 	bl	800d5e0 <fiprintf>
 800d428:	f000 f9eb 	bl	800d802 <abort>
 800d42c:	4b04      	ldr	r3, [pc, #16]	; (800d440 <__assert_func+0x38>)
 800d42e:	461c      	mov	r4, r3
 800d430:	e7f3      	b.n	800d41a <__assert_func+0x12>
 800d432:	bf00      	nop
 800d434:	20000188 	.word	0x20000188
 800d438:	0800dd65 	.word	0x0800dd65
 800d43c:	0800dd72 	.word	0x0800dd72
 800d440:	0800dda0 	.word	0x0800dda0

0800d444 <_close_r>:
 800d444:	b538      	push	{r3, r4, r5, lr}
 800d446:	2300      	movs	r3, #0
 800d448:	4d05      	ldr	r5, [pc, #20]	; (800d460 <_close_r+0x1c>)
 800d44a:	4604      	mov	r4, r0
 800d44c:	4608      	mov	r0, r1
 800d44e:	602b      	str	r3, [r5, #0]
 800d450:	f7f4 fd5e 	bl	8001f10 <_close>
 800d454:	1c43      	adds	r3, r0, #1
 800d456:	d102      	bne.n	800d45e <_close_r+0x1a>
 800d458:	682b      	ldr	r3, [r5, #0]
 800d45a:	b103      	cbz	r3, 800d45e <_close_r+0x1a>
 800d45c:	6023      	str	r3, [r4, #0]
 800d45e:	bd38      	pop	{r3, r4, r5, pc}
 800d460:	20001664 	.word	0x20001664

0800d464 <__sflush_r>:
 800d464:	898a      	ldrh	r2, [r1, #12]
 800d466:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d468:	4605      	mov	r5, r0
 800d46a:	0710      	lsls	r0, r2, #28
 800d46c:	460c      	mov	r4, r1
 800d46e:	d457      	bmi.n	800d520 <__sflush_r+0xbc>
 800d470:	684b      	ldr	r3, [r1, #4]
 800d472:	2b00      	cmp	r3, #0
 800d474:	dc04      	bgt.n	800d480 <__sflush_r+0x1c>
 800d476:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d478:	2b00      	cmp	r3, #0
 800d47a:	dc01      	bgt.n	800d480 <__sflush_r+0x1c>
 800d47c:	2000      	movs	r0, #0
 800d47e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d480:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d482:	2e00      	cmp	r6, #0
 800d484:	d0fa      	beq.n	800d47c <__sflush_r+0x18>
 800d486:	2300      	movs	r3, #0
 800d488:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d48c:	682f      	ldr	r7, [r5, #0]
 800d48e:	602b      	str	r3, [r5, #0]
 800d490:	d032      	beq.n	800d4f8 <__sflush_r+0x94>
 800d492:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d494:	89a3      	ldrh	r3, [r4, #12]
 800d496:	075a      	lsls	r2, r3, #29
 800d498:	d505      	bpl.n	800d4a6 <__sflush_r+0x42>
 800d49a:	6863      	ldr	r3, [r4, #4]
 800d49c:	1ac0      	subs	r0, r0, r3
 800d49e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d4a0:	b10b      	cbz	r3, 800d4a6 <__sflush_r+0x42>
 800d4a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d4a4:	1ac0      	subs	r0, r0, r3
 800d4a6:	2300      	movs	r3, #0
 800d4a8:	4602      	mov	r2, r0
 800d4aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d4ac:	4628      	mov	r0, r5
 800d4ae:	6a21      	ldr	r1, [r4, #32]
 800d4b0:	47b0      	blx	r6
 800d4b2:	1c43      	adds	r3, r0, #1
 800d4b4:	89a3      	ldrh	r3, [r4, #12]
 800d4b6:	d106      	bne.n	800d4c6 <__sflush_r+0x62>
 800d4b8:	6829      	ldr	r1, [r5, #0]
 800d4ba:	291d      	cmp	r1, #29
 800d4bc:	d82c      	bhi.n	800d518 <__sflush_r+0xb4>
 800d4be:	4a29      	ldr	r2, [pc, #164]	; (800d564 <__sflush_r+0x100>)
 800d4c0:	40ca      	lsrs	r2, r1
 800d4c2:	07d6      	lsls	r6, r2, #31
 800d4c4:	d528      	bpl.n	800d518 <__sflush_r+0xb4>
 800d4c6:	2200      	movs	r2, #0
 800d4c8:	6062      	str	r2, [r4, #4]
 800d4ca:	6922      	ldr	r2, [r4, #16]
 800d4cc:	04d9      	lsls	r1, r3, #19
 800d4ce:	6022      	str	r2, [r4, #0]
 800d4d0:	d504      	bpl.n	800d4dc <__sflush_r+0x78>
 800d4d2:	1c42      	adds	r2, r0, #1
 800d4d4:	d101      	bne.n	800d4da <__sflush_r+0x76>
 800d4d6:	682b      	ldr	r3, [r5, #0]
 800d4d8:	b903      	cbnz	r3, 800d4dc <__sflush_r+0x78>
 800d4da:	6560      	str	r0, [r4, #84]	; 0x54
 800d4dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d4de:	602f      	str	r7, [r5, #0]
 800d4e0:	2900      	cmp	r1, #0
 800d4e2:	d0cb      	beq.n	800d47c <__sflush_r+0x18>
 800d4e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d4e8:	4299      	cmp	r1, r3
 800d4ea:	d002      	beq.n	800d4f2 <__sflush_r+0x8e>
 800d4ec:	4628      	mov	r0, r5
 800d4ee:	f7ff fa8d 	bl	800ca0c <_free_r>
 800d4f2:	2000      	movs	r0, #0
 800d4f4:	6360      	str	r0, [r4, #52]	; 0x34
 800d4f6:	e7c2      	b.n	800d47e <__sflush_r+0x1a>
 800d4f8:	6a21      	ldr	r1, [r4, #32]
 800d4fa:	2301      	movs	r3, #1
 800d4fc:	4628      	mov	r0, r5
 800d4fe:	47b0      	blx	r6
 800d500:	1c41      	adds	r1, r0, #1
 800d502:	d1c7      	bne.n	800d494 <__sflush_r+0x30>
 800d504:	682b      	ldr	r3, [r5, #0]
 800d506:	2b00      	cmp	r3, #0
 800d508:	d0c4      	beq.n	800d494 <__sflush_r+0x30>
 800d50a:	2b1d      	cmp	r3, #29
 800d50c:	d001      	beq.n	800d512 <__sflush_r+0xae>
 800d50e:	2b16      	cmp	r3, #22
 800d510:	d101      	bne.n	800d516 <__sflush_r+0xb2>
 800d512:	602f      	str	r7, [r5, #0]
 800d514:	e7b2      	b.n	800d47c <__sflush_r+0x18>
 800d516:	89a3      	ldrh	r3, [r4, #12]
 800d518:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d51c:	81a3      	strh	r3, [r4, #12]
 800d51e:	e7ae      	b.n	800d47e <__sflush_r+0x1a>
 800d520:	690f      	ldr	r7, [r1, #16]
 800d522:	2f00      	cmp	r7, #0
 800d524:	d0aa      	beq.n	800d47c <__sflush_r+0x18>
 800d526:	0793      	lsls	r3, r2, #30
 800d528:	bf18      	it	ne
 800d52a:	2300      	movne	r3, #0
 800d52c:	680e      	ldr	r6, [r1, #0]
 800d52e:	bf08      	it	eq
 800d530:	694b      	ldreq	r3, [r1, #20]
 800d532:	1bf6      	subs	r6, r6, r7
 800d534:	600f      	str	r7, [r1, #0]
 800d536:	608b      	str	r3, [r1, #8]
 800d538:	2e00      	cmp	r6, #0
 800d53a:	dd9f      	ble.n	800d47c <__sflush_r+0x18>
 800d53c:	4633      	mov	r3, r6
 800d53e:	463a      	mov	r2, r7
 800d540:	4628      	mov	r0, r5
 800d542:	6a21      	ldr	r1, [r4, #32]
 800d544:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800d548:	47e0      	blx	ip
 800d54a:	2800      	cmp	r0, #0
 800d54c:	dc06      	bgt.n	800d55c <__sflush_r+0xf8>
 800d54e:	89a3      	ldrh	r3, [r4, #12]
 800d550:	f04f 30ff 	mov.w	r0, #4294967295
 800d554:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d558:	81a3      	strh	r3, [r4, #12]
 800d55a:	e790      	b.n	800d47e <__sflush_r+0x1a>
 800d55c:	4407      	add	r7, r0
 800d55e:	1a36      	subs	r6, r6, r0
 800d560:	e7ea      	b.n	800d538 <__sflush_r+0xd4>
 800d562:	bf00      	nop
 800d564:	20400001 	.word	0x20400001

0800d568 <_fflush_r>:
 800d568:	b538      	push	{r3, r4, r5, lr}
 800d56a:	690b      	ldr	r3, [r1, #16]
 800d56c:	4605      	mov	r5, r0
 800d56e:	460c      	mov	r4, r1
 800d570:	b913      	cbnz	r3, 800d578 <_fflush_r+0x10>
 800d572:	2500      	movs	r5, #0
 800d574:	4628      	mov	r0, r5
 800d576:	bd38      	pop	{r3, r4, r5, pc}
 800d578:	b118      	cbz	r0, 800d582 <_fflush_r+0x1a>
 800d57a:	6983      	ldr	r3, [r0, #24]
 800d57c:	b90b      	cbnz	r3, 800d582 <_fflush_r+0x1a>
 800d57e:	f7fe fde5 	bl	800c14c <__sinit>
 800d582:	4b14      	ldr	r3, [pc, #80]	; (800d5d4 <_fflush_r+0x6c>)
 800d584:	429c      	cmp	r4, r3
 800d586:	d11b      	bne.n	800d5c0 <_fflush_r+0x58>
 800d588:	686c      	ldr	r4, [r5, #4]
 800d58a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d0ef      	beq.n	800d572 <_fflush_r+0xa>
 800d592:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d594:	07d0      	lsls	r0, r2, #31
 800d596:	d404      	bmi.n	800d5a2 <_fflush_r+0x3a>
 800d598:	0599      	lsls	r1, r3, #22
 800d59a:	d402      	bmi.n	800d5a2 <_fflush_r+0x3a>
 800d59c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d59e:	f7fe fe78 	bl	800c292 <__retarget_lock_acquire_recursive>
 800d5a2:	4628      	mov	r0, r5
 800d5a4:	4621      	mov	r1, r4
 800d5a6:	f7ff ff5d 	bl	800d464 <__sflush_r>
 800d5aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d5ac:	4605      	mov	r5, r0
 800d5ae:	07da      	lsls	r2, r3, #31
 800d5b0:	d4e0      	bmi.n	800d574 <_fflush_r+0xc>
 800d5b2:	89a3      	ldrh	r3, [r4, #12]
 800d5b4:	059b      	lsls	r3, r3, #22
 800d5b6:	d4dd      	bmi.n	800d574 <_fflush_r+0xc>
 800d5b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d5ba:	f7fe fe6b 	bl	800c294 <__retarget_lock_release_recursive>
 800d5be:	e7d9      	b.n	800d574 <_fflush_r+0xc>
 800d5c0:	4b05      	ldr	r3, [pc, #20]	; (800d5d8 <_fflush_r+0x70>)
 800d5c2:	429c      	cmp	r4, r3
 800d5c4:	d101      	bne.n	800d5ca <_fflush_r+0x62>
 800d5c6:	68ac      	ldr	r4, [r5, #8]
 800d5c8:	e7df      	b.n	800d58a <_fflush_r+0x22>
 800d5ca:	4b04      	ldr	r3, [pc, #16]	; (800d5dc <_fflush_r+0x74>)
 800d5cc:	429c      	cmp	r4, r3
 800d5ce:	bf08      	it	eq
 800d5d0:	68ec      	ldreq	r4, [r5, #12]
 800d5d2:	e7da      	b.n	800d58a <_fflush_r+0x22>
 800d5d4:	0800dbbc 	.word	0x0800dbbc
 800d5d8:	0800dbdc 	.word	0x0800dbdc
 800d5dc:	0800db9c 	.word	0x0800db9c

0800d5e0 <fiprintf>:
 800d5e0:	b40e      	push	{r1, r2, r3}
 800d5e2:	b503      	push	{r0, r1, lr}
 800d5e4:	4601      	mov	r1, r0
 800d5e6:	ab03      	add	r3, sp, #12
 800d5e8:	4805      	ldr	r0, [pc, #20]	; (800d600 <fiprintf+0x20>)
 800d5ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800d5ee:	6800      	ldr	r0, [r0, #0]
 800d5f0:	9301      	str	r3, [sp, #4]
 800d5f2:	f7ff fc6b 	bl	800cecc <_vfiprintf_r>
 800d5f6:	b002      	add	sp, #8
 800d5f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800d5fc:	b003      	add	sp, #12
 800d5fe:	4770      	bx	lr
 800d600:	20000188 	.word	0x20000188

0800d604 <_lseek_r>:
 800d604:	b538      	push	{r3, r4, r5, lr}
 800d606:	4604      	mov	r4, r0
 800d608:	4608      	mov	r0, r1
 800d60a:	4611      	mov	r1, r2
 800d60c:	2200      	movs	r2, #0
 800d60e:	4d05      	ldr	r5, [pc, #20]	; (800d624 <_lseek_r+0x20>)
 800d610:	602a      	str	r2, [r5, #0]
 800d612:	461a      	mov	r2, r3
 800d614:	f7f4 fca0 	bl	8001f58 <_lseek>
 800d618:	1c43      	adds	r3, r0, #1
 800d61a:	d102      	bne.n	800d622 <_lseek_r+0x1e>
 800d61c:	682b      	ldr	r3, [r5, #0]
 800d61e:	b103      	cbz	r3, 800d622 <_lseek_r+0x1e>
 800d620:	6023      	str	r3, [r4, #0]
 800d622:	bd38      	pop	{r3, r4, r5, pc}
 800d624:	20001664 	.word	0x20001664

0800d628 <__swhatbuf_r>:
 800d628:	b570      	push	{r4, r5, r6, lr}
 800d62a:	460e      	mov	r6, r1
 800d62c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d630:	4614      	mov	r4, r2
 800d632:	2900      	cmp	r1, #0
 800d634:	461d      	mov	r5, r3
 800d636:	b096      	sub	sp, #88	; 0x58
 800d638:	da08      	bge.n	800d64c <__swhatbuf_r+0x24>
 800d63a:	2200      	movs	r2, #0
 800d63c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d640:	602a      	str	r2, [r5, #0]
 800d642:	061a      	lsls	r2, r3, #24
 800d644:	d410      	bmi.n	800d668 <__swhatbuf_r+0x40>
 800d646:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d64a:	e00e      	b.n	800d66a <__swhatbuf_r+0x42>
 800d64c:	466a      	mov	r2, sp
 800d64e:	f000 f8df 	bl	800d810 <_fstat_r>
 800d652:	2800      	cmp	r0, #0
 800d654:	dbf1      	blt.n	800d63a <__swhatbuf_r+0x12>
 800d656:	9a01      	ldr	r2, [sp, #4]
 800d658:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d65c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d660:	425a      	negs	r2, r3
 800d662:	415a      	adcs	r2, r3
 800d664:	602a      	str	r2, [r5, #0]
 800d666:	e7ee      	b.n	800d646 <__swhatbuf_r+0x1e>
 800d668:	2340      	movs	r3, #64	; 0x40
 800d66a:	2000      	movs	r0, #0
 800d66c:	6023      	str	r3, [r4, #0]
 800d66e:	b016      	add	sp, #88	; 0x58
 800d670:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d674 <__smakebuf_r>:
 800d674:	898b      	ldrh	r3, [r1, #12]
 800d676:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d678:	079d      	lsls	r5, r3, #30
 800d67a:	4606      	mov	r6, r0
 800d67c:	460c      	mov	r4, r1
 800d67e:	d507      	bpl.n	800d690 <__smakebuf_r+0x1c>
 800d680:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d684:	6023      	str	r3, [r4, #0]
 800d686:	6123      	str	r3, [r4, #16]
 800d688:	2301      	movs	r3, #1
 800d68a:	6163      	str	r3, [r4, #20]
 800d68c:	b002      	add	sp, #8
 800d68e:	bd70      	pop	{r4, r5, r6, pc}
 800d690:	466a      	mov	r2, sp
 800d692:	ab01      	add	r3, sp, #4
 800d694:	f7ff ffc8 	bl	800d628 <__swhatbuf_r>
 800d698:	9900      	ldr	r1, [sp, #0]
 800d69a:	4605      	mov	r5, r0
 800d69c:	4630      	mov	r0, r6
 800d69e:	f7ff fa1d 	bl	800cadc <_malloc_r>
 800d6a2:	b948      	cbnz	r0, 800d6b8 <__smakebuf_r+0x44>
 800d6a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d6a8:	059a      	lsls	r2, r3, #22
 800d6aa:	d4ef      	bmi.n	800d68c <__smakebuf_r+0x18>
 800d6ac:	f023 0303 	bic.w	r3, r3, #3
 800d6b0:	f043 0302 	orr.w	r3, r3, #2
 800d6b4:	81a3      	strh	r3, [r4, #12]
 800d6b6:	e7e3      	b.n	800d680 <__smakebuf_r+0xc>
 800d6b8:	4b0d      	ldr	r3, [pc, #52]	; (800d6f0 <__smakebuf_r+0x7c>)
 800d6ba:	62b3      	str	r3, [r6, #40]	; 0x28
 800d6bc:	89a3      	ldrh	r3, [r4, #12]
 800d6be:	6020      	str	r0, [r4, #0]
 800d6c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d6c4:	81a3      	strh	r3, [r4, #12]
 800d6c6:	9b00      	ldr	r3, [sp, #0]
 800d6c8:	6120      	str	r0, [r4, #16]
 800d6ca:	6163      	str	r3, [r4, #20]
 800d6cc:	9b01      	ldr	r3, [sp, #4]
 800d6ce:	b15b      	cbz	r3, 800d6e8 <__smakebuf_r+0x74>
 800d6d0:	4630      	mov	r0, r6
 800d6d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d6d6:	f000 f8ad 	bl	800d834 <_isatty_r>
 800d6da:	b128      	cbz	r0, 800d6e8 <__smakebuf_r+0x74>
 800d6dc:	89a3      	ldrh	r3, [r4, #12]
 800d6de:	f023 0303 	bic.w	r3, r3, #3
 800d6e2:	f043 0301 	orr.w	r3, r3, #1
 800d6e6:	81a3      	strh	r3, [r4, #12]
 800d6e8:	89a0      	ldrh	r0, [r4, #12]
 800d6ea:	4305      	orrs	r5, r0
 800d6ec:	81a5      	strh	r5, [r4, #12]
 800d6ee:	e7cd      	b.n	800d68c <__smakebuf_r+0x18>
 800d6f0:	0800c0e5 	.word	0x0800c0e5

0800d6f4 <__ascii_mbtowc>:
 800d6f4:	b082      	sub	sp, #8
 800d6f6:	b901      	cbnz	r1, 800d6fa <__ascii_mbtowc+0x6>
 800d6f8:	a901      	add	r1, sp, #4
 800d6fa:	b142      	cbz	r2, 800d70e <__ascii_mbtowc+0x1a>
 800d6fc:	b14b      	cbz	r3, 800d712 <__ascii_mbtowc+0x1e>
 800d6fe:	7813      	ldrb	r3, [r2, #0]
 800d700:	600b      	str	r3, [r1, #0]
 800d702:	7812      	ldrb	r2, [r2, #0]
 800d704:	1e10      	subs	r0, r2, #0
 800d706:	bf18      	it	ne
 800d708:	2001      	movne	r0, #1
 800d70a:	b002      	add	sp, #8
 800d70c:	4770      	bx	lr
 800d70e:	4610      	mov	r0, r2
 800d710:	e7fb      	b.n	800d70a <__ascii_mbtowc+0x16>
 800d712:	f06f 0001 	mvn.w	r0, #1
 800d716:	e7f8      	b.n	800d70a <__ascii_mbtowc+0x16>

0800d718 <memmove>:
 800d718:	4288      	cmp	r0, r1
 800d71a:	b510      	push	{r4, lr}
 800d71c:	eb01 0402 	add.w	r4, r1, r2
 800d720:	d902      	bls.n	800d728 <memmove+0x10>
 800d722:	4284      	cmp	r4, r0
 800d724:	4623      	mov	r3, r4
 800d726:	d807      	bhi.n	800d738 <memmove+0x20>
 800d728:	1e43      	subs	r3, r0, #1
 800d72a:	42a1      	cmp	r1, r4
 800d72c:	d008      	beq.n	800d740 <memmove+0x28>
 800d72e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d732:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d736:	e7f8      	b.n	800d72a <memmove+0x12>
 800d738:	4601      	mov	r1, r0
 800d73a:	4402      	add	r2, r0
 800d73c:	428a      	cmp	r2, r1
 800d73e:	d100      	bne.n	800d742 <memmove+0x2a>
 800d740:	bd10      	pop	{r4, pc}
 800d742:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d746:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d74a:	e7f7      	b.n	800d73c <memmove+0x24>

0800d74c <__malloc_lock>:
 800d74c:	4801      	ldr	r0, [pc, #4]	; (800d754 <__malloc_lock+0x8>)
 800d74e:	f7fe bda0 	b.w	800c292 <__retarget_lock_acquire_recursive>
 800d752:	bf00      	nop
 800d754:	20001659 	.word	0x20001659

0800d758 <__malloc_unlock>:
 800d758:	4801      	ldr	r0, [pc, #4]	; (800d760 <__malloc_unlock+0x8>)
 800d75a:	f7fe bd9b 	b.w	800c294 <__retarget_lock_release_recursive>
 800d75e:	bf00      	nop
 800d760:	20001659 	.word	0x20001659

0800d764 <_realloc_r>:
 800d764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d768:	4680      	mov	r8, r0
 800d76a:	4614      	mov	r4, r2
 800d76c:	460e      	mov	r6, r1
 800d76e:	b921      	cbnz	r1, 800d77a <_realloc_r+0x16>
 800d770:	4611      	mov	r1, r2
 800d772:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d776:	f7ff b9b1 	b.w	800cadc <_malloc_r>
 800d77a:	b92a      	cbnz	r2, 800d788 <_realloc_r+0x24>
 800d77c:	f7ff f946 	bl	800ca0c <_free_r>
 800d780:	4625      	mov	r5, r4
 800d782:	4628      	mov	r0, r5
 800d784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d788:	f000 f864 	bl	800d854 <_malloc_usable_size_r>
 800d78c:	4284      	cmp	r4, r0
 800d78e:	4607      	mov	r7, r0
 800d790:	d802      	bhi.n	800d798 <_realloc_r+0x34>
 800d792:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d796:	d812      	bhi.n	800d7be <_realloc_r+0x5a>
 800d798:	4621      	mov	r1, r4
 800d79a:	4640      	mov	r0, r8
 800d79c:	f7ff f99e 	bl	800cadc <_malloc_r>
 800d7a0:	4605      	mov	r5, r0
 800d7a2:	2800      	cmp	r0, #0
 800d7a4:	d0ed      	beq.n	800d782 <_realloc_r+0x1e>
 800d7a6:	42bc      	cmp	r4, r7
 800d7a8:	4622      	mov	r2, r4
 800d7aa:	4631      	mov	r1, r6
 800d7ac:	bf28      	it	cs
 800d7ae:	463a      	movcs	r2, r7
 800d7b0:	f7fe fd88 	bl	800c2c4 <memcpy>
 800d7b4:	4631      	mov	r1, r6
 800d7b6:	4640      	mov	r0, r8
 800d7b8:	f7ff f928 	bl	800ca0c <_free_r>
 800d7bc:	e7e1      	b.n	800d782 <_realloc_r+0x1e>
 800d7be:	4635      	mov	r5, r6
 800d7c0:	e7df      	b.n	800d782 <_realloc_r+0x1e>
	...

0800d7c4 <_read_r>:
 800d7c4:	b538      	push	{r3, r4, r5, lr}
 800d7c6:	4604      	mov	r4, r0
 800d7c8:	4608      	mov	r0, r1
 800d7ca:	4611      	mov	r1, r2
 800d7cc:	2200      	movs	r2, #0
 800d7ce:	4d05      	ldr	r5, [pc, #20]	; (800d7e4 <_read_r+0x20>)
 800d7d0:	602a      	str	r2, [r5, #0]
 800d7d2:	461a      	mov	r2, r3
 800d7d4:	f7f4 fb63 	bl	8001e9e <_read>
 800d7d8:	1c43      	adds	r3, r0, #1
 800d7da:	d102      	bne.n	800d7e2 <_read_r+0x1e>
 800d7dc:	682b      	ldr	r3, [r5, #0]
 800d7de:	b103      	cbz	r3, 800d7e2 <_read_r+0x1e>
 800d7e0:	6023      	str	r3, [r4, #0]
 800d7e2:	bd38      	pop	{r3, r4, r5, pc}
 800d7e4:	20001664 	.word	0x20001664

0800d7e8 <__ascii_wctomb>:
 800d7e8:	4603      	mov	r3, r0
 800d7ea:	4608      	mov	r0, r1
 800d7ec:	b141      	cbz	r1, 800d800 <__ascii_wctomb+0x18>
 800d7ee:	2aff      	cmp	r2, #255	; 0xff
 800d7f0:	d904      	bls.n	800d7fc <__ascii_wctomb+0x14>
 800d7f2:	228a      	movs	r2, #138	; 0x8a
 800d7f4:	f04f 30ff 	mov.w	r0, #4294967295
 800d7f8:	601a      	str	r2, [r3, #0]
 800d7fa:	4770      	bx	lr
 800d7fc:	2001      	movs	r0, #1
 800d7fe:	700a      	strb	r2, [r1, #0]
 800d800:	4770      	bx	lr

0800d802 <abort>:
 800d802:	2006      	movs	r0, #6
 800d804:	b508      	push	{r3, lr}
 800d806:	f000 f855 	bl	800d8b4 <raise>
 800d80a:	2001      	movs	r0, #1
 800d80c:	f7f4 fb3d 	bl	8001e8a <_exit>

0800d810 <_fstat_r>:
 800d810:	b538      	push	{r3, r4, r5, lr}
 800d812:	2300      	movs	r3, #0
 800d814:	4d06      	ldr	r5, [pc, #24]	; (800d830 <_fstat_r+0x20>)
 800d816:	4604      	mov	r4, r0
 800d818:	4608      	mov	r0, r1
 800d81a:	4611      	mov	r1, r2
 800d81c:	602b      	str	r3, [r5, #0]
 800d81e:	f7f4 fb82 	bl	8001f26 <_fstat>
 800d822:	1c43      	adds	r3, r0, #1
 800d824:	d102      	bne.n	800d82c <_fstat_r+0x1c>
 800d826:	682b      	ldr	r3, [r5, #0]
 800d828:	b103      	cbz	r3, 800d82c <_fstat_r+0x1c>
 800d82a:	6023      	str	r3, [r4, #0]
 800d82c:	bd38      	pop	{r3, r4, r5, pc}
 800d82e:	bf00      	nop
 800d830:	20001664 	.word	0x20001664

0800d834 <_isatty_r>:
 800d834:	b538      	push	{r3, r4, r5, lr}
 800d836:	2300      	movs	r3, #0
 800d838:	4d05      	ldr	r5, [pc, #20]	; (800d850 <_isatty_r+0x1c>)
 800d83a:	4604      	mov	r4, r0
 800d83c:	4608      	mov	r0, r1
 800d83e:	602b      	str	r3, [r5, #0]
 800d840:	f7f4 fb80 	bl	8001f44 <_isatty>
 800d844:	1c43      	adds	r3, r0, #1
 800d846:	d102      	bne.n	800d84e <_isatty_r+0x1a>
 800d848:	682b      	ldr	r3, [r5, #0]
 800d84a:	b103      	cbz	r3, 800d84e <_isatty_r+0x1a>
 800d84c:	6023      	str	r3, [r4, #0]
 800d84e:	bd38      	pop	{r3, r4, r5, pc}
 800d850:	20001664 	.word	0x20001664

0800d854 <_malloc_usable_size_r>:
 800d854:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d858:	1f18      	subs	r0, r3, #4
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	bfbc      	itt	lt
 800d85e:	580b      	ldrlt	r3, [r1, r0]
 800d860:	18c0      	addlt	r0, r0, r3
 800d862:	4770      	bx	lr

0800d864 <_raise_r>:
 800d864:	291f      	cmp	r1, #31
 800d866:	b538      	push	{r3, r4, r5, lr}
 800d868:	4604      	mov	r4, r0
 800d86a:	460d      	mov	r5, r1
 800d86c:	d904      	bls.n	800d878 <_raise_r+0x14>
 800d86e:	2316      	movs	r3, #22
 800d870:	6003      	str	r3, [r0, #0]
 800d872:	f04f 30ff 	mov.w	r0, #4294967295
 800d876:	bd38      	pop	{r3, r4, r5, pc}
 800d878:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d87a:	b112      	cbz	r2, 800d882 <_raise_r+0x1e>
 800d87c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d880:	b94b      	cbnz	r3, 800d896 <_raise_r+0x32>
 800d882:	4620      	mov	r0, r4
 800d884:	f000 f830 	bl	800d8e8 <_getpid_r>
 800d888:	462a      	mov	r2, r5
 800d88a:	4601      	mov	r1, r0
 800d88c:	4620      	mov	r0, r4
 800d88e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d892:	f000 b817 	b.w	800d8c4 <_kill_r>
 800d896:	2b01      	cmp	r3, #1
 800d898:	d00a      	beq.n	800d8b0 <_raise_r+0x4c>
 800d89a:	1c59      	adds	r1, r3, #1
 800d89c:	d103      	bne.n	800d8a6 <_raise_r+0x42>
 800d89e:	2316      	movs	r3, #22
 800d8a0:	6003      	str	r3, [r0, #0]
 800d8a2:	2001      	movs	r0, #1
 800d8a4:	e7e7      	b.n	800d876 <_raise_r+0x12>
 800d8a6:	2400      	movs	r4, #0
 800d8a8:	4628      	mov	r0, r5
 800d8aa:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d8ae:	4798      	blx	r3
 800d8b0:	2000      	movs	r0, #0
 800d8b2:	e7e0      	b.n	800d876 <_raise_r+0x12>

0800d8b4 <raise>:
 800d8b4:	4b02      	ldr	r3, [pc, #8]	; (800d8c0 <raise+0xc>)
 800d8b6:	4601      	mov	r1, r0
 800d8b8:	6818      	ldr	r0, [r3, #0]
 800d8ba:	f7ff bfd3 	b.w	800d864 <_raise_r>
 800d8be:	bf00      	nop
 800d8c0:	20000188 	.word	0x20000188

0800d8c4 <_kill_r>:
 800d8c4:	b538      	push	{r3, r4, r5, lr}
 800d8c6:	2300      	movs	r3, #0
 800d8c8:	4d06      	ldr	r5, [pc, #24]	; (800d8e4 <_kill_r+0x20>)
 800d8ca:	4604      	mov	r4, r0
 800d8cc:	4608      	mov	r0, r1
 800d8ce:	4611      	mov	r1, r2
 800d8d0:	602b      	str	r3, [r5, #0]
 800d8d2:	f7f4 faca 	bl	8001e6a <_kill>
 800d8d6:	1c43      	adds	r3, r0, #1
 800d8d8:	d102      	bne.n	800d8e0 <_kill_r+0x1c>
 800d8da:	682b      	ldr	r3, [r5, #0]
 800d8dc:	b103      	cbz	r3, 800d8e0 <_kill_r+0x1c>
 800d8de:	6023      	str	r3, [r4, #0]
 800d8e0:	bd38      	pop	{r3, r4, r5, pc}
 800d8e2:	bf00      	nop
 800d8e4:	20001664 	.word	0x20001664

0800d8e8 <_getpid_r>:
 800d8e8:	f7f4 bab8 	b.w	8001e5c <_getpid>

0800d8ec <_init>:
 800d8ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8ee:	bf00      	nop
 800d8f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d8f2:	bc08      	pop	{r3}
 800d8f4:	469e      	mov	lr, r3
 800d8f6:	4770      	bx	lr

0800d8f8 <_fini>:
 800d8f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8fa:	bf00      	nop
 800d8fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d8fe:	bc08      	pop	{r3}
 800d900:	469e      	mov	lr, r3
 800d902:	4770      	bx	lr
